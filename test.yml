.:
  .aider.chat.history.md: {}
  .dockerignore: {}
  .git-blame-ignore-revs: {}
  .gitignore: {}
  .pre-commit-config.yaml: {}
  CHANGELOG.md: {}
  CODE_OF_CONDUCT.md: {}
  CONTRIBUTING.md: {}
  Dockerfile: {}
  LICENSE: {}
  README.md: {}
  build_deploy.sh: {}
  codecov.yml: {}
  environment.yml: {}
  keys.cfg: {}
  mkdocs.yml: {}
  mlc_config.json: {}
  package-lock.json: {}
  pyproject.toml: {}
  release_dockerhub.sh: {}
  requirements.txt: {}
  run.py:
    classes:
    - end_line: 90
      methods:
      - end_line: 90
        name: __post_init__
        start_line: 87
        text:
        - '    def __post_init__(self):'
        - '        if self.push_gh_repo_url:'
        - '            msg = "push_gh_repo_url is obsolete. Use repo_path instead"'
        - '            raise ValueError(msg)'
      name: ActionsArguments
      start_line: 73
      text:
      - 'class ActionsArguments(FlattenedAccess, FrozenSerializable):'
      - '    """Run real-life actions (opening PRs, etc.) if we can solve the issue."""'
      - ''
      - '    # Open a PR with the patch if we can solve the issue'
      - '    open_pr: bool = False'
      - '    # When working with local repository: Apply patch'
      - '    apply_patch_locally: bool = False'
      - '    # Option to be used with open_pr: Skip action if there are already commits
        claiming'
      - '    # to fix the issue. Please only set this to False if you are sure the
        commits are'
      - '    # not fixes or if this is your own repository!'
      - '    skip_if_commits_reference_issue: bool = True'
      - '    # OBSOLETE. Do not use, will raise error. Please specify --repo_path
        instead.'
      - '    push_gh_repo_url: str = ""'
      - ''
      - '    def __post_init__(self):'
      - '        if self.push_gh_repo_url:'
      - '            msg = "push_gh_repo_url is obsolete. Use repo_path instead"'
      - '            raise ValueError(msg)'
    - end_line: 129
      methods:
      - end_line: 129
        name: run_name
        start_line: 112
        text:
        - '    def run_name(self) -> str:'
        - '        """Generate a unique name for this run based on the arguments."""'
        - '        model_name = self.agent.model.model_name.replace(":", "-")'
        - '        data_stem = get_data_path_name(self.environment.data_path)'
        - '        assert self.agent.config_file is not None  # mypy'
        - '        config_stem = Path(self.agent.config_file).stem'
        - ''
        - '        temp = self.agent.model.temperature'
        - '        top_p = self.agent.model.top_p'
        - ''
        - '        per_instance_cost_limit = self.agent.model.per_instance_cost_limit'
        - '        install_env = self.environment.install_environment'
        - ''
        - '        return ('
        - '            f"{model_name}__{data_stem}__{config_stem}__t-{temp:.2f}__p-{top_p:.2f}"'
        - '            + f"__c-{per_instance_cost_limit:.2f}__install-{int(install_env)}"'
        - '            + (f"__{self.suffix}" if self.suffix else "")'
        - '        )'
      name: ScriptArguments
      start_line: 94
      text:
      - 'class ScriptArguments(FlattenedAccess, FrozenSerializable):'
      - '    """Configure the control flow of the run.py script"""'
      - ''
      - '    environment: EnvironmentArguments'
      - '    agent: AgentArguments'
      - '    actions: ActionsArguments'
      - '    # Only run instances that completely match this regex'
      - '    instance_filter: str = ".*"'
      - '    # Skip instances with existing trajectories'
      - '    skip_existing: bool = True'
      - '    # Suffix for the run name (used for example in trajectory directory naming)'
      - '    suffix: str = ""'
      - '    # Raise unhandled exceptions during the run (useful for debugging)'
      - '    raise_exceptions: bool = False'
      - '    # Dump the entire config to the log'
      - '    print_config: bool = True'
      - ''
      - '    @property'
      - '    def run_name(self) -> str:'
      - '        """Generate a unique name for this run based on the arguments."""'
      - '        model_name = self.agent.model.model_name.replace(":", "-")'
      - '        data_stem = get_data_path_name(self.environment.data_path)'
      - '        assert self.agent.config_file is not None  # mypy'
      - '        config_stem = Path(self.agent.config_file).stem'
      - ''
      - '        temp = self.agent.model.temperature'
      - '        top_p = self.agent.model.top_p'
      - ''
      - '        per_instance_cost_limit = self.agent.model.per_instance_cost_limit'
      - '        install_env = self.environment.install_environment'
      - ''
      - '        return ('
      - '            f"{model_name}__{data_stem}__{config_stem}__t-{temp:.2f}__p-{top_p:.2f}"'
      - '            + f"__c-{per_instance_cost_limit:.2f}__install-{int(install_env)}"'
      - '            + (f"__{self.suffix}" if self.suffix else "")'
      - '        )'
    - end_line: 133
      methods: []
      name: _ContinueLoop
      start_line: 132
      text:
      - 'class _ContinueLoop(Exception):'
      - '    """Used for internal control flow"""'
    - end_line: 165
      methods:
      - end_line: 145
        name: _is_promising_patch
        start_line: 140
        text:
        - '    def _is_promising_patch(info: dict[str, Any]) -> bool:'
        - '        """Do we actually believe that the patch will solve the issue?'
        - '        Or are we just submitting the last patch we generated before hitting
          an error?'
        - '        """'
        - '        # The exit status can also be `submitted (exit_cost)` etc.'
        - '        return info["exit_status"] == "submitted" and info.get("submission")
          is not None'
      - end_line: 148
        name: on_init
        start_line: 147
        text:
        - '    def on_init(self, *, args: ScriptArguments, agent: Agent, env: SWEEnv,
          traj_dir: Path):'
        - '        """Called when hook is initialized"""'
      - end_line: 151
        name: on_start
        start_line: 150
        text:
        - '    def on_start(self):'
        - '        """Called at the beginning of `Main.main`"""'
      - end_line: 154
        name: on_end
        start_line: 153
        text:
        - '    def on_end(self):'
        - '        """Called at the end of `Main.main`"""'
      - end_line: 157
        name: on_instance_start
        start_line: 156
        text:
        - '    def on_instance_start(self, *, index: int, instance: dict[str, Any]):'
        - '        """Called at the beginning of each instance loop in `Main.run`"""'
      - end_line: 162
        name: on_instance_skipped
        start_line: 159
        text:
        - '    def on_instance_skipped('
        - '        self,'
        - '    ):'
        - '        """Called when an instance is skipped in `Main.run`"""'
      - end_line: 165
        name: on_instance_completed
        start_line: 164
        text:
        - '    def on_instance_completed(self, *, info, trajectory):'
        - '        """Called when an instance is completed in `Main.run`"""'
      name: MainHook
      start_line: 136
      text:
      - 'class MainHook:'
      - '    """Hook structure for the web server or other addons to interface with"""'
      - ''
      - '    @staticmethod'
      - '    def _is_promising_patch(info: dict[str, Any]) -> bool:'
      - '        """Do we actually believe that the patch will solve the issue?'
      - '        Or are we just submitting the last patch we generated before hitting
        an error?'
      - '        """'
      - '        # The exit status can also be `submitted (exit_cost)` etc.'
      - '        return info["exit_status"] == "submitted" and info.get("submission")
        is not None'
      - ''
      - '    def on_init(self, *, args: ScriptArguments, agent: Agent, env: SWEEnv,
        traj_dir: Path):'
      - '        """Called when hook is initialized"""'
      - ''
      - '    def on_start(self):'
      - '        """Called at the beginning of `Main.main`"""'
      - ''
      - '    def on_end(self):'
      - '        """Called at the end of `Main.main`"""'
      - ''
      - '    def on_instance_start(self, *, index: int, instance: dict[str, Any]):'
      - '        """Called at the beginning of each instance loop in `Main.run`"""'
      - ''
      - '    def on_instance_skipped('
      - '        self,'
      - '    ):'
      - '        """Called when an instance is skipped in `Main.run`"""'
      - ''
      - '    def on_instance_completed(self, *, info, trajectory):'
      - '        """Called when an instance is completed in `Main.run`"""'
    - end_line: 252
      methods:
      - end_line: 174
        name: on_init
        start_line: 171
        text:
        - '    def on_init(self, *, args: ScriptArguments, agent: Agent, env: SWEEnv,
          traj_dir: Path):'
        - '        self._traj_dir = traj_dir'
        - '        self._apply_patch_locally = args.actions.apply_patch_locally'
        - '        self._instance = None'
      - end_line: 177
        name: on_instance_start
        start_line: 176
        text:
        - '    def on_instance_start(self, *, index: int, instance: dict[str, Any]):'
        - '        self._instance = instance'
      - end_line: 192
        name: on_instance_completed
        start_line: 179
        text:
        - '    def on_instance_completed(self, *, info, trajectory):'
        - '        assert self._instance is not None  # mypy'
        - '        instance_id = self._instance["instance_id"]'
        - '        patch_path = self._save_patch(instance_id, info)'
        - '        if patch_path:'
        - '            if not self._apply_patch_locally:'
        - '                return'
        - '            if not self._is_promising_patch(info):'
        - '                return'
        - '            assert self._instance  # mypy'
        - '            if self._instance["repo_type"] != "local":'
        - '                return'
        - '            local_dir = Path(self._instance["repo"])'
        - '            self._apply_patch(patch_path, local_dir)'
      - end_line: 217
        name: _print_patch_message
        start_line: 195
        text:
        - '    def _print_patch_message(patch_output_file: Path):'
        - '        console = rich.console.Console()'
        - '        msg = ['
        - '            "SWE-agent has produced a patch that it believes will solve
          the issue you submitted!",'
        - '            "Use the code snippet below to inspect or apply it!",'
        - '        ]'
        - '        panel = rich.panel.Panel.fit('
        - '            "\n".join(msg),'
        - "            title=\"\U0001F389 Submission successful \U0001F389\","
        - '        )'
        - '        console.print(panel)'
        - '        content = ['
        - '            "```bash",'
        - '            "# The patch has been saved to your local filesystem at:",'
        - '            f"PATCH_FILE_PATH=''{patch_output_file.resolve()}''",'
        - '            "# Inspect it:",'
        - '            ''cat "${PATCH_FILE_PATH}"'','
        - '            "# Apply it to a local repository:",'
        - '            "cd <your local repo root>",'
        - '            ''git apply "${PATCH_FILE_PATH}"'','
        - '            "```",'
        - '        ]'
        - '        console.print(rich.markdown.Markdown("\n".join(content)))'
      - end_line: 237
        name: _save_patch
        start_line: 219
        text:
        - '    def _save_patch(self, instance_id: str, info) -> Path | None:'
        - '        """Create patch files that can be applied with `git am`.'
        - ''
        - '        Returns:'
        - '            The path to the patch file, if it was saved. Otherwise, returns
          None.'
        - '        """'
        - '        patch_output_dir = self._traj_dir / "patches"'
        - '        patch_output_dir.mkdir(exist_ok=True, parents=True)'
        - '        patch_output_file = patch_output_dir / f"{instance_id}.patch"'
        - '        if not info.get("submission"):'
        - '            logger.info("No patch to save.")'
        - '            return None'
        - '        model_patch = info["submission"]'
        - '        patch_output_file.write_text(model_patch)'
        - '        if self._is_promising_patch(info):'
        - '            # Only print big congratulations if we actually believe'
        - '            # the patch will solve the issue'
        - '            self._print_patch_message(patch_output_file)'
        - '        return patch_output_file'
      - end_line: 252
        name: _apply_patch
        start_line: 239
        text:
        - '    def _apply_patch(self, patch_file: Path, local_dir: Path) -> None:'
        - '        """Apply a patch to a local directory."""'
        - ''
        - '        assert local_dir.is_dir()'
        - '        assert patch_file.exists()'
        - '        # The resolve() is important, because we''re gonna run the cmd'
        - '        # somewhere else'
        - '        cmd = ["git", "apply", str(patch_file.resolve())]'
        - '        try:'
        - '            subprocess.run(cmd, cwd=local_dir, check=True)'
        - '        except subprocess.CalledProcessError as e:'
        - '            logger.error(f"Failed to apply patch {patch_file} to {local_dir}:
          {e}")'
        - '            return'
        - '        logger.info(f"Applied patch {patch_file} to {local_dir}")'
      name: SaveApplyPatchHook
      start_line: 168
      text:
      - 'class SaveApplyPatchHook(MainHook):'
      - '    """This hook saves patches to a separate directory and optionally applies
        them to a local repository."""'
      - ''
      - '    def on_init(self, *, args: ScriptArguments, agent: Agent, env: SWEEnv,
        traj_dir: Path):'
      - '        self._traj_dir = traj_dir'
      - '        self._apply_patch_locally = args.actions.apply_patch_locally'
      - '        self._instance = None'
      - ''
      - '    def on_instance_start(self, *, index: int, instance: dict[str, Any]):'
      - '        self._instance = instance'
      - ''
      - '    def on_instance_completed(self, *, info, trajectory):'
      - '        assert self._instance is not None  # mypy'
      - '        instance_id = self._instance["instance_id"]'
      - '        patch_path = self._save_patch(instance_id, info)'
      - '        if patch_path:'
      - '            if not self._apply_patch_locally:'
      - '                return'
      - '            if not self._is_promising_patch(info):'
      - '                return'
      - '            assert self._instance  # mypy'
      - '            if self._instance["repo_type"] != "local":'
      - '                return'
      - '            local_dir = Path(self._instance["repo"])'
      - '            self._apply_patch(patch_path, local_dir)'
      - ''
      - '    @staticmethod'
      - '    def _print_patch_message(patch_output_file: Path):'
      - '        console = rich.console.Console()'
      - '        msg = ['
      - '            "SWE-agent has produced a patch that it believes will solve the
        issue you submitted!",'
      - '            "Use the code snippet below to inspect or apply it!",'
      - '        ]'
      - '        panel = rich.panel.Panel.fit('
      - '            "\n".join(msg),'
      - "            title=\"\U0001F389 Submission successful \U0001F389\","
      - '        )'
      - '        console.print(panel)'
      - '        content = ['
      - '            "```bash",'
      - '            "# The patch has been saved to your local filesystem at:",'
      - '            f"PATCH_FILE_PATH=''{patch_output_file.resolve()}''",'
      - '            "# Inspect it:",'
      - '            ''cat "${PATCH_FILE_PATH}"'','
      - '            "# Apply it to a local repository:",'
      - '            "cd <your local repo root>",'
      - '            ''git apply "${PATCH_FILE_PATH}"'','
      - '            "```",'
      - '        ]'
      - '        console.print(rich.markdown.Markdown("\n".join(content)))'
      - ''
      - '    def _save_patch(self, instance_id: str, info) -> Path | None:'
      - '        """Create patch files that can be applied with `git am`.'
      - ''
      - '        Returns:'
      - '            The path to the patch file, if it was saved. Otherwise, returns
        None.'
      - '        """'
      - '        patch_output_dir = self._traj_dir / "patches"'
      - '        patch_output_dir.mkdir(exist_ok=True, parents=True)'
      - '        patch_output_file = patch_output_dir / f"{instance_id}.patch"'
      - '        if not info.get("submission"):'
      - '            logger.info("No patch to save.")'
      - '            return None'
      - '        model_patch = info["submission"]'
      - '        patch_output_file.write_text(model_patch)'
      - '        if self._is_promising_patch(info):'
      - '            # Only print big congratulations if we actually believe'
      - '            # the patch will solve the issue'
      - '            self._print_patch_message(patch_output_file)'
      - '        return patch_output_file'
      - ''
      - '    def _apply_patch(self, patch_file: Path, local_dir: Path) -> None:'
      - '        """Apply a patch to a local directory."""'
      - ''
      - '        assert local_dir.is_dir()'
      - '        assert patch_file.exists()'
      - '        # The resolve() is important, because we''re gonna run the cmd'
      - '        # somewhere else'
      - '        cmd = ["git", "apply", str(patch_file.resolve())]'
      - '        try:'
      - '            subprocess.run(cmd, cwd=local_dir, check=True)'
      - '        except subprocess.CalledProcessError as e:'
      - '            logger.error(f"Failed to apply patch {patch_file} to {local_dir}:
        {e}")'
      - '            return'
      - '        logger.info(f"Applied patch {patch_file} to {local_dir}")'
    - end_line: 304
      methods:
      - end_line: 263
        name: on_init
        start_line: 258
        text:
        - '    def on_init(self, *, args: ScriptArguments, agent: Agent, env: SWEEnv,
          traj_dir: Path):'
        - '        self._env = env'
        - '        self._token: str = env._github_token'
        - '        self._data_path = args.environment.data_path'
        - '        self._open_pr = args.actions.open_pr'
        - '        self._skip_if_commits_reference_issue = args.actions.skip_if_commits_reference_issue'
      - end_line: 267
        name: on_instance_completed
        start_line: 265
        text:
        - '    def on_instance_completed(self, *, info, trajectory):'
        - '        if self._open_pr and self.should_open_pr(info):'
        - '            self._env.open_pr(trajectory=trajectory)'
      - end_line: 304
        name: should_open_pr
        start_line: 269
        text:
        - '    def should_open_pr(self, info: dict[str, Any]) -> bool:'
        - '        """Does opening a PR make sense?"""'
        - '        if not info.get("submission"):'
        - '            logger.info("Not opening PR because no submission was made.")'
        - '            return False'
        - '        if info["exit_status"] != "submitted":'
        - '            logger.info("Not opening PR because exit status was %s and
          not submitted.", info["exit_status"])'
        - '            return False'
        - '        try:'
        - '            issue = get_gh_issue_data(self._data_path, token=self._token)'
        - '        except InvalidGithubURL:'
        - '            logger.info("Currently only GitHub is supported to open PRs
          to. Skipping PR creation.")'
        - '            return False'
        - '        if issue.state != "open":'
        - '            logger.info(f"Issue is not open (state={issue.state}. Skipping
          PR creation.")'
        - '            return False'
        - '        if issue.assignee:'
        - '            logger.info("Issue is already assigned. Skipping PR creation.
          Be nice :)")'
        - '            return False'
        - '        if issue.locked:'
        - '            logger.info("Issue is locked. Skipping PR creation.")'
        - '            return False'
        - '        org, repo, issue_number = parse_gh_issue_url(self._data_path)'
        - '        associated_commits = get_associated_commit_urls(org, repo, issue_number,
          token=self._token)'
        - '        if associated_commits:'
        - '            commit_url_strs = ", ".join(associated_commits)'
        - '            if self._skip_if_commits_reference_issue:'
        - '                logger.info(f"Issue already has associated commits (see
          {commit_url_strs}). Skipping PR creation.")'
        - '                return False'
        - '            else:'
        - '                logger.warning('
        - '                    "Proceeding with PR creation even though there are
          already commits "'
        - '                    f"({commit_url_strs}) associated with the issue. Please
          only do this for your own repositories "'
        - '                    "or after verifying that the existing commits do not
          fix the issue.",'
        - '                )'
        - '        return True'
      name: OpenPRHook
      start_line: 255
      text:
      - 'class OpenPRHook(MainHook):'
      - '    """This hook opens a PR if the issue is solved and the user has enabled
        the option."""'
      - ''
      - '    def on_init(self, *, args: ScriptArguments, agent: Agent, env: SWEEnv,
        traj_dir: Path):'
      - '        self._env = env'
      - '        self._token: str = env._github_token'
      - '        self._data_path = args.environment.data_path'
      - '        self._open_pr = args.actions.open_pr'
      - '        self._skip_if_commits_reference_issue = args.actions.skip_if_commits_reference_issue'
      - ''
      - '    def on_instance_completed(self, *, info, trajectory):'
      - '        if self._open_pr and self.should_open_pr(info):'
      - '            self._env.open_pr(trajectory=trajectory)'
      - ''
      - '    def should_open_pr(self, info: dict[str, Any]) -> bool:'
      - '        """Does opening a PR make sense?"""'
      - '        if not info.get("submission"):'
      - '            logger.info("Not opening PR because no submission was made.")'
      - '            return False'
      - '        if info["exit_status"] != "submitted":'
      - '            logger.info("Not opening PR because exit status was %s and not
        submitted.", info["exit_status"])'
      - '            return False'
      - '        try:'
      - '            issue = get_gh_issue_data(self._data_path, token=self._token)'
      - '        except InvalidGithubURL:'
      - '            logger.info("Currently only GitHub is supported to open PRs to.
        Skipping PR creation.")'
      - '            return False'
      - '        if issue.state != "open":'
      - '            logger.info(f"Issue is not open (state={issue.state}. Skipping
        PR creation.")'
      - '            return False'
      - '        if issue.assignee:'
      - '            logger.info("Issue is already assigned. Skipping PR creation.
        Be nice :)")'
      - '            return False'
      - '        if issue.locked:'
      - '            logger.info("Issue is locked. Skipping PR creation.")'
      - '            return False'
      - '        org, repo, issue_number = parse_gh_issue_url(self._data_path)'
      - '        associated_commits = get_associated_commit_urls(org, repo, issue_number,
        token=self._token)'
      - '        if associated_commits:'
      - '            commit_url_strs = ", ".join(associated_commits)'
      - '            if self._skip_if_commits_reference_issue:'
      - '                logger.info(f"Issue already has associated commits (see {commit_url_strs}).
        Skipping PR creation.")'
      - '                return False'
      - '            else:'
      - '                logger.warning('
      - '                    "Proceeding with PR creation even though there are already
        commits "'
      - '                    f"({commit_url_strs}) associated with the issue. Please
        only do this for your own repositories "'
      - '                    "or after verifying that the existing commits do not
        fix the issue.",'
      - '                )'
      - '        return True'
    - end_line: 467
      methods:
      - end_line: 327
        name: __init__
        start_line: 308
        text:
        - '    def __init__(self, args: ScriptArguments):'
        - '        self.traj_dir = Path("trajectories") / Path(getuser()) / args.run_name'
        - '        self.traj_dir.mkdir(parents=True, exist_ok=True)'
        - '        timestamp = datetime.datetime.now().strftime("%y%m%d%H%M%S")'
        - '        log_path = self.traj_dir / f"run-{timestamp}.log"'
        - '        logger.info("Logging to %s", log_path)'
        - '        add_file_handler(log_path)'
        - '        if args.print_config:'
        - "            logger.info(f\"\U0001F4D9 Arguments: {args.dumps_yaml()}\")"
        - '        self.args = args'
        - '        self.agent = Agent("primary", args.agent)'
        - '        self.env = SWEEnv(args.environment)'
        - '        self._save_arguments()'
        - '        default_hooks = ['
        - '            SaveApplyPatchHook(),'
        - '            OpenPRHook(),'
        - '        ]'
        - '        self.hooks: list[MainHook] = []'
        - '        for hook in default_hooks:'
        - '            self.add_hook(hook)'
      - end_line: 331
        name: add_hook
        start_line: 329
        text:
        - '    def add_hook(self, hook: MainHook):'
        - '        hook.on_init(args=self.args, agent=self.agent, env=self.env, traj_dir=self.traj_dir)'
        - '        self.hooks.append(hook)'
      - end_line: 374
        name: run
        start_line: 333
        text:
        - '    def run(self, index):'
        - '        # Reset environment'
        - '        instance_id = self.env.data[index]["instance_id"]'
        - '        for hook in self.hooks:'
        - '            hook.on_instance_start(index=index, instance=self.env.data[index])'
        - '        assert isinstance(instance_id, str)  # mypy'
        - '        if self.should_skip(instance_id):'
        - '            for hook in self.hooks:'
        - '                hook.on_instance_skipped()'
        - '            raise _ContinueLoop'
        - "        logger.info(\"\u25B6\uFE0F  Beginning task \" + str(index))"
        - ''
        - '        observation, info = self.env.reset(index)'
        - '        if info is None:'
        - '            raise _ContinueLoop'
        - ''
        - '        # Get info, patch information'
        - '        issue = getattr(self.env, "query", None)'
        - '        files = []'
        - '        assert self.env.record is not None  # mypy'
        - '        if "patch" in self.env.record:'
        - '            files = "\n".join([f"- {x.path}" for x in PatchSet(self.env.record["patch"]).modified_files])'
        - '        # Get test files, F2P tests information'
        - '        test_files = []'
        - '        if "test_patch" in self.env.record:'
        - '            test_patch_obj = PatchSet(self.env.record["test_patch"])'
        - '            test_files = "\n".join([f"- {x.path}" for x in test_patch_obj.modified_files
          + test_patch_obj.added_files])'
        - '        tests = ""'
        - '        if "FAIL_endTO_PASS" in self.env.record:'
        - '            tests = "\n".join([f"- {x}" for x in self.env.record["FAIL_TO_PASS"]])'
        - ''
        - '        setup_args = {"issue": issue, "files": files, "test_files": test_files,
          "tests": tests}'
        - '        info, trajectory = self.agent.run('
        - '            setup_args=setup_args,'
        - '            env=self.env,'
        - '            observation=observation,'
        - '            traj_dir=self.traj_dir,'
        - '            return_type="info_trajectory",'
        - '        )'
        - '        self._save_predictions(instance_id, info)'
        - '        for hook in self.hooks:'
        - '            hook.on_instance_completed(info=info, trajectory=trajectory)'
      - end_line: 405
        name: main
        start_line: 376
        text:
        - '    def main(self):'
        - '        for hook in self.hooks:'
        - '            hook.on_start()'
        - '        for index in range(len(self.env.data)):'
        - '            try:'
        - '                self.run(index)'
        - '            except _ContinueLoop:'
        - '                continue'
        - '            except KeyboardInterrupt:'
        - '                logger.info("Exiting InterCode environment...")'
        - '                self.env.close()'
        - '                break'
        - '            except SystemExit:'
        - "                logger.critical(\"\u274C Exiting because SystemExit was\
          \ called\")"
        - '                self.env.close()'
        - '                logger.info("Container closed")'
        - '                raise'
        - '            except Exception as e:'
        - '                traceback.print_exc()'
        - '                if self.args.raise_exceptions:'
        - '                    self.env.close()'
        - '                    raise e'
        - '                if self.env.record:'
        - "                    logger.warning(f\"\u274C Failed on {self.env.record['instance_id']}:\
          \ {e}\")"
        - '                else:'
        - "                    logger.warning(\"\u274C Failed on unknown instance\"\
          )"
        - '                self.env.reset_container()'
        - '                continue'
        - '        for hook in self.hooks:'
        - '            hook.on_end()'
      - end_line: 422
        name: _save_arguments
        start_line: 407
        text:
        - '    def _save_arguments(self) -> None:'
        - '        """Save the arguments to a yaml file to the run''s trajectory directory."""'
        - '        log_path = self.traj_dir / "args.yaml"'
        - ''
        - '        if log_path.exists():'
        - '            try:'
        - '                other_args = self.args.load_yaml(log_path)'
        - '                if self.args.dumps_yaml() != other_args.dumps_yaml():  #
          check yaml equality instead of object equality'
        - '                    logger.warning("**************************************************")'
        - '                    logger.warning("Found existing args.yaml with different
          arguments!")'
        - '                    logger.warning("**************************************************")'
        - '            except Exception as e:'
        - '                logger.warning(f"Failed to load existing args.yaml: {e}")'
        - ''
        - '        with log_path.open("w") as f:'
        - '            self.args.dump_yaml(f)'
      - end_line: 455
        name: should_skip
        start_line: 424
        text:
        - '    def should_skip(self, instance_id: str) -> bool:'
        - '        """Check if we should skip this instance based on the instance
          filter and skip_existing flag."""'
        - '        # Skip instances that don''t match the instance filter'
        - '        if re.match(self.args.instance_filter, instance_id) is None:'
        - "            logger.info(f\"\u23ED\uFE0F Instance filter not matched. Skipping\
          \ instance {instance_id}\")"
        - '            return True'
        - ''
        - '        # If flag is set to False, don''t skip'
        - '        if not self.args.skip_existing:'
        - '            return False'
        - ''
        - '        # Check if there''s an existing trajectory for this instance'
        - '        log_path = self.traj_dir / (instance_id + ".traj")'
        - '        if not log_path.exists():'
        - '            return False'
        - ''
        - '        content = log_path.read_text()'
        - '        if not content.strip():'
        - '            logger.warning("Found empty trajectory: %s. Removing.", log_path)'
        - '            log_path.unlink()'
        - '            return False'
        - ''
        - '        data = json.loads(content)'
        - '        # If the trajectory has no exit status, it''s incomplete and we
          will redo it'
        - '        exit_status = data["info"].get("exit_status", None)'
        - '        if exit_status == "early_exit" or exit_status is None:'
        - '            logger.warning(f"Found existing trajectory with no exit status:
          {log_path}. Removing.")'
        - '            log_path.unlink()'
        - '            return False'
        - ''
        - "        logger.info(f\"\u23ED\uFE0F Skipping existing trajectory: {log_path}\"\
          )"
        - '        return True'
      - end_line: 467
        name: _save_predictions
        start_line: 457
        text:
        - '    def _save_predictions(self, instance_id: str, info):'
        - '        output_file = self.traj_dir / "all_preds.jsonl"'
        - '        model_patch = info["submission"] if "submission" in info else None'
        - '        datum = {'
        - '            KEY_MODEL: Path(self.traj_dir).name,'
        - '            KEY_INSTANCE_ID: instance_id,'
        - '            KEY_PREDICTION: model_patch,'
        - '        }'
        - '        with open(output_file, "a+") as fp:'
        - '            print(json.dumps(datum), file=fp, flush=True)'
        - '        logger.info(f"Saved predictions to {output_file}")'
      name: Main
      start_line: 307
      text:
      - 'class Main:'
      - '    def __init__(self, args: ScriptArguments):'
      - '        self.traj_dir = Path("trajectories") / Path(getuser()) / args.run_name'
      - '        self.traj_dir.mkdir(parents=True, exist_ok=True)'
      - '        timestamp = datetime.datetime.now().strftime("%y%m%d%H%M%S")'
      - '        log_path = self.traj_dir / f"run-{timestamp}.log"'
      - '        logger.info("Logging to %s", log_path)'
      - '        add_file_handler(log_path)'
      - '        if args.print_config:'
      - "            logger.info(f\"\U0001F4D9 Arguments: {args.dumps_yaml()}\")"
      - '        self.args = args'
      - '        self.agent = Agent("primary", args.agent)'
      - '        self.env = SWEEnv(args.environment)'
      - '        self._save_arguments()'
      - '        default_hooks = ['
      - '            SaveApplyPatchHook(),'
      - '            OpenPRHook(),'
      - '        ]'
      - '        self.hooks: list[MainHook] = []'
      - '        for hook in default_hooks:'
      - '            self.add_hook(hook)'
      - ''
      - '    def add_hook(self, hook: MainHook):'
      - '        hook.on_init(args=self.args, agent=self.agent, env=self.env, traj_dir=self.traj_dir)'
      - '        self.hooks.append(hook)'
      - ''
      - '    def run(self, index):'
      - '        # Reset environment'
      - '        instance_id = self.env.data[index]["instance_id"]'
      - '        for hook in self.hooks:'
      - '            hook.on_instance_start(index=index, instance=self.env.data[index])'
      - '        assert isinstance(instance_id, str)  # mypy'
      - '        if self.should_skip(instance_id):'
      - '            for hook in self.hooks:'
      - '                hook.on_instance_skipped()'
      - '            raise _ContinueLoop'
      - "        logger.info(\"\u25B6\uFE0F  Beginning task \" + str(index))"
      - ''
      - '        observation, info = self.env.reset(index)'
      - '        if info is None:'
      - '            raise _ContinueLoop'
      - ''
      - '        # Get info, patch information'
      - '        issue = getattr(self.env, "query", None)'
      - '        files = []'
      - '        assert self.env.record is not None  # mypy'
      - '        if "patch" in self.env.record:'
      - '            files = "\n".join([f"- {x.path}" for x in PatchSet(self.env.record["patch"]).modified_files])'
      - '        # Get test files, F2P tests information'
      - '        test_files = []'
      - '        if "test_patch" in self.env.record:'
      - '            test_patch_obj = PatchSet(self.env.record["test_patch"])'
      - '            test_files = "\n".join([f"- {x.path}" for x in test_patch_obj.modified_files
        + test_patch_obj.added_files])'
      - '        tests = ""'
      - '        if "FAIL_endTO_PASS" in self.env.record:'
      - '            tests = "\n".join([f"- {x}" for x in self.env.record["FAIL_TO_PASS"]])'
      - ''
      - '        setup_args = {"issue": issue, "files": files, "test_files": test_files,
        "tests": tests}'
      - '        info, trajectory = self.agent.run('
      - '            setup_args=setup_args,'
      - '            env=self.env,'
      - '            observation=observation,'
      - '            traj_dir=self.traj_dir,'
      - '            return_type="info_trajectory",'
      - '        )'
      - '        self._save_predictions(instance_id, info)'
      - '        for hook in self.hooks:'
      - '            hook.on_instance_completed(info=info, trajectory=trajectory)'
      - ''
      - '    def main(self):'
      - '        for hook in self.hooks:'
      - '            hook.on_start()'
      - '        for index in range(len(self.env.data)):'
      - '            try:'
      - '                self.run(index)'
      - '            except _ContinueLoop:'
      - '                continue'
      - '            except KeyboardInterrupt:'
      - '                logger.info("Exiting InterCode environment...")'
      - '                self.env.close()'
      - '                break'
      - '            except SystemExit:'
      - "                logger.critical(\"\u274C Exiting because SystemExit was called\"\
        )"
      - '                self.env.close()'
      - '                logger.info("Container closed")'
      - '                raise'
      - '            except Exception as e:'
      - '                traceback.print_exc()'
      - '                if self.args.raise_exceptions:'
      - '                    self.env.close()'
      - '                    raise e'
      - '                if self.env.record:'
      - "                    logger.warning(f\"\u274C Failed on {self.env.record['instance_id']}:\
        \ {e}\")"
      - '                else:'
      - "                    logger.warning(\"\u274C Failed on unknown instance\")"
      - '                self.env.reset_container()'
      - '                continue'
      - '        for hook in self.hooks:'
      - '            hook.on_end()'
      - ''
      - '    def _save_arguments(self) -> None:'
      - '        """Save the arguments to a yaml file to the run''s trajectory directory."""'
      - '        log_path = self.traj_dir / "args.yaml"'
      - ''
      - '        if log_path.exists():'
      - '            try:'
      - '                other_args = self.args.load_yaml(log_path)'
      - '                if self.args.dumps_yaml() != other_args.dumps_yaml():  #
        check yaml equality instead of object equality'
      - '                    logger.warning("**************************************************")'
      - '                    logger.warning("Found existing args.yaml with different
        arguments!")'
      - '                    logger.warning("**************************************************")'
      - '            except Exception as e:'
      - '                logger.warning(f"Failed to load existing args.yaml: {e}")'
      - ''
      - '        with log_path.open("w") as f:'
      - '            self.args.dump_yaml(f)'
      - ''
      - '    def should_skip(self, instance_id: str) -> bool:'
      - '        """Check if we should skip this instance based on the instance filter
        and skip_existing flag."""'
      - '        # Skip instances that don''t match the instance filter'
      - '        if re.match(self.args.instance_filter, instance_id) is None:'
      - "            logger.info(f\"\u23ED\uFE0F Instance filter not matched. Skipping\
        \ instance {instance_id}\")"
      - '            return True'
      - ''
      - '        # If flag is set to False, don''t skip'
      - '        if not self.args.skip_existing:'
      - '            return False'
      - ''
      - '        # Check if there''s an existing trajectory for this instance'
      - '        log_path = self.traj_dir / (instance_id + ".traj")'
      - '        if not log_path.exists():'
      - '            return False'
      - ''
      - '        content = log_path.read_text()'
      - '        if not content.strip():'
      - '            logger.warning("Found empty trajectory: %s. Removing.", log_path)'
      - '            log_path.unlink()'
      - '            return False'
      - ''
      - '        data = json.loads(content)'
      - '        # If the trajectory has no exit status, it''s incomplete and we will
        redo it'
      - '        exit_status = data["info"].get("exit_status", None)'
      - '        if exit_status == "early_exit" or exit_status is None:'
      - '            logger.warning(f"Found existing trajectory with no exit status:
        {log_path}. Removing.")'
      - '            log_path.unlink()'
      - '            return False'
      - ''
      - "        logger.info(f\"\u23ED\uFE0F Skipping existing trajectory: {log_path}\"\
        )"
      - '        return True'
      - ''
      - '    def _save_predictions(self, instance_id: str, info):'
      - '        output_file = self.traj_dir / "all_preds.jsonl"'
      - '        model_patch = info["submission"] if "submission" in info else None'
      - '        datum = {'
      - '            KEY_MODEL: Path(self.traj_dir).name,'
      - '            KEY_INSTANCE_ID: instance_id,'
      - '            KEY_PREDICTION: model_patch,'
      - '        }'
      - '        with open(output_file, "a+") as fp:'
      - '            print(json.dumps(datum), file=fp, flush=True)'
      - '        logger.info(f"Saved predictions to {output_file}")'
    functions:
    - end_line: 518
      name: get_args
      start_line: 470
      text:
      - 'def get_args(args=None) -> ScriptArguments:'
      - '    """Parse command line arguments and return a ScriptArguments object.'
      - ''
      - '    Args:'
      - '        args: Optional list of arguments to parse. If not provided, uses
        sys.argv.'
      - '    """'
      - '    defaults = ScriptArguments('
      - '        suffix="",'
      - '        environment=EnvironmentArguments('
      - '            image_name="sweagent/swe-agent:latest",'
      - '            data_path="princeton-nlp/SWE-bench_Lite",'
      - '            split="dev",'
      - '            verbose=True,'
      - '            install_environment=True,'
      - '            cache_task_images=False,'
      - '        ),'
      - '        skip_existing=True,'
      - '        agent=AgentArguments('
      - '            model=ModelArguments('
      - '                model_name="gpt4",'
      - '                total_cost_limit=0.0,'
      - '                per_instance_cost_limit=3.0,'
      - '                temperature=0.0,'
      - '                top_p=0.95,'
      - '            ),'
      - '            config_file=CONFIG_DIR / "default.yaml",'
      - '        ),'
      - '        actions=ActionsArguments(open_pr=False, skip_if_commits_reference_issue=True),'
      - '    )'
      - ''
      - '    # Nicer yaml dumping of multiline strings'
      - '    def multiline_representer(dumper, data):'
      - '        """configures yaml for dumping multiline strings'
      - '        Ref: https://stackoverflow.com/questions/8640959/how-can-i-control-what-scalar-form-pyyaml-uses-for-my-data'
      - '        """'
      - '        if data.count("\n") > 0:  # check for multiline string'
      - '            return dumper.represent_scalar("tag:yaml.org,2002:str", data,
        style="|")'
      - '        return dumper.represent_scalar("tag:yaml.org,2002:str", data)'
      - ''
      - '    yaml.add_representer(str, multiline_representer)'
      - ''
      - '    return parse('
      - '        ScriptArguments,'
      - '        default=defaults,'
      - '        add_config_path_arg=False,'
      - '        args=args,'
      - '        formatter_class=RichHelpFormatter,'
      - '        description=Markdown(__doc__),'
      - '    )'
    - end_line: 507
      name: multiline_representer
      start_line: 501
      text:
      - '    def multiline_representer(dumper, data):'
      - '        """configures yaml for dumping multiline strings'
      - '        Ref: https://stackoverflow.com/questions/8640959/how-can-i-control-what-scalar-form-pyyaml-uses-for-my-data'
      - '        """'
      - '        if data.count("\n") > 0:  # check for multiline string'
      - '            return dumper.represent_scalar("tag:yaml.org,2002:str", data,
        style="|")'
      - '        return dumper.represent_scalar("tag:yaml.org,2002:str", data)'
    text:
    - from __future__ import annotations
    - ''
    - import logging
    - ''
    - from sweagent import CONFIG_DIR
    - from sweagent.utils.log import add_file_handler, get_logger
    - ''
    - 'try:'
    - '    import rich'
    - 'except ModuleNotFoundError as e:'
    - '    msg = ('
    - '        "You probably either forgot to install the dependencies "'
    - '        "or forgot to activate your conda or virtual environment."'
    - '    )'
    - '    raise RuntimeError(msg) from e'
    - import json
    - import re
    - import subprocess
    - import traceback
    - from typing import Any
    - ''
    - import rich.console
    - import rich.markdown
    - import rich.panel
    - ''
    - 'try:'
    - '    from rich_argparse import RichHelpFormatter'
    - 'except ImportError:'
    - '    msg = "Please install the rich_argparse package with `pip install rich_argparse`."'
    - '    raise ImportError(msg)'
    - import datetime
    - from dataclasses import dataclass
    - from getpass import getuser
    - from pathlib import Path
    - ''
    - import yaml
    - from rich.markdown import Markdown
    - from simple_parsing import parse
    - from simple_parsing.helpers.flatten import FlattenedAccess
    - from simple_parsing.helpers.serialization.serializable import FrozenSerializable
    - from swebench.harness.constants import KEY_INSTANCE_ID, KEY_MODEL, KEY_PREDICTION
    - from unidiff import PatchSet
    - ''
    - from sweagent.agent.agents import Agent, AgentArguments
    - from sweagent.agent.models import ModelArguments
    - from sweagent.environment.swe_env import EnvironmentArguments, SWEEnv
    - from sweagent.environment.utils import (
    - '    InvalidGithubURL,'
    - '    get_associated_commit_urls,'
    - '    get_data_path_name,'
    - '    get_gh_issue_data,'
    - '    parse_gh_issue_url,'
    - )
    - ''
    - '__doc__: str = """ Run inference. Usage examples:'
    - ''
    - '```bash'
    - '# Run over a github issue:'
    - python run.py --model_name "gpt4" --data_path "https://github.com/pvlib/pvlib-python/issues/1603"
      --config_file "config/default_from_url.yaml"
    - '# Apply a patch in a local repository to an issue specified as Markdown file
      and run a custom installer script in the container'
    - python run.py --model_name "gpt4" --data_path "/path/to/my_issue.md" --repo_path
      "/path/to/my/local/repo" --environment_setup "/path/to/setup.sh" --config_file
      "config/default_from_url.yaml" --apply_patch_locally
    - '```'
    - ''
    - '**For more information**: https://princeton-nlp.github.io/SWE-agent/usage/cl_tutorial/'
    - '"""'
    - ''
    - ''
    - logger = get_logger("swe-agent-run")
    - logging.getLogger("simple_parsing").setLevel(logging.WARNING)
    - ''
    - ''
    - '@dataclass(frozen=True)'
    - 'class ActionsArguments(FlattenedAccess, FrozenSerializable):'
    - '    """Run real-life actions (opening PRs, etc.) if we can solve the issue."""'
    - ''
    - '    # Open a PR with the patch if we can solve the issue'
    - '    open_pr: bool = False'
    - '    # When working with local repository: Apply patch'
    - '    apply_patch_locally: bool = False'
    - '    # Option to be used with open_pr: Skip action if there are already commits
      claiming'
    - '    # to fix the issue. Please only set this to False if you are sure the commits
      are'
    - '    # not fixes or if this is your own repository!'
    - '    skip_if_commits_reference_issue: bool = True'
    - '    # OBSOLETE. Do not use, will raise error. Please specify --repo_path instead.'
    - '    push_gh_repo_url: str = ""'
    - ''
    - '    def __post_init__(self):'
    - '        if self.push_gh_repo_url:'
    - '            msg = "push_gh_repo_url is obsolete. Use repo_path instead"'
    - '            raise ValueError(msg)'
    - ''
    - ''
    - '@dataclass(frozen=True)'
    - 'class ScriptArguments(FlattenedAccess, FrozenSerializable):'
    - '    """Configure the control flow of the run.py script"""'
    - ''
    - '    environment: EnvironmentArguments'
    - '    agent: AgentArguments'
    - '    actions: ActionsArguments'
    - '    # Only run instances that completely match this regex'
    - '    instance_filter: str = ".*"'
    - '    # Skip instances with existing trajectories'
    - '    skip_existing: bool = True'
    - '    # Suffix for the run name (used for example in trajectory directory naming)'
    - '    suffix: str = ""'
    - '    # Raise unhandled exceptions during the run (useful for debugging)'
    - '    raise_exceptions: bool = False'
    - '    # Dump the entire config to the log'
    - '    print_config: bool = True'
    - ''
    - '    @property'
    - '    def run_name(self) -> str:'
    - '        """Generate a unique name for this run based on the arguments."""'
    - '        model_name = self.agent.model.model_name.replace(":", "-")'
    - '        data_stem = get_data_path_name(self.environment.data_path)'
    - '        assert self.agent.config_file is not None  # mypy'
    - '        config_stem = Path(self.agent.config_file).stem'
    - ''
    - '        temp = self.agent.model.temperature'
    - '        top_p = self.agent.model.top_p'
    - ''
    - '        per_instance_cost_limit = self.agent.model.per_instance_cost_limit'
    - '        install_env = self.environment.install_environment'
    - ''
    - '        return ('
    - '            f"{model_name}__{data_stem}__{config_stem}__t-{temp:.2f}__p-{top_p:.2f}"'
    - '            + f"__c-{per_instance_cost_limit:.2f}__install-{int(install_env)}"'
    - '            + (f"__{self.suffix}" if self.suffix else "")'
    - '        )'
    - ''
    - ''
    - 'class _ContinueLoop(Exception):'
    - '    """Used for internal control flow"""'
    - ''
    - ''
    - 'class MainHook:'
    - '    """Hook structure for the web server or other addons to interface with"""'
    - ''
    - '    @staticmethod'
    - '    def _is_promising_patch(info: dict[str, Any]) -> bool:'
    - '        """Do we actually believe that the patch will solve the issue?'
    - '        Or are we just submitting the last patch we generated before hitting
      an error?'
    - '        """'
    - '        # The exit status can also be `submitted (exit_cost)` etc.'
    - '        return info["exit_status"] == "submitted" and info.get("submission")
      is not None'
    - ''
    - '    def on_init(self, *, args: ScriptArguments, agent: Agent, env: SWEEnv,
      traj_dir: Path):'
    - '        """Called when hook is initialized"""'
    - ''
    - '    def on_start(self):'
    - '        """Called at the beginning of `Main.main`"""'
    - ''
    - '    def on_end(self):'
    - '        """Called at the end of `Main.main`"""'
    - ''
    - '    def on_instance_start(self, *, index: int, instance: dict[str, Any]):'
    - '        """Called at the beginning of each instance loop in `Main.run`"""'
    - ''
    - '    def on_instance_skipped('
    - '        self,'
    - '    ):'
    - '        """Called when an instance is skipped in `Main.run`"""'
    - ''
    - '    def on_instance_completed(self, *, info, trajectory):'
    - '        """Called when an instance is completed in `Main.run`"""'
    - ''
    - ''
    - 'class SaveApplyPatchHook(MainHook):'
    - '    """This hook saves patches to a separate directory and optionally applies
      them to a local repository."""'
    - ''
    - '    def on_init(self, *, args: ScriptArguments, agent: Agent, env: SWEEnv,
      traj_dir: Path):'
    - '        self._traj_dir = traj_dir'
    - '        self._apply_patch_locally = args.actions.apply_patch_locally'
    - '        self._instance = None'
    - ''
    - '    def on_instance_start(self, *, index: int, instance: dict[str, Any]):'
    - '        self._instance = instance'
    - ''
    - '    def on_instance_completed(self, *, info, trajectory):'
    - '        assert self._instance is not None  # mypy'
    - '        instance_id = self._instance["instance_id"]'
    - '        patch_path = self._save_patch(instance_id, info)'
    - '        if patch_path:'
    - '            if not self._apply_patch_locally:'
    - '                return'
    - '            if not self._is_promising_patch(info):'
    - '                return'
    - '            assert self._instance  # mypy'
    - '            if self._instance["repo_type"] != "local":'
    - '                return'
    - '            local_dir = Path(self._instance["repo"])'
    - '            self._apply_patch(patch_path, local_dir)'
    - ''
    - '    @staticmethod'
    - '    def _print_patch_message(patch_output_file: Path):'
    - '        console = rich.console.Console()'
    - '        msg = ['
    - '            "SWE-agent has produced a patch that it believes will solve the
      issue you submitted!",'
    - '            "Use the code snippet below to inspect or apply it!",'
    - '        ]'
    - '        panel = rich.panel.Panel.fit('
    - '            "\n".join(msg),'
    - "            title=\"\U0001F389 Submission successful \U0001F389\","
    - '        )'
    - '        console.print(panel)'
    - '        content = ['
    - '            "```bash",'
    - '            "# The patch has been saved to your local filesystem at:",'
    - '            f"PATCH_FILE_PATH=''{patch_output_file.resolve()}''",'
    - '            "# Inspect it:",'
    - '            ''cat "${PATCH_FILE_PATH}"'','
    - '            "# Apply it to a local repository:",'
    - '            "cd <your local repo root>",'
    - '            ''git apply "${PATCH_FILE_PATH}"'','
    - '            "```",'
    - '        ]'
    - '        console.print(rich.markdown.Markdown("\n".join(content)))'
    - ''
    - '    def _save_patch(self, instance_id: str, info) -> Path | None:'
    - '        """Create patch files that can be applied with `git am`.'
    - ''
    - '        Returns:'
    - '            The path to the patch file, if it was saved. Otherwise, returns
      None.'
    - '        """'
    - '        patch_output_dir = self._traj_dir / "patches"'
    - '        patch_output_dir.mkdir(exist_ok=True, parents=True)'
    - '        patch_output_file = patch_output_dir / f"{instance_id}.patch"'
    - '        if not info.get("submission"):'
    - '            logger.info("No patch to save.")'
    - '            return None'
    - '        model_patch = info["submission"]'
    - '        patch_output_file.write_text(model_patch)'
    - '        if self._is_promising_patch(info):'
    - '            # Only print big congratulations if we actually believe'
    - '            # the patch will solve the issue'
    - '            self._print_patch_message(patch_output_file)'
    - '        return patch_output_file'
    - ''
    - '    def _apply_patch(self, patch_file: Path, local_dir: Path) -> None:'
    - '        """Apply a patch to a local directory."""'
    - ''
    - '        assert local_dir.is_dir()'
    - '        assert patch_file.exists()'
    - '        # The resolve() is important, because we''re gonna run the cmd'
    - '        # somewhere else'
    - '        cmd = ["git", "apply", str(patch_file.resolve())]'
    - '        try:'
    - '            subprocess.run(cmd, cwd=local_dir, check=True)'
    - '        except subprocess.CalledProcessError as e:'
    - '            logger.error(f"Failed to apply patch {patch_file} to {local_dir}:
      {e}")'
    - '            return'
    - '        logger.info(f"Applied patch {patch_file} to {local_dir}")'
    - ''
    - ''
    - 'class OpenPRHook(MainHook):'
    - '    """This hook opens a PR if the issue is solved and the user has enabled
      the option."""'
    - ''
    - '    def on_init(self, *, args: ScriptArguments, agent: Agent, env: SWEEnv,
      traj_dir: Path):'
    - '        self._env = env'
    - '        self._token: str = env._github_token'
    - '        self._data_path = args.environment.data_path'
    - '        self._open_pr = args.actions.open_pr'
    - '        self._skip_if_commits_reference_issue = args.actions.skip_if_commits_reference_issue'
    - ''
    - '    def on_instance_completed(self, *, info, trajectory):'
    - '        if self._open_pr and self.should_open_pr(info):'
    - '            self._env.open_pr(trajectory=trajectory)'
    - ''
    - '    def should_open_pr(self, info: dict[str, Any]) -> bool:'
    - '        """Does opening a PR make sense?"""'
    - '        if not info.get("submission"):'
    - '            logger.info("Not opening PR because no submission was made.")'
    - '            return False'
    - '        if info["exit_status"] != "submitted":'
    - '            logger.info("Not opening PR because exit status was %s and not
      submitted.", info["exit_status"])'
    - '            return False'
    - '        try:'
    - '            issue = get_gh_issue_data(self._data_path, token=self._token)'
    - '        except InvalidGithubURL:'
    - '            logger.info("Currently only GitHub is supported to open PRs to.
      Skipping PR creation.")'
    - '            return False'
    - '        if issue.state != "open":'
    - '            logger.info(f"Issue is not open (state={issue.state}. Skipping
      PR creation.")'
    - '            return False'
    - '        if issue.assignee:'
    - '            logger.info("Issue is already assigned. Skipping PR creation. Be
      nice :)")'
    - '            return False'
    - '        if issue.locked:'
    - '            logger.info("Issue is locked. Skipping PR creation.")'
    - '            return False'
    - '        org, repo, issue_number = parse_gh_issue_url(self._data_path)'
    - '        associated_commits = get_associated_commit_urls(org, repo, issue_number,
      token=self._token)'
    - '        if associated_commits:'
    - '            commit_url_strs = ", ".join(associated_commits)'
    - '            if self._skip_if_commits_reference_issue:'
    - '                logger.info(f"Issue already has associated commits (see {commit_url_strs}).
      Skipping PR creation.")'
    - '                return False'
    - '            else:'
    - '                logger.warning('
    - '                    "Proceeding with PR creation even though there are already
      commits "'
    - '                    f"({commit_url_strs}) associated with the issue. Please
      only do this for your own repositories "'
    - '                    "or after verifying that the existing commits do not fix
      the issue.",'
    - '                )'
    - '        return True'
    - ''
    - ''
    - 'class Main:'
    - '    def __init__(self, args: ScriptArguments):'
    - '        self.traj_dir = Path("trajectories") / Path(getuser()) / args.run_name'
    - '        self.traj_dir.mkdir(parents=True, exist_ok=True)'
    - '        timestamp = datetime.datetime.now().strftime("%y%m%d%H%M%S")'
    - '        log_path = self.traj_dir / f"run-{timestamp}.log"'
    - '        logger.info("Logging to %s", log_path)'
    - '        add_file_handler(log_path)'
    - '        if args.print_config:'
    - "            logger.info(f\"\U0001F4D9 Arguments: {args.dumps_yaml()}\")"
    - '        self.args = args'
    - '        self.agent = Agent("primary", args.agent)'
    - '        self.env = SWEEnv(args.environment)'
    - '        self._save_arguments()'
    - '        default_hooks = ['
    - '            SaveApplyPatchHook(),'
    - '            OpenPRHook(),'
    - '        ]'
    - '        self.hooks: list[MainHook] = []'
    - '        for hook in default_hooks:'
    - '            self.add_hook(hook)'
    - ''
    - '    def add_hook(self, hook: MainHook):'
    - '        hook.on_init(args=self.args, agent=self.agent, env=self.env, traj_dir=self.traj_dir)'
    - '        self.hooks.append(hook)'
    - ''
    - '    def run(self, index):'
    - '        # Reset environment'
    - '        instance_id = self.env.data[index]["instance_id"]'
    - '        for hook in self.hooks:'
    - '            hook.on_instance_start(index=index, instance=self.env.data[index])'
    - '        assert isinstance(instance_id, str)  # mypy'
    - '        if self.should_skip(instance_id):'
    - '            for hook in self.hooks:'
    - '                hook.on_instance_skipped()'
    - '            raise _ContinueLoop'
    - "        logger.info(\"\u25B6\uFE0F  Beginning task \" + str(index))"
    - ''
    - '        observation, info = self.env.reset(index)'
    - '        if info is None:'
    - '            raise _ContinueLoop'
    - ''
    - '        # Get info, patch information'
    - '        issue = getattr(self.env, "query", None)'
    - '        files = []'
    - '        assert self.env.record is not None  # mypy'
    - '        if "patch" in self.env.record:'
    - '            files = "\n".join([f"- {x.path}" for x in PatchSet(self.env.record["patch"]).modified_files])'
    - '        # Get test files, F2P tests information'
    - '        test_files = []'
    - '        if "test_patch" in self.env.record:'
    - '            test_patch_obj = PatchSet(self.env.record["test_patch"])'
    - '            test_files = "\n".join([f"- {x.path}" for x in test_patch_obj.modified_files
      + test_patch_obj.added_files])'
    - '        tests = ""'
    - '        if "FAIL_endTO_PASS" in self.env.record:'
    - '            tests = "\n".join([f"- {x}" for x in self.env.record["FAIL_TO_PASS"]])'
    - ''
    - '        setup_args = {"issue": issue, "files": files, "test_files": test_files,
      "tests": tests}'
    - '        info, trajectory = self.agent.run('
    - '            setup_args=setup_args,'
    - '            env=self.env,'
    - '            observation=observation,'
    - '            traj_dir=self.traj_dir,'
    - '            return_type="info_trajectory",'
    - '        )'
    - '        self._save_predictions(instance_id, info)'
    - '        for hook in self.hooks:'
    - '            hook.on_instance_completed(info=info, trajectory=trajectory)'
    - ''
    - '    def main(self):'
    - '        for hook in self.hooks:'
    - '            hook.on_start()'
    - '        for index in range(len(self.env.data)):'
    - '            try:'
    - '                self.run(index)'
    - '            except _ContinueLoop:'
    - '                continue'
    - '            except KeyboardInterrupt:'
    - '                logger.info("Exiting InterCode environment...")'
    - '                self.env.close()'
    - '                break'
    - '            except SystemExit:'
    - "                logger.critical(\"\u274C Exiting because SystemExit was called\"\
      )"
    - '                self.env.close()'
    - '                logger.info("Container closed")'
    - '                raise'
    - '            except Exception as e:'
    - '                traceback.print_exc()'
    - '                if self.args.raise_exceptions:'
    - '                    self.env.close()'
    - '                    raise e'
    - '                if self.env.record:'
    - "                    logger.warning(f\"\u274C Failed on {self.env.record['instance_id']}:\
      \ {e}\")"
    - '                else:'
    - "                    logger.warning(\"\u274C Failed on unknown instance\")"
    - '                self.env.reset_container()'
    - '                continue'
    - '        for hook in self.hooks:'
    - '            hook.on_end()'
    - ''
    - '    def _save_arguments(self) -> None:'
    - '        """Save the arguments to a yaml file to the run''s trajectory directory."""'
    - '        log_path = self.traj_dir / "args.yaml"'
    - ''
    - '        if log_path.exists():'
    - '            try:'
    - '                other_args = self.args.load_yaml(log_path)'
    - '                if self.args.dumps_yaml() != other_args.dumps_yaml():  # check
      yaml equality instead of object equality'
    - '                    logger.warning("**************************************************")'
    - '                    logger.warning("Found existing args.yaml with different
      arguments!")'
    - '                    logger.warning("**************************************************")'
    - '            except Exception as e:'
    - '                logger.warning(f"Failed to load existing args.yaml: {e}")'
    - ''
    - '        with log_path.open("w") as f:'
    - '            self.args.dump_yaml(f)'
    - ''
    - '    def should_skip(self, instance_id: str) -> bool:'
    - '        """Check if we should skip this instance based on the instance filter
      and skip_existing flag."""'
    - '        # Skip instances that don''t match the instance filter'
    - '        if re.match(self.args.instance_filter, instance_id) is None:'
    - "            logger.info(f\"\u23ED\uFE0F Instance filter not matched. Skipping\
      \ instance {instance_id}\")"
    - '            return True'
    - ''
    - '        # If flag is set to False, don''t skip'
    - '        if not self.args.skip_existing:'
    - '            return False'
    - ''
    - '        # Check if there''s an existing trajectory for this instance'
    - '        log_path = self.traj_dir / (instance_id + ".traj")'
    - '        if not log_path.exists():'
    - '            return False'
    - ''
    - '        content = log_path.read_text()'
    - '        if not content.strip():'
    - '            logger.warning("Found empty trajectory: %s. Removing.", log_path)'
    - '            log_path.unlink()'
    - '            return False'
    - ''
    - '        data = json.loads(content)'
    - '        # If the trajectory has no exit status, it''s incomplete and we will
      redo it'
    - '        exit_status = data["info"].get("exit_status", None)'
    - '        if exit_status == "early_exit" or exit_status is None:'
    - '            logger.warning(f"Found existing trajectory with no exit status:
      {log_path}. Removing.")'
    - '            log_path.unlink()'
    - '            return False'
    - ''
    - "        logger.info(f\"\u23ED\uFE0F Skipping existing trajectory: {log_path}\"\
      )"
    - '        return True'
    - ''
    - '    def _save_predictions(self, instance_id: str, info):'
    - '        output_file = self.traj_dir / "all_preds.jsonl"'
    - '        model_patch = info["submission"] if "submission" in info else None'
    - '        datum = {'
    - '            KEY_MODEL: Path(self.traj_dir).name,'
    - '            KEY_INSTANCE_ID: instance_id,'
    - '            KEY_PREDICTION: model_patch,'
    - '        }'
    - '        with open(output_file, "a+") as fp:'
    - '            print(json.dumps(datum), file=fp, flush=True)'
    - '        logger.info(f"Saved predictions to {output_file}")'
    - ''
    - ''
    - 'def get_args(args=None) -> ScriptArguments:'
    - '    """Parse command line arguments and return a ScriptArguments object.'
    - ''
    - '    Args:'
    - '        args: Optional list of arguments to parse. If not provided, uses sys.argv.'
    - '    """'
    - '    defaults = ScriptArguments('
    - '        suffix="",'
    - '        environment=EnvironmentArguments('
    - '            image_name="sweagent/swe-agent:latest",'
    - '            data_path="princeton-nlp/SWE-bench_Lite",'
    - '            split="dev",'
    - '            verbose=True,'
    - '            install_environment=True,'
    - '            cache_task_images=False,'
    - '        ),'
    - '        skip_existing=True,'
    - '        agent=AgentArguments('
    - '            model=ModelArguments('
    - '                model_name="gpt4",'
    - '                total_cost_limit=0.0,'
    - '                per_instance_cost_limit=3.0,'
    - '                temperature=0.0,'
    - '                top_p=0.95,'
    - '            ),'
    - '            config_file=CONFIG_DIR / "default.yaml",'
    - '        ),'
    - '        actions=ActionsArguments(open_pr=False, skip_if_commits_reference_issue=True),'
    - '    )'
    - ''
    - '    # Nicer yaml dumping of multiline strings'
    - '    def multiline_representer(dumper, data):'
    - '        """configures yaml for dumping multiline strings'
    - '        Ref: https://stackoverflow.com/questions/8640959/how-can-i-control-what-scalar-form-pyyaml-uses-for-my-data'
    - '        """'
    - '        if data.count("\n") > 0:  # check for multiline string'
    - '            return dumper.represent_scalar("tag:yaml.org,2002:str", data, style="|")'
    - '        return dumper.represent_scalar("tag:yaml.org,2002:str", data)'
    - ''
    - '    yaml.add_representer(str, multiline_representer)'
    - ''
    - '    return parse('
    - '        ScriptArguments,'
    - '        default=defaults,'
    - '        add_config_path_arg=False,'
    - '        args=args,'
    - '        formatter_class=RichHelpFormatter,'
    - '        description=Markdown(__doc__),'
    - '    )'
    - ''
    - ''
    - 'def main(args: ScriptArguments):'
    - '    Main(args).main()'
    - ''
    - ''
    - 'if __name__ == "__main__":'
    - '    main(get_args())'
  run_replay.py:
    classes: []
    functions:
    - end_line: 104
      name: process_single_traj
      start_line: 16
      text:
      - 'def process_single_traj(traj_path: str, config_file: str, data_path: str,
        suffix: str, *, forward_args: list[str]):'
      - '    """'
      - ''
      - '    Args:'
      - '        traj_path (str): _description_'
      - '        config_file (str): _description_'
      - '        data_path (str): _description_'
      - '        suffix (str): _description_'
      - '        forward_args (List[str]): Passed to run.py'
      - ''
      - '    Raises:'
      - '        ValueError: Incorrect paths or other config issue'
      - ''
      - '    Returns:'
      - '        None'
      - '    """'
      - '    replay_action_trajs_path = "temp_replay.jsonl"'
      - ''
      - '    # Open trajectory file, extract responses as actions'
      - '    if traj_path.endswith(".yaml"):'
      - '        traj_data = dict()'
      - '        with open(traj_path) as f:'
      - '            traj_data["history"] = yaml.safe_load(f)'
      - '    else:'
      - '        with open(traj_path) as file:'
      - '            traj_data = json.load(file)'
      - '    actions = [x["content"] for x in traj_data["history"] if x["role"] ==
        "assistant"]'
      - '    instance_id = traj_path.split("/")[-1].split(".")[0]'
      - '    with open(replay_action_trajs_path, "w") as f:'
      - '        print(json.dumps({instance_id: actions}), file=f, end="\n", flush=True)'
      - ''
      - '    # Get data_path from args.yaml'
      - '    if data_path is None:'
      - '        args_path = os.path.join(os.path.dirname(traj_path), "args.yaml")'
      - '        with open(args_path) as f:'
      - '            args = yaml.safe_load(f)'
      - '        data_path = args["environment"]["data_path"]'
      - ''
      - '    # Identify the relevant task instance and create it'
      - '    def create_task_instances_tmp_file(data: list[dict[str, Any]]) -> str:'
      - '        """Helper function to create a temporary file to write task instances
        to.'
      - '        Returns path to the temporary file.'
      - '        """'
      - '        data = [d for d in data if d["instance_id"] == instance_id]'
      - '        tmp_path = instance_id + ".jsonl"'
      - '        with open(tmp_path, "w") as f:'
      - '            for d in data:'
      - '                print(json.dumps(d), file=f, end="\n", flush=True)'
      - '        return tmp_path'
      - ''
      - '    is_other = False'
      - '    if data_path.endswith(".jsonl"):'
      - '        replay_task_instances_path = create_task_instances_tmp_file('
      - '            [json.loads(x) for x in Path(data_path).read_text().splitlines(keepends=True)],'
      - '        )'
      - '    elif data_path.endswith(".json"):'
      - '        with open(data_path) as file:'
      - '            data = json.load(file)'
      - '        replay_task_instances_path = create_task_instances_tmp_file(data)'
      - '    else:'
      - '        # Assume data_path is a github url or local url'
      - '        is_other = True'
      - '        replay_task_instances_path = data_path'
      - ''
      - '    # Call run.py via subprocess'
      - '    run_args = ['
      - '        "--config_file",'
      - '        config_file,'
      - '        "--data_path",'
      - '        replay_task_instances_path,'
      - '        "--install_environment",'
      - '        "True",'
      - '        "--model_name",'
      - '        "replay",'
      - '        "--replay_path",'
      - '        replay_action_trajs_path,'
      - '        *forward_args,'
      - '    ]'
      - '    if is_other:'
      - '        # Not sure if this only applies to github urls for data_path'
      - '        run_args.extend(["--skip_existing", "False"])'
      - '    if suffix is not None:'
      - '        run_args.extend(["--suffix", suffix])'
      - '    script_args = runscript.get_args(run_args)'
      - '    runscript.main(script_args)'
      - ''
      - '    os.remove(replay_action_trajs_path)'
      - '    if not is_other:'
      - '        os.remove(replay_task_instances_path)'
    - end_line: 115
      name: main
      start_line: 107
      text:
      - def main(
      - '    traj_path: str,'
      - '    config_file: str,'
      - '    data_path: str,'
      - '    suffix: str,'
      - '    *,'
      - '    forward_args: list[str],'
      - '):'
      - '    process_single_traj(traj_path, config_file, data_path, suffix, forward_args=forward_args)'
    - end_line: 129
      name: get_args
      start_line: 118
      text:
      - 'def get_args(args=None):'
      - '    parser = ArgumentParser(description=__doc__)'
      - '    parser.add_argument("--traj_path", help="Path to trajectory to replay",
        required=True)'
      - '    parser.add_argument("--config_file", help="Path to template", required=True)'
      - '    parser.add_argument('
      - '        "--data_path",'
      - '        help="(Optional) Path to data file containing task instances ref''ed
        by replay trajectories",'
      - '        default=None,'
      - '    )'
      - '    parser.add_argument("--suffix", help="(Optional) Suffix argument appended
        to end of traj path", default=None)'
      - '    args, remaining_args = parser.parse_known_args(args=args)'
      - '    return args, remaining_args'
    - end_line: 64
      name: create_task_instances_tmp_file
      start_line: 55
      text:
      - '    def create_task_instances_tmp_file(data: list[dict[str, Any]]) -> str:'
      - '        """Helper function to create a temporary file to write task instances
        to.'
      - '        Returns path to the temporary file.'
      - '        """'
      - '        data = [d for d in data if d["instance_id"] == instance_id]'
      - '        tmp_path = instance_id + ".jsonl"'
      - '        with open(tmp_path, "w") as f:'
      - '            for d in data:'
      - '                print(json.dumps(d), file=f, end="\n", flush=True)'
      - '        return tmp_path'
    text:
    - '"""Replay a trajectory"""'
    - ''
    - from __future__ import annotations
    - ''
    - import json
    - import os
    - from argparse import ArgumentParser
    - from pathlib import Path
    - from typing import Any
    - ''
    - import yaml
    - ''
    - import run as runscript
    - ''
    - ''
    - 'def process_single_traj(traj_path: str, config_file: str, data_path: str, suffix:
      str, *, forward_args: list[str]):'
    - '    """'
    - ''
    - '    Args:'
    - '        traj_path (str): _description_'
    - '        config_file (str): _description_'
    - '        data_path (str): _description_'
    - '        suffix (str): _description_'
    - '        forward_args (List[str]): Passed to run.py'
    - ''
    - '    Raises:'
    - '        ValueError: Incorrect paths or other config issue'
    - ''
    - '    Returns:'
    - '        None'
    - '    """'
    - '    replay_action_trajs_path = "temp_replay.jsonl"'
    - ''
    - '    # Open trajectory file, extract responses as actions'
    - '    if traj_path.endswith(".yaml"):'
    - '        traj_data = dict()'
    - '        with open(traj_path) as f:'
    - '            traj_data["history"] = yaml.safe_load(f)'
    - '    else:'
    - '        with open(traj_path) as file:'
    - '            traj_data = json.load(file)'
    - '    actions = [x["content"] for x in traj_data["history"] if x["role"] == "assistant"]'
    - '    instance_id = traj_path.split("/")[-1].split(".")[0]'
    - '    with open(replay_action_trajs_path, "w") as f:'
    - '        print(json.dumps({instance_id: actions}), file=f, end="\n", flush=True)'
    - ''
    - '    # Get data_path from args.yaml'
    - '    if data_path is None:'
    - '        args_path = os.path.join(os.path.dirname(traj_path), "args.yaml")'
    - '        with open(args_path) as f:'
    - '            args = yaml.safe_load(f)'
    - '        data_path = args["environment"]["data_path"]'
    - ''
    - '    # Identify the relevant task instance and create it'
    - '    def create_task_instances_tmp_file(data: list[dict[str, Any]]) -> str:'
    - '        """Helper function to create a temporary file to write task instances
      to.'
    - '        Returns path to the temporary file.'
    - '        """'
    - '        data = [d for d in data if d["instance_id"] == instance_id]'
    - '        tmp_path = instance_id + ".jsonl"'
    - '        with open(tmp_path, "w") as f:'
    - '            for d in data:'
    - '                print(json.dumps(d), file=f, end="\n", flush=True)'
    - '        return tmp_path'
    - ''
    - '    is_other = False'
    - '    if data_path.endswith(".jsonl"):'
    - '        replay_task_instances_path = create_task_instances_tmp_file('
    - '            [json.loads(x) for x in Path(data_path).read_text().splitlines(keepends=True)],'
    - '        )'
    - '    elif data_path.endswith(".json"):'
    - '        with open(data_path) as file:'
    - '            data = json.load(file)'
    - '        replay_task_instances_path = create_task_instances_tmp_file(data)'
    - '    else:'
    - '        # Assume data_path is a github url or local url'
    - '        is_other = True'
    - '        replay_task_instances_path = data_path'
    - ''
    - '    # Call run.py via subprocess'
    - '    run_args = ['
    - '        "--config_file",'
    - '        config_file,'
    - '        "--data_path",'
    - '        replay_task_instances_path,'
    - '        "--install_environment",'
    - '        "True",'
    - '        "--model_name",'
    - '        "replay",'
    - '        "--replay_path",'
    - '        replay_action_trajs_path,'
    - '        *forward_args,'
    - '    ]'
    - '    if is_other:'
    - '        # Not sure if this only applies to github urls for data_path'
    - '        run_args.extend(["--skip_existing", "False"])'
    - '    if suffix is not None:'
    - '        run_args.extend(["--suffix", suffix])'
    - '    script_args = runscript.get_args(run_args)'
    - '    runscript.main(script_args)'
    - ''
    - '    os.remove(replay_action_trajs_path)'
    - '    if not is_other:'
    - '        os.remove(replay_task_instances_path)'
    - ''
    - ''
    - def main(
    - '    traj_path: str,'
    - '    config_file: str,'
    - '    data_path: str,'
    - '    suffix: str,'
    - '    *,'
    - '    forward_args: list[str],'
    - '):'
    - '    process_single_traj(traj_path, config_file, data_path, suffix, forward_args=forward_args)'
    - ''
    - ''
    - 'def get_args(args=None):'
    - '    parser = ArgumentParser(description=__doc__)'
    - '    parser.add_argument("--traj_path", help="Path to trajectory to replay",
      required=True)'
    - '    parser.add_argument("--config_file", help="Path to template", required=True)'
    - '    parser.add_argument('
    - '        "--data_path",'
    - '        help="(Optional) Path to data file containing task instances ref''ed
      by replay trajectories",'
    - '        default=None,'
    - '    )'
    - '    parser.add_argument("--suffix", help="(Optional) Suffix argument appended
      to end of traj path", default=None)'
    - '    args, remaining_args = parser.parse_known_args(args=args)'
    - '    return args, remaining_args'
    - ''
    - ''
    - 'if __name__ == "__main__":'
    - '    args, remaining_args = get_args()'
    - '    main(**vars(args), forward_args=remaining_args)'
  setup.sh: {}
  start_web_ui.sh: {}
  test.yml: {}
  web_api.log: {}
.aider.tags.cache.v3:
  cache.db: {}
  cache.db-shm: {}
  cache.db-wal: {}
.devcontainer:
  README.md: {}
  bashrc_epilog.sh: {}
  devcontainer.json: {}
  oncreate.sh: {}
  postcreate.sh: {}
  sample_keys.cfg: {}
.git:
  COMMIT_EDITMSG: {}
  FETCH_HEAD: {}
  HEAD: {}
  ORIG_HEAD: {}
  config: {}
  description: {}
  hooks:
    applypatch-msg.sample: {}
    commit-msg.sample: {}
    fsmonitor-watchman.sample: {}
    post-update.sample: {}
    pre-applypatch.sample: {}
    pre-commit.sample: {}
    pre-merge-commit.sample: {}
    pre-push.sample: {}
    pre-rebase.sample: {}
    pre-receive.sample: {}
    prepare-commit-msg.sample: {}
    push-to-checkout.sample: {}
    update.sample: {}
  index: {}
  info:
    exclude: {}
  logs:
    HEAD: {}
    refs:
      heads:
        main: {}
      remotes:
        origin:
          main: {}
        upstream:
          327-copy-patch-button-should-appear-next-to-patch-submission: {}
          HEAD: {}
          add-codecov: {}
          add-dockerhub-release: {}
          add-formatter: {}
          add-leetcode-tutoria: {}
          checkboxes-pitch-draft: {}
          codespace-fix-activate-condanev: {}
          config-file-required: {}
          filemap: {}
          fix-get-signature-parse-command: {}
          fix-obsolete-push-gh-repo-url: {}
          fix-replay-gh-issues: {}
          fix-unbound-var-in-error-handling: {}
          format-new: {}
          gh-pages: {}
          improve-edit-lines: {}
          improve-history-processor: {}
          klieret-dev: {}
          klieret-patch-1: {}
          klieret-patch-3: {}
          main: {}
          multiarch-manifest: {}
          optional-github-token: {}
          pre-commit-ci-update-config: {}
          search-fix: {}
          speedup-abort-condition: {}
          swe-env-timing-tests: {}
          test-fully-containerized-run: {}
          typing-fixes: {}
  objects:
    '07':
      25b7fea1ae6c97c6817de3319dd20b3c8b4a2b: {}
    '17':
      3f4428570717dc9ade1c93a2860f53b00bb91e: {}
      f4e76e85435795238c70ebc493c88c8213e5f1: {}
    1d:
      0cf1a7ebf0df189c82bc4eac50fef23adc221c: {}
    '21':
      e38728c59b3e44bbf2725620c8a0611eea093f: {}
    '22':
      e05cd242d7185972ba6f63749147a7b0a45190: {}
    '29':
      873568c9e05b366de908a416e49ba96d984fd5: {}
    2d:
      8da39f436c68f9ad5c92b015c4b72cfa39c872: {}
    2f:
      c2c857fb81405aa1d6fd64b00edd479e3a5462: {}
    '35':
      5397ac2ab382add7944de430125de1003f625f: {}
    '40':
      d01353cfc1e01feb57b78754224b262fdd2777: {}
    4a:
      f6c9faf1b72faedb51942a6720e2241ec5fa95: {}
    4b:
      7f28a99440b36cc3b5556ae05090ed46b4e2cb: {}
    '58':
      0c45ce54d30b486c89c5307d95591db6af2c36: {}
    '63':
      2229108588d83b8e6f80eb43c160b8dd1acddd: {}
    '65':
      62b578d5e5a8550b023d775667aa3d504bf132: {}
    6a:
      5d42f26dd97f81e056d4e06e5f9d22cccbddf5: {}
    6c:
      d08d28795d5c9730a0c33f7655c8597bc76574: {}
    6e:
      a058fb6082d3f8c13972445c98e0f5757e194f: {}
    '72':
      7499144645cf655a4f866d85a76a5c32841504: {}
    '73':
      063478e93dccd6fb73e733a66d45a0c5e14078: {}
    '74':
      18888e1048dcbd515aa4bd01eb7cc458b4665e: {}
    7c:
      d5e95c72d5bb09efafe307b0d30e869e9f58d8: {}
    7e:
      194617bb0879f15e692f0bdb545acbea734f17: {}
      e866ef9df77f3e17da22fea97ad23680a281c0: {}
    '86':
      cba44c3b4e91140b828764bed8e8679aa46fbc: {}
    8c:
      217a7201dbca6181352723e52632ba7143ccbf: {}
    '94':
      9491d894804e653e2ee1d1b19e6f2f0f6255a3: {}
    '95':
      22ae7c37e37fb3dddb673872def1bb8c7c6e11: {}
      b9e63782d6a6c5a0f69596a1e0acb7ee38e9b6: {}
    9f:
      b08fe7eec8d879c898f9504514cfe1d1a440a8: {}
    a0:
      94200e7fae0e0ff12a27e2ef1a8d86ab6b7351: {}
    a2:
      75ea421490e02b2fb053b5dfaac3b6cac2364f: {}
    a6:
      9f8586ccda0ffe39ce1301bdcd5c10398b327e: {}
    b1:
      9828a2a006c7239afa70d77ef3f48d33217e6d: {}
    b4:
      0a4a710b15d025c05c9577b0d804ab38c7fd3e: {}
    b5:
      d7ae38d0179d27ddef8b163c8b34400505378e: {}
    b9:
      51c27fd1c65ca3b1e1ef488a250037b3e3d4f1: {}
    bf:
      8a712a3456d7dcec40156d35ab329a38556ada: {}
    d1:
      31cd7f12a22d925c27f5cf2467d751c6d97d9c: {}
    e6:
      526bb593b8080ae718a3915e1168deed6e1cdf: {}
    ea:
      92863fda73e39b5e8db8ac826fba7d048abcf1: {}
    ee:
      9397a9d3be9711a50002f67593c5b2dc9b8fb8: {}
    f5:
      d3492da1aeb74c8a658d357a66127b3a494166: {}
    f7:
      c7a24ad6f92d0a6933aa3e98e6a6285ab41c6d: {}
    f8:
      f0dc94c5392f9ff9b1f4ce4a36e67a025c57e6: {}
    fb:
      a8eabcf79df7a0d6987cfdf60af7b89642f5db: {}
    fe:
      28fa483ff82fc6001449244c87d1c32eaef06e: {}
      cb273fedca8227150ecd25c17dc6ad0837c173: {}
    ff:
      c8e11308822f2f701c7f21212810054ad493e1: {}
    info: {}
    pack:
      pack-6415b47c9613ee37bb0d9aa2f299a0d4cafb072b.idx: {}
      pack-6415b47c9613ee37bb0d9aa2f299a0d4cafb072b.pack: {}
  packed-refs: {}
  refs:
    heads:
      main: {}
    remotes:
      origin:
        main: {}
      upstream:
        327-copy-patch-button-should-appear-next-to-patch-submission: {}
        HEAD: {}
        add-codecov: {}
        add-dockerhub-release: {}
        add-formatter: {}
        add-leetcode-tutoria: {}
        checkboxes-pitch-draft: {}
        codespace-fix-activate-condanev: {}
        config-file-required: {}
        filemap: {}
        fix-get-signature-parse-command: {}
        fix-obsolete-push-gh-repo-url: {}
        fix-replay-gh-issues: {}
        fix-unbound-var-in-error-handling: {}
        format-new: {}
        gh-pages: {}
        improve-edit-lines: {}
        improve-history-processor: {}
        klieret-dev: {}
        klieret-patch-1: {}
        klieret-patch-3: {}
        main: {}
        multiarch-manifest: {}
        optional-github-token: {}
        pre-commit-ci-update-config: {}
        search-fix: {}
        speedup-abort-condition: {}
        swe-env-timing-tests: {}
        test-fully-containerized-run: {}
        typing-fixes: {}
    tags: {}
.github:
  ISSUE_TEMPLATE:
    bug_report.yml: {}
    config.yml: {}
    feature_request.yml: {}
    question.yml: {}
  PULL_REQUEST_TEMPLATE.md: {}
  workflows:
    build-docs.yaml: {}
    check-links.yaml: {}
    pytest.yaml: {}
    release-dockerhub-nightly.yaml: {}
    release-dockerhub-release.yaml: {}
    test_build_containers.yaml: {}
__pycache__:
  run.cpython-39.pyc: {}
assets:
  doc-scrot.png: {}
  results+preview.png: {}
  swe-agent-banner.png: {}
  swe-agent-hand.png: {}
config:
  README.md: {}
  coding_challenge.yaml: {}
  commands:
    README.md: {}
    _retriever.py:
      classes:
      - end_line: 16
        methods:
        - end_line: 10
          name: get_files
          start_line: 9
          text:
          - '    def get_files(self):'
          - '        ...'
        - end_line: 13
          name: get_class_func
          start_line: 12
          text:
          - '    def get_class_func(self):'
          - '        ...'
        - end_line: 16
          name: get_lines
          start_line: 15
          text:
          - '    def get_lines(self):'
          - '        ...'
        name: Tree
        start_line: 8
        text:
        - 'class Tree:'
        - '    def get_files(self):'
        - '        ...'
        - ''
        - '    def get_class_func(self):'
        - '        ...'
        - ''
        - '    def get_lines(self):'
        - '        ...'
      - end_line: 76
        methods:
        - end_line: 31
          name: __init__
          start_line: 21
          text:
          - '    def __init__(self, docs: list[str], search_level: str):'
          - '        self.search_level = search_level'
          - '        self.D = len(docs)'
          - '        self.avg_len = sum([len(doc) + 0.0 for doc in docs]) / self.D'
          - '        self.docs = docs'
          - "        self.f = []  # Each element of the list is a dictionary, and\
            \ the dictionary stores the occurrence count of each word in a document\
            \ \u5217\u8868\u7684\u6BCF\u4E00\u4E2A\u5143\u7D20\u662F\u4E00\u4E2Adict\uFF0C\
            dict\u5B58\u50A8\u7740\u4E00\u4E2A\u6587\u6863\u4E2D\u6BCF\u4E2A\u8BCD\
            \u7684\u51FA\u73B0\u6B21\u6570"
          - "        self.df = {}  # Store each word and the number of documents in\
            \ which the word appears. \u5B58\u50A8\u6BCF\u4E2A\u8BCD\u53CA\u51FA\u73B0\
            \u4E86\u8BE5\u8BCD\u7684\u6587\u6863\u6570\u91CF"
          - "        self.idf = {}  # \u5B58\u50A8\u6BCF\u4E2A\u8BCD\u7684idf\u503C"
          - '        self.k1 = 1.5'
          - '        self.b = 0.75'
          - '        self.init()'
        - end_line: 43
          name: init
          start_line: 33
          text:
          - '    def init(self):'
          - '        for doc in self.docs:'
          - '            doc = doc.lower().split()'
          - '            tmp = {}'
          - '            for word in doc:'
          - "                tmp[word] = tmp.get(word, 0) + 1  # \u5B58\u50A8\u6BCF\
            \u4E2A\u6587\u6863\u4E2D\u6BCF\u4E2A\u8BCD\u7684\u51FA\u73B0\u6B21\u6570"
          - '            self.f.append(tmp)'
          - '            for k in tmp.keys():'
          - '                self.df[k] = self.df.get(k, 0) + 1'
          - '        for k, v in self.df.items():'
          - '            self.idf[k] = math.log(self.D - v + 0.5) - math.log(v + 0.5)'
        - end_line: 54
          name: sim
          start_line: 46
          text:
          - '    def sim(self, doc, index):'
          - '        score = 0'
          - '        for word in doc:'
          - '            if word not in self.f[index]:'
          - '                continue'
          - '            d = len(self.docs[index])'
          - '            score += (self.idf[word] * self.f[index][word] * (self.k1
            + 1)'
          - '                      / (self.f[index][word] + self.k1 * (1 - self.b
            + self.b * d / self.avg_len)))'
          - '        return score'
        - end_line: 61
          name: compute_scores
          start_line: 56
          text:
          - '    def compute_scores(self, keywords: list[str]):'
          - '        scores = []'
          - '        for i in range(self.D):'
          - '            score = self.sim(keywords, i)'
          - '            scores.append(score)'
          - '        return scores'
        - end_line: 71
          name: retrieve
          start_line: 63
          text:
          - '    def retrieve(self, keywords, files):'
          - '        # Implementing BM25 implementation logic '
          - ''
          - '        results = self.rough_sort(keywords, files , 5)'
          - ''
          - '        for doc in self.documents:'
          - '            if query.lower() in doc["text"].lower():'
          - '                results.append(doc["doc_id"])'
          - '        return results'
        - end_line: 76
          name: rough_sort
          start_line: 73
          text:
          - '    def rough_sort(self, keywords: list[str], answers: list[str], top_k=100)
            -> list[str]:'
          - '        scores = self.compute_scores(keywords)'
          - '        top_k_idx = np.array(scores).argsort()[-top_k:][::-1]'
          - '        return [answers[idx] for idx in top_k_idx]'
        name: BM25Retriever
        start_line: 20
        text:
        - 'class BM25Retriever:'
        - '    def __init__(self, docs: list[str], search_level: str):'
        - '        self.search_level = search_level'
        - '        self.D = len(docs)'
        - '        self.avg_len = sum([len(doc) + 0.0 for doc in docs]) / self.D'
        - '        self.docs = docs'
        - "        self.f = []  # Each element of the list is a dictionary, and the\
          \ dictionary stores the occurrence count of each word in a document \u5217\
          \u8868\u7684\u6BCF\u4E00\u4E2A\u5143\u7D20\u662F\u4E00\u4E2Adict\uFF0Cdict\u5B58\
          \u50A8\u7740\u4E00\u4E2A\u6587\u6863\u4E2D\u6BCF\u4E2A\u8BCD\u7684\u51FA\
          \u73B0\u6B21\u6570"
        - "        self.df = {}  # Store each word and the number of documents in\
          \ which the word appears. \u5B58\u50A8\u6BCF\u4E2A\u8BCD\u53CA\u51FA\u73B0\
          \u4E86\u8BE5\u8BCD\u7684\u6587\u6863\u6570\u91CF"
        - "        self.idf = {}  # \u5B58\u50A8\u6BCF\u4E2A\u8BCD\u7684idf\u503C"
        - '        self.k1 = 1.5'
        - '        self.b = 0.75'
        - '        self.init()'
        - '    '
        - '    def init(self):'
        - '        for doc in self.docs:'
        - '            doc = doc.lower().split()'
        - '            tmp = {}'
        - '            for word in doc:'
        - "                tmp[word] = tmp.get(word, 0) + 1  # \u5B58\u50A8\u6BCF\u4E2A\
          \u6587\u6863\u4E2D\u6BCF\u4E2A\u8BCD\u7684\u51FA\u73B0\u6B21\u6570"
        - '            self.f.append(tmp)'
        - '            for k in tmp.keys():'
        - '                self.df[k] = self.df.get(k, 0) + 1'
        - '        for k, v in self.df.items():'
        - '            self.idf[k] = math.log(self.D - v + 0.5) - math.log(v + 0.5)'
        - ''
        - '        '
        - '    def sim(self, doc, index):'
        - '        score = 0'
        - '        for word in doc:'
        - '            if word not in self.f[index]:'
        - '                continue'
        - '            d = len(self.docs[index])'
        - '            score += (self.idf[word] * self.f[index][word] * (self.k1 +
          1)'
        - '                      / (self.f[index][word] + self.k1 * (1 - self.b +
          self.b * d / self.avg_len)))'
        - '        return score'
        - ''
        - '    def compute_scores(self, keywords: list[str]):'
        - '        scores = []'
        - '        for i in range(self.D):'
        - '            score = self.sim(keywords, i)'
        - '            scores.append(score)'
        - '        return scores'
        - ''
        - '    def retrieve(self, keywords, files):'
        - '        # Implementing BM25 implementation logic '
        - ''
        - '        results = self.rough_sort(keywords, files , 5)'
        - ''
        - '        for doc in self.documents:'
        - '            if query.lower() in doc["text"].lower():'
        - '                results.append(doc["doc_id"])'
        - '        return results'
        - '    '
        - '    def rough_sort(self, keywords: list[str], answers: list[str], top_k=100)
          -> list[str]:'
        - '        scores = self.compute_scores(keywords)'
        - '        top_k_idx = np.array(scores).argsort()[-top_k:][::-1]'
        - '        return [answers[idx] for idx in top_k_idx]'
      functions:
      - end_line: 84
        name: main
        start_line: 78
        text:
        - 'def main(search_level: str, query: str):'
        - '    retriever = BM25Retriever(search_level)'
        - '    query = query.lower().split()'
        - ''
        - '    results = retriever.retrieve(query)'
        - '    for result in results:'
        - '        print(result)'
      text:
      - ''
      - import math
      - import numpy as np
      - import sys
      - from typing import list
      - ''
      - ''
      - 'class Tree:'
      - '    def get_files(self):'
      - '        ...'
      - ''
      - '    def get_class_func(self):'
      - '        ...'
      - ''
      - '    def get_lines(self):'
      - '        ...'
      - ''
      - ''
      - ''
      - 'class BM25Retriever:'
      - '    def __init__(self, docs: list[str], search_level: str):'
      - '        self.search_level = search_level'
      - '        self.D = len(docs)'
      - '        self.avg_len = sum([len(doc) + 0.0 for doc in docs]) / self.D'
      - '        self.docs = docs'
      - "        self.f = []  # Each element of the list is a dictionary, and the\
        \ dictionary stores the occurrence count of each word in a document \u5217\
        \u8868\u7684\u6BCF\u4E00\u4E2A\u5143\u7D20\u662F\u4E00\u4E2Adict\uFF0Cdict\u5B58\
        \u50A8\u7740\u4E00\u4E2A\u6587\u6863\u4E2D\u6BCF\u4E2A\u8BCD\u7684\u51FA\u73B0\
        \u6B21\u6570"
      - "        self.df = {}  # Store each word and the number of documents in which\
        \ the word appears. \u5B58\u50A8\u6BCF\u4E2A\u8BCD\u53CA\u51FA\u73B0\u4E86\
        \u8BE5\u8BCD\u7684\u6587\u6863\u6570\u91CF"
      - "        self.idf = {}  # \u5B58\u50A8\u6BCF\u4E2A\u8BCD\u7684idf\u503C"
      - '        self.k1 = 1.5'
      - '        self.b = 0.75'
      - '        self.init()'
      - '    '
      - '    def init(self):'
      - '        for doc in self.docs:'
      - '            doc = doc.lower().split()'
      - '            tmp = {}'
      - '            for word in doc:'
      - "                tmp[word] = tmp.get(word, 0) + 1  # \u5B58\u50A8\u6BCF\u4E2A\
        \u6587\u6863\u4E2D\u6BCF\u4E2A\u8BCD\u7684\u51FA\u73B0\u6B21\u6570"
      - '            self.f.append(tmp)'
      - '            for k in tmp.keys():'
      - '                self.df[k] = self.df.get(k, 0) + 1'
      - '        for k, v in self.df.items():'
      - '            self.idf[k] = math.log(self.D - v + 0.5) - math.log(v + 0.5)'
      - ''
      - '        '
      - '    def sim(self, doc, index):'
      - '        score = 0'
      - '        for word in doc:'
      - '            if word not in self.f[index]:'
      - '                continue'
      - '            d = len(self.docs[index])'
      - '            score += (self.idf[word] * self.f[index][word] * (self.k1 + 1)'
      - '                      / (self.f[index][word] + self.k1 * (1 - self.b + self.b
        * d / self.avg_len)))'
      - '        return score'
      - ''
      - '    def compute_scores(self, keywords: list[str]):'
      - '        scores = []'
      - '        for i in range(self.D):'
      - '            score = self.sim(keywords, i)'
      - '            scores.append(score)'
      - '        return scores'
      - ''
      - '    def retrieve(self, keywords, files):'
      - '        # Implementing BM25 implementation logic '
      - ''
      - '        results = self.rough_sort(keywords, files , 5)'
      - ''
      - '        for doc in self.documents:'
      - '            if query.lower() in doc["text"].lower():'
      - '                results.append(doc["doc_id"])'
      - '        return results'
      - '    '
      - '    def rough_sort(self, keywords: list[str], answers: list[str], top_k=100)
        -> list[str]:'
      - '        scores = self.compute_scores(keywords)'
      - '        top_k_idx = np.array(scores).argsort()[-top_k:][::-1]'
      - '        return [answers[idx] for idx in top_k_idx]'
      - ''
      - 'def main(search_level: str, query: str):'
      - '    retriever = BM25Retriever(search_level)'
      - '    query = query.lower().split()'
      - ''
      - '    results = retriever.retrieve(query)'
      - '    for result in results:'
      - '        print(result)'
      - ''
      - 'if __name__ == "__main__":'
      - '    if len(sys.argv) != 3:'
      - '        print("Usage: python _retriever.py <keywords> <topn>")'
      - '        sys.exit(1)'
      - '    '
      - '    search_level = sys.argv[1]'
      - '    query = sys.argv[2]'
      - '    main(search_level, query)'
      - ''
      - ''
    _split_string.py:
      classes:
      - end_line: 37
        methods:
        - end_line: 37
          name: from_line
          start_line: 34
          text:
          - '    def from_line(cls, line: str):'
          - '        prefix, _sep, problem = line.partition(": ")'
          - '        filename, line_number, col_number = prefix.split(":")'
          - '        return cls(filename, int(line_number), int(col_number), problem)'
        name: Flake8Error
        start_line: 25
        text:
        - 'class Flake8Error:'
        - '    """A class to represent a single flake8 error"""'
        - ''
        - '    filename: str'
        - '    line_number: int'
        - '    col_number: int'
        - '    problem: str'
        - ''
        - '    @classmethod'
        - '    def from_line(cls, line: str):'
        - '        prefix, _sep, problem = line.partition(": ")'
        - '        filename, line_number, col_number = prefix.split(":")'
        - '        return cls(filename, int(line_number), int(col_number), problem)'
      functions:
      - end_line: 70
        name: _update_previous_errors
        start_line: 40
        text:
        - def _update_previous_errors(
        - '    previous_errors: List[Flake8Error], replacement_window: Tuple[int,
          int], replacement_n_lines: int'
        - ') -> List[Flake8Error]:'
        - '    """Update the line numbers of the previous errors to what they would
          be after the edit window.'
        - '    This is a helper function for `_filter_previous_errors`.'
        - ''
        - '    All previous errors that are inside of the edit window should not be
          ignored,'
        - '    so they are removed from the previous errors list.'
        - ''
        - '    Args:'
        - '        previous_errors: list of errors with old line numbers'
        - '        replacement_window: the window of the edit/lines that will be replaced'
        - '        replacement_n_lines: the number of lines that will be used to replace
          the text'
        - ''
        - '    Returns:'
        - '        list of errors with updated line numbers'
        - '    """'
        - '    updated = []'
        - '    lines_added = replacement_n_lines - (replacement_window[1] - replacement_window[0]
          + 1)'
        - '    for error in previous_errors:'
        - '        if error.line_number < replacement_window[0]:'
        - '            # no need to adjust the line number'
        - '            updated.append(error)'
        - '            continue'
        - '        if replacement_window[0] <= error.line_number <= replacement_window[1]:'
        - '            # The error is within the edit window, so let''s not ignore
          it'
        - '            # either way (we wouldn''t know how to adjust the line number
          anyway)'
        - '            continue'
        - '        # We''re out of the edit window, so we need to adjust the line
          number'
        - '        updated.append(Flake8Error(error.filename, error.line_number +
          lines_added, error.col_number, error.problem))'
        - '    return updated'
      - end_line: 108
        name: format_flake8_output
        start_line: 73
        text:
        - def format_flake8_output(
        - '    input_string: str,'
        - '    show_line_numbers: bool = False,'
        - '    *,'
        - '    previous_errors_string: str = "",'
        - '    replacement_window: Optional[Tuple[int, int]] = None,'
        - '    replacement_n_lines: Optional[int] = None,'
        - ') -> str:'
        - '    """Filter flake8 output for previous errors and print it for a given
          file.'
        - ''
        - '    Args:'
        - '        input_string: The flake8 output as a string'
        - '        show_line_numbers: Whether to show line numbers in the output'
        - '        previous_errors_string: The previous errors as a string'
        - '        replacement_window: The window of the edit (lines that will be
          replaced)'
        - '        replacement_n_lines: The number of lines used to replace the text'
        - ''
        - '    Returns:'
        - '        The filtered flake8 output as a string'
        - '    """'
        - '    errors = [Flake8Error.from_line(line.strip()) for line in input_string.split("\n")
          if line.strip()]'
        - '    lines = []'
        - '    if previous_errors_string:'
        - '        assert replacement_window is not None'
        - '        assert replacement_n_lines is not None'
        - '        previous_errors = ['
        - '            Flake8Error.from_line(line.strip()) for line in previous_errors_string.split("\n")
          if line.strip()'
        - '        ]'
        - '        previous_errors = _update_previous_errors(previous_errors, replacement_window,
          replacement_n_lines)'
        - '        errors = [error for error in errors if error not in previous_errors]'
        - '    for error in errors:'
        - '        if not show_line_numbers:'
        - '            lines.append(f"- {error.problem}")'
        - '        else:'
        - '            lines.append(f"- {error.line_number}:{error.col_number} {error.problem}")'
        - '    return "\n".join(lines)'
      text:
      - '#!/usr/bin/env python3'
      - ''
      - '"""This helper command is used to print flake8 output'
      - ''
      - 'Usage:'
      - '    python _split_string.py <flake8_output>'
      - '    python _split_string.py <flake8_output> <previous_errors> <edit_window_start>
        <edit_window_end> <n_lines>'
      - ''
      - 'Where:'
      - '    <flake8_output> is the output of flake8'
      - '    <previous_errors> is the previous errors as a string'
      - '    <edit_window_start> is the start of the edit window'
      - '    <edit_window_end> is the end of the edit window'
      - '    <n_lines> is the number of lines added in the edit'
      - '"""'
      - ''
      - '# ruff: noqa: UP007 UP006 UP035'
      - ''
      - import sys
      - from dataclasses import dataclass
      - from typing import List, Optional, Tuple
      - ''
      - ''
      - '@dataclass'
      - 'class Flake8Error:'
      - '    """A class to represent a single flake8 error"""'
      - ''
      - '    filename: str'
      - '    line_number: int'
      - '    col_number: int'
      - '    problem: str'
      - ''
      - '    @classmethod'
      - '    def from_line(cls, line: str):'
      - '        prefix, _sep, problem = line.partition(": ")'
      - '        filename, line_number, col_number = prefix.split(":")'
      - '        return cls(filename, int(line_number), int(col_number), problem)'
      - ''
      - ''
      - def _update_previous_errors(
      - '    previous_errors: List[Flake8Error], replacement_window: Tuple[int, int],
        replacement_n_lines: int'
      - ') -> List[Flake8Error]:'
      - '    """Update the line numbers of the previous errors to what they would
        be after the edit window.'
      - '    This is a helper function for `_filter_previous_errors`.'
      - ''
      - '    All previous errors that are inside of the edit window should not be
        ignored,'
      - '    so they are removed from the previous errors list.'
      - ''
      - '    Args:'
      - '        previous_errors: list of errors with old line numbers'
      - '        replacement_window: the window of the edit/lines that will be replaced'
      - '        replacement_n_lines: the number of lines that will be used to replace
        the text'
      - ''
      - '    Returns:'
      - '        list of errors with updated line numbers'
      - '    """'
      - '    updated = []'
      - '    lines_added = replacement_n_lines - (replacement_window[1] - replacement_window[0]
        + 1)'
      - '    for error in previous_errors:'
      - '        if error.line_number < replacement_window[0]:'
      - '            # no need to adjust the line number'
      - '            updated.append(error)'
      - '            continue'
      - '        if replacement_window[0] <= error.line_number <= replacement_window[1]:'
      - '            # The error is within the edit window, so let''s not ignore it'
      - '            # either way (we wouldn''t know how to adjust the line number
        anyway)'
      - '            continue'
      - '        # We''re out of the edit window, so we need to adjust the line number'
      - '        updated.append(Flake8Error(error.filename, error.line_number + lines_added,
        error.col_number, error.problem))'
      - '    return updated'
      - ''
      - ''
      - def format_flake8_output(
      - '    input_string: str,'
      - '    show_line_numbers: bool = False,'
      - '    *,'
      - '    previous_errors_string: str = "",'
      - '    replacement_window: Optional[Tuple[int, int]] = None,'
      - '    replacement_n_lines: Optional[int] = None,'
      - ') -> str:'
      - '    """Filter flake8 output for previous errors and print it for a given
        file.'
      - ''
      - '    Args:'
      - '        input_string: The flake8 output as a string'
      - '        show_line_numbers: Whether to show line numbers in the output'
      - '        previous_errors_string: The previous errors as a string'
      - '        replacement_window: The window of the edit (lines that will be replaced)'
      - '        replacement_n_lines: The number of lines used to replace the text'
      - ''
      - '    Returns:'
      - '        The filtered flake8 output as a string'
      - '    """'
      - '    errors = [Flake8Error.from_line(line.strip()) for line in input_string.split("\n")
        if line.strip()]'
      - '    lines = []'
      - '    if previous_errors_string:'
      - '        assert replacement_window is not None'
      - '        assert replacement_n_lines is not None'
      - '        previous_errors = ['
      - '            Flake8Error.from_line(line.strip()) for line in previous_errors_string.split("\n")
        if line.strip()'
      - '        ]'
      - '        previous_errors = _update_previous_errors(previous_errors, replacement_window,
        replacement_n_lines)'
      - '        errors = [error for error in errors if error not in previous_errors]'
      - '    for error in errors:'
      - '        if not show_line_numbers:'
      - '            lines.append(f"- {error.problem}")'
      - '        else:'
      - '            lines.append(f"- {error.line_number}:{error.col_number} {error.problem}")'
      - '    return "\n".join(lines)'
      - ''
      - ''
      - 'if __name__ == "__main__":'
      - '    if len(sys.argv) == 2:'
      - '        print(format_flake8_output(sys.argv[1]))'
      - '    elif len(sys.argv) == 6:'
      - '        window = (int(sys.argv[3]), int(sys.argv[4]))'
      - '        n_lines = int(sys.argv[5])'
      - '        print('
      - '            format_flake8_output('
      - '                sys.argv[1], previous_errors_string=sys.argv[2], replacement_window=window,
        replacement_n_lines=n_lines'
      - '            )'
      - '        )'
      - '    else:'
      - '        msg = "Invalid number of arguments. Must be 1 or 5."'
      - '        raise ValueError(msg)'
    cursors_defaults.sh: {}
    cursors_edit_linting.sh: {}
    defaults.sh: {}
    edit_linting.sh: {}
    filemap.py:
      classes: []
      functions: []
      text:
      - '#!/root/miniconda3/bin/python'
      - ''
      - '# @yaml'
      - '# signature: filemap <file_path>'
      - '# docstring: Print the contents of a Python file, skipping lengthy function
        and method definitions.'
      - '# arguments:'
      - '#   file_path:'
      - '#       type: file path'
      - '#       description: The path to the file to be read'
      - '#       required: true'
      - ''
      - import argparse
      - import warnings
      - ''
      - '# tree_sitter is throwing a FutureWarning'
      - warnings.simplefilter("ignore", category=FutureWarning)
      - from tree_sitter_languages import get_language, get_parser
      - ''
      - parser = argparse.ArgumentParser(
      - '    description="Print the contents of a Python file, skipping lengthy function
        and method definitions."'
      - )
      - parser.add_argument("file_path", type=str, help="The path to the file to be
        read")
      - args = parser.parse_args()
      - ''
      - '# We assume that all input files are Python.'
      - parser = get_parser("python")
      - language = get_language("python")
      - file_contents = open(args.file_path).read()
      - ''
      - '# We assume that files are utf8 encoded.'
      - tree = parser.parse(bytes(file_contents, "utf8"))
      - ''
      - '# See https://tree-sitter.github.io/tree-sitter/using-parsers#pattern-matching-with-queries.'
      - query = language.query("""
      - (function_definition
      - '  body: (_) @body)'
      - '""")'
      - ''
      - '# TODO: consider special casing docstrings such that they are not elided.
        This'
      - '# could be accomplished by checking whether `body.text.decode(''utf8'')`
        starts'
      - '# with `"""` or `''''''`.'
      - elide_line_ranges = [
      - '    (node.start_point[0], node.end_point[0])'
      - '    for node, _ in query.captures(tree.root_node)'
      - '    # Only elide if it''s sufficiently long'
      - '    if node.end_point[0] - node.start_point[0] >= 5'
      - ']'
      - '# Note that tree-sitter line numbers are 0-indexed, but we display 1-indexed.'
      - elide_lines = {line for start, end in elide_line_ranges for line in range(start,
        end + 1)}
      - elide_messages = [(start, f"... eliding lines {start+1}-{end+1} ...") for
        start, end in elide_line_ranges]
      - for i, line in sorted(
      - '    elide_messages + [(i, line) for i, line in enumerate(file_contents.splitlines())
        if i not in elide_lines]'
      - '):'
      - '    print(f"{i+1:6d} {line}")'
    find.sh: {}
    get_repo_structure.py:
      classes: []
      functions:
      - end_line: 39
        name: checkout_commit
        start_line: 25
        text:
        - 'def checkout_commit(repo_path, commit_id):'
        - '    """Checkout the specified commit in the given local git repository.'
        - '    :param repo_path: Path to the local git repository'
        - '    :param commit_id: Commit ID to checkout'
        - '    :return: None'
        - '    """'
        - '    try:'
        - '        # Change directory to the provided repository path and checkout
          the specified commit'
        - '        print(f"Checking out commit {commit_id} in repository at {repo_path}...")'
        - '        subprocess.run(["git", "-C", repo_path, "checkout", commit_id],
          check=True)'
        - '        print("Commit checked out successfully.")'
        - '    except subprocess.CalledProcessError as e:'
        - '        print(f"An error occurred while running git command: {e}")'
        - '    except Exception as e:'
        - '        print(f"An unexpected error occurred: {e}")'
      - end_line: 61
        name: clone_repo
        start_line: 42
        text:
        - 'def clone_repo(repo_name, repo_playground):'
        - '    try:'
        - ''
        - '        print('
        - '            f"Cloning repository from https://github.com/{repo_name}.git
          to {repo_playground}/{repo_to_top_folder[repo_name]}..."'
        - '        )'
        - '        subprocess.run('
        - '            ['
        - '                "git",'
        - '                "clone",'
        - '                f"https://github.com/{repo_name}.git",'
        - '                f"{repo_playground}/{repo_to_top_folder[repo_name]}",'
        - '            ],'
        - '            check=True,'
        - '        )'
        - '        print("Repository cloned successfully.")'
        - '    except subprocess.CalledProcessError as e:'
        - '        print(f"An error occurred while running git command: {e}")'
        - '    except Exception as e:'
        - '        print(f"An unexpected error occurred: {e}")'
      - end_line: 90
        name: get_project_structure_from_scratch
        start_line: 64
        text:
        - def get_project_structure_from_scratch(
        - '    repo_name, commit_id, instance_id, repo_playground'
        - '):'
        - ''
        - '    # Generate a temperary folder and add uuid to avoid collision'
        - '    repo_playground = os.path.join(repo_playground, str(uuid.uuid4()))'
        - ''
        - '    # assert playground doesn''t exist'
        - '    assert not os.path.exists(repo_playground), f"{repo_playground} already
          exists"'
        - ''
        - '    # create playground'
        - '    os.makedirs(repo_playground)'
        - ''
        - '    clone_repo(repo_name, repo_playground)'
        - '    checkout_commit(f"{repo_playground}/{repo_to_top_folder[repo_name]}",
          commit_id)'
        - '    structure = create_structure(f"{repo_playground}/{repo_to_top_folder[repo_name]}")'
        - '    # clean up'
        - '    subprocess.run('
        - '        ["rm", "-rf", f"{repo_playground}/{repo_to_top_folder[repo_name]}"],
          check=True'
        - '    )'
        - '    d = {'
        - '        "repo": repo_name,'
        - '        "base_commit": commit_id,'
        - '        "structure": structure,'
        - '        "instance_id": instance_id,'
        - '    }'
        - '    return d'
      - end_line: 159
        name: parse_python_file
        start_line: 93
        text:
        - 'def parse_python_file(file_path, file_content=None):'
        - '    """Parse a Python file to extract class and function definitions with
          their line numbers.'
        - '    :param file_path: Path to the Python file.'
        - '    :return: Class names, function names, and file contents'
        - '    """'
        - '    if file_content is None:'
        - '        try:'
        - '            with open(file_path, "r") as file:'
        - '                file_content = file.read()'
        - '                parsed_data = ast.parse(file_content)'
        - '        except Exception as e:  # Catch all types of exceptions'
        - '            print(f"Error in file {file_path}: {e}")'
        - '            return [], [], ""'
        - '    else:'
        - '        try:'
        - '            parsed_data = ast.parse(file_content)'
        - '        except Exception as e:  # Catch all types of exceptions'
        - '            print(f"Error in file {file_path}: {e}")'
        - '            return [], [], ""'
        - ''
        - '    class_info = []'
        - '    function_names = []'
        - '    class_methods = set()'
        - ''
        - '    for node in ast.walk(parsed_data):'
        - '        if isinstance(node, ast.ClassDef):'
        - '            methods = []'
        - '            for n in node.body:'
        - '                if isinstance(n, ast.FunctionDef):'
        - '                    methods.append('
        - '                        {'
        - '                            "name": n.name,'
        - '                            "start_line": n.lineno,'
        - '                            "end_line": n.end_lineno,'
        - '                            "text": file_content.splitlines()['
        - '                                n.lineno - 1 : n.end_lineno'
        - '                            ],'
        - '                        }'
        - '                    )'
        - '                    class_methods.add(n.name)'
        - '            class_info.append('
        - '                {'
        - '                    "name": node.name,'
        - '                    "start_line": node.lineno,'
        - '                    "end_line": node.end_lineno,'
        - '                    "text": file_content.splitlines()['
        - '                        node.lineno - 1 : node.end_lineno'
        - '                    ],'
        - '                    "methods": methods,'
        - '                }'
        - '            )'
        - '        elif isinstance(node, ast.FunctionDef) and not isinstance('
        - '            node, ast.AsyncFunctionDef'
        - '        ):'
        - '            if node.name not in class_methods:'
        - '                function_names.append('
        - '                    {'
        - '                        "name": node.name,'
        - '                        "start_line": node.lineno,'
        - '                        "end_line": node.end_lineno,'
        - '                        "text": file_content.splitlines()['
        - '                            node.lineno - 1 : node.end_lineno'
        - '                        ],'
        - '                    }'
        - '                )'
        - ''
        - '    return class_info, function_names, file_content.splitlines()'
      - end_line: 191
        name: create_structure
        start_line: 162
        text:
        - 'def create_structure(directory_path):'
        - '    """Create the structure of the repository directory by parsing Python
          files.'
        - '    :param directory_path: Path to the repository directory.'
        - '    :return: A dictionary representing the structure.'
        - '    """'
        - '    structure = {}'
        - ''
        - '    for root, _, files in os.walk(directory_path):'
        - '        repo_name = os.path.basename(directory_path)'
        - '        relative_root = os.path.relpath(root, directory_path)'
        - '        if relative_root == ".":'
        - '            relative_root = repo_name'
        - '        curr_struct = structure'
        - '        for part in relative_root.split(os.sep):'
        - '            if part not in curr_struct:'
        - '                curr_struct[part] = {}'
        - '            curr_struct = curr_struct[part]'
        - '        for file_name in files:'
        - '            if file_name.endswith(".py"):'
        - '                file_path = os.path.join(root, file_name)'
        - '                class_info, function_names, file_lines = parse_python_file(file_path)'
        - '                curr_struct[file_name] = {'
        - '                    "classes": class_info,'
        - '                    "functions": function_names,'
        - '                    "text": file_lines,'
        - '                }'
        - '            else:'
        - '                curr_struct[file_name] = {}'
        - ''
        - '    return structure'
      text:
      - import ast
      - import os
      - import subprocess
      - import uuid
      - ''
      - import pandas as pd
      - from tqdm import tqdm
      - ''
      - repo_to_top_folder = {
      - '    "django/django": "django",'
      - '    "sphinx-doc/sphinx": "sphinx",'
      - '    "scikit-learn/scikit-learn": "scikit-learn",'
      - '    "sympy/sympy": "sympy",'
      - '    "pytest-dev/pytest": "pytest",'
      - '    "matplotlib/matplotlib": "matplotlib",'
      - '    "astropy/astropy": "astropy",'
      - '    "pydata/xarray": "xarray",'
      - '    "mwaskom/seaborn": "seaborn",'
      - '    "psf/requests": "requests",'
      - '    "pylint-dev/pylint": "pylint",'
      - '    "pallets/flask": "flask",'
      - '}'
      - ''
      - ''
      - 'def checkout_commit(repo_path, commit_id):'
      - '    """Checkout the specified commit in the given local git repository.'
      - '    :param repo_path: Path to the local git repository'
      - '    :param commit_id: Commit ID to checkout'
      - '    :return: None'
      - '    """'
      - '    try:'
      - '        # Change directory to the provided repository path and checkout the
        specified commit'
      - '        print(f"Checking out commit {commit_id} in repository at {repo_path}...")'
      - '        subprocess.run(["git", "-C", repo_path, "checkout", commit_id], check=True)'
      - '        print("Commit checked out successfully.")'
      - '    except subprocess.CalledProcessError as e:'
      - '        print(f"An error occurred while running git command: {e}")'
      - '    except Exception as e:'
      - '        print(f"An unexpected error occurred: {e}")'
      - ''
      - ''
      - 'def clone_repo(repo_name, repo_playground):'
      - '    try:'
      - ''
      - '        print('
      - '            f"Cloning repository from https://github.com/{repo_name}.git
        to {repo_playground}/{repo_to_top_folder[repo_name]}..."'
      - '        )'
      - '        subprocess.run('
      - '            ['
      - '                "git",'
      - '                "clone",'
      - '                f"https://github.com/{repo_name}.git",'
      - '                f"{repo_playground}/{repo_to_top_folder[repo_name]}",'
      - '            ],'
      - '            check=True,'
      - '        )'
      - '        print("Repository cloned successfully.")'
      - '    except subprocess.CalledProcessError as e:'
      - '        print(f"An error occurred while running git command: {e}")'
      - '    except Exception as e:'
      - '        print(f"An unexpected error occurred: {e}")'
      - ''
      - ''
      - def get_project_structure_from_scratch(
      - '    repo_name, commit_id, instance_id, repo_playground'
      - '):'
      - ''
      - '    # Generate a temperary folder and add uuid to avoid collision'
      - '    repo_playground = os.path.join(repo_playground, str(uuid.uuid4()))'
      - ''
      - '    # assert playground doesn''t exist'
      - '    assert not os.path.exists(repo_playground), f"{repo_playground} already
        exists"'
      - ''
      - '    # create playground'
      - '    os.makedirs(repo_playground)'
      - ''
      - '    clone_repo(repo_name, repo_playground)'
      - '    checkout_commit(f"{repo_playground}/{repo_to_top_folder[repo_name]}",
        commit_id)'
      - '    structure = create_structure(f"{repo_playground}/{repo_to_top_folder[repo_name]}")'
      - '    # clean up'
      - '    subprocess.run('
      - '        ["rm", "-rf", f"{repo_playground}/{repo_to_top_folder[repo_name]}"],
        check=True'
      - '    )'
      - '    d = {'
      - '        "repo": repo_name,'
      - '        "base_commit": commit_id,'
      - '        "structure": structure,'
      - '        "instance_id": instance_id,'
      - '    }'
      - '    return d'
      - ''
      - ''
      - 'def parse_python_file(file_path, file_content=None):'
      - '    """Parse a Python file to extract class and function definitions with
        their line numbers.'
      - '    :param file_path: Path to the Python file.'
      - '    :return: Class names, function names, and file contents'
      - '    """'
      - '    if file_content is None:'
      - '        try:'
      - '            with open(file_path, "r") as file:'
      - '                file_content = file.read()'
      - '                parsed_data = ast.parse(file_content)'
      - '        except Exception as e:  # Catch all types of exceptions'
      - '            print(f"Error in file {file_path}: {e}")'
      - '            return [], [], ""'
      - '    else:'
      - '        try:'
      - '            parsed_data = ast.parse(file_content)'
      - '        except Exception as e:  # Catch all types of exceptions'
      - '            print(f"Error in file {file_path}: {e}")'
      - '            return [], [], ""'
      - ''
      - '    class_info = []'
      - '    function_names = []'
      - '    class_methods = set()'
      - ''
      - '    for node in ast.walk(parsed_data):'
      - '        if isinstance(node, ast.ClassDef):'
      - '            methods = []'
      - '            for n in node.body:'
      - '                if isinstance(n, ast.FunctionDef):'
      - '                    methods.append('
      - '                        {'
      - '                            "name": n.name,'
      - '                            "start_line": n.lineno,'
      - '                            "end_line": n.end_lineno,'
      - '                            "text": file_content.splitlines()['
      - '                                n.lineno - 1 : n.end_lineno'
      - '                            ],'
      - '                        }'
      - '                    )'
      - '                    class_methods.add(n.name)'
      - '            class_info.append('
      - '                {'
      - '                    "name": node.name,'
      - '                    "start_line": node.lineno,'
      - '                    "end_line": node.end_lineno,'
      - '                    "text": file_content.splitlines()['
      - '                        node.lineno - 1 : node.end_lineno'
      - '                    ],'
      - '                    "methods": methods,'
      - '                }'
      - '            )'
      - '        elif isinstance(node, ast.FunctionDef) and not isinstance('
      - '            node, ast.AsyncFunctionDef'
      - '        ):'
      - '            if node.name not in class_methods:'
      - '                function_names.append('
      - '                    {'
      - '                        "name": node.name,'
      - '                        "start_line": node.lineno,'
      - '                        "end_line": node.end_lineno,'
      - '                        "text": file_content.splitlines()['
      - '                            node.lineno - 1 : node.end_lineno'
      - '                        ],'
      - '                    }'
      - '                )'
      - ''
      - '    return class_info, function_names, file_content.splitlines()'
      - ''
      - ''
      - 'def create_structure(directory_path):'
      - '    """Create the structure of the repository directory by parsing Python
        files.'
      - '    :param directory_path: Path to the repository directory.'
      - '    :return: A dictionary representing the structure.'
      - '    """'
      - '    structure = {}'
      - ''
      - '    for root, _, files in os.walk(directory_path):'
      - '        repo_name = os.path.basename(directory_path)'
      - '        relative_root = os.path.relpath(root, directory_path)'
      - '        if relative_root == ".":'
      - '            relative_root = repo_name'
      - '        curr_struct = structure'
      - '        for part in relative_root.split(os.sep):'
      - '            if part not in curr_struct:'
      - '                curr_struct[part] = {}'
      - '            curr_struct = curr_struct[part]'
      - '        for file_name in files:'
      - '            if file_name.endswith(".py"):'
      - '                file_path = os.path.join(root, file_name)'
      - '                class_info, function_names, file_lines = parse_python_file(file_path)'
      - '                curr_struct[file_name] = {'
      - '                    "classes": class_info,'
      - '                    "functions": function_names,'
      - '                    "text": file_lines,'
      - '                }'
      - '            else:'
      - '                curr_struct[file_name] = {}'
      - ''
      - '    return structure'
      - ''
      - import yaml
      - ''
      - 'if __name__ == "__main__":'
      - '    with open ("test.yml", "w") as f:'
      - '        data = create_structure(".")'
      - ''
      - '        yaml.dump(data, f, default_flow_style=False)'
    query_example.txt: {}
    search.sh: {}
  configs:
    default_sys-env_cursors_window100-detailed_cmd_format-full_history-1_demos.yaml: {}
    default_sys-env_cursors_window100-detailed_cmd_format-last_5_history-1_demos.yaml: {}
    default_sys-env_window100-detailed_cmd_format-full_history-1_demos.yaml: {}
    default_sys-env_window100-detailed_cmd_format-last_5_history-1_demos.yaml: {}
    default_treeagent.yaml: {}
    xml_sys-env_cursors_window100-detailed_cmd_format-full_history-1_demos.yaml: {}
    xml_sys-env_cursors_window100-detailed_cmd_format-last_5_history-1_demos.yaml: {}
    xml_sys-env_window100-detailed_cmd_format-full_history-1_demos.yaml: {}
    xml_sys-env_window100-detailed_cmd_format-last_5_history-1_demos.yaml: {}
  default.yaml: {}
  default_from_url.yaml: {}
  default_xml.yaml: {}
  environment_setup:
    django.yaml: {}
    py310_default.yaml: {}
docker:
  README.md: {}
  getconda.sh: {}
  requirements.txt: {}
  swe.Dockerfile: {}
docs:
  README.md: {}
  _footer.md: {}
  assets:
    architecture.png: {}
    inspector.png: {}
    open_port_default.png: {}
    open_port_in_browser.png: {}
    swe-agent.svg: {}
    template_workflow.png: {}
  background:
    aci.md: {}
    architecture.md: {}
    index.md: {}
  config:
    commands.md: {}
    config.md: {}
    demonstrations.md: {}
    docker.md: {}
    env.md: {}
  dev:
    contribute.md: {}
    formatting_conflicts.md: {}
  faq.md: {}
  index.md: {}
  installation:
    changelog.md: {}
    codespaces.md: {}
    docker.md: {}
    index.md: {}
    keys.md: {}
    source.md: {}
    tips.md: {}
  overrides:
    main.html: {}
  reference:
    agent.md: {}
    env.md: {}
    env_utils.md: {}
    index.md: {}
    models.md: {}
  usage:
    benchmarking.md: {}
    cl_tutorial.md: {}
    cl_tutorial_cmd_1_output.log: {}
    coding_challenge_output.log: {}
    coding_challenges.md: {}
    index.md: {}
    inspector.md: {}
    leetcode_example.md: {}
    trajectories.md: {}
    usage_faq.md: {}
    web_ui.md: {}
inspector:
  README.md: {}
  __init__.py:
    classes: []
    functions: []
    text: []
  favicon.ico: {}
  fileViewer.js: {}
  icons:
    computer.png: {}
    edit_icon.svg: {}
    swe-agent-logo-50.png: {}
    swellama_blue.png: {}
    swellama_brown.png: {}
    swellama_grey.png: {}
    swellama_tan.png: {}
  index.html: {}
  server.py:
    classes:
    - end_line: 273
      methods:
      - end_line: 213
        name: __init__
        start_line: 205
        text:
        - '    def __init__(self, *args, **kwargs):'
        - '        self.gold_patches = {}'
        - '        self.test_patches = {}'
        - '        if "gold_patches" in kwargs:'
        - '            self.gold_patches = kwargs.pop("gold_patches")'
        - '        if "test_patches" in kwargs:'
        - '            self.test_patches = kwargs.pop("test_patches")'
        - '        self.traj_dir = kwargs.pop("directory", ".")  # Extract directory'
        - '        super().__init__(*args, **kwargs)'
      - end_line: 219
        name: serve_directory_info
        start_line: 215
        text:
        - '    def serve_directory_info(self):'
        - '        self.send_response(200)'
        - '        self.send_header("Content-type", "application/json")'
        - '        self.end_headers()'
        - '        self.wfile.write(json.dumps({"directory": self.traj_dir}).encode())'
      - end_line: 233
        name: serve_file_content
        start_line: 221
        text:
        - '    def serve_file_content(self, file_path):'
        - '        try:'
        - '            content = load_content('
        - '                Path(self.traj_dir) / file_path,'
        - '                self.gold_patches,'
        - '                self.test_patches,'
        - '            )'
        - '            self.send_response(200)'
        - '            self.send_header("Content-type", "text/plain")'
        - '            self.end_headers()'
        - '            self.wfile.write(json.dumps(content).encode())'
        - '        except FileNotFoundError:'
        - '            self.send_error(404, f"File {file_path} not found")'
      - end_line: 246
        name: do_GET
        start_line: 235
        text:
        - '    def do_GET(self):'
        - '        if self.path == "/directory_info":'
        - '            self.serve_directory_info()'
        - '        elif self.path.startswith("/files"):'
        - '            self.handle_files_request()'
        - '        elif self.path.startswith("/trajectory/"):'
        - '            file_path = self.path[len("/trajectory/") :]'
        - '            self.serve_file_content(file_path)'
        - '        elif self.path.startswith("/check_update"):'
        - '            self.check_for_updates()'
        - '        else:'
        - '            super().do_GET()'
      - end_line: 260
        name: handle_files_request
        start_line: 248
        text:
        - '    def handle_files_request(self):'
        - '        self.send_response(200)'
        - '        self.send_header("Content-type", "application/json")'
        - '        self.end_headers()'
        - '        files = sorted('
        - '            ('
        - '                str(file.relative_to(Path(self.traj_dir))) + " " * 4 +
          get_status(file)'
        - '                for file in Path(self.traj_dir).glob("**/*.traj")'
        - '            ),'
        - '            key=lambda x: str(Path(self.traj_dir) / x),'
        - '            reverse=True,'
        - '        )'
        - '        self.wfile.write(json.dumps(files).encode())'
      - end_line: 269
        name: check_for_updates
        start_line: 262
        text:
        - '    def check_for_updates(self):'
        - '        current_mod_times = {str(file): os.path.getmtime(file) for file
          in Path(self.traj_dir).glob("**/*.traj")}'
        - '        if current_mod_times != Handler.file_mod_times:'
        - '            Handler.file_mod_times = current_mod_times'
        - '            self.send_response(200)  # Send response that there''s an update'
        - '        else:'
        - '            self.send_response(204)  # Send no content response if no update'
        - '        self.end_headers()'
      - end_line: 273
        name: end_headers
        start_line: 271
        text:
        - '    def end_headers(self):'
        - '        self.send_header("Access-Control-Allow-Origin", "*")'
        - '        super().end_headers()'
      name: Handler
      start_line: 202
      text:
      - 'class Handler(http.server.SimpleHTTPRequestHandler):'
      - '    file_mod_times = {}  # Dictionary to keep track of file modification
        times'
      - ''
      - '    def __init__(self, *args, **kwargs):'
      - '        self.gold_patches = {}'
      - '        self.test_patches = {}'
      - '        if "gold_patches" in kwargs:'
      - '            self.gold_patches = kwargs.pop("gold_patches")'
      - '        if "test_patches" in kwargs:'
      - '            self.test_patches = kwargs.pop("test_patches")'
      - '        self.traj_dir = kwargs.pop("directory", ".")  # Extract directory'
      - '        super().__init__(*args, **kwargs)'
      - ''
      - '    def serve_directory_info(self):'
      - '        self.send_response(200)'
      - '        self.send_header("Content-type", "application/json")'
      - '        self.end_headers()'
      - '        self.wfile.write(json.dumps({"directory": self.traj_dir}).encode())'
      - ''
      - '    def serve_file_content(self, file_path):'
      - '        try:'
      - '            content = load_content('
      - '                Path(self.traj_dir) / file_path,'
      - '                self.gold_patches,'
      - '                self.test_patches,'
      - '            )'
      - '            self.send_response(200)'
      - '            self.send_header("Content-type", "text/plain")'
      - '            self.end_headers()'
      - '            self.wfile.write(json.dumps(content).encode())'
      - '        except FileNotFoundError:'
      - '            self.send_error(404, f"File {file_path} not found")'
      - ''
      - '    def do_GET(self):'
      - '        if self.path == "/directory_info":'
      - '            self.serve_directory_info()'
      - '        elif self.path.startswith("/files"):'
      - '            self.handle_files_request()'
      - '        elif self.path.startswith("/trajectory/"):'
      - '            file_path = self.path[len("/trajectory/") :]'
      - '            self.serve_file_content(file_path)'
      - '        elif self.path.startswith("/check_update"):'
      - '            self.check_for_updates()'
      - '        else:'
      - '            super().do_GET()'
      - ''
      - '    def handle_files_request(self):'
      - '        self.send_response(200)'
      - '        self.send_header("Content-type", "application/json")'
      - '        self.end_headers()'
      - '        files = sorted('
      - '            ('
      - '                str(file.relative_to(Path(self.traj_dir))) + " " * 4 + get_status(file)'
      - '                for file in Path(self.traj_dir).glob("**/*.traj")'
      - '            ),'
      - '            key=lambda x: str(Path(self.traj_dir) / x),'
      - '            reverse=True,'
      - '        )'
      - '        self.wfile.write(json.dumps(files).encode())'
      - ''
      - '    def check_for_updates(self):'
      - '        current_mod_times = {str(file): os.path.getmtime(file) for file in
        Path(self.traj_dir).glob("**/*.traj")}'
      - '        if current_mod_times != Handler.file_mod_times:'
      - '            Handler.file_mod_times = current_mod_times'
      - '            self.send_response(200)  # Send response that there''s an update'
      - '        else:'
      - '            self.send_response(204)  # Send no content response if no update'
      - '        self.end_headers()'
      - ''
      - '    def end_headers(self):'
      - '        self.send_header("Access-Control-Allow-Origin", "*")'
      - '        super().end_headers()'
    functions:
    - end_line: 43
      name: append_exit
      start_line: 15
      text:
      - 'def append_exit(content):'
      - '    last_entry = content["history"][-1]'
      - '    if last_entry["role"] == "system":'
      - '        return content'
      - ''
      - '    exit_status = content.get("info", {}).get("exit_status", None)'
      - ''
      - '    if exit_status is None:'
      - '        return content'
      - ''
      - '    if exit_status.startswith("submitted"):'
      - '        if "submission" in content["info"]:'
      - '            submission = content["info"]["submission"]'
      - '            content["history"].append('
      - '                {'
      - '                    "role": "model_patch",'
      - '                    "content": submission,'
      - '                },'
      - '            )'
      - '        # else submission should be in history already'
      - '        else:'
      - '            msg = "No submission in history or info"'
      - '            raise ValueError(msg)'
      - '    # elif content.get("info", {}).get("exit_status", None) is not None:'
      - '    #     content["history"].append({'
      - '    #         "role": "system",'
      - '    #         "content": f"Exited - {content[''info''][''exit_status'']}",'
      - '    #     })'
      - '    return content'
    - end_line: 55
      name: append_patch
      start_line: 46
      text:
      - 'def append_patch(instance_id, content, patches, patch_type):'
      - '    if content.get("info", {}).get("exit_status", None) is not None:'
      - '        if instance_id in patches:'
      - '            content["history"].append('
      - '                {'
      - '                    "role": f"{patch_type} Patch",'
      - '                    "content": patches[instance_id],'
      - '                },'
      - '            )'
      - '    return content'
    - end_line: 138
      name: append_results
      start_line: 58
      text:
      - 'def append_results(traj_path: Path, instance_id: str, content, results, results_file,
        scorecards, scorecards_file):'
      - '    stats: list[str] = []'
      - '    model_stats = {}'
      - '    if traj_path.exists():'
      - '        data = json.loads(traj_path.read_text())'
      - '        info = data.get("info", {})'
      - '        model_stats = info.get("model_stats", {})'
      - '    instance_cost = model_stats.get("instance_cost", None)'
      - '    instance_cost = f"{instance_cost:.2f}" if instance_cost is not None else
        "N/A"'
      - '    tokens_sent = model_stats.get("tokens_sent", None)'
      - '    tokens_sent = f"{tokens_sent:,}" if tokens_sent is not None else "N/A"'
      - '    tokens_received = model_stats.get("tokens_received", None)'
      - '    tokens_received = f"{tokens_received:,}" if tokens_received is not None
        else "N/A"'
      - '    api_calls = model_stats.get("api_calls", None)'
      - '    api_calls = f"{api_calls:,}" if api_calls is not None else "N/A"'
      - '    stats.append("**** Run Stats ****")'
      - '    stats.append(f"Instance Cost: ${instance_cost}")'
      - '    stats.append(f"Tokens Sent: {tokens_sent}")'
      - '    stats.append(f"Tokens Received: {tokens_received}")'
      - '    stats.append(f"API Calls: {api_calls}\n")'
      - '    status = []'
      - '    if results is None:'
      - '        status.append("Evaluation results not found")'
      - '    elif "not_generated" in results and "generated" in results and "applied"
        in results and "resolved" in results:'
      - '        is_generated = instance_id in results["generated"]'
      - '        is_applied = instance_id in results["applied"]'
      - '        is_resolved = instance_id in results["resolved"]'
      - ''
      - '        status.append("**** Statuses ****")'
      - '        status.append('
      - "            f\"  {'\u2705' if is_generated else '\u274C'} Generated (The\
        \ agent was {'' if is_generated else 'not '}\""
      - '            "able to generate a pull request to address this issue)",'
      - '        )'
      - '        status.append('
      - "            f\"  {'\u2705' if is_applied else '\u274C'} Applied (The pull\
        \ request was {'' if is_applied else 'not '}\""
      - '            "successfully applied to the repo during eval)",'
      - '        )'
      - '        status.append('
      - "            f\"  {'\u2705' if is_resolved else '\u274C'} Resolved (The pull\
        \ request {'' if is_resolved else 'not '}\""
      - '            "successfully resolved the issue during eval)",'
      - '        )'
      - '    else:'
      - '        status.append("Results format not recognized")'
      - ''
      - '    if scorecards is not None:'
      - '        scorecard = [x for x in scorecards if x["instance_id"] == instance_id][0]'
      - '        if ('
      - '            "test_results" in scorecard'
      - '            and "failure" in scorecard["test_results"]'
      - '            and ('
      - '                len(scorecard["test_results"]["failure"]["FAIL_TO_PASS"])
        > 0'
      - '                or len(scorecard["test_results"]["failure"]["PASS_TO_PASS"])
        > 0'
      - '            )'
      - '        ):'
      - '            tests_failing = [f"  - {x}" for x in scorecard["test_results"]["failure"]["FAIL_TO_PASS"]]
        + ['
      - '                f"  - {x}" for x in scorecard["test_results"]["failure"]["PASS_TO_PASS"]'
      - '            ]'
      - "            status.extend([\"\", \"**** Test Results ****\", \"\U0001F9EA\
        \ Tests Failed\"] + tests_failing[:7])"
      - '            if len(tests_failing) > 7:'
      - '                status.append(f"  ... and {len(tests_failing) - 7} more")'
      - '            status.append("")'
      - ''
      - '    if status == []:'
      - '        status.append("Instance not found in results")'
      - '    else:'
      - '        status.append("---------------------------")'
      - '        status.append('
      - '            "Note that the evaluation results here may not be accurate or
        up to date, since they are computed separately from the agent run itself.",'
      - '        )'
      - '        status.append(f"Check {results_file} for the most accurate evaluation
        results.")'
      - '        status.append("")'
      - '        status.append(f"Instance ID: {instance_id}")'
      - '        status.append("Based on results:")'
      - '        status.append(json.dumps(results, indent=4))'
      - '    eval_report = {'
      - '        "role": "Evaluation Report",'
      - '        "content": "\n".join([*stats, *status]),'
      - '    }'
      - '    content["history"].insert(0, eval_report)'
      - '    content["history"].append(eval_report)'
      - '    return content'
    - end_line: 164
      name: load_content
      start_line: 141
      text:
      - 'def load_content(file_name, gold_patches, test_patches) -> dict[str, Any]:'
      - '    with open(file_name) as infile:'
      - '        content = json.load(infile)'
      - '    results_file = Path(file_name).parent / "results.json"'
      - '    results = load_results(results_file)'
      - ''
      - '    scorecards_file = Path(file_name).parent / "scorecards.json"'
      - '    scorecards = None'
      - '    if scorecards_file.exists():'
      - '        with open(scorecards_file) as infile:'
      - '            scorecards = json.load(infile)'
      - ''
      - '    content = append_exit(content)  # accommodate new and old format'
      - '    content = append_patch(Path(file_name).stem, content, gold_patches, "Gold")'
      - '    content = append_patch(Path(file_name).stem, content, test_patches, "Test")'
      - '    return append_results('
      - '        Path(file_name),'
      - '        Path(file_name).stem,'
      - '        content,'
      - '        results,'
      - '        results_file,'
      - '        scorecards,'
      - '        scorecards_file,'
      - '    )'
    - end_line: 181
      name: load_results
      start_line: 167
      text:
      - 'def load_results(results_path: Path) -> dict[str, Any] | None:'
      - '    """Load results from results.json.'
      - ''
      - '    If file is not found, return None.'
      - '    """'
      - '    if not results_path.exists():'
      - '        return None'
      - '    with open(results_path) as infile:'
      - '        results = json.load(infile)'
      - '    # Different versions of the code used "not_generated" or "no_generation".'
      - '    # Let''s standardize this here'
      - '    if "no_generation" in results:'
      - '        results["not_generated"] = results["no_generation"]'
      - '        del results["no_generation"]'
      - '    return results'
    - end_line: 199
      name: get_status
      start_line: 185
      text:
      - 'def get_status(traj_path) -> str:'
      - '    """Return results emoji for single trajectory"""'
      - '    results = load_results(Path(traj_path).parent / "results.json")'
      - '    instance_id = Path(traj_path).stem'
      - '    if results is None:'
      - "        return \"\u2753\""
      - '    elif "not_generated" in results and "generated" in results and "applied"
        in results and "resolved" in results:'
      - '        if instance_id in results["not_generated"]:'
      - "            return \"\u2753\""
      - '        if instance_id in results["generated"]:'
      - '            if instance_id in results["resolved"]:'
      - "                return \"\u2705\""
      - '            else:'
      - "                return \"\u274C\""
      - "    return \"\u2753\""
    - end_line: 310
      name: main
      start_line: 276
      text:
      - 'def main(data_path, directory, port):'
      - '    data = []'
      - '    if data_path is not None:'
      - '        if data_path.endswith(".jsonl"):'
      - '            data = [json.loads(x) for x in Path(data_path).read_text().splitlines(keepends=True)]'
      - '        elif data_path.endswith(".json"):'
      - '            with open(data_path) as f:'
      - '                data = json.load(f)'
      - '    elif "args.yaml" in os.listdir(directory):'
      - '        with open(os.path.join(directory, "args.yaml")) as file:'
      - '            args = yaml.safe_load(file)'
      - '        if "environment" in args and "data_path" in args["environment"]:'
      - '            data_path = os.path.join(Path(__file__).parent, "..", args["environment"]["data_path"])'
      - '            if os.path.exists(data_path):'
      - '                with open(data_path) as f:'
      - '                    data = json.load(f)'
      - ''
      - '    gold_patches = {d["instance_id"]: d["patch"] if "patch" in d else None
        for d in data}'
      - '    test_patches = {d["instance_id"]: d["test_patch"] if "test_patch" in
        d else None for d in data}'
      - ''
      - '    handler_with_directory = partial('
      - '        Handler,'
      - '        directory=directory,'
      - '        gold_patches=gold_patches,'
      - '        test_patches=test_patches,'
      - '    )'
      - '    try:'
      - '        with socketserver.TCPServer(("", port), handler_with_directory) as
        httpd:'
      - '            print(f"Serving at http://localhost:{port}")'
      - '            httpd.serve_forever()'
      - '    except OSError as e:'
      - '        if e.errno == 48:'
      - '            print(f"ERROR: Port ({port}) is already in use. Try another port
        with the --port flag.")'
      - '        else:'
      - '            raise e'
    text:
    - from __future__ import annotations
    - ''
    - import http.server
    - import json
    - import os
    - import socketserver
    - from argparse import ArgumentParser
    - from functools import partial
    - from pathlib import Path
    - from typing import Any
    - ''
    - import yaml
    - ''
    - ''
    - 'def append_exit(content):'
    - '    last_entry = content["history"][-1]'
    - '    if last_entry["role"] == "system":'
    - '        return content'
    - ''
    - '    exit_status = content.get("info", {}).get("exit_status", None)'
    - ''
    - '    if exit_status is None:'
    - '        return content'
    - ''
    - '    if exit_status.startswith("submitted"):'
    - '        if "submission" in content["info"]:'
    - '            submission = content["info"]["submission"]'
    - '            content["history"].append('
    - '                {'
    - '                    "role": "model_patch",'
    - '                    "content": submission,'
    - '                },'
    - '            )'
    - '        # else submission should be in history already'
    - '        else:'
    - '            msg = "No submission in history or info"'
    - '            raise ValueError(msg)'
    - '    # elif content.get("info", {}).get("exit_status", None) is not None:'
    - '    #     content["history"].append({'
    - '    #         "role": "system",'
    - '    #         "content": f"Exited - {content[''info''][''exit_status'']}",'
    - '    #     })'
    - '    return content'
    - ''
    - ''
    - 'def append_patch(instance_id, content, patches, patch_type):'
    - '    if content.get("info", {}).get("exit_status", None) is not None:'
    - '        if instance_id in patches:'
    - '            content["history"].append('
    - '                {'
    - '                    "role": f"{patch_type} Patch",'
    - '                    "content": patches[instance_id],'
    - '                },'
    - '            )'
    - '    return content'
    - ''
    - ''
    - 'def append_results(traj_path: Path, instance_id: str, content, results, results_file,
      scorecards, scorecards_file):'
    - '    stats: list[str] = []'
    - '    model_stats = {}'
    - '    if traj_path.exists():'
    - '        data = json.loads(traj_path.read_text())'
    - '        info = data.get("info", {})'
    - '        model_stats = info.get("model_stats", {})'
    - '    instance_cost = model_stats.get("instance_cost", None)'
    - '    instance_cost = f"{instance_cost:.2f}" if instance_cost is not None else
      "N/A"'
    - '    tokens_sent = model_stats.get("tokens_sent", None)'
    - '    tokens_sent = f"{tokens_sent:,}" if tokens_sent is not None else "N/A"'
    - '    tokens_received = model_stats.get("tokens_received", None)'
    - '    tokens_received = f"{tokens_received:,}" if tokens_received is not None
      else "N/A"'
    - '    api_calls = model_stats.get("api_calls", None)'
    - '    api_calls = f"{api_calls:,}" if api_calls is not None else "N/A"'
    - '    stats.append("**** Run Stats ****")'
    - '    stats.append(f"Instance Cost: ${instance_cost}")'
    - '    stats.append(f"Tokens Sent: {tokens_sent}")'
    - '    stats.append(f"Tokens Received: {tokens_received}")'
    - '    stats.append(f"API Calls: {api_calls}\n")'
    - '    status = []'
    - '    if results is None:'
    - '        status.append("Evaluation results not found")'
    - '    elif "not_generated" in results and "generated" in results and "applied"
      in results and "resolved" in results:'
    - '        is_generated = instance_id in results["generated"]'
    - '        is_applied = instance_id in results["applied"]'
    - '        is_resolved = instance_id in results["resolved"]'
    - ''
    - '        status.append("**** Statuses ****")'
    - '        status.append('
    - "            f\"  {'\u2705' if is_generated else '\u274C'} Generated (The agent\
      \ was {'' if is_generated else 'not '}\""
    - '            "able to generate a pull request to address this issue)",'
    - '        )'
    - '        status.append('
    - "            f\"  {'\u2705' if is_applied else '\u274C'} Applied (The pull request\
      \ was {'' if is_applied else 'not '}\""
    - '            "successfully applied to the repo during eval)",'
    - '        )'
    - '        status.append('
    - "            f\"  {'\u2705' if is_resolved else '\u274C'} Resolved (The pull\
      \ request {'' if is_resolved else 'not '}\""
    - '            "successfully resolved the issue during eval)",'
    - '        )'
    - '    else:'
    - '        status.append("Results format not recognized")'
    - ''
    - '    if scorecards is not None:'
    - '        scorecard = [x for x in scorecards if x["instance_id"] == instance_id][0]'
    - '        if ('
    - '            "test_results" in scorecard'
    - '            and "failure" in scorecard["test_results"]'
    - '            and ('
    - '                len(scorecard["test_results"]["failure"]["FAIL_TO_PASS"]) >
      0'
    - '                or len(scorecard["test_results"]["failure"]["PASS_TO_PASS"])
      > 0'
    - '            )'
    - '        ):'
    - '            tests_failing = [f"  - {x}" for x in scorecard["test_results"]["failure"]["FAIL_TO_PASS"]]
      + ['
    - '                f"  - {x}" for x in scorecard["test_results"]["failure"]["PASS_TO_PASS"]'
    - '            ]'
    - "            status.extend([\"\", \"**** Test Results ****\", \"\U0001F9EA Tests\
      \ Failed\"] + tests_failing[:7])"
    - '            if len(tests_failing) > 7:'
    - '                status.append(f"  ... and {len(tests_failing) - 7} more")'
    - '            status.append("")'
    - ''
    - '    if status == []:'
    - '        status.append("Instance not found in results")'
    - '    else:'
    - '        status.append("---------------------------")'
    - '        status.append('
    - '            "Note that the evaluation results here may not be accurate or up
      to date, since they are computed separately from the agent run itself.",'
    - '        )'
    - '        status.append(f"Check {results_file} for the most accurate evaluation
      results.")'
    - '        status.append("")'
    - '        status.append(f"Instance ID: {instance_id}")'
    - '        status.append("Based on results:")'
    - '        status.append(json.dumps(results, indent=4))'
    - '    eval_report = {'
    - '        "role": "Evaluation Report",'
    - '        "content": "\n".join([*stats, *status]),'
    - '    }'
    - '    content["history"].insert(0, eval_report)'
    - '    content["history"].append(eval_report)'
    - '    return content'
    - ''
    - ''
    - 'def load_content(file_name, gold_patches, test_patches) -> dict[str, Any]:'
    - '    with open(file_name) as infile:'
    - '        content = json.load(infile)'
    - '    results_file = Path(file_name).parent / "results.json"'
    - '    results = load_results(results_file)'
    - ''
    - '    scorecards_file = Path(file_name).parent / "scorecards.json"'
    - '    scorecards = None'
    - '    if scorecards_file.exists():'
    - '        with open(scorecards_file) as infile:'
    - '            scorecards = json.load(infile)'
    - ''
    - '    content = append_exit(content)  # accommodate new and old format'
    - '    content = append_patch(Path(file_name).stem, content, gold_patches, "Gold")'
    - '    content = append_patch(Path(file_name).stem, content, test_patches, "Test")'
    - '    return append_results('
    - '        Path(file_name),'
    - '        Path(file_name).stem,'
    - '        content,'
    - '        results,'
    - '        results_file,'
    - '        scorecards,'
    - '        scorecards_file,'
    - '    )'
    - ''
    - ''
    - 'def load_results(results_path: Path) -> dict[str, Any] | None:'
    - '    """Load results from results.json.'
    - ''
    - '    If file is not found, return None.'
    - '    """'
    - '    if not results_path.exists():'
    - '        return None'
    - '    with open(results_path) as infile:'
    - '        results = json.load(infile)'
    - '    # Different versions of the code used "not_generated" or "no_generation".'
    - '    # Let''s standardize this here'
    - '    if "no_generation" in results:'
    - '        results["not_generated"] = results["no_generation"]'
    - '        del results["no_generation"]'
    - '    return results'
    - ''
    - ''
    - '# TODO: shouldn''t reload results fore very status'
    - 'def get_status(traj_path) -> str:'
    - '    """Return results emoji for single trajectory"""'
    - '    results = load_results(Path(traj_path).parent / "results.json")'
    - '    instance_id = Path(traj_path).stem'
    - '    if results is None:'
    - "        return \"\u2753\""
    - '    elif "not_generated" in results and "generated" in results and "applied"
      in results and "resolved" in results:'
    - '        if instance_id in results["not_generated"]:'
    - "            return \"\u2753\""
    - '        if instance_id in results["generated"]:'
    - '            if instance_id in results["resolved"]:'
    - "                return \"\u2705\""
    - '            else:'
    - "                return \"\u274C\""
    - "    return \"\u2753\""
    - ''
    - ''
    - 'class Handler(http.server.SimpleHTTPRequestHandler):'
    - '    file_mod_times = {}  # Dictionary to keep track of file modification times'
    - ''
    - '    def __init__(self, *args, **kwargs):'
    - '        self.gold_patches = {}'
    - '        self.test_patches = {}'
    - '        if "gold_patches" in kwargs:'
    - '            self.gold_patches = kwargs.pop("gold_patches")'
    - '        if "test_patches" in kwargs:'
    - '            self.test_patches = kwargs.pop("test_patches")'
    - '        self.traj_dir = kwargs.pop("directory", ".")  # Extract directory'
    - '        super().__init__(*args, **kwargs)'
    - ''
    - '    def serve_directory_info(self):'
    - '        self.send_response(200)'
    - '        self.send_header("Content-type", "application/json")'
    - '        self.end_headers()'
    - '        self.wfile.write(json.dumps({"directory": self.traj_dir}).encode())'
    - ''
    - '    def serve_file_content(self, file_path):'
    - '        try:'
    - '            content = load_content('
    - '                Path(self.traj_dir) / file_path,'
    - '                self.gold_patches,'
    - '                self.test_patches,'
    - '            )'
    - '            self.send_response(200)'
    - '            self.send_header("Content-type", "text/plain")'
    - '            self.end_headers()'
    - '            self.wfile.write(json.dumps(content).encode())'
    - '        except FileNotFoundError:'
    - '            self.send_error(404, f"File {file_path} not found")'
    - ''
    - '    def do_GET(self):'
    - '        if self.path == "/directory_info":'
    - '            self.serve_directory_info()'
    - '        elif self.path.startswith("/files"):'
    - '            self.handle_files_request()'
    - '        elif self.path.startswith("/trajectory/"):'
    - '            file_path = self.path[len("/trajectory/") :]'
    - '            self.serve_file_content(file_path)'
    - '        elif self.path.startswith("/check_update"):'
    - '            self.check_for_updates()'
    - '        else:'
    - '            super().do_GET()'
    - ''
    - '    def handle_files_request(self):'
    - '        self.send_response(200)'
    - '        self.send_header("Content-type", "application/json")'
    - '        self.end_headers()'
    - '        files = sorted('
    - '            ('
    - '                str(file.relative_to(Path(self.traj_dir))) + " " * 4 + get_status(file)'
    - '                for file in Path(self.traj_dir).glob("**/*.traj")'
    - '            ),'
    - '            key=lambda x: str(Path(self.traj_dir) / x),'
    - '            reverse=True,'
    - '        )'
    - '        self.wfile.write(json.dumps(files).encode())'
    - ''
    - '    def check_for_updates(self):'
    - '        current_mod_times = {str(file): os.path.getmtime(file) for file in
      Path(self.traj_dir).glob("**/*.traj")}'
    - '        if current_mod_times != Handler.file_mod_times:'
    - '            Handler.file_mod_times = current_mod_times'
    - '            self.send_response(200)  # Send response that there''s an update'
    - '        else:'
    - '            self.send_response(204)  # Send no content response if no update'
    - '        self.end_headers()'
    - ''
    - '    def end_headers(self):'
    - '        self.send_header("Access-Control-Allow-Origin", "*")'
    - '        super().end_headers()'
    - ''
    - ''
    - 'def main(data_path, directory, port):'
    - '    data = []'
    - '    if data_path is not None:'
    - '        if data_path.endswith(".jsonl"):'
    - '            data = [json.loads(x) for x in Path(data_path).read_text().splitlines(keepends=True)]'
    - '        elif data_path.endswith(".json"):'
    - '            with open(data_path) as f:'
    - '                data = json.load(f)'
    - '    elif "args.yaml" in os.listdir(directory):'
    - '        with open(os.path.join(directory, "args.yaml")) as file:'
    - '            args = yaml.safe_load(file)'
    - '        if "environment" in args and "data_path" in args["environment"]:'
    - '            data_path = os.path.join(Path(__file__).parent, "..", args["environment"]["data_path"])'
    - '            if os.path.exists(data_path):'
    - '                with open(data_path) as f:'
    - '                    data = json.load(f)'
    - ''
    - '    gold_patches = {d["instance_id"]: d["patch"] if "patch" in d else None
      for d in data}'
    - '    test_patches = {d["instance_id"]: d["test_patch"] if "test_patch" in d
      else None for d in data}'
    - ''
    - '    handler_with_directory = partial('
    - '        Handler,'
    - '        directory=directory,'
    - '        gold_patches=gold_patches,'
    - '        test_patches=test_patches,'
    - '    )'
    - '    try:'
    - '        with socketserver.TCPServer(("", port), handler_with_directory) as
      httpd:'
    - '            print(f"Serving at http://localhost:{port}")'
    - '            httpd.serve_forever()'
    - '    except OSError as e:'
    - '        if e.errno == 48:'
    - '            print(f"ERROR: Port ({port}) is already in use. Try another port
      with the --port flag.")'
    - '        else:'
    - '            raise e'
    - ''
    - ''
    - 'if __name__ == "__main__":'
    - '    parser = ArgumentParser()'
    - '    parser.add_argument("--data_path", type=str, help="Path to dataset that
      was used for the trajectories")'
    - '    parser.add_argument("--directory", type=str, help="Directory to serve",
      default="./trajectories", nargs="?")'
    - '    parser.add_argument("--port", type=int, help="Port to serve", default=8000)'
    - '    args = parser.parse_args()'
    - '    main(**vars(args))'
  static.py:
    classes: []
    functions:
    - end_line: 82
      name: _load_file
      start_line: 48
      text:
      - 'def _load_file(file_name, gold_patches, test_patches):'
      - '    try:'
      - '        role_map = {'
      - '            "user": "Computer",'
      - '            "assistant": "SWE-Agent",'
      - '            "subroutine": "SWE-Agent subroutine",'
      - '            "default": "Default",'
      - '            "system": "System",'
      - '            "demo": "Demonstration",'
      - '        }'
      - '        content = load_content(file_name, gold_patches, test_patches)'
      - '        if "history" in content and isinstance(content["history"], list):'
      - '            history_content = ""'
      - '            for index, item in enumerate(content["history"]):'
      - '                item_content = item.get("content", "").replace("<", "&lt;").replace(">",
        "&gt;")'
      - '                if item.get("agent") and item["agent"] != "primary":'
      - '                    role_class = "subroutine"'
      - '                else:'
      - '                    role_class = item.get("role", "default").lower().replace("
        ", "-")'
      - '                element_id = f"historyItem{index}"'
      - '                role_name = role_map.get(item.get("role", ""), item.get("role",
        ""))'
      - '                history_content += ('
      - '                    f"""<div class="history-item {role_class}" id="{element_id}">"""'
      - '                    f"""<div class="role-bar {role_class}"><strong><span>{role_name}</span></strong></div>"""'
      - '                    f"""<div class="content-container">"""'
      - '                    f"""<pre>{item_content}</pre>"""'
      - '                    f"""</div>"""'
      - '                    f"""<div class="shadow"></div>"""'
      - '                    f"""</div>"""'
      - '                )'
      - '            return history_content'
      - '        else:'
      - '            return "No history content found."'
      - '    except Exception as e:'
      - '        return f"Error loading content. {e}"'
    - end_line: 92
      name: _make_file_path_tree
      start_line: 85
      text:
      - 'def _make_file_path_tree(file_path):'
      - '    path_parts = file_path.split("/")'
      - '    relevant_parts = path_parts[-3:]'
      - '    html_string = ''<div class="filepath">\n'''
      - '    for part in relevant_parts:'
      - '        html_string += f''<div class="part">{part}</div>\n'''
      - '    html_string += "</div>"'
      - '    return html_string'
    - end_line: 122
      name: save_static_viewer
      start_line: 95
      text:
      - 'def save_static_viewer(file_path):'
      - '    if not isinstance(file_path, Path):'
      - '        file_path = Path(file_path)'
      - '    data = []'
      - '    if "args.yaml" in list(map(lambda x: x.name, file_path.parent.iterdir())):'
      - '        args = yaml.safe_load(Path(file_path.parent / "args.yaml").read_text())'
      - '        if "environment" in args and "data_path" in args["environment"]:'
      - '            data_path = Path(__file__).parent.parent / args["environment"]["data_path"]'
      - '            if data_path.exists():'
      - '                with open(data_path) as f:'
      - '                    data = json.load(f)'
      - '            if not isinstance(data, list) or not data or "patch" not in data[0]
        or "test_patch" not in data[0]:'
      - '                data = []'
      - '    gold_patches = {x["instance_id"]: x["patch"] for x in data}'
      - '    test_patches = {x["instance_id"]: x["test_patch"] for x in data}'
      - '    content = _load_file(file_path, gold_patches, test_patches)'
      - '    file_path_tree = _make_file_path_tree(file_path.absolute().as_posix())'
      - '    icons_path = Path(__file__).parent / "icons"'
      - '    relative_icons_path = find_relative_path(file_path, icons_path)'
      - '    style_sheet = STYLE_SHEET.replace("url(''icons/", f"url(''{relative_icons_path.as_posix()}/").replace('
      - '        ''url("icons/'','
      - '        f''url("{relative_icons_path.as_posix()}/'','
      - '    )'
      - '    data = TEMPLATE.format(file_content=content, style_sheet=style_sheet,
        file_path_tree=file_path_tree)'
      - '    output_file = file_path.with_suffix(".html")'
      - '    with open(output_file, "w+") as outfile:'
      - '        print(data, file=outfile)'
      - '    logger.info(f"Saved static viewer to {output_file}")'
    - end_line: 151
      name: find_relative_path
      start_line: 125
      text:
      - 'def find_relative_path(from_path, to_path):'
      - '    # Convert paths to absolute for uniformity'
      - '    from_path = from_path.resolve()'
      - '    to_path = to_path.resolve()'
      - '    if from_path.is_file():'
      - '        from_path = from_path.parent'
      - '    if to_path.is_file():'
      - '        to_path = to_path.parent'
      - '    if not from_path.is_dir() or not to_path.is_dir():'
      - '        msg = f"Both from_path and to_path must be directories, but got {from_path}
        and {to_path}"'
      - '        raise ValueError(msg)'
      - ''
      - '    # Identify the common ancestor and the parts of each path beyond it'
      - '    common_parts = 0'
      - '    for from_part, to_part in zip(from_path.parts, to_path.parts):'
      - '        if from_part != to_part:'
      - '            break'
      - '        common_parts += 1'
      - ''
      - '    # Calculate the ''../'' needed to get back from from_path to the common
        ancestor'
      - '    back_to_ancestor = [".."] * (len(from_path.parts) - common_parts)'
      - ''
      - '    # Direct path from common ancestor to to_path'
      - '    to_target = to_path.parts[common_parts:]'
      - ''
      - '    # Combine to get the relative path'
      - '    return Path(*back_to_ancestor, *to_target)'
    - end_line: 161
      name: save_all_trajectories
      start_line: 154
      text:
      - 'def save_all_trajectories(directory):'
      - '    if not isinstance(directory, Path):'
      - '        directory = Path(directory)'
      - '    all_files = list(directory.glob("**/*.traj"))'
      - '    logger.info(f"Found {len(all_files)} trajectory files in {directory}")'
      - '    for file_path in tqdm(all_files, desc="Saving static viewers"):'
      - '        save_static_viewer(file_path)'
      - '    logger.info(f"Saved static viewers for all trajectories in {args.directory}")'
    text:
    - from __future__ import annotations
    - ''
    - import json
    - import logging
    - from argparse import ArgumentParser
    - from pathlib import Path
    - ''
    - import yaml
    - from tqdm.auto import tqdm
    - ''
    - 'try:'
    - '    from .server import load_content'
    - 'except ImportError:'
    - '    from server import load_content'
    - ''
    - ''
    - logger = logging.getLogger(__name__)
    - logging.getLogger("simple_parsing").setLevel(logging.INFO)
    - ''
    - ''
    - TEMPLATE = """
    - <html>
    - <head>
    - '    <title>Trajectory Viewer</title>'
    - '    <style>'
    - '    {style_sheet}'
    - '    </style>'
    - </head>
    - <body>
    - '    <div class="container">'
    - '        {file_path_tree}'
    - '        <h2>Conversation History</h2>'
    - '        <pre id="fileContent">{file_content}</pre>'
    - '    </div>'
    - </body>
    - </html>
    - '"""'
    - ''
    - 'try:'
    - '    with open(Path(__file__).parent / "style.css") as infile:'
    - '        STYLE_SHEET = infile.read()'
    - 'except Exception as e:'
    - '    style_file = Path(__file__).parent / "style.css"'
    - '    logger.error(f"Failed to load style sheet from {style_file}: {e}")'
    - '    raise e'
    - ''
    - ''
    - 'def _load_file(file_name, gold_patches, test_patches):'
    - '    try:'
    - '        role_map = {'
    - '            "user": "Computer",'
    - '            "assistant": "SWE-Agent",'
    - '            "subroutine": "SWE-Agent subroutine",'
    - '            "default": "Default",'
    - '            "system": "System",'
    - '            "demo": "Demonstration",'
    - '        }'
    - '        content = load_content(file_name, gold_patches, test_patches)'
    - '        if "history" in content and isinstance(content["history"], list):'
    - '            history_content = ""'
    - '            for index, item in enumerate(content["history"]):'
    - '                item_content = item.get("content", "").replace("<", "&lt;").replace(">",
      "&gt;")'
    - '                if item.get("agent") and item["agent"] != "primary":'
    - '                    role_class = "subroutine"'
    - '                else:'
    - '                    role_class = item.get("role", "default").lower().replace("
      ", "-")'
    - '                element_id = f"historyItem{index}"'
    - '                role_name = role_map.get(item.get("role", ""), item.get("role",
      ""))'
    - '                history_content += ('
    - '                    f"""<div class="history-item {role_class}" id="{element_id}">"""'
    - '                    f"""<div class="role-bar {role_class}"><strong><span>{role_name}</span></strong></div>"""'
    - '                    f"""<div class="content-container">"""'
    - '                    f"""<pre>{item_content}</pre>"""'
    - '                    f"""</div>"""'
    - '                    f"""<div class="shadow"></div>"""'
    - '                    f"""</div>"""'
    - '                )'
    - '            return history_content'
    - '        else:'
    - '            return "No history content found."'
    - '    except Exception as e:'
    - '        return f"Error loading content. {e}"'
    - ''
    - ''
    - 'def _make_file_path_tree(file_path):'
    - '    path_parts = file_path.split("/")'
    - '    relevant_parts = path_parts[-3:]'
    - '    html_string = ''<div class="filepath">\n'''
    - '    for part in relevant_parts:'
    - '        html_string += f''<div class="part">{part}</div>\n'''
    - '    html_string += "</div>"'
    - '    return html_string'
    - ''
    - ''
    - 'def save_static_viewer(file_path):'
    - '    if not isinstance(file_path, Path):'
    - '        file_path = Path(file_path)'
    - '    data = []'
    - '    if "args.yaml" in list(map(lambda x: x.name, file_path.parent.iterdir())):'
    - '        args = yaml.safe_load(Path(file_path.parent / "args.yaml").read_text())'
    - '        if "environment" in args and "data_path" in args["environment"]:'
    - '            data_path = Path(__file__).parent.parent / args["environment"]["data_path"]'
    - '            if data_path.exists():'
    - '                with open(data_path) as f:'
    - '                    data = json.load(f)'
    - '            if not isinstance(data, list) or not data or "patch" not in data[0]
      or "test_patch" not in data[0]:'
    - '                data = []'
    - '    gold_patches = {x["instance_id"]: x["patch"] for x in data}'
    - '    test_patches = {x["instance_id"]: x["test_patch"] for x in data}'
    - '    content = _load_file(file_path, gold_patches, test_patches)'
    - '    file_path_tree = _make_file_path_tree(file_path.absolute().as_posix())'
    - '    icons_path = Path(__file__).parent / "icons"'
    - '    relative_icons_path = find_relative_path(file_path, icons_path)'
    - '    style_sheet = STYLE_SHEET.replace("url(''icons/", f"url(''{relative_icons_path.as_posix()}/").replace('
    - '        ''url("icons/'','
    - '        f''url("{relative_icons_path.as_posix()}/'','
    - '    )'
    - '    data = TEMPLATE.format(file_content=content, style_sheet=style_sheet, file_path_tree=file_path_tree)'
    - '    output_file = file_path.with_suffix(".html")'
    - '    with open(output_file, "w+") as outfile:'
    - '        print(data, file=outfile)'
    - '    logger.info(f"Saved static viewer to {output_file}")'
    - ''
    - ''
    - 'def find_relative_path(from_path, to_path):'
    - '    # Convert paths to absolute for uniformity'
    - '    from_path = from_path.resolve()'
    - '    to_path = to_path.resolve()'
    - '    if from_path.is_file():'
    - '        from_path = from_path.parent'
    - '    if to_path.is_file():'
    - '        to_path = to_path.parent'
    - '    if not from_path.is_dir() or not to_path.is_dir():'
    - '        msg = f"Both from_path and to_path must be directories, but got {from_path}
      and {to_path}"'
    - '        raise ValueError(msg)'
    - ''
    - '    # Identify the common ancestor and the parts of each path beyond it'
    - '    common_parts = 0'
    - '    for from_part, to_part in zip(from_path.parts, to_path.parts):'
    - '        if from_part != to_part:'
    - '            break'
    - '        common_parts += 1'
    - ''
    - '    # Calculate the ''../'' needed to get back from from_path to the common
      ancestor'
    - '    back_to_ancestor = [".."] * (len(from_path.parts) - common_parts)'
    - ''
    - '    # Direct path from common ancestor to to_path'
    - '    to_target = to_path.parts[common_parts:]'
    - ''
    - '    # Combine to get the relative path'
    - '    return Path(*back_to_ancestor, *to_target)'
    - ''
    - ''
    - 'def save_all_trajectories(directory):'
    - '    if not isinstance(directory, Path):'
    - '        directory = Path(directory)'
    - '    all_files = list(directory.glob("**/*.traj"))'
    - '    logger.info(f"Found {len(all_files)} trajectory files in {directory}")'
    - '    for file_path in tqdm(all_files, desc="Saving static viewers"):'
    - '        save_static_viewer(file_path)'
    - '    logger.info(f"Saved static viewers for all trajectories in {args.directory}")'
    - ''
    - ''
    - 'if __name__ == "__main__":'
    - '    parser = ArgumentParser()'
    - '    parser.add_argument("directory", type=str, help="Directory containing trajectory
      files")'
    - '    args = parser.parse_args()'
    - '    save_all_trajectories(args.directory)'
  style.css: {}
make_demos:
  README.md: {}
  convert_traj_to_demo.py:
    classes: []
    functions:
    - end_line: 42
      name: convert_to_literal_string
      start_line: 21
      text:
      - 'def convert_to_literal_string(d):'
      - '    """'
      - '    Convert any multi-line strings to LiteralScalarString'
      - '    """'
      - '    if isinstance(d, dict):'
      - '        for key, value in d.items():'
      - '            if isinstance(value, str) and "\n" in value:'
      - '                d[key] = LSS(value.replace("\r\n", "\n").replace("\r", "\n"))'
      - '            elif isinstance(value, dict):'
      - '                convert_to_literal_string(value)'
      - '    elif isinstance(d, list):'
      - '        for i, item in enumerate(d):'
      - '            if isinstance(item, str) and "\n" in item:'
      - '                d[i] = LSS(item.replace("\r\n", "\n").replace("\r", "\n"))'
      - '            elif isinstance(item, dict):'
      - '                convert_to_literal_string(item)'
      - '    elif isinstance(d, str) and "\n" in d:'
      - '        d = LSS(d.replace("\r\n", "\n").replace("\r", "\n"))'
      - '    else:'
      - '        msg = f"Unsupported type: {type(d)}"'
      - '        raise ValueError(msg)'
      - '    return d'
    - end_line: 57
      name: save_demo
      start_line: 45
      text:
      - 'def save_demo(data, file, traj_path):'
      - '    """'
      - '    Save a single task instance as a yaml file'
      - '    """'
      - '    data = convert_to_literal_string(data)'
      - '    yaml = YAML()'
      - '    yaml.indent(mapping=2, sequence=4, offset=2)'
      - '    buffer = io.StringIO()'
      - '    yaml.dump(data, buffer)'
      - '    content = buffer.getvalue()'
      - '    header = DEMO_COMMENT.format(traj_path=traj_path)'
      - '    with open(file, "w") as f:'
      - '        f.write(f"{header}\n{content}")'
    - end_line: 71
      name: convert_traj_to_action_demo
      start_line: 60
      text:
      - 'def convert_traj_to_action_demo(traj_path: str, output_file: str = None,
        include_user: bool = False):'
      - '    with open(traj_path) as file:'
      - '        traj = json.load(file)'
      - ''
      - '    history = traj["history"]'
      - '    action_traj = list()'
      - '    admissible_roles = {"assistant", "user"} if include_user else {"assistant"}'
      - '    for step in history:'
      - '        if step["role"] in admissible_roles and step.get("agent", "primary")
        == "primary":'
      - '            action_traj.append({k: v for k, v in step.items() if k in {"content",
        "role"}})'
      - '    save_demo(action_traj, output_file, traj_path)'
      - '    print(f"Saved demo to {output_file}")'
    - end_line: 83
      name: main
      start_line: 74
      text:
      - 'def main(traj_path: str, output_dir: str = None, suffix: str = "", overwrite:
        bool = False, include_user: bool = False):'
      - '    filename = ('
      - '        "/".join([Path(traj_path).parent.name + suffix, Path(traj_path).name.rsplit(".traj",
        1)[0]]) + ".demo.yaml"'
      - '    )'
      - '    output_file = Path(output_dir) / filename'
      - '    if output_file.exists() and not overwrite:'
      - '        msg = f"Output file already exists: {output_file}"'
      - '        raise FileExistsError(msg)'
      - '    output_file.parent.mkdir(parents=True, exist_ok=True)'
      - '    convert_traj_to_action_demo(traj_path, output_file, include_user)'
    - end_line: 93
      name: string2bool
      start_line: 86
      text:
      - 'def string2bool(s):'
      - '    if s.lower() in {"true", "1"}:'
      - '        return True'
      - '    elif s.lower() in {"false", "0"}:'
      - '        return False'
      - '    else:'
      - '        msg = f"Invalid boolean string: {s}"'
      - '        raise ValueError(msg)'
    text:
    - from __future__ import annotations
    - ''
    - import io
    - import json
    - from argparse import ArgumentParser
    - from pathlib import Path
    - ''
    - from ruamel.yaml import YAML
    - from ruamel.yaml.scalarstring import LiteralScalarString as LSS
    - ''
    - 'DEMO_COMMENT = """# This is a demo file generated from trajectory file:'
    - '# {traj_path}'
    - '# You can use this demo file to replay the actions in the trajectory with run_replay.py.'
    - '# You can edit the content of the actions in this file to modify the replay
      behavior.'
    - '# NOTICE:'
    - '#         Only the actions of the assistant will be replayed.'
    - '#         You do not need to modify the observation''s contents or any other
      fields.'
    - '#         You can add or remove actions to modify the replay behavior."""'
    - ''
    - ''
    - 'def convert_to_literal_string(d):'
    - '    """'
    - '    Convert any multi-line strings to LiteralScalarString'
    - '    """'
    - '    if isinstance(d, dict):'
    - '        for key, value in d.items():'
    - '            if isinstance(value, str) and "\n" in value:'
    - '                d[key] = LSS(value.replace("\r\n", "\n").replace("\r", "\n"))'
    - '            elif isinstance(value, dict):'
    - '                convert_to_literal_string(value)'
    - '    elif isinstance(d, list):'
    - '        for i, item in enumerate(d):'
    - '            if isinstance(item, str) and "\n" in item:'
    - '                d[i] = LSS(item.replace("\r\n", "\n").replace("\r", "\n"))'
    - '            elif isinstance(item, dict):'
    - '                convert_to_literal_string(item)'
    - '    elif isinstance(d, str) and "\n" in d:'
    - '        d = LSS(d.replace("\r\n", "\n").replace("\r", "\n"))'
    - '    else:'
    - '        msg = f"Unsupported type: {type(d)}"'
    - '        raise ValueError(msg)'
    - '    return d'
    - ''
    - ''
    - 'def save_demo(data, file, traj_path):'
    - '    """'
    - '    Save a single task instance as a yaml file'
    - '    """'
    - '    data = convert_to_literal_string(data)'
    - '    yaml = YAML()'
    - '    yaml.indent(mapping=2, sequence=4, offset=2)'
    - '    buffer = io.StringIO()'
    - '    yaml.dump(data, buffer)'
    - '    content = buffer.getvalue()'
    - '    header = DEMO_COMMENT.format(traj_path=traj_path)'
    - '    with open(file, "w") as f:'
    - '        f.write(f"{header}\n{content}")'
    - ''
    - ''
    - 'def convert_traj_to_action_demo(traj_path: str, output_file: str = None, include_user:
      bool = False):'
    - '    with open(traj_path) as file:'
    - '        traj = json.load(file)'
    - ''
    - '    history = traj["history"]'
    - '    action_traj = list()'
    - '    admissible_roles = {"assistant", "user"} if include_user else {"assistant"}'
    - '    for step in history:'
    - '        if step["role"] in admissible_roles and step.get("agent", "primary")
      == "primary":'
    - '            action_traj.append({k: v for k, v in step.items() if k in {"content",
      "role"}})'
    - '    save_demo(action_traj, output_file, traj_path)'
    - '    print(f"Saved demo to {output_file}")'
    - ''
    - ''
    - 'def main(traj_path: str, output_dir: str = None, suffix: str = "", overwrite:
      bool = False, include_user: bool = False):'
    - '    filename = ('
    - '        "/".join([Path(traj_path).parent.name + suffix, Path(traj_path).name.rsplit(".traj",
      1)[0]]) + ".demo.yaml"'
    - '    )'
    - '    output_file = Path(output_dir) / filename'
    - '    if output_file.exists() and not overwrite:'
    - '        msg = f"Output file already exists: {output_file}"'
    - '        raise FileExistsError(msg)'
    - '    output_file.parent.mkdir(parents=True, exist_ok=True)'
    - '    convert_traj_to_action_demo(traj_path, output_file, include_user)'
    - ''
    - ''
    - 'def string2bool(s):'
    - '    if s.lower() in {"true", "1"}:'
    - '        return True'
    - '    elif s.lower() in {"false", "0"}:'
    - '        return False'
    - '    else:'
    - '        msg = f"Invalid boolean string: {s}"'
    - '        raise ValueError(msg)'
    - ''
    - ''
    - 'if __name__ == "__main__":'
    - '    parser = ArgumentParser()'
    - '    parser.add_argument("traj_path", type=str, help="Path to trajectory file")'
    - '    parser.add_argument("--output_dir", type=str, help="Output directory for
      action demos", default="./demos")'
    - '    parser.add_argument("--suffix", type=str, help="Suffix for the output file",
      default="")'
    - '    parser.add_argument("--overwrite", type=string2bool, help="Overwrite existing
      files", default=False, nargs="?")'
    - '    parser.add_argument('
    - '        "--include_user",'
    - '        type=string2bool,'
    - '        help="Include user responses (computer)",'
    - '        default=False,'
    - '        nargs="?",'
    - '    )'
    - '    args = parser.parse_args()'
    - '    main(**vars(args))'
scripts:
  README.md: {}
  remove_all_containers.sh: {}
  run.sh: {}
  run_and_eval.sh: {}
  run_from_url.sh: {}
  run_jsonl.sh: {}
  run_replay.sh: {}
sweagent:
  __init__.py:
    classes: []
    functions: []
    text:
    - from __future__ import annotations
    - ''
    - __version__ = "0.6.1"
    - ''
    - from pathlib import Path
    - ''
    - PACKAGE_DIR = Path(__file__).resolve().parent
    - assert PACKAGE_DIR.is_dir()
    - REPO_ROOT = PACKAGE_DIR.parent
    - assert REPO_ROOT.is_dir()
    - CONFIG_DIR = PACKAGE_DIR.parent / "config"
    - assert CONFIG_DIR.is_dir()
    - ''
    - ''
    - __all__ = [
    - '    "PACKAGE_DIR",'
    - '    "CONFIG_DIR",'
    - ']'
  __pycache__:
    __init__.cpython-38.pyc: {}
    __init__.cpython-39.pyc: {}
  agent:
    README.md: {}
    __init__.py:
      classes: []
      functions: []
      text: []
    __pycache__:
      __init__.cpython-39.pyc: {}
      agents.cpython-39.pyc: {}
      commands.cpython-39.pyc: {}
      history_processors.cpython-39.pyc: {}
      models.cpython-39.pyc: {}
      parsing.cpython-39.pyc: {}
    agents.py:
      classes:
      - end_line: 40
        methods: []
        name: Subroutine
        start_line: 30
        text:
        - 'class Subroutine(FrozenSerializable):'
        - '    name: str'
        - '    agent_file: str'
        - '    # one of "action", "observation", "response", "state", "thought"'
        - '    return_type: str = None  # type: ignore'
        - '    init_observation: str | None = None'
        - '    end_name: str | None = None'
        - '    signature: str | None = None'
        - '    docstring: str | None = None'
        - '    model: ModelArguments | None = None'
        - '    agent_args: Any | None = None'
      - end_line: 168
        methods:
        - end_line: 168
          name: __post_init__
          start_line: 103
          text:
          - '    def __post_init__(self):'
          - '        object.__setattr__(self, "command_files", convert_paths_to_abspath(self.command_files))'
          - '        object.__setattr__(self, "demonstrations", convert_paths_to_abspath(self.demonstrations))'
          - ''
          - '        if self.next_step_template is None:'
          - '            object.__setattr__(self, "next_step_template", self.instance_template)'
          - '        if self.next_step_no_output_template is None:'
          - '            object.__setattr__(self, "next_step_no_output_template",
            self.next_step_template)'
          - ''
          - '        object.__setattr__(self, "parse_command", ParseCommand.get(self.parse_command))'
          - '        for file in self.command_files:'
          - '            commands = self.parse_command.parse_command_file(file)'
          - ''
          - '            util_functions = [command for command in commands if command.name.startswith("_")]'
          - '            commands = [command for command in commands if not command.name.startswith("_")]'
          - ''
          - '            object.__setattr__(self, "util_functions", self.util_functions
            + util_functions)'
          - '            object.__setattr__(self, "_commands", self._commands + commands)'
          - ''
          - '        for subroutine in self.subroutine_types:'
          - '            if subroutine.name == "submit":'
          - '                msg = "Cannot use ''submit'' as a subroutine name"'
          - '                raise ValueError(msg)'
          - '            agent_args = AgentArguments('
          - '                model=subroutine.model,'
          - '                config_file=subroutine.agent_file,'
          - '            )'
          - '            object.__setattr__(subroutine, "agent_args", agent_args)'
          - '            object.__setattr__(self, "_subroutines", {**self._subroutines,
            subroutine.name: subroutine})'
          - ''
          - '        multi_line_command_endings = {'
          - '            command.name: command.end_name'
          - '            for command in [*self._commands, *self._subroutines.values()]'
          - '            if command.end_name is not None'
          - '        }'
          - '        object.__setattr__(self, "multi_line_command_endings", multi_line_command_endings)'
          - '        object.__setattr__('
          - '            self,'
          - '            "command_docs",'
          - '            self.parse_command.generate_command_docs('
          - '                self._commands,'
          - '                self.subroutine_types,'
          - '                **self.env_variables,'
          - '            ),'
          - '        )'
          - '        object.__setattr__(self, "parse_function", ParseFunction.get(self.parse_function))'
          - '        if self.format_error_template is None:'
          - '            object.__setattr__('
          - '                self,'
          - '                "format_error_template",'
          - '                self.parse_function.format_error_template,'
          - '            )'
          - '        object.__setattr__('
          - '            self,'
          - '            "format_error_template",'
          - '            self.format_error_template.format(**self.__dict__),'
          - '        )'
          - '        for command in self._commands:'
          - '            if command.name == self.submit_command:'
          - '                object.__setattr__(self, "submit_command_end_name", command.end_name)'
          - '                break'
          - '        object.__setattr__('
          - '            self,'
          - '            "history_processor",'
          - '            HistoryProcessor.get(self.history_processor, **self.history_processor_args),'
          - '        )'
        name: AgentConfig
        start_line: 44
        text:
        - 'class AgentConfig(FrozenSerializable):'
        - '    system_template: str'
        - '    instance_template: str'
        - '    next_step_template: str | None = None  # defaults to instance_template'
        - '    next_step_no_output_template: str | None = None  # defaults to next_step_template'
        - '    strategy_template: str | None = None'
        - '    demonstration_template: str | None = None'
        - '    # Paths to demonstrations. If path is not absolute, it is assumed to
          be'
        - '    # relative to the SWE_AGENT_CONFIG_ROOT (if set) or the SWE-agent repository
          root'
        - '    demonstrations: list[str | Path] = field(default_factory=list)'
        - '    put_demos_in_history: bool = False  # if True, add demonstration to
          history instead of as a single message'
        - '    # defaults to format_error_template in ParseFunction'
        - '    format_error_template: str = None  # type: ignore'
        - '    # Paths to command files. If path is not absolute, it is assumed to
          be'
        - '    # relative to the SWE_AGENT_CONFIG_ROOT (if set) or the SWE-agent repository
          root'
        - '    command_files: list[str | Path] = field(default_factory=list)'
        - '    env_variables: dict[str, str] = field(default_factory=dict)'
        - '    util_functions: list[str] = field(default_factory=list)'
        - '    submit_command: str = "submit"'
        - '    parse_function: str = "ThoughtActionParser"'
        - '    parse_command: str = "ParseCommandBash"'
        - '    history_processor: str = "DefaultHistoryProcessor"'
        - '    history_processor_args: dict[str, Any] = field(default_factory=dict)'
        - '    command_docs: str = None  # type: ignore'
        - '    blocklist_error_template: str = "Interactive operation ''{name}'' is
          not supported by this environment"'
        - '    blocklist: tuple[str, ...] = ('
        - '        "vim",'
        - '        "vi",'
        - '        "emacs",'
        - '        "nano",'
        - '        "nohup",'
        - '        "git",'
        - '    )'
        - '    blocklist_standalone: tuple[str, ...] = ('
        - '        "python",'
        - '        "python3",'
        - '        "ipython",'
        - '        "bash",'
        - '        "sh",'
        - '        "exit",'
        - '        "/bin/bash",'
        - '        "/bin/sh",'
        - '        "nohup",'
        - '        "vi",'
        - '        "vim",'
        - '        "emacs",'
        - '        "nano",'
        - '    )'
        - '    # Should extract environment state in a json readable form'
        - '    state_command: Command = Command('
        - '        name="state",'
        - '        code="""state() {'
        - '            echo ''{"working_dir": "''$(realpath --relative-to=$ROOT/..
          $PWD)''"}'';'
        - '        };""",'
        - '    )'
        - '    _commands: list[Command] = field(default_factory=list)'
        - '    _subroutines: dict[str, Subroutine] = field(default_factory=dict)'
        - '    subroutine_types: list[Subroutine] = field(default_factory=list)'
        - ''
        - '    def __post_init__(self):'
        - '        object.__setattr__(self, "command_files", convert_paths_to_abspath(self.command_files))'
        - '        object.__setattr__(self, "demonstrations", convert_paths_to_abspath(self.demonstrations))'
        - ''
        - '        if self.next_step_template is None:'
        - '            object.__setattr__(self, "next_step_template", self.instance_template)'
        - '        if self.next_step_no_output_template is None:'
        - '            object.__setattr__(self, "next_step_no_output_template", self.next_step_template)'
        - ''
        - '        object.__setattr__(self, "parse_command", ParseCommand.get(self.parse_command))'
        - '        for file in self.command_files:'
        - '            commands = self.parse_command.parse_command_file(file)'
        - ''
        - '            util_functions = [command for command in commands if command.name.startswith("_")]'
        - '            commands = [command for command in commands if not command.name.startswith("_")]'
        - ''
        - '            object.__setattr__(self, "util_functions", self.util_functions
          + util_functions)'
        - '            object.__setattr__(self, "_commands", self._commands + commands)'
        - ''
        - '        for subroutine in self.subroutine_types:'
        - '            if subroutine.name == "submit":'
        - '                msg = "Cannot use ''submit'' as a subroutine name"'
        - '                raise ValueError(msg)'
        - '            agent_args = AgentArguments('
        - '                model=subroutine.model,'
        - '                config_file=subroutine.agent_file,'
        - '            )'
        - '            object.__setattr__(subroutine, "agent_args", agent_args)'
        - '            object.__setattr__(self, "_subroutines", {**self._subroutines,
          subroutine.name: subroutine})'
        - ''
        - '        multi_line_command_endings = {'
        - '            command.name: command.end_name'
        - '            for command in [*self._commands, *self._subroutines.values()]'
        - '            if command.end_name is not None'
        - '        }'
        - '        object.__setattr__(self, "multi_line_command_endings", multi_line_command_endings)'
        - '        object.__setattr__('
        - '            self,'
        - '            "command_docs",'
        - '            self.parse_command.generate_command_docs('
        - '                self._commands,'
        - '                self.subroutine_types,'
        - '                **self.env_variables,'
        - '            ),'
        - '        )'
        - '        object.__setattr__(self, "parse_function", ParseFunction.get(self.parse_function))'
        - '        if self.format_error_template is None:'
        - '            object.__setattr__('
        - '                self,'
        - '                "format_error_template",'
        - '                self.parse_function.format_error_template,'
        - '            )'
        - '        object.__setattr__('
        - '            self,'
        - '            "format_error_template",'
        - '            self.format_error_template.format(**self.__dict__),'
        - '        )'
        - '        for command in self._commands:'
        - '            if command.name == self.submit_command:'
        - '                object.__setattr__(self, "submit_command_end_name", command.end_name)'
        - '                break'
        - '        object.__setattr__('
        - '            self,'
        - '            "history_processor",'
        - '            HistoryProcessor.get(self.history_processor, **self.history_processor_args),'
        - '        )'
      - end_line: 194
        methods:
        - end_line: 194
          name: __post_init__
          start_line: 181
          text:
          - '    def __post_init__(self):'
          - '        if self.config is None and self.config_file is not None:'
          - '            # If unassigned, we load the config from the file to store
            its contents with the overall arguments'
          - '            config = AgentConfig.load_yaml(self.config_file)'
          - '            object.__setattr__(self, "config", config)'
          - '        assert self.config is not None  # mypy'
          - '        for subroutine in getattr(self.config, "subroutines", {}).values():'
          - '            model_args = subroutine.model'
          - '            object.__setattr__('
          - '                model_args,'
          - '                "per_instance_cost_limit",'
          - '                self.model.per_instance_cost_limit,'
          - '            )'
          - '            object.__setattr__(model_args, "total_cost_limit", self.model.total_cost_limit)'
        name: AgentArguments
        start_line: 172
        text:
        - 'class AgentArguments(FlattenedAccess, FrozenSerializable):'
        - '    """Configure the agent''s behaviour (templates, parse functions, blocklists,
          ...)."""'
        - ''
        - '    model: ModelArguments = None'
        - ''
        - '    # Policy can only be set via config yaml file from command line'
        - '    config_file: Path | None = None'
        - '    config: AgentConfig | None = field(default=None, cmd=False)'
        - ''
        - '    def __post_init__(self):'
        - '        if self.config is None and self.config_file is not None:'
        - '            # If unassigned, we load the config from the file to store
          its contents with the overall arguments'
        - '            config = AgentConfig.load_yaml(self.config_file)'
        - '            object.__setattr__(self, "config", config)'
        - '        assert self.config is not None  # mypy'
        - '        for subroutine in getattr(self.config, "subroutines", {}).values():'
        - '            model_args = subroutine.model'
        - '            object.__setattr__('
        - '                model_args,'
        - '                "per_instance_cost_limit",'
        - '                self.model.per_instance_cost_limit,'
        - '            )'
        - '            object.__setattr__(model_args, "total_cost_limit", self.model.total_cost_limit)'
      - end_line: 202
        methods: []
        name: TrajectoryStep
        start_line: 197
        text:
        - 'class TrajectoryStep(TypedDict):'
        - '    action: str'
        - '    observation: str'
        - '    response: str'
        - '    state: str | None'
        - '    thought: str'
      - end_line: 236
        methods:
        - end_line: 206
          name: on_init
          start_line: 206
          text:
          - '    def on_init(self): ...'
        - end_line: 210
          name: on_run_start
          start_line: 208
          text:
          - '    def on_run_start('
          - '        self,'
          - '    ): ...'
        - end_line: 212
          name: on_step_start
          start_line: 212
          text:
          - '    def on_step_start(self): ...'
        - end_line: 214
          name: on_actions_generated
          start_line: 214
          text:
          - '    def on_actions_generated(self, *, thought: str, action: str, output:
            str): ...'
        - end_line: 216
          name: on_sub_action_started
          start_line: 216
          text:
          - '    def on_sub_action_started(self, *, sub_action: str): ...'
        - end_line: 218
          name: on_sub_action_executed
          start_line: 218
          text:
          - '    def on_sub_action_executed(self, *, obs: str, done: bool): ...'
        - end_line: 220
          name: on_step_done
          start_line: 220
          text:
          - '    def on_step_done(self, *, trajectory_step: TrajectoryStep, model_stats:
            APIStats): ...'
        - end_line: 222
          name: on_run_done
          start_line: 222
          text:
          - '    def on_run_done(self): ...'
        - end_line: 225
          name: on_model_query
          start_line: 224
          text:
          - '    def on_model_query(self, *, query: str, agent: str):'
          - '        """Actually query the model with the complete history."""'
        - end_line: 236
          name: on_query_message_added
          start_line: 227
          text:
          - '    def on_query_message_added('
          - '        self,'
          - '        *,'
          - '        role: str,'
          - '        content: str,'
          - '        agent: str,'
          - '        is_demo: bool = False,'
          - '        thought: str = "",'
          - '        action: str = "",'
          - '    ): ...'
        name: AgentHook
        start_line: 205
        text:
        - 'class AgentHook:'
        - '    def on_init(self): ...'
        - ''
        - '    def on_run_start('
        - '        self,'
        - '    ): ...'
        - ''
        - '    def on_step_start(self): ...'
        - ''
        - '    def on_actions_generated(self, *, thought: str, action: str, output:
          str): ...'
        - ''
        - '    def on_sub_action_started(self, *, sub_action: str): ...'
        - ''
        - '    def on_sub_action_executed(self, *, obs: str, done: bool): ...'
        - ''
        - '    def on_step_done(self, *, trajectory_step: TrajectoryStep, model_stats:
          APIStats): ...'
        - ''
        - '    def on_run_done(self): ...'
        - ''
        - '    def on_model_query(self, *, query: str, agent: str):'
        - '        """Actually query the model with the complete history."""'
        - ''
        - '    def on_query_message_added('
        - '        self,'
        - '        *,'
        - '        role: str,'
        - '        content: str,'
        - '        agent: str,'
        - '        is_demo: bool = False,'
        - '        thought: str = "",'
        - '        action: str = "",'
        - '    ): ...'
      - end_line: 861
        methods:
        - end_line: 256
          name: __init__
          start_line: 242
          text:
          - '    def __init__(self, name: str, args: AgentArguments):'
          - '        self.name = name'
          - '        self.model = get_model(args.model, args.config._commands + args.config.subroutine_types)'
          - '        self.config = args.config'
          - '        assert self.config is not None  # mypy'
          - '        self.system_args = {'
          - '            "command_docs": self.config.command_docs,'
          - '            **self.config.env_variables,'
          - '        }'
          - '        self.instance_args = None'
          - '        self._parse_command_patterns()'
          - '        self.history = []'
          - '        self.last_container_id = None'
          - '        self.hooks = []'
          - '        self.logger = get_logger("agent")'
        - end_line: 261
          name: add_hook
          start_line: 258
          text:
          - '    def add_hook(self, hook: AgentHook):'
          - '        """Add hook to agent"""'
          - '        hook.on_init()'
          - '        self.hooks.append(hook)'
        - end_line: 266
          name: _append_history
          start_line: 263
          text:
          - '    def _append_history(self, item: dict):'
          - '        for hook in self.hooks:'
          - '            hook.on_query_message_added(**item)'
          - '        self.history.append(item)'
        - end_line: 322
          name: setup
          start_line: 268
          text:
          - '    def setup(self, instance_args, init_model_stats=None) -> None:'
          - '        """Setup the agent for a new instance. This includes'
          - '        formatting the system message and adding demonstrations to the
            history.'
          - ''
          - '        Args:'
          - '            instance_args: Arguments for the instance'
          - '        """'
          - '        assert self.config is not None  # mypy'
          - '        self.model.reset_stats(init_model_stats)'
          - '        self.instance_args = instance_args'
          - ''
          - '        system_msg = self.config.system_template.format(**self.system_args)'
          - '        self.logger.info(f"SYSTEM ({self.name})\n{system_msg}")'
          - ''
          - '        self.history: list[dict[str, Any]] = []'
          - '        self._append_history({"role": "system", "content": system_msg,
            "agent": self.name})'
          - ''
          - '        if "history_to_messages" in dir(self.model):'
          - '            for demonstration_path in self.config.demonstrations:'
          - '                if self.config.demonstration_template is None and not
            self.config.put_demos_in_history:'
          - '                    msg = "Cannot use demonstrations without a demonstration
            template or put_demos_in_history=True"'
          - '                    raise ValueError(msg)'
          - ''
          - '                # Load history'
          - '                self.logger.info(f"DEMONSTRATION: {demonstration_path}")'
          - '                demo_history = json.loads(Path(demonstration_path).read_text())["history"]'
          - '                demo_history = ['
          - '                    entry'
          - '                    for entry in demo_history'
          - '                    if ("agent" not in entry) or ("agent" in entry and
            entry["agent"] == self.name)'
          - '                ]'
          - ''
          - '                if self.config.put_demos_in_history:'
          - '                    if self.config.demonstration_template is not None:'
          - '                        self.logger.warning("Demonstration template is
            ignored for put_demos_in_history=True")'
          - '                    # Add demonstration to history directly as separate
            messages'
          - '                    for entry in demo_history:'
          - '                        if entry["role"] != "system":'
          - '                            entry["is_demo"] = True'
          - '                            self._append_history(entry)'
          - '                else:'
          - '                    # Add demonstration as single message to history'
          - '                    demo_message = self.model.history_to_messages('
          - '                        demo_history,'
          - '                        is_demonstration=True,'
          - '                    )'
          - '                    demonstration = self.config.demonstration_template.format(demonstration=demo_message)'
          - '                    self._append_history('
          - '                        {'
          - '                            "agent": self.name,'
          - '                            "content": demonstration,'
          - '                            "is_demo": True,'
          - '                            "role": "user",'
          - '                        },'
          - '                    )'
        - end_line: 327
          name: state_command
          start_line: 325
          text:
          - '    def state_command(self) -> str:'
          - '        """Return the bash command that will be used to extract the environment
            state."""'
          - '        return self.config.state_command.name'
        - end_line: 332
          name: local_history
          start_line: 330
          text:
          - '    def local_history(self) -> list[dict[str, str]]:'
          - '        """Return the history of the agent since the last reset."""'
          - '        return self.config.history_processor([entry for entry in self.history
            if entry["agent"] == self.name])'
        - end_line: 344
          name: save_trajectory
          start_line: 334
          text:
          - '    def save_trajectory('
          - '        self, trajectory: list[dict[str, Any]], log_path: Path, env_name:
            str, info: dict[str, Any]'
          - '    ) -> None:'
          - '        """Save the trajectory"""'
          - '        log_dict = {'
          - '            "environment": env_name,'
          - '            "trajectory": trajectory,'
          - '            "history": self.history,'
          - '            "info": info,'
          - '        }'
          - '        log_path.write_text(json.dumps(log_dict, indent=2))'
        - end_line: 373
          name: _get_first_match
          start_line: 346
          text:
          - '    def _get_first_match(self, action: str, pattern_type: str) -> re.Match
            | None:'
          - '        """Return the first match of a command pattern in the action
            string."""'
          - '        assert self.config is not None  # mypy'
          - '        if pattern_type == "subroutine":'
          - '            patterns = {k: v for k, v in self.subroutine_patterns.items()}'
          - '        elif pattern_type == "multi_line":'
          - '            patterns = {'
          - '                k: v'
          - '                for k, v in self.command_patterns.items()'
          - '                if k in self.config.multi_line_command_endings or k ==
            self.config.submit_command'
          - '            }'
          - '            patterns += {'
          - '                k: v for k, v in self.subroutine_patterns.items() if
            k in self.config.multi_line_command_endings'
          - '            }'
          - '        elif pattern_type == "multi_line_no_subroutines":'
          - '            patterns = {k: v for k, v in self.command_patterns.items()
            if k in self.config.multi_line_command_endings}'
          - '        else:'
          - '            msg = f"Unknown pattern type: {pattern_type}"'
          - '            raise ValueError(msg)'
          - '        matches = list()'
          - '        for _, pat in patterns.items():'
          - '            match = pat.search(action)'
          - '            if match:'
          - '                matches.append(match)'
          - '        if len(matches) == 0:'
          - '            return None'
          - '        matches = sorted(matches, key=lambda x: x.start())'
          - '        return matches[0]'
        - end_line: 403
          name: _guard_multiline_input
          start_line: 375
          text:
          - '    def _guard_multiline_input(self, action: str) -> str:'
          - '        """Split action by multiline commands, then append the first
            line in each multiline command with "<< ''{end_name}''".'
          - '        Multiline commands (which are specified by an end_name) are commands
            that span multiple lines and are terminated by a specific end_name.'
          - ''
          - '        Their multi-line argument is sent using a heredoc, which is a
            way to send a multi-line string to a command in bash.'
          - '        """'
          - '        parsed_action = list()'
          - '        rem_action = action'
          - '        while rem_action.strip():'
          - '            first_match = self._get_first_match(rem_action, "multi_line_no_subroutines")'
          - '            if first_match:'
          - '                pre_action = rem_action[: first_match.start()]'
          - '                match_action = rem_action[first_match.start() : first_match.end()]'
          - '                rem_action = rem_action[first_match.end() :]'
          - '                if pre_action.strip():'
          - '                    parsed_action.append(pre_action)'
          - '                if match_action.strip():'
          - '                    eof = first_match.group(3).strip()'
          - '                    if not match_action.split("\n")[0].strip().endswith(f"<<
            ''{eof}''"):'
          - '                        guarded_command = match_action[first_match.start()
            :]'
          - '                        first_line = guarded_command.split("\n")[0]'
          - '                        guarded_command = guarded_command.replace(first_line,
            first_line + f" << ''{eof}''", 1)'
          - '                        parsed_action.append(guarded_command)'
          - '                    else:'
          - '                        parsed_action.append(match_action)'
          - '            else:'
          - '                parsed_action.append(rem_action)'
          - '                rem_action = ""'
          - '        return "\n".join(parsed_action)'
        - end_line: 438
          name: split_actions
          start_line: 405
          text:
          - '    def split_actions(self, action: str, pattern_type="subroutine") ->
            list[dict[str, Any]]:'
          - '        """Split an action into a list of actions in a greedy manner,
            each of which is a subroutine call or a single command."""'
          - '        parsed_action = list()'
          - '        rem_action = action'
          - '        while rem_action.strip():'
          - '            first_match = self._get_first_match(rem_action, pattern_type)'
          - '            if first_match:'
          - '                pre_action = rem_action[: first_match.start()]'
          - '                match_action = rem_action[first_match.start() : first_match.end()]'
          - '                rem_action = rem_action[first_match.end() :]'
          - '                if pre_action.strip():'
          - '                    parsed_action.append({"agent": self.name, "action":
            pre_action, "cmd_name": None})'
          - '                if match_action.strip():'
          - '                    if match_action.split()[0] == self.config.submit_command:'
          - '                        parsed_action.append('
          - '                            {'
          - '                                "agent": self.name,'
          - '                                "action": match_action,'
          - '                                "cmd_name": first_match.group(1),'
          - '                            },'
          - '                        )  # submit command is not a subroutine'
          - '                    else:'
          - '                        parsed_action.append('
          - '                            {'
          - '                                "agent": first_match.group(1),'
          - '                                "args": first_match.group(2),'
          - '                                "action": match_action,'
          - '                                "cmd_name": first_match.group(1),'
          - '                            },'
          - '                        )'
          - '            else:'
          - '                parsed_action.append({"agent": self.name, "action": rem_action,
            "cmd_name": None})'
          - '                rem_action = ""'
          - '        return parsed_action'
        - end_line: 472
          name: _parse_command_patterns
          start_line: 440
          text:
          - '    def _parse_command_patterns(self) -> None:'
          - '        assert self.config is not None  # mypy'
          - '        self.command_patterns = dict()'
          - '        for command in self.config._commands:'
          - '            if command.end_name is not None:'
          - '                pat = re.compile('
          - '                    rf"^\s*({command.name})\s*(.*?)^({command.end_name})\s*$",'
          - '                    re.DOTALL | re.MULTILINE,'
          - '                )'
          - '                self.command_patterns[command.name] = pat'
          - '            else:'
          - '                pat = re.compile(rf"^\s*({command.name})\s*(.*?)$", re.MULTILINE)'
          - '                self.command_patterns[command.name] = pat'
          - '        self.subroutine_patterns = dict()'
          - '        for _, subroutine in self.config._subroutines.items():'
          - '            if subroutine.end_name is None:'
          - '                pat = re.compile(rf"^\s*({subroutine.name})\s*(.*?)$",
            re.MULTILINE)'
          - '                self.subroutine_patterns[subroutine.name,] = pat'
          - '            else:'
          - '                pat = re.compile('
          - '                    rf"^\s*({subroutine.name})\s*(.*?)^({subroutine.end_name})\s*$",'
          - '                    re.DOTALL | re.MULTILINE,'
          - '                )'
          - '                self.subroutine_patterns[subroutine.name] = pat'
          - '        if hasattr(self.config, "submit_command_end_name"):'
          - '            submit_pat = re.compile('
          - '                rf"^\s*({self.config.submit_command})\s*(.*?)^({self.config.submit_command_end_name})\s*$",'
          - '                re.DOTALL | re.MULTILINE,'
          - '            )'
          - '        else:'
          - '            submit_pat = re.compile(rf"^\s*({self.config.submit_command})(\s*)$",
            re.MULTILINE)  # group 2 is nothing'
          - '        self.subroutine_patterns[self.config.submit_command] = submit_pat'
          - '        self.command_patterns[self.config.submit_command] = submit_pat'
        - end_line: 502
          name: forward
          start_line: 474
          text:
          - '    def forward(self, observation: str, available_actions: list[str],
            state: str) -> tuple[str, str, str]:'
          - '        """Forwards the model'
          - ''
          - '        Args:'
          - '            observation: Observation'
          - '            available_actions: Currently not used'
          - '            state:'
          - ''
          - '        Returns:'
          - '            thought: model reasoning'
          - '            action: action that the model proposes'
          - '            output: raw model output (not output of the action)'
          - '        """'
          - '        thought, action, output = self.forward_with_error_check(observation,
            state)'
          - ''
          - '        self._append_history('
          - '            {'
          - '                "role": "assistant",'
          - '                "content": output,'
          - '                "thought": thought,'
          - '                "action": action,'
          - '                "agent": self.name,'
          - '            },'
          - '        )'
          - ''
          - "        self.logger.info(f\"\U0001F4AD THOUGHT ({self.name})\\n{thought}\"\
            )"
          - "        self.logger.info(f\"\U0001F3AC ACTION ({self.name})\\n{action}\"\
            )"
          - ''
          - '        return thought, action, output'
        - end_line: 547
          name: forward_model
          start_line: 504
          text:
          - '    def forward_model(self, observation: str, state: str) -> str:'
          - '        """Query the model with the current state and observation with
            the appropriate template.'
          - ''
          - '        Returns:'
          - '            output: raw model output (not output of the command)'
          - '        """'
          - '        assert self.config is not None  # mypy'
          - ''
          - '        state_vars = json.loads(state)'
          - ''
          - '        templates: list[str] = []'
          - '        # Determine observation template based on what prior observation
            was'
          - '        if self.history[-1]["role"] == "system" or self.history[-1].get("is_demo",
            False):'
          - '            # Show instance template if prev. obs. was initial system
            message'
          - '            templates = [self.config.instance_template]'
          - '            if self.config.strategy_template is not None:'
          - '                templates.append(self.config.strategy_template)'
          - '        elif observation is None or observation.strip() == "":'
          - '            # Show no output template if observation content was empty'
          - '            templates = [self.config.next_step_no_output_template]'
          - '        else:'
          - '            # Show standard output template if there is observation content'
          - '            templates = [self.config.next_step_template]'
          - ''
          - '        # Populate selected template(s) with information (e.g., issue,
            arguments, state)'
          - '        messages = []'
          - '        for template in templates:'
          - '            messages.append('
          - '                template.format('
          - '                    **self.instance_args,'
          - '                    **self.system_args,'
          - '                    **state_vars,'
          - '                    observation=(observation if observation is not None
            else ""),'
          - '                ),'
          - '            )'
          - ''
          - '        message = "\n".join(messages)'
          - ''
          - "        self.logger.info(f\"\U0001F916 MODEL INPUT\\n{message}\")"
          - '        self._append_history({"role": "user", "content": message, "agent":
            self.name})'
          - ''
          - '        for hook in self.hooks:'
          - '            hook.on_model_query(query=self.local_history, agent=self.name)'
          - '        return self.model.query(self.local_history)'
        - end_line: 560
          name: retry_after_format_fail
          start_line: 549
          text:
          - '    def retry_after_format_fail(self, output: str) -> str:'
          - '        """Ask the model to correct (without committing to persistent
            history) after a malformatted model output"""'
          - '        format_error_template = self.config.format_error_template'
          - ''
          - '        self.logger.warning(f"MALFORMED OUTPUT\n{output}")'
          - '        self.logger.warning(f"FORMAT ERROR\n{format_error_template}")'
          - ''
          - '        temp_history = self.local_history + ['
          - '            {"role": "assistant", "content": output, "agent": self.name},'
          - '            {"role": "user", "content": format_error_template, "agent":
            self.name},'
          - '        ]'
          - '        return self.model.query(temp_history)'
        - end_line: 574
          name: retry_after_blocklist_fail
          start_line: 562
          text:
          - '    def retry_after_blocklist_fail(self, output: str, action: str) ->
            str:'
          - '        """Ask the model to correct (without committing to persistent
            history) after a disallowed command"""'
          - '        name = action.strip().split()[0]'
          - '        blocklist_error_message = self.config.blocklist_error_template.format(name=name)'
          - ''
          - '        self.logger.warning(f"BLOCKLISTED OUTPUT\n{output}")'
          - '        self.logger.warning(f"BLOCKLIST ERROR\n{blocklist_error_message}")'
          - ''
          - '        temp_history = self.local_history + ['
          - '            {"role": "assistant", "content": output, "agent": self.name},'
          - '            {"role": "user", "content": blocklist_error_message, "agent":
            self.name},'
          - '        ]'
          - '        return self.model.query(temp_history)'
        - end_line: 586
          name: should_block_action
          start_line: 576
          text:
          - '    def should_block_action(self, action: str) -> bool:'
          - '        """Check if the command should be blocked."""'
          - '        names = action.strip().split()'
          - '        if len(names) == 0:'
          - '            return False'
          - '        name = names[0]'
          - '        if name in self.config.blocklist:'
          - '            return True'
          - '        if name in self.config.blocklist_standalone and name == action.strip():'
          - '            return True'
          - '        return False'
        - end_line: 633
          name: check_format_and_requery
          start_line: 588
          text:
          - '    def check_format_and_requery('
          - '        self,'
          - '        output: str,'
          - '    ) -> tuple[str, str, str]:'
          - '        """Query the model with the current state and observation with
            the appropriate template.'
          - ''
          - '        Try to parse the output into a thought and action. Retry if the
            output is malformatted or the action is blocked.'
          - ''
          - '        Returns:'
          - '            thought: model reasoning'
          - '            action: action that the model proposes'
          - '            output: raw model output'
          - '        """'
          - '        # Condition for handling outputs with no thought (just action)'
          - '        if self.model.args.model_name == "human":'
          - '            return "", output, output'
          - '        elif self.model.args.model_name == "human_thought":'
          - '            thought, action = ParseFunction.get("ThoughtActionParser")('
          - '                output,'
          - '                self.config._commands + self.config.subroutine_types,'
          - '                strict=False,'
          - '            )'
          - '            return thought, action, output'
          - ''
          - '        format_fails = blocklist_fails = 0'
          - ''
          - '        while format_fails + blocklist_fails <= 2:'
          - '            try:'
          - '                thought, action = self.config.parse_function('
          - '                    output,'
          - '                    self.config._commands + self.config.subroutine_types,'
          - '                    strict=False,'
          - '                )'
          - '            except KeyboardInterrupt:'
          - '                raise'
          - '            except FormatError:'
          - '                format_fails += 1'
          - '                output = self.retry_after_format_fail(output)'
          - '                continue'
          - '            if self.should_block_action(action):'
          - '                blocklist_fails += 1'
          - '                output = self.retry_after_blocklist_fail(output, action)'
          - '            else:'
          - '                return thought, action, output'
          - '        self.logger.warning(f"Malformat limit reached: \n{output}")'
          - '        return "Exit due to format error", "exit_format", output'
        - end_line: 667
          name: forward_with_error_check
          start_line: 635
          text:
          - '    def forward_with_error_check(self, observation: str, state: str)
            -> tuple[str, str, str]:'
          - '        """Wrapper around `self.forward_model` that handles errors and
            retries'
          - '        due to format errors or blocked actions.'
          - ''
          - '        Returns:'
          - '            thought: model reasoning'
          - '            action: action that the model proposes'
          - '            output: raw model output'
          - '        """'
          - '        try:'
          - '            return self.check_format_and_requery(self.forward_model(observation,
            state))'
          - '        except KeyboardInterrupt:'
          - '            raise'
          - '        except RuntimeError as e:'
          - '            self.logger.warning(f"Runtime error: {e}")'
          - '            return ('
          - '                f"Exit due to runtime error: {e}",'
          - '                "exit_error",'
          - '                f"exit due to runtime error: {e}",'
          - '            )'
          - '        except ContextWindowExceededError:'
          - '            self.logger.warning("Context window exceeded")'
          - '            return "Exit due to context window", "exit_context", "Exit
            due to context window"'
          - '        except CostLimitExceededError:'
          - '            self.logger.warning("Cost limit exceeded")'
          - '            return "Exit due to cost limit", "exit_cost", "Exit due to
            cost limit"'
          - '        except RetryError as e:'
          - '            self.logger.warning(f"Retry error: {e}")'
          - '            return ('
          - '                f"Exit due to retry error: {e}",'
          - '                "exit_api",'
          - '                f"exit due to retry error: {e}",'
          - '            )'
        - end_line: 670
          name: init_environment_vars
          start_line: 669
          text:
          - '    def init_environment_vars(self, env: SWEEnv):'
          - '        self.set_environment_vars(env, self.config.env_variables)'
        - end_line: 720
          name: set_environment_vars
          start_line: 672
          text:
          - '    def set_environment_vars(self, env: SWEEnv, env_variables: dict[str,
            Any]) -> None:'
          - '        assert self.config is not None  # mypy'
          - '        commands_to_execute = ('
          - '            [self.config.state_command.code]'
          - '            +'
          - '            # [code for code in self.config.util_functions] +'
          - '            # [command.code for command in self.config._commands] +'
          - '            [f"{k}={v}" for k, v in env_variables.items()]'
          - '        )'
          - '        commands = "\n".join(commands_to_execute)'
          - '        try:'
          - '            output = env.communicate(commands)'
          - '            if env.returncode != 0:'
          - '                msg = f"Nonzero return code: {env.returncode}\nOutput:
            {output}"'
          - '                raise RuntimeError(msg)'
          - '        except KeyboardInterrupt:'
          - '            raise'
          - '        except Exception as e:'
          - '            self.logger.warning("Failed to set environment variables")'
          - '            raise e'
          - '        command_files = list()'
          - '        for file in self.config.command_files:'
          - '            datum = dict()'
          - '            with open(file) as f:'
          - '                contents = f.read()'
          - '            datum["contents"] = contents'
          - '            filename = Path(file).name'
          - '            if not contents.strip().startswith("#!"):'
          - '                if filename.endswith(".sh"):'
          - '                    # files are sourced, so they are not executable'
          - '                    datum["name"] = Path(file).name'
          - '                    datum["type"] = "source_file"'
          - '                elif filename.startswith("_"):'
          - '                    # files are sourced, so they are not executable'
          - '                    datum["name"] = Path(file).name'
          - '                    datum["type"] = "utility"'
          - '                else:'
          - '                    msg = ('
          - '                        f"Non-shell script file {file} does not start
            with shebang.\n"'
          - '                        "Either add a shebang (#!) or change the file
            extension to .sh if you want to source it.\n"'
          - '                        "You can override this behavior by adding an
            underscore to the file name (e.g. _utils.py)."'
          - '                    )'
          - '                    raise ValueError(msg)'
          - '            else:'
          - '                # scripts are made executable'
          - '                datum["name"] = Path(file).name.rsplit(".", 1)[0]'
          - '                datum["type"] = "script"'
          - '            command_files.append(datum)'
          - '        env.add_commands(command_files)'
        - end_line: 728
          name: get_environment_vars
          start_line: 722
          text:
          - '    def get_environment_vars(self, env: SWEEnv) -> dict[str, Any]:'
          - '        """Get environment variables"""'
          - '        assert self.config is not None  # mypy'
          - '        env_vars = dict()'
          - '        for var in self.config.env_variables:'
          - '            env_vars[var] = env.communicate(f"echo ${var}").strip()'
          - '        return env_vars'
        - end_line: 757
          name: call_subroutine
          start_line: 730
          text:
          - '    def call_subroutine(self, agent_name: str, sub_action, env: SWEEnv):'
          - '        """Call subroutine"""'
          - '        assert self.config is not None  # mypy'
          - '        env_vars = self.get_environment_vars(env)'
          - '        cwd = env.communicate("pwd -P").strip()'
          - '        init_observation = self.config._subroutines[agent_name].init_observation'
          - '        if init_observation is not None:'
          - '            obs, _, _, _ = env.step(init_observation.format(args=sub_action["args"]))'
          - '        else:'
          - '            obs = None'
          - '        if env.returncode != 0:'
          - '            self._append_history({"role": "user", "content": obs, "agent":
            agent_name})'
          - '            msg = f"Nonzero return code: {env.returncode} for init_observation
            in {agent_name}.\n{obs}"'
          - '            raise RuntimeError(msg)'
          - '        return_type = self.config._subroutines[agent_name].return_type'
          - '        sub_agent = Agent(agent_name, self.config._subroutines[agent_name].agent_args)'
          - '        sub_agent_output = sub_agent.run('
          - '            {"issue": sub_action["args"]},'
          - '            env,'
          - '            observation=obs,'
          - '            return_type=return_type,'
          - '            init_model_stats=self.model.stats,'
          - '        )'
          - '        self.history += sub_agent.history'
          - '        self.set_environment_vars(env, env_vars)'
          - '        env.communicate(f"cd {cwd}")'
          - '        self.model.stats.replace(sub_agent.model.stats)'
          - '        return sub_agent_output'
        - end_line: 861
          name: run
          start_line: 759
          text:
          - '    def run('
          - '        self,'
          - '        setup_args: dict[str, Any],'
          - '        env: SWEEnv,'
          - '        observation: str | None = None,'
          - '        traj_dir: Path | None = None,'
          - '        return_type: str | None = "info_trajectory",'
          - '        init_model_stats: APIStats | None = None,'
          - '    ):'
          - '        """'
          - '        Run the agent on an environment.'
          - '        Return the final value of the specified return type.'
          - ''
          - '        Args:'
          - '            setup_args: Arguments to pass to the agent''s setup method.'
          - '            env: The environment to run the agent on.'
          - '            observation: Output from environment setup'
          - '            traj_dir: Directory to save the trajectory to'
          - '            return_type: Controls what to return.'
          - '                This should be left at `info_trajectory`, the'
          - '                other values are for internal usage with subroutines.'
          - '            init_model_stats: Initial model stats to use for the run.'
          - ''
          - '        Returns:'
          - '            If return_type is "info_trajectory", returns a tuple of'
          - '            the info dictionary and the trajectory (list of dictionaries).'
          - '        """'
          - '        done = False'
          - '        # mypy checks'
          - '        assert env.container_obj is not None'
          - '        assert env.record is not None'
          - '        assert self.config is not None'
          - ''
          - '        if env.container_obj.id != self.last_container_id:'
          - '            self.logger.info(f"Initializing agent settings for container
            {env.container_obj.id}")'
          - '            self.init_environment_vars(env)'
          - '            self.last_container_id = env.container_obj.id'
          - '        # Re-initialize primary'
          - '        self.setup(setup_args, init_model_stats)'
          - ''
          - '        for hook in self.hooks:'
          - '            hook.on_run_start()'
          - ''
          - '        # Run action/observation loop'
          - '        trajectory = []'
          - '        info = {}'
          - '        traj_log_path = traj_dir / (env.record["instance_id"] + ".traj")'
          - '        self.logger.info("Trajectory will be saved to %s", traj_log_path)'
          - '        while not done:'
          - '            for hook in self.hooks:'
          - '                hook.on_step_start()'
          - '            state = env.communicate(self.state_command) if self.state_command
            else None'
          - '            thought, action, output = self.forward(observation, env.get_available_actions(),
            state)'
          - '            for hook in self.hooks:'
          - '                hook.on_actions_generated(thought=thought, action=action,
            output=output)'
          - '            observations = list()'
          - '            run_action = self._guard_multiline_input(action)'
          - '            for sub_action in self.split_actions(run_action):'
          - '                if sub_action["agent"] == self.name or sub_action["cmd_name"]
            == self.config.submit_command:'
          - '                    for hook in self.hooks:'
          - '                        hook.on_sub_action_started(sub_action=sub_action)'
          - '                    obs, _, done, info = env.step(sub_action["action"])'
          - '                    for hook in self.hooks:'
          - '                        hook.on_sub_action_executed(obs=obs, done=done)'
          - '                    observations.append(obs)'
          - '                    if sub_action["cmd_name"] == self.config.submit_command:'
          - '                        done = True'
          - '                    if done:'
          - '                        break'
          - '                else:'
          - '                    agent_name = sub_action["agent"]'
          - '                    sub_agent_output = self.call_subroutine(agent_name,
            sub_action, env)'
          - '                    observations.append(sub_agent_output)'
          - ''
          - '            observation = "\n".join([obs for obs in observations if obs
            is not None])'
          - ''
          - '            trajectory_step = TrajectoryStep('
          - '                {'
          - '                    "action": action,'
          - '                    "observation": observation,'
          - '                    "response": output,'
          - '                    "state": state,'
          - '                    "thought": thought,'
          - '                },'
          - '            )'
          - '            trajectory.append(trajectory_step)'
          - '            model_stats: APIStats = self.model.stats'
          - '            info["model_stats"] = model_stats.to_dict()'
          - '            if traj_dir:'
          - '                self.save_trajectory(trajectory, traj_log_path, env_name=env.name,
            info=info)'
          - '            for hook in self.hooks:'
          - '                hook.on_step_done(trajectory_step=trajectory_step, model_stats=model_stats)'
          - ''
          - '        for hook in self.hooks:'
          - '            hook.on_run_done()'
          - ''
          - '        self.logger.info("Trajectory saved to %s", traj_log_path)'
          - ''
          - '        if return_type == "info":'
          - '            return info'
          - '        if return_type == "info_trajectory":'
          - '            return info, trajectory'
          - '        return trajectory[-1][return_type]'
        name: Agent
        start_line: 239
        text:
        - 'class Agent:'
        - '    """Agent handles the behaviour of the model and how it interacts with
          the environment."""'
        - ''
        - '    def __init__(self, name: str, args: AgentArguments):'
        - '        self.name = name'
        - '        self.model = get_model(args.model, args.config._commands + args.config.subroutine_types)'
        - '        self.config = args.config'
        - '        assert self.config is not None  # mypy'
        - '        self.system_args = {'
        - '            "command_docs": self.config.command_docs,'
        - '            **self.config.env_variables,'
        - '        }'
        - '        self.instance_args = None'
        - '        self._parse_command_patterns()'
        - '        self.history = []'
        - '        self.last_container_id = None'
        - '        self.hooks = []'
        - '        self.logger = get_logger("agent")'
        - ''
        - '    def add_hook(self, hook: AgentHook):'
        - '        """Add hook to agent"""'
        - '        hook.on_init()'
        - '        self.hooks.append(hook)'
        - ''
        - '    def _append_history(self, item: dict):'
        - '        for hook in self.hooks:'
        - '            hook.on_query_message_added(**item)'
        - '        self.history.append(item)'
        - ''
        - '    def setup(self, instance_args, init_model_stats=None) -> None:'
        - '        """Setup the agent for a new instance. This includes'
        - '        formatting the system message and adding demonstrations to the
          history.'
        - ''
        - '        Args:'
        - '            instance_args: Arguments for the instance'
        - '        """'
        - '        assert self.config is not None  # mypy'
        - '        self.model.reset_stats(init_model_stats)'
        - '        self.instance_args = instance_args'
        - ''
        - '        system_msg = self.config.system_template.format(**self.system_args)'
        - '        self.logger.info(f"SYSTEM ({self.name})\n{system_msg}")'
        - ''
        - '        self.history: list[dict[str, Any]] = []'
        - '        self._append_history({"role": "system", "content": system_msg,
          "agent": self.name})'
        - ''
        - '        if "history_to_messages" in dir(self.model):'
        - '            for demonstration_path in self.config.demonstrations:'
        - '                if self.config.demonstration_template is None and not self.config.put_demos_in_history:'
        - '                    msg = "Cannot use demonstrations without a demonstration
          template or put_demos_in_history=True"'
        - '                    raise ValueError(msg)'
        - ''
        - '                # Load history'
        - '                self.logger.info(f"DEMONSTRATION: {demonstration_path}")'
        - '                demo_history = json.loads(Path(demonstration_path).read_text())["history"]'
        - '                demo_history = ['
        - '                    entry'
        - '                    for entry in demo_history'
        - '                    if ("agent" not in entry) or ("agent" in entry and
          entry["agent"] == self.name)'
        - '                ]'
        - ''
        - '                if self.config.put_demos_in_history:'
        - '                    if self.config.demonstration_template is not None:'
        - '                        self.logger.warning("Demonstration template is
          ignored for put_demos_in_history=True")'
        - '                    # Add demonstration to history directly as separate
          messages'
        - '                    for entry in demo_history:'
        - '                        if entry["role"] != "system":'
        - '                            entry["is_demo"] = True'
        - '                            self._append_history(entry)'
        - '                else:'
        - '                    # Add demonstration as single message to history'
        - '                    demo_message = self.model.history_to_messages('
        - '                        demo_history,'
        - '                        is_demonstration=True,'
        - '                    )'
        - '                    demonstration = self.config.demonstration_template.format(demonstration=demo_message)'
        - '                    self._append_history('
        - '                        {'
        - '                            "agent": self.name,'
        - '                            "content": demonstration,'
        - '                            "is_demo": True,'
        - '                            "role": "user",'
        - '                        },'
        - '                    )'
        - ''
        - '    @property'
        - '    def state_command(self) -> str:'
        - '        """Return the bash command that will be used to extract the environment
          state."""'
        - '        return self.config.state_command.name'
        - ''
        - '    @property'
        - '    def local_history(self) -> list[dict[str, str]]:'
        - '        """Return the history of the agent since the last reset."""'
        - '        return self.config.history_processor([entry for entry in self.history
          if entry["agent"] == self.name])'
        - ''
        - '    def save_trajectory('
        - '        self, trajectory: list[dict[str, Any]], log_path: Path, env_name:
          str, info: dict[str, Any]'
        - '    ) -> None:'
        - '        """Save the trajectory"""'
        - '        log_dict = {'
        - '            "environment": env_name,'
        - '            "trajectory": trajectory,'
        - '            "history": self.history,'
        - '            "info": info,'
        - '        }'
        - '        log_path.write_text(json.dumps(log_dict, indent=2))'
        - ''
        - '    def _get_first_match(self, action: str, pattern_type: str) -> re.Match
          | None:'
        - '        """Return the first match of a command pattern in the action string."""'
        - '        assert self.config is not None  # mypy'
        - '        if pattern_type == "subroutine":'
        - '            patterns = {k: v for k, v in self.subroutine_patterns.items()}'
        - '        elif pattern_type == "multi_line":'
        - '            patterns = {'
        - '                k: v'
        - '                for k, v in self.command_patterns.items()'
        - '                if k in self.config.multi_line_command_endings or k ==
          self.config.submit_command'
        - '            }'
        - '            patterns += {'
        - '                k: v for k, v in self.subroutine_patterns.items() if k
          in self.config.multi_line_command_endings'
        - '            }'
        - '        elif pattern_type == "multi_line_no_subroutines":'
        - '            patterns = {k: v for k, v in self.command_patterns.items()
          if k in self.config.multi_line_command_endings}'
        - '        else:'
        - '            msg = f"Unknown pattern type: {pattern_type}"'
        - '            raise ValueError(msg)'
        - '        matches = list()'
        - '        for _, pat in patterns.items():'
        - '            match = pat.search(action)'
        - '            if match:'
        - '                matches.append(match)'
        - '        if len(matches) == 0:'
        - '            return None'
        - '        matches = sorted(matches, key=lambda x: x.start())'
        - '        return matches[0]'
        - ''
        - '    def _guard_multiline_input(self, action: str) -> str:'
        - '        """Split action by multiline commands, then append the first line
          in each multiline command with "<< ''{end_name}''".'
        - '        Multiline commands (which are specified by an end_name) are commands
          that span multiple lines and are terminated by a specific end_name.'
        - ''
        - '        Their multi-line argument is sent using a heredoc, which is a way
          to send a multi-line string to a command in bash.'
        - '        """'
        - '        parsed_action = list()'
        - '        rem_action = action'
        - '        while rem_action.strip():'
        - '            first_match = self._get_first_match(rem_action, "multi_line_no_subroutines")'
        - '            if first_match:'
        - '                pre_action = rem_action[: first_match.start()]'
        - '                match_action = rem_action[first_match.start() : first_match.end()]'
        - '                rem_action = rem_action[first_match.end() :]'
        - '                if pre_action.strip():'
        - '                    parsed_action.append(pre_action)'
        - '                if match_action.strip():'
        - '                    eof = first_match.group(3).strip()'
        - '                    if not match_action.split("\n")[0].strip().endswith(f"<<
          ''{eof}''"):'
        - '                        guarded_command = match_action[first_match.start()
          :]'
        - '                        first_line = guarded_command.split("\n")[0]'
        - '                        guarded_command = guarded_command.replace(first_line,
          first_line + f" << ''{eof}''", 1)'
        - '                        parsed_action.append(guarded_command)'
        - '                    else:'
        - '                        parsed_action.append(match_action)'
        - '            else:'
        - '                parsed_action.append(rem_action)'
        - '                rem_action = ""'
        - '        return "\n".join(parsed_action)'
        - ''
        - '    def split_actions(self, action: str, pattern_type="subroutine") ->
          list[dict[str, Any]]:'
        - '        """Split an action into a list of actions in a greedy manner, each
          of which is a subroutine call or a single command."""'
        - '        parsed_action = list()'
        - '        rem_action = action'
        - '        while rem_action.strip():'
        - '            first_match = self._get_first_match(rem_action, pattern_type)'
        - '            if first_match:'
        - '                pre_action = rem_action[: first_match.start()]'
        - '                match_action = rem_action[first_match.start() : first_match.end()]'
        - '                rem_action = rem_action[first_match.end() :]'
        - '                if pre_action.strip():'
        - '                    parsed_action.append({"agent": self.name, "action":
          pre_action, "cmd_name": None})'
        - '                if match_action.strip():'
        - '                    if match_action.split()[0] == self.config.submit_command:'
        - '                        parsed_action.append('
        - '                            {'
        - '                                "agent": self.name,'
        - '                                "action": match_action,'
        - '                                "cmd_name": first_match.group(1),'
        - '                            },'
        - '                        )  # submit command is not a subroutine'
        - '                    else:'
        - '                        parsed_action.append('
        - '                            {'
        - '                                "agent": first_match.group(1),'
        - '                                "args": first_match.group(2),'
        - '                                "action": match_action,'
        - '                                "cmd_name": first_match.group(1),'
        - '                            },'
        - '                        )'
        - '            else:'
        - '                parsed_action.append({"agent": self.name, "action": rem_action,
          "cmd_name": None})'
        - '                rem_action = ""'
        - '        return parsed_action'
        - ''
        - '    def _parse_command_patterns(self) -> None:'
        - '        assert self.config is not None  # mypy'
        - '        self.command_patterns = dict()'
        - '        for command in self.config._commands:'
        - '            if command.end_name is not None:'
        - '                pat = re.compile('
        - '                    rf"^\s*({command.name})\s*(.*?)^({command.end_name})\s*$",'
        - '                    re.DOTALL | re.MULTILINE,'
        - '                )'
        - '                self.command_patterns[command.name] = pat'
        - '            else:'
        - '                pat = re.compile(rf"^\s*({command.name})\s*(.*?)$", re.MULTILINE)'
        - '                self.command_patterns[command.name] = pat'
        - '        self.subroutine_patterns = dict()'
        - '        for _, subroutine in self.config._subroutines.items():'
        - '            if subroutine.end_name is None:'
        - '                pat = re.compile(rf"^\s*({subroutine.name})\s*(.*?)$",
          re.MULTILINE)'
        - '                self.subroutine_patterns[subroutine.name,] = pat'
        - '            else:'
        - '                pat = re.compile('
        - '                    rf"^\s*({subroutine.name})\s*(.*?)^({subroutine.end_name})\s*$",'
        - '                    re.DOTALL | re.MULTILINE,'
        - '                )'
        - '                self.subroutine_patterns[subroutine.name] = pat'
        - '        if hasattr(self.config, "submit_command_end_name"):'
        - '            submit_pat = re.compile('
        - '                rf"^\s*({self.config.submit_command})\s*(.*?)^({self.config.submit_command_end_name})\s*$",'
        - '                re.DOTALL | re.MULTILINE,'
        - '            )'
        - '        else:'
        - '            submit_pat = re.compile(rf"^\s*({self.config.submit_command})(\s*)$",
          re.MULTILINE)  # group 2 is nothing'
        - '        self.subroutine_patterns[self.config.submit_command] = submit_pat'
        - '        self.command_patterns[self.config.submit_command] = submit_pat'
        - ''
        - '    def forward(self, observation: str, available_actions: list[str], state:
          str) -> tuple[str, str, str]:'
        - '        """Forwards the model'
        - ''
        - '        Args:'
        - '            observation: Observation'
        - '            available_actions: Currently not used'
        - '            state:'
        - ''
        - '        Returns:'
        - '            thought: model reasoning'
        - '            action: action that the model proposes'
        - '            output: raw model output (not output of the action)'
        - '        """'
        - '        thought, action, output = self.forward_with_error_check(observation,
          state)'
        - ''
        - '        self._append_history('
        - '            {'
        - '                "role": "assistant",'
        - '                "content": output,'
        - '                "thought": thought,'
        - '                "action": action,'
        - '                "agent": self.name,'
        - '            },'
        - '        )'
        - ''
        - "        self.logger.info(f\"\U0001F4AD THOUGHT ({self.name})\\n{thought}\"\
          )"
        - "        self.logger.info(f\"\U0001F3AC ACTION ({self.name})\\n{action}\"\
          )"
        - ''
        - '        return thought, action, output'
        - ''
        - '    def forward_model(self, observation: str, state: str) -> str:'
        - '        """Query the model with the current state and observation with
          the appropriate template.'
        - ''
        - '        Returns:'
        - '            output: raw model output (not output of the command)'
        - '        """'
        - '        assert self.config is not None  # mypy'
        - ''
        - '        state_vars = json.loads(state)'
        - ''
        - '        templates: list[str] = []'
        - '        # Determine observation template based on what prior observation
          was'
        - '        if self.history[-1]["role"] == "system" or self.history[-1].get("is_demo",
          False):'
        - '            # Show instance template if prev. obs. was initial system message'
        - '            templates = [self.config.instance_template]'
        - '            if self.config.strategy_template is not None:'
        - '                templates.append(self.config.strategy_template)'
        - '        elif observation is None or observation.strip() == "":'
        - '            # Show no output template if observation content was empty'
        - '            templates = [self.config.next_step_no_output_template]'
        - '        else:'
        - '            # Show standard output template if there is observation content'
        - '            templates = [self.config.next_step_template]'
        - ''
        - '        # Populate selected template(s) with information (e.g., issue,
          arguments, state)'
        - '        messages = []'
        - '        for template in templates:'
        - '            messages.append('
        - '                template.format('
        - '                    **self.instance_args,'
        - '                    **self.system_args,'
        - '                    **state_vars,'
        - '                    observation=(observation if observation is not None
          else ""),'
        - '                ),'
        - '            )'
        - ''
        - '        message = "\n".join(messages)'
        - ''
        - "        self.logger.info(f\"\U0001F916 MODEL INPUT\\n{message}\")"
        - '        self._append_history({"role": "user", "content": message, "agent":
          self.name})'
        - ''
        - '        for hook in self.hooks:'
        - '            hook.on_model_query(query=self.local_history, agent=self.name)'
        - '        return self.model.query(self.local_history)'
        - ''
        - '    def retry_after_format_fail(self, output: str) -> str:'
        - '        """Ask the model to correct (without committing to persistent history)
          after a malformatted model output"""'
        - '        format_error_template = self.config.format_error_template'
        - ''
        - '        self.logger.warning(f"MALFORMED OUTPUT\n{output}")'
        - '        self.logger.warning(f"FORMAT ERROR\n{format_error_template}")'
        - ''
        - '        temp_history = self.local_history + ['
        - '            {"role": "assistant", "content": output, "agent": self.name},'
        - '            {"role": "user", "content": format_error_template, "agent":
          self.name},'
        - '        ]'
        - '        return self.model.query(temp_history)'
        - ''
        - '    def retry_after_blocklist_fail(self, output: str, action: str) -> str:'
        - '        """Ask the model to correct (without committing to persistent history)
          after a disallowed command"""'
        - '        name = action.strip().split()[0]'
        - '        blocklist_error_message = self.config.blocklist_error_template.format(name=name)'
        - ''
        - '        self.logger.warning(f"BLOCKLISTED OUTPUT\n{output}")'
        - '        self.logger.warning(f"BLOCKLIST ERROR\n{blocklist_error_message}")'
        - ''
        - '        temp_history = self.local_history + ['
        - '            {"role": "assistant", "content": output, "agent": self.name},'
        - '            {"role": "user", "content": blocklist_error_message, "agent":
          self.name},'
        - '        ]'
        - '        return self.model.query(temp_history)'
        - ''
        - '    def should_block_action(self, action: str) -> bool:'
        - '        """Check if the command should be blocked."""'
        - '        names = action.strip().split()'
        - '        if len(names) == 0:'
        - '            return False'
        - '        name = names[0]'
        - '        if name in self.config.blocklist:'
        - '            return True'
        - '        if name in self.config.blocklist_standalone and name == action.strip():'
        - '            return True'
        - '        return False'
        - ''
        - '    def check_format_and_requery('
        - '        self,'
        - '        output: str,'
        - '    ) -> tuple[str, str, str]:'
        - '        """Query the model with the current state and observation with
          the appropriate template.'
        - ''
        - '        Try to parse the output into a thought and action. Retry if the
          output is malformatted or the action is blocked.'
        - ''
        - '        Returns:'
        - '            thought: model reasoning'
        - '            action: action that the model proposes'
        - '            output: raw model output'
        - '        """'
        - '        # Condition for handling outputs with no thought (just action)'
        - '        if self.model.args.model_name == "human":'
        - '            return "", output, output'
        - '        elif self.model.args.model_name == "human_thought":'
        - '            thought, action = ParseFunction.get("ThoughtActionParser")('
        - '                output,'
        - '                self.config._commands + self.config.subroutine_types,'
        - '                strict=False,'
        - '            )'
        - '            return thought, action, output'
        - ''
        - '        format_fails = blocklist_fails = 0'
        - ''
        - '        while format_fails + blocklist_fails <= 2:'
        - '            try:'
        - '                thought, action = self.config.parse_function('
        - '                    output,'
        - '                    self.config._commands + self.config.subroutine_types,'
        - '                    strict=False,'
        - '                )'
        - '            except KeyboardInterrupt:'
        - '                raise'
        - '            except FormatError:'
        - '                format_fails += 1'
        - '                output = self.retry_after_format_fail(output)'
        - '                continue'
        - '            if self.should_block_action(action):'
        - '                blocklist_fails += 1'
        - '                output = self.retry_after_blocklist_fail(output, action)'
        - '            else:'
        - '                return thought, action, output'
        - '        self.logger.warning(f"Malformat limit reached: \n{output}")'
        - '        return "Exit due to format error", "exit_format", output'
        - ''
        - '    def forward_with_error_check(self, observation: str, state: str) ->
          tuple[str, str, str]:'
        - '        """Wrapper around `self.forward_model` that handles errors and
          retries'
        - '        due to format errors or blocked actions.'
        - ''
        - '        Returns:'
        - '            thought: model reasoning'
        - '            action: action that the model proposes'
        - '            output: raw model output'
        - '        """'
        - '        try:'
        - '            return self.check_format_and_requery(self.forward_model(observation,
          state))'
        - '        except KeyboardInterrupt:'
        - '            raise'
        - '        except RuntimeError as e:'
        - '            self.logger.warning(f"Runtime error: {e}")'
        - '            return ('
        - '                f"Exit due to runtime error: {e}",'
        - '                "exit_error",'
        - '                f"exit due to runtime error: {e}",'
        - '            )'
        - '        except ContextWindowExceededError:'
        - '            self.logger.warning("Context window exceeded")'
        - '            return "Exit due to context window", "exit_context", "Exit
          due to context window"'
        - '        except CostLimitExceededError:'
        - '            self.logger.warning("Cost limit exceeded")'
        - '            return "Exit due to cost limit", "exit_cost", "Exit due to
          cost limit"'
        - '        except RetryError as e:'
        - '            self.logger.warning(f"Retry error: {e}")'
        - '            return ('
        - '                f"Exit due to retry error: {e}",'
        - '                "exit_api",'
        - '                f"exit due to retry error: {e}",'
        - '            )'
        - ''
        - '    def init_environment_vars(self, env: SWEEnv):'
        - '        self.set_environment_vars(env, self.config.env_variables)'
        - ''
        - '    def set_environment_vars(self, env: SWEEnv, env_variables: dict[str,
          Any]) -> None:'
        - '        assert self.config is not None  # mypy'
        - '        commands_to_execute = ('
        - '            [self.config.state_command.code]'
        - '            +'
        - '            # [code for code in self.config.util_functions] +'
        - '            # [command.code for command in self.config._commands] +'
        - '            [f"{k}={v}" for k, v in env_variables.items()]'
        - '        )'
        - '        commands = "\n".join(commands_to_execute)'
        - '        try:'
        - '            output = env.communicate(commands)'
        - '            if env.returncode != 0:'
        - '                msg = f"Nonzero return code: {env.returncode}\nOutput:
          {output}"'
        - '                raise RuntimeError(msg)'
        - '        except KeyboardInterrupt:'
        - '            raise'
        - '        except Exception as e:'
        - '            self.logger.warning("Failed to set environment variables")'
        - '            raise e'
        - '        command_files = list()'
        - '        for file in self.config.command_files:'
        - '            datum = dict()'
        - '            with open(file) as f:'
        - '                contents = f.read()'
        - '            datum["contents"] = contents'
        - '            filename = Path(file).name'
        - '            if not contents.strip().startswith("#!"):'
        - '                if filename.endswith(".sh"):'
        - '                    # files are sourced, so they are not executable'
        - '                    datum["name"] = Path(file).name'
        - '                    datum["type"] = "source_file"'
        - '                elif filename.startswith("_"):'
        - '                    # files are sourced, so they are not executable'
        - '                    datum["name"] = Path(file).name'
        - '                    datum["type"] = "utility"'
        - '                else:'
        - '                    msg = ('
        - '                        f"Non-shell script file {file} does not start with
          shebang.\n"'
        - '                        "Either add a shebang (#!) or change the file extension
          to .sh if you want to source it.\n"'
        - '                        "You can override this behavior by adding an underscore
          to the file name (e.g. _utils.py)."'
        - '                    )'
        - '                    raise ValueError(msg)'
        - '            else:'
        - '                # scripts are made executable'
        - '                datum["name"] = Path(file).name.rsplit(".", 1)[0]'
        - '                datum["type"] = "script"'
        - '            command_files.append(datum)'
        - '        env.add_commands(command_files)'
        - ''
        - '    def get_environment_vars(self, env: SWEEnv) -> dict[str, Any]:'
        - '        """Get environment variables"""'
        - '        assert self.config is not None  # mypy'
        - '        env_vars = dict()'
        - '        for var in self.config.env_variables:'
        - '            env_vars[var] = env.communicate(f"echo ${var}").strip()'
        - '        return env_vars'
        - ''
        - '    def call_subroutine(self, agent_name: str, sub_action, env: SWEEnv):'
        - '        """Call subroutine"""'
        - '        assert self.config is not None  # mypy'
        - '        env_vars = self.get_environment_vars(env)'
        - '        cwd = env.communicate("pwd -P").strip()'
        - '        init_observation = self.config._subroutines[agent_name].init_observation'
        - '        if init_observation is not None:'
        - '            obs, _, _, _ = env.step(init_observation.format(args=sub_action["args"]))'
        - '        else:'
        - '            obs = None'
        - '        if env.returncode != 0:'
        - '            self._append_history({"role": "user", "content": obs, "agent":
          agent_name})'
        - '            msg = f"Nonzero return code: {env.returncode} for init_observation
          in {agent_name}.\n{obs}"'
        - '            raise RuntimeError(msg)'
        - '        return_type = self.config._subroutines[agent_name].return_type'
        - '        sub_agent = Agent(agent_name, self.config._subroutines[agent_name].agent_args)'
        - '        sub_agent_output = sub_agent.run('
        - '            {"issue": sub_action["args"]},'
        - '            env,'
        - '            observation=obs,'
        - '            return_type=return_type,'
        - '            init_model_stats=self.model.stats,'
        - '        )'
        - '        self.history += sub_agent.history'
        - '        self.set_environment_vars(env, env_vars)'
        - '        env.communicate(f"cd {cwd}")'
        - '        self.model.stats.replace(sub_agent.model.stats)'
        - '        return sub_agent_output'
        - ''
        - '    def run('
        - '        self,'
        - '        setup_args: dict[str, Any],'
        - '        env: SWEEnv,'
        - '        observation: str | None = None,'
        - '        traj_dir: Path | None = None,'
        - '        return_type: str | None = "info_trajectory",'
        - '        init_model_stats: APIStats | None = None,'
        - '    ):'
        - '        """'
        - '        Run the agent on an environment.'
        - '        Return the final value of the specified return type.'
        - ''
        - '        Args:'
        - '            setup_args: Arguments to pass to the agent''s setup method.'
        - '            env: The environment to run the agent on.'
        - '            observation: Output from environment setup'
        - '            traj_dir: Directory to save the trajectory to'
        - '            return_type: Controls what to return.'
        - '                This should be left at `info_trajectory`, the'
        - '                other values are for internal usage with subroutines.'
        - '            init_model_stats: Initial model stats to use for the run.'
        - ''
        - '        Returns:'
        - '            If return_type is "info_trajectory", returns a tuple of'
        - '            the info dictionary and the trajectory (list of dictionaries).'
        - '        """'
        - '        done = False'
        - '        # mypy checks'
        - '        assert env.container_obj is not None'
        - '        assert env.record is not None'
        - '        assert self.config is not None'
        - ''
        - '        if env.container_obj.id != self.last_container_id:'
        - '            self.logger.info(f"Initializing agent settings for container
          {env.container_obj.id}")'
        - '            self.init_environment_vars(env)'
        - '            self.last_container_id = env.container_obj.id'
        - '        # Re-initialize primary'
        - '        self.setup(setup_args, init_model_stats)'
        - ''
        - '        for hook in self.hooks:'
        - '            hook.on_run_start()'
        - ''
        - '        # Run action/observation loop'
        - '        trajectory = []'
        - '        info = {}'
        - '        traj_log_path = traj_dir / (env.record["instance_id"] + ".traj")'
        - '        self.logger.info("Trajectory will be saved to %s", traj_log_path)'
        - '        while not done:'
        - '            for hook in self.hooks:'
        - '                hook.on_step_start()'
        - '            state = env.communicate(self.state_command) if self.state_command
          else None'
        - '            thought, action, output = self.forward(observation, env.get_available_actions(),
          state)'
        - '            for hook in self.hooks:'
        - '                hook.on_actions_generated(thought=thought, action=action,
          output=output)'
        - '            observations = list()'
        - '            run_action = self._guard_multiline_input(action)'
        - '            for sub_action in self.split_actions(run_action):'
        - '                if sub_action["agent"] == self.name or sub_action["cmd_name"]
          == self.config.submit_command:'
        - '                    for hook in self.hooks:'
        - '                        hook.on_sub_action_started(sub_action=sub_action)'
        - '                    obs, _, done, info = env.step(sub_action["action"])'
        - '                    for hook in self.hooks:'
        - '                        hook.on_sub_action_executed(obs=obs, done=done)'
        - '                    observations.append(obs)'
        - '                    if sub_action["cmd_name"] == self.config.submit_command:'
        - '                        done = True'
        - '                    if done:'
        - '                        break'
        - '                else:'
        - '                    agent_name = sub_action["agent"]'
        - '                    sub_agent_output = self.call_subroutine(agent_name,
          sub_action, env)'
        - '                    observations.append(sub_agent_output)'
        - ''
        - '            observation = "\n".join([obs for obs in observations if obs
          is not None])'
        - ''
        - '            trajectory_step = TrajectoryStep('
        - '                {'
        - '                    "action": action,'
        - '                    "observation": observation,'
        - '                    "response": output,'
        - '                    "state": state,'
        - '                    "thought": thought,'
        - '                },'
        - '            )'
        - '            trajectory.append(trajectory_step)'
        - '            model_stats: APIStats = self.model.stats'
        - '            info["model_stats"] = model_stats.to_dict()'
        - '            if traj_dir:'
        - '                self.save_trajectory(trajectory, traj_log_path, env_name=env.name,
          info=info)'
        - '            for hook in self.hooks:'
        - '                hook.on_step_done(trajectory_step=trajectory_step, model_stats=model_stats)'
        - ''
        - '        for hook in self.hooks:'
        - '            hook.on_run_done()'
        - ''
        - '        self.logger.info("Trajectory saved to %s", traj_log_path)'
        - ''
        - '        if return_type == "info":'
        - '            return info'
        - '        if return_type == "info_trajectory":'
        - '            return info, trajectory'
        - '        return trajectory[-1][return_type]'
      functions: []
      text:
      - from __future__ import annotations
      - ''
      - import json
      - import re
      - from dataclasses import dataclass
      - from pathlib import Path
      - from typing import Any, TypedDict
      - ''
      - from simple_parsing.helpers.fields import field
      - from simple_parsing.helpers.flatten import FlattenedAccess
      - from simple_parsing.helpers.serialization.serializable import FrozenSerializable
      - from tenacity import RetryError
      - ''
      - from sweagent.agent.commands import Command, ParseCommand
      - from sweagent.agent.history_processors import HistoryProcessor
      - from sweagent.agent.models import (
      - '    APIStats,'
      - '    ContextWindowExceededError,'
      - '    CostLimitExceededError,'
      - '    ModelArguments,'
      - '    get_model,'
      - )
      - from sweagent.agent.parsing import FormatError, ParseFunction
      - from sweagent.environment.swe_env import SWEEnv
      - from sweagent.utils.config import convert_paths_to_abspath
      - from sweagent.utils.log import get_logger
      - ''
      - ''
      - '@dataclass(frozen=True)'
      - 'class Subroutine(FrozenSerializable):'
      - '    name: str'
      - '    agent_file: str'
      - '    # one of "action", "observation", "response", "state", "thought"'
      - '    return_type: str = None  # type: ignore'
      - '    init_observation: str | None = None'
      - '    end_name: str | None = None'
      - '    signature: str | None = None'
      - '    docstring: str | None = None'
      - '    model: ModelArguments | None = None'
      - '    agent_args: Any | None = None'
      - ''
      - ''
      - '@dataclass(frozen=True)'
      - 'class AgentConfig(FrozenSerializable):'
      - '    system_template: str'
      - '    instance_template: str'
      - '    next_step_template: str | None = None  # defaults to instance_template'
      - '    next_step_no_output_template: str | None = None  # defaults to next_step_template'
      - '    strategy_template: str | None = None'
      - '    demonstration_template: str | None = None'
      - '    # Paths to demonstrations. If path is not absolute, it is assumed to
        be'
      - '    # relative to the SWE_AGENT_CONFIG_ROOT (if set) or the SWE-agent repository
        root'
      - '    demonstrations: list[str | Path] = field(default_factory=list)'
      - '    put_demos_in_history: bool = False  # if True, add demonstration to history
        instead of as a single message'
      - '    # defaults to format_error_template in ParseFunction'
      - '    format_error_template: str = None  # type: ignore'
      - '    # Paths to command files. If path is not absolute, it is assumed to be'
      - '    # relative to the SWE_AGENT_CONFIG_ROOT (if set) or the SWE-agent repository
        root'
      - '    command_files: list[str | Path] = field(default_factory=list)'
      - '    env_variables: dict[str, str] = field(default_factory=dict)'
      - '    util_functions: list[str] = field(default_factory=list)'
      - '    submit_command: str = "submit"'
      - '    parse_function: str = "ThoughtActionParser"'
      - '    parse_command: str = "ParseCommandBash"'
      - '    history_processor: str = "DefaultHistoryProcessor"'
      - '    history_processor_args: dict[str, Any] = field(default_factory=dict)'
      - '    command_docs: str = None  # type: ignore'
      - '    blocklist_error_template: str = "Interactive operation ''{name}'' is
        not supported by this environment"'
      - '    blocklist: tuple[str, ...] = ('
      - '        "vim",'
      - '        "vi",'
      - '        "emacs",'
      - '        "nano",'
      - '        "nohup",'
      - '        "git",'
      - '    )'
      - '    blocklist_standalone: tuple[str, ...] = ('
      - '        "python",'
      - '        "python3",'
      - '        "ipython",'
      - '        "bash",'
      - '        "sh",'
      - '        "exit",'
      - '        "/bin/bash",'
      - '        "/bin/sh",'
      - '        "nohup",'
      - '        "vi",'
      - '        "vim",'
      - '        "emacs",'
      - '        "nano",'
      - '    )'
      - '    # Should extract environment state in a json readable form'
      - '    state_command: Command = Command('
      - '        name="state",'
      - '        code="""state() {'
      - '            echo ''{"working_dir": "''$(realpath --relative-to=$ROOT/.. $PWD)''"}'';'
      - '        };""",'
      - '    )'
      - '    _commands: list[Command] = field(default_factory=list)'
      - '    _subroutines: dict[str, Subroutine] = field(default_factory=dict)'
      - '    subroutine_types: list[Subroutine] = field(default_factory=list)'
      - ''
      - '    def __post_init__(self):'
      - '        object.__setattr__(self, "command_files", convert_paths_to_abspath(self.command_files))'
      - '        object.__setattr__(self, "demonstrations", convert_paths_to_abspath(self.demonstrations))'
      - ''
      - '        if self.next_step_template is None:'
      - '            object.__setattr__(self, "next_step_template", self.instance_template)'
      - '        if self.next_step_no_output_template is None:'
      - '            object.__setattr__(self, "next_step_no_output_template", self.next_step_template)'
      - ''
      - '        object.__setattr__(self, "parse_command", ParseCommand.get(self.parse_command))'
      - '        for file in self.command_files:'
      - '            commands = self.parse_command.parse_command_file(file)'
      - ''
      - '            util_functions = [command for command in commands if command.name.startswith("_")]'
      - '            commands = [command for command in commands if not command.name.startswith("_")]'
      - ''
      - '            object.__setattr__(self, "util_functions", self.util_functions
        + util_functions)'
      - '            object.__setattr__(self, "_commands", self._commands + commands)'
      - ''
      - '        for subroutine in self.subroutine_types:'
      - '            if subroutine.name == "submit":'
      - '                msg = "Cannot use ''submit'' as a subroutine name"'
      - '                raise ValueError(msg)'
      - '            agent_args = AgentArguments('
      - '                model=subroutine.model,'
      - '                config_file=subroutine.agent_file,'
      - '            )'
      - '            object.__setattr__(subroutine, "agent_args", agent_args)'
      - '            object.__setattr__(self, "_subroutines", {**self._subroutines,
        subroutine.name: subroutine})'
      - ''
      - '        multi_line_command_endings = {'
      - '            command.name: command.end_name'
      - '            for command in [*self._commands, *self._subroutines.values()]'
      - '            if command.end_name is not None'
      - '        }'
      - '        object.__setattr__(self, "multi_line_command_endings", multi_line_command_endings)'
      - '        object.__setattr__('
      - '            self,'
      - '            "command_docs",'
      - '            self.parse_command.generate_command_docs('
      - '                self._commands,'
      - '                self.subroutine_types,'
      - '                **self.env_variables,'
      - '            ),'
      - '        )'
      - '        object.__setattr__(self, "parse_function", ParseFunction.get(self.parse_function))'
      - '        if self.format_error_template is None:'
      - '            object.__setattr__('
      - '                self,'
      - '                "format_error_template",'
      - '                self.parse_function.format_error_template,'
      - '            )'
      - '        object.__setattr__('
      - '            self,'
      - '            "format_error_template",'
      - '            self.format_error_template.format(**self.__dict__),'
      - '        )'
      - '        for command in self._commands:'
      - '            if command.name == self.submit_command:'
      - '                object.__setattr__(self, "submit_command_end_name", command.end_name)'
      - '                break'
      - '        object.__setattr__('
      - '            self,'
      - '            "history_processor",'
      - '            HistoryProcessor.get(self.history_processor, **self.history_processor_args),'
      - '        )'
      - ''
      - ''
      - '@dataclass(frozen=True)'
      - 'class AgentArguments(FlattenedAccess, FrozenSerializable):'
      - '    """Configure the agent''s behaviour (templates, parse functions, blocklists,
        ...)."""'
      - ''
      - '    model: ModelArguments = None'
      - ''
      - '    # Policy can only be set via config yaml file from command line'
      - '    config_file: Path | None = None'
      - '    config: AgentConfig | None = field(default=None, cmd=False)'
      - ''
      - '    def __post_init__(self):'
      - '        if self.config is None and self.config_file is not None:'
      - '            # If unassigned, we load the config from the file to store its
        contents with the overall arguments'
      - '            config = AgentConfig.load_yaml(self.config_file)'
      - '            object.__setattr__(self, "config", config)'
      - '        assert self.config is not None  # mypy'
      - '        for subroutine in getattr(self.config, "subroutines", {}).values():'
      - '            model_args = subroutine.model'
      - '            object.__setattr__('
      - '                model_args,'
      - '                "per_instance_cost_limit",'
      - '                self.model.per_instance_cost_limit,'
      - '            )'
      - '            object.__setattr__(model_args, "total_cost_limit", self.model.total_cost_limit)'
      - ''
      - ''
      - 'class TrajectoryStep(TypedDict):'
      - '    action: str'
      - '    observation: str'
      - '    response: str'
      - '    state: str | None'
      - '    thought: str'
      - ''
      - ''
      - 'class AgentHook:'
      - '    def on_init(self): ...'
      - ''
      - '    def on_run_start('
      - '        self,'
      - '    ): ...'
      - ''
      - '    def on_step_start(self): ...'
      - ''
      - '    def on_actions_generated(self, *, thought: str, action: str, output:
        str): ...'
      - ''
      - '    def on_sub_action_started(self, *, sub_action: str): ...'
      - ''
      - '    def on_sub_action_executed(self, *, obs: str, done: bool): ...'
      - ''
      - '    def on_step_done(self, *, trajectory_step: TrajectoryStep, model_stats:
        APIStats): ...'
      - ''
      - '    def on_run_done(self): ...'
      - ''
      - '    def on_model_query(self, *, query: str, agent: str):'
      - '        """Actually query the model with the complete history."""'
      - ''
      - '    def on_query_message_added('
      - '        self,'
      - '        *,'
      - '        role: str,'
      - '        content: str,'
      - '        agent: str,'
      - '        is_demo: bool = False,'
      - '        thought: str = "",'
      - '        action: str = "",'
      - '    ): ...'
      - ''
      - ''
      - 'class Agent:'
      - '    """Agent handles the behaviour of the model and how it interacts with
        the environment."""'
      - ''
      - '    def __init__(self, name: str, args: AgentArguments):'
      - '        self.name = name'
      - '        self.model = get_model(args.model, args.config._commands + args.config.subroutine_types)'
      - '        self.config = args.config'
      - '        assert self.config is not None  # mypy'
      - '        self.system_args = {'
      - '            "command_docs": self.config.command_docs,'
      - '            **self.config.env_variables,'
      - '        }'
      - '        self.instance_args = None'
      - '        self._parse_command_patterns()'
      - '        self.history = []'
      - '        self.last_container_id = None'
      - '        self.hooks = []'
      - '        self.logger = get_logger("agent")'
      - ''
      - '    def add_hook(self, hook: AgentHook):'
      - '        """Add hook to agent"""'
      - '        hook.on_init()'
      - '        self.hooks.append(hook)'
      - ''
      - '    def _append_history(self, item: dict):'
      - '        for hook in self.hooks:'
      - '            hook.on_query_message_added(**item)'
      - '        self.history.append(item)'
      - ''
      - '    def setup(self, instance_args, init_model_stats=None) -> None:'
      - '        """Setup the agent for a new instance. This includes'
      - '        formatting the system message and adding demonstrations to the history.'
      - ''
      - '        Args:'
      - '            instance_args: Arguments for the instance'
      - '        """'
      - '        assert self.config is not None  # mypy'
      - '        self.model.reset_stats(init_model_stats)'
      - '        self.instance_args = instance_args'
      - ''
      - '        system_msg = self.config.system_template.format(**self.system_args)'
      - '        self.logger.info(f"SYSTEM ({self.name})\n{system_msg}")'
      - ''
      - '        self.history: list[dict[str, Any]] = []'
      - '        self._append_history({"role": "system", "content": system_msg, "agent":
        self.name})'
      - ''
      - '        if "history_to_messages" in dir(self.model):'
      - '            for demonstration_path in self.config.demonstrations:'
      - '                if self.config.demonstration_template is None and not self.config.put_demos_in_history:'
      - '                    msg = "Cannot use demonstrations without a demonstration
        template or put_demos_in_history=True"'
      - '                    raise ValueError(msg)'
      - ''
      - '                # Load history'
      - '                self.logger.info(f"DEMONSTRATION: {demonstration_path}")'
      - '                demo_history = json.loads(Path(demonstration_path).read_text())["history"]'
      - '                demo_history = ['
      - '                    entry'
      - '                    for entry in demo_history'
      - '                    if ("agent" not in entry) or ("agent" in entry and entry["agent"]
        == self.name)'
      - '                ]'
      - ''
      - '                if self.config.put_demos_in_history:'
      - '                    if self.config.demonstration_template is not None:'
      - '                        self.logger.warning("Demonstration template is ignored
        for put_demos_in_history=True")'
      - '                    # Add demonstration to history directly as separate messages'
      - '                    for entry in demo_history:'
      - '                        if entry["role"] != "system":'
      - '                            entry["is_demo"] = True'
      - '                            self._append_history(entry)'
      - '                else:'
      - '                    # Add demonstration as single message to history'
      - '                    demo_message = self.model.history_to_messages('
      - '                        demo_history,'
      - '                        is_demonstration=True,'
      - '                    )'
      - '                    demonstration = self.config.demonstration_template.format(demonstration=demo_message)'
      - '                    self._append_history('
      - '                        {'
      - '                            "agent": self.name,'
      - '                            "content": demonstration,'
      - '                            "is_demo": True,'
      - '                            "role": "user",'
      - '                        },'
      - '                    )'
      - ''
      - '    @property'
      - '    def state_command(self) -> str:'
      - '        """Return the bash command that will be used to extract the environment
        state."""'
      - '        return self.config.state_command.name'
      - ''
      - '    @property'
      - '    def local_history(self) -> list[dict[str, str]]:'
      - '        """Return the history of the agent since the last reset."""'
      - '        return self.config.history_processor([entry for entry in self.history
        if entry["agent"] == self.name])'
      - ''
      - '    def save_trajectory('
      - '        self, trajectory: list[dict[str, Any]], log_path: Path, env_name:
        str, info: dict[str, Any]'
      - '    ) -> None:'
      - '        """Save the trajectory"""'
      - '        log_dict = {'
      - '            "environment": env_name,'
      - '            "trajectory": trajectory,'
      - '            "history": self.history,'
      - '            "info": info,'
      - '        }'
      - '        log_path.write_text(json.dumps(log_dict, indent=2))'
      - ''
      - '    def _get_first_match(self, action: str, pattern_type: str) -> re.Match
        | None:'
      - '        """Return the first match of a command pattern in the action string."""'
      - '        assert self.config is not None  # mypy'
      - '        if pattern_type == "subroutine":'
      - '            patterns = {k: v for k, v in self.subroutine_patterns.items()}'
      - '        elif pattern_type == "multi_line":'
      - '            patterns = {'
      - '                k: v'
      - '                for k, v in self.command_patterns.items()'
      - '                if k in self.config.multi_line_command_endings or k == self.config.submit_command'
      - '            }'
      - '            patterns += {'
      - '                k: v for k, v in self.subroutine_patterns.items() if k in
        self.config.multi_line_command_endings'
      - '            }'
      - '        elif pattern_type == "multi_line_no_subroutines":'
      - '            patterns = {k: v for k, v in self.command_patterns.items() if
        k in self.config.multi_line_command_endings}'
      - '        else:'
      - '            msg = f"Unknown pattern type: {pattern_type}"'
      - '            raise ValueError(msg)'
      - '        matches = list()'
      - '        for _, pat in patterns.items():'
      - '            match = pat.search(action)'
      - '            if match:'
      - '                matches.append(match)'
      - '        if len(matches) == 0:'
      - '            return None'
      - '        matches = sorted(matches, key=lambda x: x.start())'
      - '        return matches[0]'
      - ''
      - '    def _guard_multiline_input(self, action: str) -> str:'
      - '        """Split action by multiline commands, then append the first line
        in each multiline command with "<< ''{end_name}''".'
      - '        Multiline commands (which are specified by an end_name) are commands
        that span multiple lines and are terminated by a specific end_name.'
      - ''
      - '        Their multi-line argument is sent using a heredoc, which is a way
        to send a multi-line string to a command in bash.'
      - '        """'
      - '        parsed_action = list()'
      - '        rem_action = action'
      - '        while rem_action.strip():'
      - '            first_match = self._get_first_match(rem_action, "multi_line_no_subroutines")'
      - '            if first_match:'
      - '                pre_action = rem_action[: first_match.start()]'
      - '                match_action = rem_action[first_match.start() : first_match.end()]'
      - '                rem_action = rem_action[first_match.end() :]'
      - '                if pre_action.strip():'
      - '                    parsed_action.append(pre_action)'
      - '                if match_action.strip():'
      - '                    eof = first_match.group(3).strip()'
      - '                    if not match_action.split("\n")[0].strip().endswith(f"<<
        ''{eof}''"):'
      - '                        guarded_command = match_action[first_match.start()
        :]'
      - '                        first_line = guarded_command.split("\n")[0]'
      - '                        guarded_command = guarded_command.replace(first_line,
        first_line + f" << ''{eof}''", 1)'
      - '                        parsed_action.append(guarded_command)'
      - '                    else:'
      - '                        parsed_action.append(match_action)'
      - '            else:'
      - '                parsed_action.append(rem_action)'
      - '                rem_action = ""'
      - '        return "\n".join(parsed_action)'
      - ''
      - '    def split_actions(self, action: str, pattern_type="subroutine") -> list[dict[str,
        Any]]:'
      - '        """Split an action into a list of actions in a greedy manner, each
        of which is a subroutine call or a single command."""'
      - '        parsed_action = list()'
      - '        rem_action = action'
      - '        while rem_action.strip():'
      - '            first_match = self._get_first_match(rem_action, pattern_type)'
      - '            if first_match:'
      - '                pre_action = rem_action[: first_match.start()]'
      - '                match_action = rem_action[first_match.start() : first_match.end()]'
      - '                rem_action = rem_action[first_match.end() :]'
      - '                if pre_action.strip():'
      - '                    parsed_action.append({"agent": self.name, "action": pre_action,
        "cmd_name": None})'
      - '                if match_action.strip():'
      - '                    if match_action.split()[0] == self.config.submit_command:'
      - '                        parsed_action.append('
      - '                            {'
      - '                                "agent": self.name,'
      - '                                "action": match_action,'
      - '                                "cmd_name": first_match.group(1),'
      - '                            },'
      - '                        )  # submit command is not a subroutine'
      - '                    else:'
      - '                        parsed_action.append('
      - '                            {'
      - '                                "agent": first_match.group(1),'
      - '                                "args": first_match.group(2),'
      - '                                "action": match_action,'
      - '                                "cmd_name": first_match.group(1),'
      - '                            },'
      - '                        )'
      - '            else:'
      - '                parsed_action.append({"agent": self.name, "action": rem_action,
        "cmd_name": None})'
      - '                rem_action = ""'
      - '        return parsed_action'
      - ''
      - '    def _parse_command_patterns(self) -> None:'
      - '        assert self.config is not None  # mypy'
      - '        self.command_patterns = dict()'
      - '        for command in self.config._commands:'
      - '            if command.end_name is not None:'
      - '                pat = re.compile('
      - '                    rf"^\s*({command.name})\s*(.*?)^({command.end_name})\s*$",'
      - '                    re.DOTALL | re.MULTILINE,'
      - '                )'
      - '                self.command_patterns[command.name] = pat'
      - '            else:'
      - '                pat = re.compile(rf"^\s*({command.name})\s*(.*?)$", re.MULTILINE)'
      - '                self.command_patterns[command.name] = pat'
      - '        self.subroutine_patterns = dict()'
      - '        for _, subroutine in self.config._subroutines.items():'
      - '            if subroutine.end_name is None:'
      - '                pat = re.compile(rf"^\s*({subroutine.name})\s*(.*?)$", re.MULTILINE)'
      - '                self.subroutine_patterns[subroutine.name,] = pat'
      - '            else:'
      - '                pat = re.compile('
      - '                    rf"^\s*({subroutine.name})\s*(.*?)^({subroutine.end_name})\s*$",'
      - '                    re.DOTALL | re.MULTILINE,'
      - '                )'
      - '                self.subroutine_patterns[subroutine.name] = pat'
      - '        if hasattr(self.config, "submit_command_end_name"):'
      - '            submit_pat = re.compile('
      - '                rf"^\s*({self.config.submit_command})\s*(.*?)^({self.config.submit_command_end_name})\s*$",'
      - '                re.DOTALL | re.MULTILINE,'
      - '            )'
      - '        else:'
      - '            submit_pat = re.compile(rf"^\s*({self.config.submit_command})(\s*)$",
        re.MULTILINE)  # group 2 is nothing'
      - '        self.subroutine_patterns[self.config.submit_command] = submit_pat'
      - '        self.command_patterns[self.config.submit_command] = submit_pat'
      - ''
      - '    def forward(self, observation: str, available_actions: list[str], state:
        str) -> tuple[str, str, str]:'
      - '        """Forwards the model'
      - ''
      - '        Args:'
      - '            observation: Observation'
      - '            available_actions: Currently not used'
      - '            state:'
      - ''
      - '        Returns:'
      - '            thought: model reasoning'
      - '            action: action that the model proposes'
      - '            output: raw model output (not output of the action)'
      - '        """'
      - '        thought, action, output = self.forward_with_error_check(observation,
        state)'
      - ''
      - '        self._append_history('
      - '            {'
      - '                "role": "assistant",'
      - '                "content": output,'
      - '                "thought": thought,'
      - '                "action": action,'
      - '                "agent": self.name,'
      - '            },'
      - '        )'
      - ''
      - "        self.logger.info(f\"\U0001F4AD THOUGHT ({self.name})\\n{thought}\"\
        )"
      - "        self.logger.info(f\"\U0001F3AC ACTION ({self.name})\\n{action}\")"
      - ''
      - '        return thought, action, output'
      - ''
      - '    def forward_model(self, observation: str, state: str) -> str:'
      - '        """Query the model with the current state and observation with the
        appropriate template.'
      - ''
      - '        Returns:'
      - '            output: raw model output (not output of the command)'
      - '        """'
      - '        assert self.config is not None  # mypy'
      - ''
      - '        state_vars = json.loads(state)'
      - ''
      - '        templates: list[str] = []'
      - '        # Determine observation template based on what prior observation
        was'
      - '        if self.history[-1]["role"] == "system" or self.history[-1].get("is_demo",
        False):'
      - '            # Show instance template if prev. obs. was initial system message'
      - '            templates = [self.config.instance_template]'
      - '            if self.config.strategy_template is not None:'
      - '                templates.append(self.config.strategy_template)'
      - '        elif observation is None or observation.strip() == "":'
      - '            # Show no output template if observation content was empty'
      - '            templates = [self.config.next_step_no_output_template]'
      - '        else:'
      - '            # Show standard output template if there is observation content'
      - '            templates = [self.config.next_step_template]'
      - ''
      - '        # Populate selected template(s) with information (e.g., issue, arguments,
        state)'
      - '        messages = []'
      - '        for template in templates:'
      - '            messages.append('
      - '                template.format('
      - '                    **self.instance_args,'
      - '                    **self.system_args,'
      - '                    **state_vars,'
      - '                    observation=(observation if observation is not None else
        ""),'
      - '                ),'
      - '            )'
      - ''
      - '        message = "\n".join(messages)'
      - ''
      - "        self.logger.info(f\"\U0001F916 MODEL INPUT\\n{message}\")"
      - '        self._append_history({"role": "user", "content": message, "agent":
        self.name})'
      - ''
      - '        for hook in self.hooks:'
      - '            hook.on_model_query(query=self.local_history, agent=self.name)'
      - '        return self.model.query(self.local_history)'
      - ''
      - '    def retry_after_format_fail(self, output: str) -> str:'
      - '        """Ask the model to correct (without committing to persistent history)
        after a malformatted model output"""'
      - '        format_error_template = self.config.format_error_template'
      - ''
      - '        self.logger.warning(f"MALFORMED OUTPUT\n{output}")'
      - '        self.logger.warning(f"FORMAT ERROR\n{format_error_template}")'
      - ''
      - '        temp_history = self.local_history + ['
      - '            {"role": "assistant", "content": output, "agent": self.name},'
      - '            {"role": "user", "content": format_error_template, "agent": self.name},'
      - '        ]'
      - '        return self.model.query(temp_history)'
      - ''
      - '    def retry_after_blocklist_fail(self, output: str, action: str) -> str:'
      - '        """Ask the model to correct (without committing to persistent history)
        after a disallowed command"""'
      - '        name = action.strip().split()[0]'
      - '        blocklist_error_message = self.config.blocklist_error_template.format(name=name)'
      - ''
      - '        self.logger.warning(f"BLOCKLISTED OUTPUT\n{output}")'
      - '        self.logger.warning(f"BLOCKLIST ERROR\n{blocklist_error_message}")'
      - ''
      - '        temp_history = self.local_history + ['
      - '            {"role": "assistant", "content": output, "agent": self.name},'
      - '            {"role": "user", "content": blocklist_error_message, "agent":
        self.name},'
      - '        ]'
      - '        return self.model.query(temp_history)'
      - ''
      - '    def should_block_action(self, action: str) -> bool:'
      - '        """Check if the command should be blocked."""'
      - '        names = action.strip().split()'
      - '        if len(names) == 0:'
      - '            return False'
      - '        name = names[0]'
      - '        if name in self.config.blocklist:'
      - '            return True'
      - '        if name in self.config.blocklist_standalone and name == action.strip():'
      - '            return True'
      - '        return False'
      - ''
      - '    def check_format_and_requery('
      - '        self,'
      - '        output: str,'
      - '    ) -> tuple[str, str, str]:'
      - '        """Query the model with the current state and observation with the
        appropriate template.'
      - ''
      - '        Try to parse the output into a thought and action. Retry if the output
        is malformatted or the action is blocked.'
      - ''
      - '        Returns:'
      - '            thought: model reasoning'
      - '            action: action that the model proposes'
      - '            output: raw model output'
      - '        """'
      - '        # Condition for handling outputs with no thought (just action)'
      - '        if self.model.args.model_name == "human":'
      - '            return "", output, output'
      - '        elif self.model.args.model_name == "human_thought":'
      - '            thought, action = ParseFunction.get("ThoughtActionParser")('
      - '                output,'
      - '                self.config._commands + self.config.subroutine_types,'
      - '                strict=False,'
      - '            )'
      - '            return thought, action, output'
      - ''
      - '        format_fails = blocklist_fails = 0'
      - ''
      - '        while format_fails + blocklist_fails <= 2:'
      - '            try:'
      - '                thought, action = self.config.parse_function('
      - '                    output,'
      - '                    self.config._commands + self.config.subroutine_types,'
      - '                    strict=False,'
      - '                )'
      - '            except KeyboardInterrupt:'
      - '                raise'
      - '            except FormatError:'
      - '                format_fails += 1'
      - '                output = self.retry_after_format_fail(output)'
      - '                continue'
      - '            if self.should_block_action(action):'
      - '                blocklist_fails += 1'
      - '                output = self.retry_after_blocklist_fail(output, action)'
      - '            else:'
      - '                return thought, action, output'
      - '        self.logger.warning(f"Malformat limit reached: \n{output}")'
      - '        return "Exit due to format error", "exit_format", output'
      - ''
      - '    def forward_with_error_check(self, observation: str, state: str) -> tuple[str,
        str, str]:'
      - '        """Wrapper around `self.forward_model` that handles errors and retries'
      - '        due to format errors or blocked actions.'
      - ''
      - '        Returns:'
      - '            thought: model reasoning'
      - '            action: action that the model proposes'
      - '            output: raw model output'
      - '        """'
      - '        try:'
      - '            return self.check_format_and_requery(self.forward_model(observation,
        state))'
      - '        except KeyboardInterrupt:'
      - '            raise'
      - '        except RuntimeError as e:'
      - '            self.logger.warning(f"Runtime error: {e}")'
      - '            return ('
      - '                f"Exit due to runtime error: {e}",'
      - '                "exit_error",'
      - '                f"exit due to runtime error: {e}",'
      - '            )'
      - '        except ContextWindowExceededError:'
      - '            self.logger.warning("Context window exceeded")'
      - '            return "Exit due to context window", "exit_context", "Exit due
        to context window"'
      - '        except CostLimitExceededError:'
      - '            self.logger.warning("Cost limit exceeded")'
      - '            return "Exit due to cost limit", "exit_cost", "Exit due to cost
        limit"'
      - '        except RetryError as e:'
      - '            self.logger.warning(f"Retry error: {e}")'
      - '            return ('
      - '                f"Exit due to retry error: {e}",'
      - '                "exit_api",'
      - '                f"exit due to retry error: {e}",'
      - '            )'
      - ''
      - '    def init_environment_vars(self, env: SWEEnv):'
      - '        self.set_environment_vars(env, self.config.env_variables)'
      - ''
      - '    def set_environment_vars(self, env: SWEEnv, env_variables: dict[str,
        Any]) -> None:'
      - '        assert self.config is not None  # mypy'
      - '        commands_to_execute = ('
      - '            [self.config.state_command.code]'
      - '            +'
      - '            # [code for code in self.config.util_functions] +'
      - '            # [command.code for command in self.config._commands] +'
      - '            [f"{k}={v}" for k, v in env_variables.items()]'
      - '        )'
      - '        commands = "\n".join(commands_to_execute)'
      - '        try:'
      - '            output = env.communicate(commands)'
      - '            if env.returncode != 0:'
      - '                msg = f"Nonzero return code: {env.returncode}\nOutput: {output}"'
      - '                raise RuntimeError(msg)'
      - '        except KeyboardInterrupt:'
      - '            raise'
      - '        except Exception as e:'
      - '            self.logger.warning("Failed to set environment variables")'
      - '            raise e'
      - '        command_files = list()'
      - '        for file in self.config.command_files:'
      - '            datum = dict()'
      - '            with open(file) as f:'
      - '                contents = f.read()'
      - '            datum["contents"] = contents'
      - '            filename = Path(file).name'
      - '            if not contents.strip().startswith("#!"):'
      - '                if filename.endswith(".sh"):'
      - '                    # files are sourced, so they are not executable'
      - '                    datum["name"] = Path(file).name'
      - '                    datum["type"] = "source_file"'
      - '                elif filename.startswith("_"):'
      - '                    # files are sourced, so they are not executable'
      - '                    datum["name"] = Path(file).name'
      - '                    datum["type"] = "utility"'
      - '                else:'
      - '                    msg = ('
      - '                        f"Non-shell script file {file} does not start with
        shebang.\n"'
      - '                        "Either add a shebang (#!) or change the file extension
        to .sh if you want to source it.\n"'
      - '                        "You can override this behavior by adding an underscore
        to the file name (e.g. _utils.py)."'
      - '                    )'
      - '                    raise ValueError(msg)'
      - '            else:'
      - '                # scripts are made executable'
      - '                datum["name"] = Path(file).name.rsplit(".", 1)[0]'
      - '                datum["type"] = "script"'
      - '            command_files.append(datum)'
      - '        env.add_commands(command_files)'
      - ''
      - '    def get_environment_vars(self, env: SWEEnv) -> dict[str, Any]:'
      - '        """Get environment variables"""'
      - '        assert self.config is not None  # mypy'
      - '        env_vars = dict()'
      - '        for var in self.config.env_variables:'
      - '            env_vars[var] = env.communicate(f"echo ${var}").strip()'
      - '        return env_vars'
      - ''
      - '    def call_subroutine(self, agent_name: str, sub_action, env: SWEEnv):'
      - '        """Call subroutine"""'
      - '        assert self.config is not None  # mypy'
      - '        env_vars = self.get_environment_vars(env)'
      - '        cwd = env.communicate("pwd -P").strip()'
      - '        init_observation = self.config._subroutines[agent_name].init_observation'
      - '        if init_observation is not None:'
      - '            obs, _, _, _ = env.step(init_observation.format(args=sub_action["args"]))'
      - '        else:'
      - '            obs = None'
      - '        if env.returncode != 0:'
      - '            self._append_history({"role": "user", "content": obs, "agent":
        agent_name})'
      - '            msg = f"Nonzero return code: {env.returncode} for init_observation
        in {agent_name}.\n{obs}"'
      - '            raise RuntimeError(msg)'
      - '        return_type = self.config._subroutines[agent_name].return_type'
      - '        sub_agent = Agent(agent_name, self.config._subroutines[agent_name].agent_args)'
      - '        sub_agent_output = sub_agent.run('
      - '            {"issue": sub_action["args"]},'
      - '            env,'
      - '            observation=obs,'
      - '            return_type=return_type,'
      - '            init_model_stats=self.model.stats,'
      - '        )'
      - '        self.history += sub_agent.history'
      - '        self.set_environment_vars(env, env_vars)'
      - '        env.communicate(f"cd {cwd}")'
      - '        self.model.stats.replace(sub_agent.model.stats)'
      - '        return sub_agent_output'
      - ''
      - '    def run('
      - '        self,'
      - '        setup_args: dict[str, Any],'
      - '        env: SWEEnv,'
      - '        observation: str | None = None,'
      - '        traj_dir: Path | None = None,'
      - '        return_type: str | None = "info_trajectory",'
      - '        init_model_stats: APIStats | None = None,'
      - '    ):'
      - '        """'
      - '        Run the agent on an environment.'
      - '        Return the final value of the specified return type.'
      - ''
      - '        Args:'
      - '            setup_args: Arguments to pass to the agent''s setup method.'
      - '            env: The environment to run the agent on.'
      - '            observation: Output from environment setup'
      - '            traj_dir: Directory to save the trajectory to'
      - '            return_type: Controls what to return.'
      - '                This should be left at `info_trajectory`, the'
      - '                other values are for internal usage with subroutines.'
      - '            init_model_stats: Initial model stats to use for the run.'
      - ''
      - '        Returns:'
      - '            If return_type is "info_trajectory", returns a tuple of'
      - '            the info dictionary and the trajectory (list of dictionaries).'
      - '        """'
      - '        done = False'
      - '        # mypy checks'
      - '        assert env.container_obj is not None'
      - '        assert env.record is not None'
      - '        assert self.config is not None'
      - ''
      - '        if env.container_obj.id != self.last_container_id:'
      - '            self.logger.info(f"Initializing agent settings for container
        {env.container_obj.id}")'
      - '            self.init_environment_vars(env)'
      - '            self.last_container_id = env.container_obj.id'
      - '        # Re-initialize primary'
      - '        self.setup(setup_args, init_model_stats)'
      - ''
      - '        for hook in self.hooks:'
      - '            hook.on_run_start()'
      - ''
      - '        # Run action/observation loop'
      - '        trajectory = []'
      - '        info = {}'
      - '        traj_log_path = traj_dir / (env.record["instance_id"] + ".traj")'
      - '        self.logger.info("Trajectory will be saved to %s", traj_log_path)'
      - '        while not done:'
      - '            for hook in self.hooks:'
      - '                hook.on_step_start()'
      - '            state = env.communicate(self.state_command) if self.state_command
        else None'
      - '            thought, action, output = self.forward(observation, env.get_available_actions(),
        state)'
      - '            for hook in self.hooks:'
      - '                hook.on_actions_generated(thought=thought, action=action,
        output=output)'
      - '            observations = list()'
      - '            run_action = self._guard_multiline_input(action)'
      - '            for sub_action in self.split_actions(run_action):'
      - '                if sub_action["agent"] == self.name or sub_action["cmd_name"]
        == self.config.submit_command:'
      - '                    for hook in self.hooks:'
      - '                        hook.on_sub_action_started(sub_action=sub_action)'
      - '                    obs, _, done, info = env.step(sub_action["action"])'
      - '                    for hook in self.hooks:'
      - '                        hook.on_sub_action_executed(obs=obs, done=done)'
      - '                    observations.append(obs)'
      - '                    if sub_action["cmd_name"] == self.config.submit_command:'
      - '                        done = True'
      - '                    if done:'
      - '                        break'
      - '                else:'
      - '                    agent_name = sub_action["agent"]'
      - '                    sub_agent_output = self.call_subroutine(agent_name, sub_action,
        env)'
      - '                    observations.append(sub_agent_output)'
      - ''
      - '            observation = "\n".join([obs for obs in observations if obs is
        not None])'
      - ''
      - '            trajectory_step = TrajectoryStep('
      - '                {'
      - '                    "action": action,'
      - '                    "observation": observation,'
      - '                    "response": output,'
      - '                    "state": state,'
      - '                    "thought": thought,'
      - '                },'
      - '            )'
      - '            trajectory.append(trajectory_step)'
      - '            model_stats: APIStats = self.model.stats'
      - '            info["model_stats"] = model_stats.to_dict()'
      - '            if traj_dir:'
      - '                self.save_trajectory(trajectory, traj_log_path, env_name=env.name,
        info=info)'
      - '            for hook in self.hooks:'
      - '                hook.on_step_done(trajectory_step=trajectory_step, model_stats=model_stats)'
      - ''
      - '        for hook in self.hooks:'
      - '            hook.on_run_done()'
      - ''
      - '        self.logger.info("Trajectory saved to %s", traj_log_path)'
      - ''
      - '        if return_type == "info":'
      - '            return info'
      - '        if return_type == "info_trajectory":'
      - '            return info, trajectory'
      - '        return trajectory[-1][return_type]'
    commands.py:
      classes:
      - end_line: 17
        methods: []
        name: AssistantMetadata
        start_line: 13
        text:
        - 'class AssistantMetadata(FrozenSerializable):'
        - '    """Pass observations to the assistant, and get back a response."""'
        - ''
        - '    system_template: str | None = None'
        - '    instance_template: str | None = None'
      - end_line: 27
        methods: []
        name: ControlMetadata
        start_line: 23
        text:
        - 'class ControlMetadata(FrozenSerializable):'
        - '    """TODO: should be able to control high-level control flow after calling
          this command"""'
        - ''
        - '    next_step_template: str | None = None'
        - '    next_step_action_template: str | None = None'
      - end_line: 37
        methods: []
        name: Command
        start_line: 31
        text:
        - 'class Command(FrozenSerializable):'
        - '    code: str'
        - '    name: str'
        - '    docstring: str | None = None'
        - '    end_name: str | None = None  # if there is an end_name, then it is
          a multi-line command'
        - '    arguments: dict | None = None'
        - '    signature: str | None = None'
      - end_line: 47
        methods:
        - end_line: 47
          name: __new__
          start_line: 43
          text:
          - '    def __new__(cls, name, bases, attrs):'
          - '        new_cls = super().__new__(cls, name, bases, attrs)'
          - '        if name != "ParseCommand":'
          - '            cls._registry[name] = new_cls'
          - '        return new_cls'
        name: ParseCommandMeta
        start_line: 40
        text:
        - 'class ParseCommandMeta(type):'
        - '    _registry = {}'
        - ''
        - '    def __new__(cls, name, bases, attrs):'
        - '        new_cls = super().__new__(cls, name, bases, attrs)'
        - '        if name != "ParseCommand":'
        - '            cls._registry[name] = new_cls'
        - '        return new_cls'
      - end_line: 72
        methods:
        - end_line: 58
          name: get
          start_line: 53
          text:
          - '    def get(cls, name):'
          - '        try:'
          - '            return cls._registry[name]()'
          - '        except KeyError:'
          - '            msg = f"Command parser ({name}) not found."'
          - '            raise ValueError(msg)'
        - end_line: 65
          name: parse_command_file
          start_line: 61
          text:
          - '    def parse_command_file(self, path: str) -> list[Command]:'
          - '        """'
          - '        Define how to parse a file into a list of commands.'
          - '        """'
          - '        raise NotImplementedError'
        - end_line: 72
          name: generate_command_docs
          start_line: 68
          text:
          - '    def generate_command_docs(self, commands: list[Command], subroutine_types,
            **kwargs) -> str:'
          - '        """'
          - '        Generate a string of documentation for the given commands and
            subroutine types.'
          - '        """'
          - '        raise NotImplementedError'
        name: ParseCommand
        start_line: 51
        text:
        - 'class ParseCommand(metaclass=ParseCommandMeta):'
        - '    @classmethod'
        - '    def get(cls, name):'
        - '        try:'
        - '            return cls._registry[name]()'
        - '        except KeyError:'
        - '            msg = f"Command parser ({name}) not found."'
        - '            raise ValueError(msg)'
        - ''
        - '    @abstractmethod'
        - '    def parse_command_file(self, path: str) -> list[Command]:'
        - '        """'
        - '        Define how to parse a file into a list of commands.'
        - '        """'
        - '        raise NotImplementedError'
        - ''
        - '    @abstractmethod'
        - '    def generate_command_docs(self, commands: list[Command], subroutine_types,
          **kwargs) -> str:'
        - '        """'
        - '        Generate a string of documentation for the given commands and subroutine
          types.'
        - '        """'
        - '        raise NotImplementedError'
      - end_line: 204
        methods:
        - end_line: 104
          name: parse_command_file
          start_line: 79
          text:
          - '    def parse_command_file(self, path: str) -> list[Command]:'
          - '        with open(path) as file:'
          - '            contents = file.read()'
          - '        if contents.strip().startswith("#!"):'
          - '            commands = self.parse_script(path, contents)'
          - '        else:'
          - '            if Path(path).suffix != ".sh" and not Path(path).name.startswith("_"):'
          - '                msg = ('
          - '                    f"Source file {path} does not have a .sh extension.\n"'
          - '                    "Only .sh files are supported for bash function parsing.\n"'
          - '                    "If you want to use a non-shell file as a command
            (script), "'
          - '                    "it should use a shebang (e.g. #!/usr/bin/env python)."'
          - '                )'
          - '                raise ValueError(msg)'
          - '            return self.parse_bash_functions(path, contents)'
          - '        if len(commands) == 0 and not Path(path).name.startswith("_"):'
          - '            msg = ('
          - '                f"Non-shell file {path} does not contain any commands.\n"'
          - '                "If you want to use a non-shell file as a command (script),
            "'
          - '                "it should contain exactly one @yaml docstring. "'
          - '                "If you want to use a file as a utility script, "'
          - '                "it should start with an underscore (e.g. _utils.py)."'
          - '            )'
          - '            raise ValueError(msg)'
          - '        else:'
          - '            return commands'
        - end_line: 155
          name: parse_bash_functions
          start_line: 106
          text:
          - '    def parse_bash_functions(self, path, contents: str) -> list[Command]:'
          - '        """'
          - '        Simple logic for parsing a bash file and segmenting it into functions.'
          - ''
          - '        Assumes that all functions have their name and opening curly
            bracket in one line,'
          - '        and closing curly bracket in a line by itself.'
          - '        """'
          - '        lines = contents.split("\n")'
          - '        commands = []'
          - '        idx = 0'
          - '        docs = []'
          - '        while idx < len(lines):'
          - '            line = lines[idx]'
          - '            idx += 1'
          - '            if line.startswith("# "):'
          - '                docs.append(line[2:])'
          - '            elif line.strip().endswith("() {"):'
          - '                name = line.split()[0][:-2]'
          - '                code = line'
          - '                while lines[idx].strip() != "}":'
          - '                    code += lines[idx]'
          - '                    idx += 1'
          - '                code += lines[idx]'
          - '                docstring, end_name, arguments, signature = None, None,
            None, name'
          - '                docs_dict = yaml.safe_load("\n".join(docs).replace("@yaml",
            ""))'
          - '                if docs_dict is not None:'
          - '                    docstring = docs_dict["docstring"]'
          - '                    end_name = docs_dict.get("end_name", None)'
          - '                    arguments = docs_dict.get("arguments", None)'
          - '                    if "signature" in docs_dict:'
          - '                        signature = docs_dict["signature"]'
          - '                    elif arguments is not None:'
          - '                        for param, settings in arguments.items():'
          - '                            if settings["required"]:'
          - '                                signature += f" <{param}>"'
          - '                            else:'
          - '                                signature += f" [<{param}>]"'
          - '                command = Command.from_dict('
          - '                    {'
          - '                        "code": code,'
          - '                        "docstring": docstring,'
          - '                        "end_name": end_name,'
          - '                        "name": name,'
          - '                        "arguments": arguments,'
          - '                        "signature": signature,'
          - '                    },'
          - '                )'
          - '                commands.append(command)'
          - '                docs = []'
          - '        return commands'
        - end_line: 194
          name: parse_script
          start_line: 157
          text:
          - '    def parse_script(self, path, contents) -> list[Command]:'
          - '        pattern = re.compile(r"^#\s*@yaml\s*\n^#.*(?:\n#.*)*", re.MULTILINE)'
          - '        matches = pattern.findall(contents)'
          - '        if len(matches) == 0:'
          - '            return []'
          - '        elif len(matches) > 1:'
          - '            msg = "Non-shell file contains multiple @yaml tags.\nOnly
            one @yaml tag is allowed per script."'
          - '            raise ValueError(msg)'
          - '        else:'
          - '            yaml_content = matches[0]'
          - '            yaml_content = re.sub(r"^#", "", yaml_content, flags=re.MULTILINE)'
          - '            docs_dict = yaml.safe_load(yaml_content.replace("@yaml",
            ""))'
          - '            assert docs_dict is not None'
          - '            docstring = docs_dict["docstring"]'
          - '            end_name = docs_dict.get("end_name", None)'
          - '            arguments = docs_dict.get("arguments", None)'
          - '            signature = docs_dict.get("signature", None)'
          - '            name = Path(path).name.rsplit(".", 1)[0]'
          - '            if signature is None and arguments is not None:'
          - '                signature = name'
          - '                for param, settings in arguments.items():'
          - '                    if settings["required"]:'
          - '                        signature += f" <{param}>"'
          - '                    else:'
          - '                        signature += f" [<{param}>]"'
          - '            code = contents'
          - '            return ['
          - '                Command.from_dict('
          - '                    {'
          - '                        "code": code,'
          - '                        "docstring": docstring,'
          - '                        "end_name": end_name,'
          - '                        "name": name,'
          - '                        "arguments": arguments,'
          - '                        "signature": signature,'
          - '                    },'
          - '                ),'
          - '            ]'
        - end_line: 204
          name: generate_command_docs
          start_line: 196
          text:
          - '    def generate_command_docs(self, commands: list[Command], subroutine_types,
            **kwargs) -> str:'
          - '        docs = ""'
          - '        for cmd in commands:'
          - '            if cmd.docstring is not None:'
          - '                docs += f"{cmd.signature or cmd.name} - {cmd.docstring.format(**kwargs)}\n"'
          - '        for subroutine in subroutine_types:'
          - '            if subroutine.docstring is not None:'
          - '                docs += f"{subroutine.signature or subroutine.name} -
            {subroutine.docstring.format(**kwargs)}\n"'
          - '        return docs'
        name: ParseCommandBash
        start_line: 78
        text:
        - 'class ParseCommandBash(ParseCommand):'
        - '    def parse_command_file(self, path: str) -> list[Command]:'
        - '        with open(path) as file:'
        - '            contents = file.read()'
        - '        if contents.strip().startswith("#!"):'
        - '            commands = self.parse_script(path, contents)'
        - '        else:'
        - '            if Path(path).suffix != ".sh" and not Path(path).name.startswith("_"):'
        - '                msg = ('
        - '                    f"Source file {path} does not have a .sh extension.\n"'
        - '                    "Only .sh files are supported for bash function parsing.\n"'
        - '                    "If you want to use a non-shell file as a command (script),
          "'
        - '                    "it should use a shebang (e.g. #!/usr/bin/env python)."'
        - '                )'
        - '                raise ValueError(msg)'
        - '            return self.parse_bash_functions(path, contents)'
        - '        if len(commands) == 0 and not Path(path).name.startswith("_"):'
        - '            msg = ('
        - '                f"Non-shell file {path} does not contain any commands.\n"'
        - '                "If you want to use a non-shell file as a command (script),
          "'
        - '                "it should contain exactly one @yaml docstring. "'
        - '                "If you want to use a file as a utility script, "'
        - '                "it should start with an underscore (e.g. _utils.py)."'
        - '            )'
        - '            raise ValueError(msg)'
        - '        else:'
        - '            return commands'
        - ''
        - '    def parse_bash_functions(self, path, contents: str) -> list[Command]:'
        - '        """'
        - '        Simple logic for parsing a bash file and segmenting it into functions.'
        - ''
        - '        Assumes that all functions have their name and opening curly bracket
          in one line,'
        - '        and closing curly bracket in a line by itself.'
        - '        """'
        - '        lines = contents.split("\n")'
        - '        commands = []'
        - '        idx = 0'
        - '        docs = []'
        - '        while idx < len(lines):'
        - '            line = lines[idx]'
        - '            idx += 1'
        - '            if line.startswith("# "):'
        - '                docs.append(line[2:])'
        - '            elif line.strip().endswith("() {"):'
        - '                name = line.split()[0][:-2]'
        - '                code = line'
        - '                while lines[idx].strip() != "}":'
        - '                    code += lines[idx]'
        - '                    idx += 1'
        - '                code += lines[idx]'
        - '                docstring, end_name, arguments, signature = None, None,
          None, name'
        - '                docs_dict = yaml.safe_load("\n".join(docs).replace("@yaml",
          ""))'
        - '                if docs_dict is not None:'
        - '                    docstring = docs_dict["docstring"]'
        - '                    end_name = docs_dict.get("end_name", None)'
        - '                    arguments = docs_dict.get("arguments", None)'
        - '                    if "signature" in docs_dict:'
        - '                        signature = docs_dict["signature"]'
        - '                    elif arguments is not None:'
        - '                        for param, settings in arguments.items():'
        - '                            if settings["required"]:'
        - '                                signature += f" <{param}>"'
        - '                            else:'
        - '                                signature += f" [<{param}>]"'
        - '                command = Command.from_dict('
        - '                    {'
        - '                        "code": code,'
        - '                        "docstring": docstring,'
        - '                        "end_name": end_name,'
        - '                        "name": name,'
        - '                        "arguments": arguments,'
        - '                        "signature": signature,'
        - '                    },'
        - '                )'
        - '                commands.append(command)'
        - '                docs = []'
        - '        return commands'
        - ''
        - '    def parse_script(self, path, contents) -> list[Command]:'
        - '        pattern = re.compile(r"^#\s*@yaml\s*\n^#.*(?:\n#.*)*", re.MULTILINE)'
        - '        matches = pattern.findall(contents)'
        - '        if len(matches) == 0:'
        - '            return []'
        - '        elif len(matches) > 1:'
        - '            msg = "Non-shell file contains multiple @yaml tags.\nOnly one
          @yaml tag is allowed per script."'
        - '            raise ValueError(msg)'
        - '        else:'
        - '            yaml_content = matches[0]'
        - '            yaml_content = re.sub(r"^#", "", yaml_content, flags=re.MULTILINE)'
        - '            docs_dict = yaml.safe_load(yaml_content.replace("@yaml", ""))'
        - '            assert docs_dict is not None'
        - '            docstring = docs_dict["docstring"]'
        - '            end_name = docs_dict.get("end_name", None)'
        - '            arguments = docs_dict.get("arguments", None)'
        - '            signature = docs_dict.get("signature", None)'
        - '            name = Path(path).name.rsplit(".", 1)[0]'
        - '            if signature is None and arguments is not None:'
        - '                signature = name'
        - '                for param, settings in arguments.items():'
        - '                    if settings["required"]:'
        - '                        signature += f" <{param}>"'
        - '                    else:'
        - '                        signature += f" [<{param}>]"'
        - '            code = contents'
        - '            return ['
        - '                Command.from_dict('
        - '                    {'
        - '                        "code": code,'
        - '                        "docstring": docstring,'
        - '                        "end_name": end_name,'
        - '                        "name": name,'
        - '                        "arguments": arguments,'
        - '                        "signature": signature,'
        - '                    },'
        - '                ),'
        - '            ]'
        - ''
        - '    def generate_command_docs(self, commands: list[Command], subroutine_types,
          **kwargs) -> str:'
        - '        docs = ""'
        - '        for cmd in commands:'
        - '            if cmd.docstring is not None:'
        - '                docs += f"{cmd.signature or cmd.name} - {cmd.docstring.format(**kwargs)}\n"'
        - '        for subroutine in subroutine_types:'
        - '            if subroutine.docstring is not None:'
        - '                docs += f"{subroutine.signature or subroutine.name} - {subroutine.docstring.format(**kwargs)}\n"'
        - '        return docs'
      - end_line: 257
        methods:
        - end_line: 234
          name: get_signature
          start_line: 218
          text:
          - '    def get_signature(cmd):'
          - '        signature = cmd.name'
          - '        if "arguments" in cmd.__dict__ and cmd.arguments is not None:'
          - '            if cmd.end_name is None:'
          - '                for param, settings in cmd.arguments.items():'
          - '                    if settings["required"]:'
          - '                        signature += f" <{param}>"'
          - '                    else:'
          - '                        signature += f" [<{param}>]"'
          - '            else:'
          - '                for param, settings in list(cmd.arguments.items())[:-1]:'
          - '                    if settings["required"]:'
          - '                        signature += f" <{param}>"'
          - '                    else:'
          - '                        signature += f" [<{param}>]"'
          - '                signature += f"\n{list(cmd.arguments[-1].keys())[0]}\n{cmd.end_name}"'
          - '        return signature'
        - end_line: 257
          name: generate_command_docs
          start_line: 236
          text:
          - '    def generate_command_docs('
          - '        self,'
          - '        commands: list[Command],'
          - '        subroutine_types,'
          - '        **kwargs,'
          - '    ) -> str:'
          - '        docs = ""'
          - '        for cmd in commands + subroutine_types:'
          - '            docs += f"{cmd.name}:\n"'
          - '            if cmd.docstring is not None:'
          - '                docs += f"  docstring: {cmd.docstring.format(**kwargs)}\n"'
          - '            if cmd.signature is not None:'
          - '                docs += f"  signature: {cmd.signature}\n"'
          - '            else:'
          - '                docs += f"  signature: {self.get_signature(cmd)}\n"'
          - '            if "arguments" in cmd.__dict__ and cmd.arguments is not None:'
          - '                docs += "  arguments:\n"'
          - '                for param, settings in cmd.arguments.items():'
          - '                    req_string = "required" if settings["required"] else
            "optional"'
          - '                    docs += f"    - {param} ({settings[''type'']}) [{req_string}]:
            {settings[''description'']}\n"'
          - '            docs += "\n"'
          - '        return docs'
        name: ParseCommandDetailed
        start_line: 207
        text:
        - 'class ParseCommandDetailed(ParseCommandBash):'
        - '    """'
        - '    # command_name:'
        - '    #   "docstring"'
        - '    #   signature: "signature"'
        - '    #   arguments:'
        - '    #     arg1 (type) [required]: "description"'
        - '    #     arg2 (type) [optional]: "description"'
        - '    """'
        - ''
        - '    @staticmethod'
        - '    def get_signature(cmd):'
        - '        signature = cmd.name'
        - '        if "arguments" in cmd.__dict__ and cmd.arguments is not None:'
        - '            if cmd.end_name is None:'
        - '                for param, settings in cmd.arguments.items():'
        - '                    if settings["required"]:'
        - '                        signature += f" <{param}>"'
        - '                    else:'
        - '                        signature += f" [<{param}>]"'
        - '            else:'
        - '                for param, settings in list(cmd.arguments.items())[:-1]:'
        - '                    if settings["required"]:'
        - '                        signature += f" <{param}>"'
        - '                    else:'
        - '                        signature += f" [<{param}>]"'
        - '                signature += f"\n{list(cmd.arguments[-1].keys())[0]}\n{cmd.end_name}"'
        - '        return signature'
        - ''
        - '    def generate_command_docs('
        - '        self,'
        - '        commands: list[Command],'
        - '        subroutine_types,'
        - '        **kwargs,'
        - '    ) -> str:'
        - '        docs = ""'
        - '        for cmd in commands + subroutine_types:'
        - '            docs += f"{cmd.name}:\n"'
        - '            if cmd.docstring is not None:'
        - '                docs += f"  docstring: {cmd.docstring.format(**kwargs)}\n"'
        - '            if cmd.signature is not None:'
        - '                docs += f"  signature: {cmd.signature}\n"'
        - '            else:'
        - '                docs += f"  signature: {self.get_signature(cmd)}\n"'
        - '            if "arguments" in cmd.__dict__ and cmd.arguments is not None:'
        - '                docs += "  arguments:\n"'
        - '                for param, settings in cmd.arguments.items():'
        - '                    req_string = "required" if settings["required"] else
          "optional"'
        - '                    docs += f"    - {param} ({settings[''type'']}) [{req_string}]:
          {settings[''description'']}\n"'
        - '            docs += "\n"'
        - '        return docs'
      functions: []
      text:
      - from __future__ import annotations
      - ''
      - import re
      - from abc import abstractmethod
      - from dataclasses import dataclass
      - from pathlib import Path
      - ''
      - import yaml
      - from simple_parsing.helpers.serialization.serializable import FrozenSerializable
      - ''
      - ''
      - '@dataclass(frozen=True)'
      - 'class AssistantMetadata(FrozenSerializable):'
      - '    """Pass observations to the assistant, and get back a response."""'
      - ''
      - '    system_template: str | None = None'
      - '    instance_template: str | None = None'
      - ''
      - ''
      - '# TODO: first can be used for two-stage actions'
      - '# TODO: eventually might control high-level control flow'
      - '@dataclass(frozen=True)'
      - 'class ControlMetadata(FrozenSerializable):'
      - '    """TODO: should be able to control high-level control flow after calling
        this command"""'
      - ''
      - '    next_step_template: str | None = None'
      - '    next_step_action_template: str | None = None'
      - ''
      - ''
      - '@dataclass(frozen=True)'
      - 'class Command(FrozenSerializable):'
      - '    code: str'
      - '    name: str'
      - '    docstring: str | None = None'
      - '    end_name: str | None = None  # if there is an end_name, then it is a
        multi-line command'
      - '    arguments: dict | None = None'
      - '    signature: str | None = None'
      - ''
      - ''
      - 'class ParseCommandMeta(type):'
      - '    _registry = {}'
      - ''
      - '    def __new__(cls, name, bases, attrs):'
      - '        new_cls = super().__new__(cls, name, bases, attrs)'
      - '        if name != "ParseCommand":'
      - '            cls._registry[name] = new_cls'
      - '        return new_cls'
      - ''
      - ''
      - '@dataclass'
      - 'class ParseCommand(metaclass=ParseCommandMeta):'
      - '    @classmethod'
      - '    def get(cls, name):'
      - '        try:'
      - '            return cls._registry[name]()'
      - '        except KeyError:'
      - '            msg = f"Command parser ({name}) not found."'
      - '            raise ValueError(msg)'
      - ''
      - '    @abstractmethod'
      - '    def parse_command_file(self, path: str) -> list[Command]:'
      - '        """'
      - '        Define how to parse a file into a list of commands.'
      - '        """'
      - '        raise NotImplementedError'
      - ''
      - '    @abstractmethod'
      - '    def generate_command_docs(self, commands: list[Command], subroutine_types,
        **kwargs) -> str:'
      - '        """'
      - '        Generate a string of documentation for the given commands and subroutine
        types.'
      - '        """'
      - '        raise NotImplementedError'
      - ''
      - ''
      - '# DEFINE NEW COMMAND PARSER FUNCTIONS BELOW THIS LINE'
      - ''
      - ''
      - 'class ParseCommandBash(ParseCommand):'
      - '    def parse_command_file(self, path: str) -> list[Command]:'
      - '        with open(path) as file:'
      - '            contents = file.read()'
      - '        if contents.strip().startswith("#!"):'
      - '            commands = self.parse_script(path, contents)'
      - '        else:'
      - '            if Path(path).suffix != ".sh" and not Path(path).name.startswith("_"):'
      - '                msg = ('
      - '                    f"Source file {path} does not have a .sh extension.\n"'
      - '                    "Only .sh files are supported for bash function parsing.\n"'
      - '                    "If you want to use a non-shell file as a command (script),
        "'
      - '                    "it should use a shebang (e.g. #!/usr/bin/env python)."'
      - '                )'
      - '                raise ValueError(msg)'
      - '            return self.parse_bash_functions(path, contents)'
      - '        if len(commands) == 0 and not Path(path).name.startswith("_"):'
      - '            msg = ('
      - '                f"Non-shell file {path} does not contain any commands.\n"'
      - '                "If you want to use a non-shell file as a command (script),
        "'
      - '                "it should contain exactly one @yaml docstring. "'
      - '                "If you want to use a file as a utility script, "'
      - '                "it should start with an underscore (e.g. _utils.py)."'
      - '            )'
      - '            raise ValueError(msg)'
      - '        else:'
      - '            return commands'
      - ''
      - '    def parse_bash_functions(self, path, contents: str) -> list[Command]:'
      - '        """'
      - '        Simple logic for parsing a bash file and segmenting it into functions.'
      - ''
      - '        Assumes that all functions have their name and opening curly bracket
        in one line,'
      - '        and closing curly bracket in a line by itself.'
      - '        """'
      - '        lines = contents.split("\n")'
      - '        commands = []'
      - '        idx = 0'
      - '        docs = []'
      - '        while idx < len(lines):'
      - '            line = lines[idx]'
      - '            idx += 1'
      - '            if line.startswith("# "):'
      - '                docs.append(line[2:])'
      - '            elif line.strip().endswith("() {"):'
      - '                name = line.split()[0][:-2]'
      - '                code = line'
      - '                while lines[idx].strip() != "}":'
      - '                    code += lines[idx]'
      - '                    idx += 1'
      - '                code += lines[idx]'
      - '                docstring, end_name, arguments, signature = None, None, None,
        name'
      - '                docs_dict = yaml.safe_load("\n".join(docs).replace("@yaml",
        ""))'
      - '                if docs_dict is not None:'
      - '                    docstring = docs_dict["docstring"]'
      - '                    end_name = docs_dict.get("end_name", None)'
      - '                    arguments = docs_dict.get("arguments", None)'
      - '                    if "signature" in docs_dict:'
      - '                        signature = docs_dict["signature"]'
      - '                    elif arguments is not None:'
      - '                        for param, settings in arguments.items():'
      - '                            if settings["required"]:'
      - '                                signature += f" <{param}>"'
      - '                            else:'
      - '                                signature += f" [<{param}>]"'
      - '                command = Command.from_dict('
      - '                    {'
      - '                        "code": code,'
      - '                        "docstring": docstring,'
      - '                        "end_name": end_name,'
      - '                        "name": name,'
      - '                        "arguments": arguments,'
      - '                        "signature": signature,'
      - '                    },'
      - '                )'
      - '                commands.append(command)'
      - '                docs = []'
      - '        return commands'
      - ''
      - '    def parse_script(self, path, contents) -> list[Command]:'
      - '        pattern = re.compile(r"^#\s*@yaml\s*\n^#.*(?:\n#.*)*", re.MULTILINE)'
      - '        matches = pattern.findall(contents)'
      - '        if len(matches) == 0:'
      - '            return []'
      - '        elif len(matches) > 1:'
      - '            msg = "Non-shell file contains multiple @yaml tags.\nOnly one
        @yaml tag is allowed per script."'
      - '            raise ValueError(msg)'
      - '        else:'
      - '            yaml_content = matches[0]'
      - '            yaml_content = re.sub(r"^#", "", yaml_content, flags=re.MULTILINE)'
      - '            docs_dict = yaml.safe_load(yaml_content.replace("@yaml", ""))'
      - '            assert docs_dict is not None'
      - '            docstring = docs_dict["docstring"]'
      - '            end_name = docs_dict.get("end_name", None)'
      - '            arguments = docs_dict.get("arguments", None)'
      - '            signature = docs_dict.get("signature", None)'
      - '            name = Path(path).name.rsplit(".", 1)[0]'
      - '            if signature is None and arguments is not None:'
      - '                signature = name'
      - '                for param, settings in arguments.items():'
      - '                    if settings["required"]:'
      - '                        signature += f" <{param}>"'
      - '                    else:'
      - '                        signature += f" [<{param}>]"'
      - '            code = contents'
      - '            return ['
      - '                Command.from_dict('
      - '                    {'
      - '                        "code": code,'
      - '                        "docstring": docstring,'
      - '                        "end_name": end_name,'
      - '                        "name": name,'
      - '                        "arguments": arguments,'
      - '                        "signature": signature,'
      - '                    },'
      - '                ),'
      - '            ]'
      - ''
      - '    def generate_command_docs(self, commands: list[Command], subroutine_types,
        **kwargs) -> str:'
      - '        docs = ""'
      - '        for cmd in commands:'
      - '            if cmd.docstring is not None:'
      - '                docs += f"{cmd.signature or cmd.name} - {cmd.docstring.format(**kwargs)}\n"'
      - '        for subroutine in subroutine_types:'
      - '            if subroutine.docstring is not None:'
      - '                docs += f"{subroutine.signature or subroutine.name} - {subroutine.docstring.format(**kwargs)}\n"'
      - '        return docs'
      - ''
      - ''
      - 'class ParseCommandDetailed(ParseCommandBash):'
      - '    """'
      - '    # command_name:'
      - '    #   "docstring"'
      - '    #   signature: "signature"'
      - '    #   arguments:'
      - '    #     arg1 (type) [required]: "description"'
      - '    #     arg2 (type) [optional]: "description"'
      - '    """'
      - ''
      - '    @staticmethod'
      - '    def get_signature(cmd):'
      - '        signature = cmd.name'
      - '        if "arguments" in cmd.__dict__ and cmd.arguments is not None:'
      - '            if cmd.end_name is None:'
      - '                for param, settings in cmd.arguments.items():'
      - '                    if settings["required"]:'
      - '                        signature += f" <{param}>"'
      - '                    else:'
      - '                        signature += f" [<{param}>]"'
      - '            else:'
      - '                for param, settings in list(cmd.arguments.items())[:-1]:'
      - '                    if settings["required"]:'
      - '                        signature += f" <{param}>"'
      - '                    else:'
      - '                        signature += f" [<{param}>]"'
      - '                signature += f"\n{list(cmd.arguments[-1].keys())[0]}\n{cmd.end_name}"'
      - '        return signature'
      - ''
      - '    def generate_command_docs('
      - '        self,'
      - '        commands: list[Command],'
      - '        subroutine_types,'
      - '        **kwargs,'
      - '    ) -> str:'
      - '        docs = ""'
      - '        for cmd in commands + subroutine_types:'
      - '            docs += f"{cmd.name}:\n"'
      - '            if cmd.docstring is not None:'
      - '                docs += f"  docstring: {cmd.docstring.format(**kwargs)}\n"'
      - '            if cmd.signature is not None:'
      - '                docs += f"  signature: {cmd.signature}\n"'
      - '            else:'
      - '                docs += f"  signature: {self.get_signature(cmd)}\n"'
      - '            if "arguments" in cmd.__dict__ and cmd.arguments is not None:'
      - '                docs += "  arguments:\n"'
      - '                for param, settings in cmd.arguments.items():'
      - '                    req_string = "required" if settings["required"] else
        "optional"'
      - '                    docs += f"    - {param} ({settings[''type'']}) [{req_string}]:
        {settings[''description'']}\n"'
      - '            docs += "\n"'
      - '        return docs'
    history_processors.py:
      classes:
      - end_line: 9
        methods: []
        name: FormatError
        start_line: 8
        text:
        - 'class FormatError(Exception):'
        - '    pass'
      - end_line: 22
        methods:
        - end_line: 22
          name: __new__
          start_line: 18
          text:
          - '    def __new__(cls, name, bases, attrs):'
          - '        new_cls = super().__new__(cls, name, bases, attrs)'
          - '        if name != "HistoryProcessor":'
          - '            cls._registry[name] = new_cls'
          - '        return new_cls'
        name: HistoryProcessorMeta
        start_line: 15
        text:
        - 'class HistoryProcessorMeta(type):'
        - '    _registry = {}'
        - ''
        - '    def __new__(cls, name, bases, attrs):'
        - '        new_cls = super().__new__(cls, name, bases, attrs)'
        - '        if name != "HistoryProcessor":'
        - '            cls._registry[name] = new_cls'
        - '        return new_cls'
      - end_line: 40
        methods:
        - end_line: 28
          name: __init__
          start_line: 27
          text:
          - '    def __init__(self, *args, **kwargs):'
          - '        pass'
        - end_line: 32
          name: __call__
          start_line: 31
          text:
          - '    def __call__(self, history: list[str]) -> list[str]:'
          - '        raise NotImplementedError'
        - end_line: 40
          name: get
          start_line: 35
          text:
          - '    def get(cls, name, *args, **kwargs):'
          - '        try:'
          - '            return cls._registry[name](*args, **kwargs)'
          - '        except KeyError:'
          - '            msg = f"Model output parser ({name}) not found."'
          - '            raise ValueError(msg)'
        name: HistoryProcessor
        start_line: 26
        text:
        - 'class HistoryProcessor(metaclass=HistoryProcessorMeta):'
        - '    def __init__(self, *args, **kwargs):'
        - '        pass'
        - ''
        - '    @abstractmethod'
        - '    def __call__(self, history: list[str]) -> list[str]:'
        - '        raise NotImplementedError'
        - ''
        - '    @classmethod'
        - '    def get(cls, name, *args, **kwargs):'
        - '        try:'
        - '            return cls._registry[name](*args, **kwargs)'
        - '        except KeyError:'
        - '            msg = f"Model output parser ({name}) not found."'
        - '            raise ValueError(msg)'
      - end_line: 46
        methods:
        - end_line: 46
          name: __call__
          start_line: 45
          text:
          - '    def __call__(self, history):'
          - '        return history'
        name: DefaultHistoryProcessor
        start_line: 44
        text:
        - 'class DefaultHistoryProcessor(HistoryProcessor):'
        - '    def __call__(self, history):'
        - '        return history'
      - end_line: 79
        methods:
        - end_line: 76
          name: __init__
          start_line: 75
          text:
          - '    def __init__(self, n):'
          - '        self.n = n'
        - end_line: 79
          name: __call__
          start_line: 78
          text:
          - '    def __call__(self, history):'
          - '        return last_n_history(history, self.n)'
        name: LastNObservations
        start_line: 74
        text:
        - 'class LastNObservations(HistoryProcessor):'
        - '    def __init__(self, n):'
        - '        self.n = n'
        - ''
        - '    def __call__(self, history):'
        - '        return last_n_history(history, self.n)'
      - end_line: 84
        methods:
        - end_line: 84
          name: __call__
          start_line: 83
          text:
          - '    def __call__(self, history):'
          - '        return last_n_history(history, 2)'
        name: Last2Observations
        start_line: 82
        text:
        - 'class Last2Observations(HistoryProcessor):'
        - '    def __call__(self, history):'
        - '        return last_n_history(history, 2)'
      - end_line: 89
        methods:
        - end_line: 89
          name: __call__
          start_line: 88
          text:
          - '    def __call__(self, history):'
          - '        return last_n_history(history, 5)'
        name: Last5Observations
        start_line: 87
        text:
        - 'class Last5Observations(HistoryProcessor):'
        - '    def __call__(self, history):'
        - '        return last_n_history(history, 5)'
      - end_line: 127
        methods:
        - end_line: 127
          name: __call__
          start_line: 96
          text:
          - '    def __call__(self, history):'
          - '        new_history = list()'
          - '        # For each value in history, keep track of which windows have
            been shown.'
          - '        # We want to mark windows that should stay open (they''re the
            last window for a particular file)'
          - '        # Then we''ll replace all other windows with a simple summary
            of the window (i.e. number of lines)'
          - '        windows = set()'
          - '        for entry in reversed(history):'
          - '            data = entry.copy()'
          - '            if data["role"] != "user":'
          - '                new_history.append(entry)'
          - '                continue'
          - '            if data.get("is_demo", False):'
          - '                new_history.append(entry)'
          - '                continue'
          - '            matches = list(self.pattern.finditer(entry["content"]))'
          - '            if len(matches) >= 1:'
          - '                file_match = self.file_pattern.search(entry["content"])'
          - '                if file_match:'
          - '                    file = file_match.group(1)'
          - '                else:'
          - '                    continue'
          - '                if file in windows:'
          - '                    start = matches[0].start()'
          - '                    end = matches[-1].end()'
          - '                    data["content"] = ('
          - '                        entry["content"][:start]'
          - '                        + f"Outdated window with {len(matches)} lines
            omitted...\n"'
          - '                        + entry["content"][end:]'
          - '                    )'
          - '                windows.add(file)'
          - '            new_history.append(data)'
          - '        return list(reversed(new_history))'
        name: ClosedWindowHistoryProcessor
        start_line: 92
        text:
        - 'class ClosedWindowHistoryProcessor(HistoryProcessor):'
        - '    pattern = re.compile(r"^(\d+)\:.*?(\n|$)", re.MULTILINE)'
        - '    file_pattern = re.compile(r"\[File:\s+(.*)\s+\(\d+\s+lines\ total\)\]")'
        - ''
        - '    def __call__(self, history):'
        - '        new_history = list()'
        - '        # For each value in history, keep track of which windows have been
          shown.'
        - '        # We want to mark windows that should stay open (they''re the last
          window for a particular file)'
        - '        # Then we''ll replace all other windows with a simple summary of
          the window (i.e. number of lines)'
        - '        windows = set()'
        - '        for entry in reversed(history):'
        - '            data = entry.copy()'
        - '            if data["role"] != "user":'
        - '                new_history.append(entry)'
        - '                continue'
        - '            if data.get("is_demo", False):'
        - '                new_history.append(entry)'
        - '                continue'
        - '            matches = list(self.pattern.finditer(entry["content"]))'
        - '            if len(matches) >= 1:'
        - '                file_match = self.file_pattern.search(entry["content"])'
        - '                if file_match:'
        - '                    file = file_match.group(1)'
        - '                else:'
        - '                    continue'
        - '                if file in windows:'
        - '                    start = matches[0].start()'
        - '                    end = matches[-1].end()'
        - '                    data["content"] = ('
        - '                        entry["content"][:start]'
        - '                        + f"Outdated window with {len(matches)} lines omitted...\n"'
        - '                        + entry["content"][end:]'
        - '                    )'
        - '                windows.add(file)'
        - '            new_history.append(data)'
        - '        return list(reversed(new_history))'
      functions:
      - end_line: 71
        name: last_n_history
        start_line: 49
        text:
        - 'def last_n_history(history, n):'
        - '    if n <= 0:'
        - '        msg = "n must be a positive integer"'
        - '        raise ValueError(msg)'
        - '    new_history = list()'
        - '    user_messages = len([entry for entry in history if (entry["role"] ==
          "user" and not entry.get("is_demo", False))])'
        - '    user_msg_idx = 0'
        - '    for entry in history:'
        - '        data = entry.copy()'
        - '        if data["role"] != "user":'
        - '            new_history.append(entry)'
        - '            continue'
        - '        if data.get("is_demo", False):'
        - '            new_history.append(entry)'
        - '            continue'
        - '        else:'
        - '            user_msg_idx += 1'
        - '        if user_msg_idx == 1 or user_msg_idx in range(user_messages - n
          + 1, user_messages + 1):'
        - '            new_history.append(entry)'
        - '        else:'
        - '            data["content"] = f''Old output omitted ({len(entry["content"].splitlines())}
          lines)'''
        - '            new_history.append(data)'
        - '    return new_history'
      text:
      - from __future__ import annotations
      - ''
      - import re
      - from abc import abstractmethod
      - from dataclasses import dataclass
      - ''
      - ''
      - 'class FormatError(Exception):'
      - '    pass'
      - ''
      - ''
      - '# ABSTRACT BASE CLASSES'
      - ''
      - ''
      - 'class HistoryProcessorMeta(type):'
      - '    _registry = {}'
      - ''
      - '    def __new__(cls, name, bases, attrs):'
      - '        new_cls = super().__new__(cls, name, bases, attrs)'
      - '        if name != "HistoryProcessor":'
      - '            cls._registry[name] = new_cls'
      - '        return new_cls'
      - ''
      - ''
      - '@dataclass'
      - 'class HistoryProcessor(metaclass=HistoryProcessorMeta):'
      - '    def __init__(self, *args, **kwargs):'
      - '        pass'
      - ''
      - '    @abstractmethod'
      - '    def __call__(self, history: list[str]) -> list[str]:'
      - '        raise NotImplementedError'
      - ''
      - '    @classmethod'
      - '    def get(cls, name, *args, **kwargs):'
      - '        try:'
      - '            return cls._registry[name](*args, **kwargs)'
      - '        except KeyError:'
      - '            msg = f"Model output parser ({name}) not found."'
      - '            raise ValueError(msg)'
      - ''
      - ''
      - '# DEFINE NEW PARSING FUNCTIONS BELOW THIS LINE'
      - 'class DefaultHistoryProcessor(HistoryProcessor):'
      - '    def __call__(self, history):'
      - '        return history'
      - ''
      - ''
      - 'def last_n_history(history, n):'
      - '    if n <= 0:'
      - '        msg = "n must be a positive integer"'
      - '        raise ValueError(msg)'
      - '    new_history = list()'
      - '    user_messages = len([entry for entry in history if (entry["role"] ==
        "user" and not entry.get("is_demo", False))])'
      - '    user_msg_idx = 0'
      - '    for entry in history:'
      - '        data = entry.copy()'
      - '        if data["role"] != "user":'
      - '            new_history.append(entry)'
      - '            continue'
      - '        if data.get("is_demo", False):'
      - '            new_history.append(entry)'
      - '            continue'
      - '        else:'
      - '            user_msg_idx += 1'
      - '        if user_msg_idx == 1 or user_msg_idx in range(user_messages - n +
        1, user_messages + 1):'
      - '            new_history.append(entry)'
      - '        else:'
      - '            data["content"] = f''Old output omitted ({len(entry["content"].splitlines())}
        lines)'''
      - '            new_history.append(data)'
      - '    return new_history'
      - ''
      - ''
      - 'class LastNObservations(HistoryProcessor):'
      - '    def __init__(self, n):'
      - '        self.n = n'
      - ''
      - '    def __call__(self, history):'
      - '        return last_n_history(history, self.n)'
      - ''
      - ''
      - 'class Last2Observations(HistoryProcessor):'
      - '    def __call__(self, history):'
      - '        return last_n_history(history, 2)'
      - ''
      - ''
      - 'class Last5Observations(HistoryProcessor):'
      - '    def __call__(self, history):'
      - '        return last_n_history(history, 5)'
      - ''
      - ''
      - 'class ClosedWindowHistoryProcessor(HistoryProcessor):'
      - '    pattern = re.compile(r"^(\d+)\:.*?(\n|$)", re.MULTILINE)'
      - '    file_pattern = re.compile(r"\[File:\s+(.*)\s+\(\d+\s+lines\ total\)\]")'
      - ''
      - '    def __call__(self, history):'
      - '        new_history = list()'
      - '        # For each value in history, keep track of which windows have been
        shown.'
      - '        # We want to mark windows that should stay open (they''re the last
        window for a particular file)'
      - '        # Then we''ll replace all other windows with a simple summary of
        the window (i.e. number of lines)'
      - '        windows = set()'
      - '        for entry in reversed(history):'
      - '            data = entry.copy()'
      - '            if data["role"] != "user":'
      - '                new_history.append(entry)'
      - '                continue'
      - '            if data.get("is_demo", False):'
      - '                new_history.append(entry)'
      - '                continue'
      - '            matches = list(self.pattern.finditer(entry["content"]))'
      - '            if len(matches) >= 1:'
      - '                file_match = self.file_pattern.search(entry["content"])'
      - '                if file_match:'
      - '                    file = file_match.group(1)'
      - '                else:'
      - '                    continue'
      - '                if file in windows:'
      - '                    start = matches[0].start()'
      - '                    end = matches[-1].end()'
      - '                    data["content"] = ('
      - '                        entry["content"][:start]'
      - '                        + f"Outdated window with {len(matches)} lines omitted...\n"'
      - '                        + entry["content"][end:]'
      - '                    )'
      - '                windows.add(file)'
      - '            new_history.append(data)'
      - '        return list(reversed(new_history))'
    models.py:
      classes:
      - end_line: 47
        methods: []
        name: ModelArguments
        start_line: 31
        text:
        - 'class ModelArguments(FrozenSerializable):'
        - '    """Arguments configuring the model and its behavior."""'
        - ''
        - '    # Name of the model to use'
        - '    model_name: str'
        - '    # Cost limit for every instance (task)'
        - '    per_instance_cost_limit: float = 0.0'
        - '    # Total cost limit'
        - '    total_cost_limit: float = 0.0'
        - '    # Sampling temperature'
        - '    temperature: float = 1.0'
        - '    # Sampling top-p'
        - '    top_p: float = 1.0'
        - '    # Path to replay file when using the replay model'
        - '    replay_path: str | None = None'
        - '    # Host URL when using Ollama model'
        - '    host_url: str = "localhost:11434"'
      - end_line: 72
        methods:
        - end_line: 65
          name: __add__
          start_line: 58
          text:
          - '    def __add__(self, other):'
          - '        if not isinstance(other, APIStats):'
          - '            msg = "Can only add APIStats with APIStats"'
          - '            raise TypeError(msg)'
          - ''
          - '        return APIStats('
          - '            **{field.name: getattr(self, field.name) + getattr(other,
            field.name) for field in fields(self)},'
          - '        )'
        - end_line: 72
          name: replace
          start_line: 67
          text:
          - '    def replace(self, other):'
          - '        if not isinstance(other, APIStats):'
          - '            msg = "Can only replace APIStats with APIStats"'
          - '            raise TypeError(msg)'
          - ''
          - '        return APIStats(**{field.name: getattr(other, field.name) for
            field in fields(self)})'
        name: APIStats
        start_line: 51
        text:
        - 'class APIStats(Serializable):'
        - '    total_cost: float = 0'
        - '    instance_cost: float = 0'
        - '    tokens_sent: int = 0'
        - '    tokens_received: int = 0'
        - '    api_calls: int = 0'
        - ''
        - '    def __add__(self, other):'
        - '        if not isinstance(other, APIStats):'
        - '            msg = "Can only add APIStats with APIStats"'
        - '            raise TypeError(msg)'
        - ''
        - '        return APIStats('
        - '            **{field.name: getattr(self, field.name) + getattr(other, field.name)
          for field in fields(self)},'
        - '        )'
        - ''
        - '    def replace(self, other):'
        - '        if not isinstance(other, APIStats):'
        - '            msg = "Can only replace APIStats with APIStats"'
        - '            raise TypeError(msg)'
        - ''
        - '        return APIStats(**{field.name: getattr(other, field.name) for field
          in fields(self)})'
      - end_line: 76
        methods: []
        name: ContextWindowExceededError
        start_line: 75
        text:
        - 'class ContextWindowExceededError(Exception):'
        - '    pass'
      - end_line: 80
        methods: []
        name: CostLimitExceededError
        start_line: 79
        text:
        - 'class CostLimitExceededError(Exception):'
        - '    pass'
      - end_line: 178
        methods:
        - end_line: 119
          name: __init__
          start_line: 87
          text:
          - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
          - '        self.args = args'
          - '        self.commands = commands'
          - '        self.model_metadata = {}'
          - '        self.stats = APIStats()'
          - ''
          - '        # Map `model_name` to API-compatible name `api_model`'
          - '        self.api_model = ('
          - '            self.SHORTCUTS[self.args.model_name] if self.args.model_name
            in self.SHORTCUTS else self.args.model_name'
          - '        )'
          - ''
          - '        # Map model name to metadata (cost, context info)'
          - '        MODELS = {'
          - '            **{dest: self.MODELS[src] for dest, src in self.SHORTCUTS.items()},'
          - '            **self.MODELS,'
          - '        }'
          - '        if args.model_name in MODELS:'
          - '            self.model_metadata = MODELS[args.model_name]'
          - '        elif args.model_name.startswith("ft:"):'
          - '            ft_model = args.model_name.split(":")[1]'
          - '            self.model_metadata = MODELS[ft_model]'
          - '        elif args.model_name.startswith("ollama:"):'
          - '            self.api_model = args.model_name.split("ollama:", 1)[1]'
          - '            self.model_metadata = self.MODELS[self.api_model]'
          - '        elif args.model_name.startswith("azure:"):'
          - '            azure_model = args.model_name.split("azure:", 1)[1]'
          - '            self.model_metadata = MODELS[azure_model]'
          - '        elif args.model_name.startswith("bedrock:"):'
          - '            self.api_model = args.model_name.split("bedrock:", 1)[1]'
          - '            self.model_metadata = MODELS[self.api_model]'
          - '        else:'
          - '            msg = f"Unregistered model ({args.model_name}). Add model
            name to MODELS metadata to {self.__class__}"'
          - '            raise ValueError(msg)'
        - end_line: 126
          name: reset_stats
          start_line: 121
          text:
          - '    def reset_stats(self, other: APIStats | None = None):'
          - '        if other is None:'
          - '            self.stats = APIStats(total_cost=self.stats.total_cost)'
          - '            logger.info("Resetting model stats")'
          - '        else:'
          - '            self.stats = other'
        - end_line: 174
          name: update_stats
          start_line: 128
          text:
          - '    def update_stats(self, input_tokens: int, output_tokens: int) ->
            float:'
          - '        """'
          - '        Calculates the cost of a response from the openai API.'
          - ''
          - '        Args:'
          - '        input_tokens (int): The number of tokens in the prompt.'
          - '        output_tokens (int): The number of tokens in the response.'
          - ''
          - '        Returns:'
          - '        float: The cost of the response.'
          - '        """'
          - '        # Calculate cost and update cost related fields'
          - '        cost = ('
          - '            self.model_metadata["cost_per_input_token"] * input_tokens'
          - '            + self.model_metadata["cost_per_output_token"] * output_tokens'
          - '        )'
          - '        self.stats.total_cost += cost'
          - '        self.stats.instance_cost += cost'
          - '        self.stats.tokens_sent += input_tokens'
          - '        self.stats.tokens_received += output_tokens'
          - '        self.stats.api_calls += 1'
          - ''
          - '        # Log updated cost values to std. out.'
          - '        logger.info('
          - '            f"input_tokens={input_tokens:,}, "'
          - '            f"output_tokens={output_tokens:,}, "'
          - '            f"instance_cost={self.stats.instance_cost:.2f}, "'
          - '            f"cost={cost:.2f}",'
          - '        )'
          - '        logger.info('
          - '            f"total_tokens_sent={self.stats.tokens_sent:,}, "'
          - '            f"total_tokens_received={self.stats.tokens_received:,}, "'
          - '            f"total_cost={self.stats.total_cost:.2f}, "'
          - '            f"total_api_calls={self.stats.api_calls:,}",'
          - '        )'
          - ''
          - '        # Check whether total cost or instance cost limits have been
            exceeded'
          - '        if 0 < self.args.total_cost_limit <= self.stats.total_cost:'
          - '            logger.warning(f"Cost {self.stats.total_cost:.2f} exceeds
            limit {self.args.total_cost_limit:.2f}")'
          - '            msg = "Total cost limit exceeded"'
          - '            raise CostLimitExceededError(msg)'
          - ''
          - '        if 0 < self.args.per_instance_cost_limit <= self.stats.instance_cost:'
          - '            logger.warning(f"Cost {self.stats.instance_cost:.2f} exceeds
            limit {self.args.per_instance_cost_limit:.2f}")'
          - '            msg = "Instance cost limit exceeded"'
          - '            raise CostLimitExceededError(msg)'
          - '        return cost'
        - end_line: 178
          name: query
          start_line: 176
          text:
          - '    def query(self, history: list[dict[str, str]]) -> str:'
          - '        msg = "Use a subclass of BaseModel"'
          - '        raise NotImplementedError(msg)'
        name: BaseModel
        start_line: 83
        text:
        - 'class BaseModel:'
        - '    MODELS = {}'
        - '    SHORTCUTS = {}'
        - ''
        - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
        - '        self.args = args'
        - '        self.commands = commands'
        - '        self.model_metadata = {}'
        - '        self.stats = APIStats()'
        - ''
        - '        # Map `model_name` to API-compatible name `api_model`'
        - '        self.api_model = ('
        - '            self.SHORTCUTS[self.args.model_name] if self.args.model_name
          in self.SHORTCUTS else self.args.model_name'
        - '        )'
        - ''
        - '        # Map model name to metadata (cost, context info)'
        - '        MODELS = {'
        - '            **{dest: self.MODELS[src] for dest, src in self.SHORTCUTS.items()},'
        - '            **self.MODELS,'
        - '        }'
        - '        if args.model_name in MODELS:'
        - '            self.model_metadata = MODELS[args.model_name]'
        - '        elif args.model_name.startswith("ft:"):'
        - '            ft_model = args.model_name.split(":")[1]'
        - '            self.model_metadata = MODELS[ft_model]'
        - '        elif args.model_name.startswith("ollama:"):'
        - '            self.api_model = args.model_name.split("ollama:", 1)[1]'
        - '            self.model_metadata = self.MODELS[self.api_model]'
        - '        elif args.model_name.startswith("azure:"):'
        - '            azure_model = args.model_name.split("azure:", 1)[1]'
        - '            self.model_metadata = MODELS[azure_model]'
        - '        elif args.model_name.startswith("bedrock:"):'
        - '            self.api_model = args.model_name.split("bedrock:", 1)[1]'
        - '            self.model_metadata = MODELS[self.api_model]'
        - '        else:'
        - '            msg = f"Unregistered model ({args.model_name}). Add model name
          to MODELS metadata to {self.__class__}"'
        - '            raise ValueError(msg)'
        - ''
        - '    def reset_stats(self, other: APIStats | None = None):'
        - '        if other is None:'
        - '            self.stats = APIStats(total_cost=self.stats.total_cost)'
        - '            logger.info("Resetting model stats")'
        - '        else:'
        - '            self.stats = other'
        - ''
        - '    def update_stats(self, input_tokens: int, output_tokens: int) -> float:'
        - '        """'
        - '        Calculates the cost of a response from the openai API.'
        - ''
        - '        Args:'
        - '        input_tokens (int): The number of tokens in the prompt.'
        - '        output_tokens (int): The number of tokens in the response.'
        - ''
        - '        Returns:'
        - '        float: The cost of the response.'
        - '        """'
        - '        # Calculate cost and update cost related fields'
        - '        cost = ('
        - '            self.model_metadata["cost_per_input_token"] * input_tokens'
        - '            + self.model_metadata["cost_per_output_token"] * output_tokens'
        - '        )'
        - '        self.stats.total_cost += cost'
        - '        self.stats.instance_cost += cost'
        - '        self.stats.tokens_sent += input_tokens'
        - '        self.stats.tokens_received += output_tokens'
        - '        self.stats.api_calls += 1'
        - ''
        - '        # Log updated cost values to std. out.'
        - '        logger.info('
        - '            f"input_tokens={input_tokens:,}, "'
        - '            f"output_tokens={output_tokens:,}, "'
        - '            f"instance_cost={self.stats.instance_cost:.2f}, "'
        - '            f"cost={cost:.2f}",'
        - '        )'
        - '        logger.info('
        - '            f"total_tokens_sent={self.stats.tokens_sent:,}, "'
        - '            f"total_tokens_received={self.stats.tokens_received:,}, "'
        - '            f"total_cost={self.stats.total_cost:.2f}, "'
        - '            f"total_api_calls={self.stats.api_calls:,}",'
        - '        )'
        - ''
        - '        # Check whether total cost or instance cost limits have been exceeded'
        - '        if 0 < self.args.total_cost_limit <= self.stats.total_cost:'
        - '            logger.warning(f"Cost {self.stats.total_cost:.2f} exceeds limit
          {self.args.total_cost_limit:.2f}")'
        - '            msg = "Total cost limit exceeded"'
        - '            raise CostLimitExceededError(msg)'
        - ''
        - '        if 0 < self.args.per_instance_cost_limit <= self.stats.instance_cost:'
        - '            logger.warning(f"Cost {self.stats.instance_cost:.2f} exceeds
          limit {self.args.per_instance_cost_limit:.2f}")'
        - '            msg = "Instance cost limit exceeded"'
        - '            raise CostLimitExceededError(msg)'
        - '        return cost'
        - ''
        - '    def query(self, history: list[dict[str, str]]) -> str:'
        - '        msg = "Use a subclass of BaseModel"'
        - '        raise NotImplementedError(msg)'
      - end_line: 312
        methods:
        - end_line: 253
          name: __init__
          start_line: 247
          text:
          - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
          - '        super().__init__(args, commands)'
          - ''
          - '        logging.getLogger("openai").setLevel(logging.WARNING)'
          - '        logging.getLogger("httpx").setLevel(logging.WARNING)'
          - ''
          - '        self._setup_client()'
        - end_line: 270
          name: _setup_client
          start_line: 255
          text:
          - '    def _setup_client(self):'
          - '        if self.args.model_name.startswith("azure"):'
          - '            logger.warning('
          - '                "The --model CLI argument is ignored when using the Azure
            GPT endpoint. "'
          - '                "The model is determined by the AZURE_OPENAI_DEPLOYMENT
            key/"'
          - '                "environment variable (this might change in the future).",'
          - '            )'
          - '            self.api_model = keys_config["AZURE_OPENAI_DEPLOYMENT"]'
          - '            self.client = AzureOpenAI('
          - '                api_key=keys_config["AZURE_OPENAI_API_KEY"],'
          - '                azure_endpoint=keys_config["AZURE_OPENAI_ENDPOINT"],'
          - '                api_version=keys_config.get("AZURE_OPENAI_API_VERSION",
            "2024-02-01"),'
          - '            )'
          - '        else:'
          - '            api_base_url: str | None = keys_config.get("OPENAI_API_BASE_URL",
            None)'
          - '            self.client = OpenAI(api_key=keys_config["OPENAI_API_KEY"],
            base_url=api_base_url)'
        - end_line: 285
          name: history_to_messages
          start_line: 272
          text:
          - '    def history_to_messages('
          - '        self,'
          - '        history: list[dict[str, str]],'
          - '        is_demonstration: bool = False,'
          - '    ) -> str | list[dict[str, str]]:'
          - '        """'
          - '        Create `messages` by filtering out all keys except for role/content
            per `history` turn'
          - '        """'
          - '        # Remove system messages if it is a demonstration'
          - '        if is_demonstration:'
          - '            history = [entry for entry in history if entry["role"] !=
            "system"]'
          - '            return "\n".join([entry["content"] for entry in history])'
          - '        # Return history components with just role, content fields'
          - '        return [{k: v for k, v in entry.items() if k in ["role", "content"]}
            for entry in history]'
        - end_line: 312
          name: query
          start_line: 293
          text:
          - '    def query(self, history: list[dict[str, str]]) -> str:'
          - '        """'
          - '        Query the OpenAI API with the given `history` and return the
            response.'
          - '        """'
          - '        try:'
          - '            # Perform OpenAI API call'
          - '            response = self.client.chat.completions.create('
          - '                messages=self.history_to_messages(history),'
          - '                model=self.api_model,'
          - '                temperature=self.args.temperature,'
          - '                top_p=self.args.top_p,'
          - '            )'
          - '        except BadRequestError:'
          - '            msg = f"Context window ({self.model_metadata[''max_context'']}
            tokens) exceeded"'
          - '            raise CostLimitExceededError(msg)'
          - '        # Calculate + update costs, return response'
          - '        input_tokens = response.usage.prompt_tokens'
          - '        output_tokens = response.usage.completion_tokens'
          - '        self.update_stats(input_tokens, output_tokens)'
          - '        return response.choices[0].message.content'
        name: OpenAIModel
        start_line: 181
        text:
        - 'class OpenAIModel(BaseModel):'
        - '    MODELS = {'
        - '        "gpt-3.5-turbo-0125": {'
        - '            "max_context": 16_385,'
        - '            "cost_per_input_token": 5e-07,'
        - '            "cost_per_output_token": 1.5e-06,'
        - '        },'
        - '        "gpt-3.5-turbo-1106": {'
        - '            "max_context": 16_385,'
        - '            "cost_per_input_token": 1.5e-06,'
        - '            "cost_per_output_token": 2e-06,'
        - '        },'
        - '        "gpt-3.5-turbo-16k-0613": {'
        - '            "max_context": 16_385,'
        - '            "cost_per_input_token": 1.5e-06,'
        - '            "cost_per_output_token": 2e-06,'
        - '        },'
        - '        "gpt-4-32k-0613": {'
        - '            "max_context": 32_768,'
        - '            "cost_per_input_token": 6e-05,'
        - '            "cost_per_output_token": 0.00012,'
        - '        },'
        - '        "gpt-4-0613": {'
        - '            "max_context": 8_192,'
        - '            "cost_per_input_token": 3e-05,'
        - '            "cost_per_output_token": 6e-05,'
        - '        },'
        - '        "gpt-4-1106-preview": {'
        - '            "max_context": 128_000,'
        - '            "cost_per_input_token": 1e-05,'
        - '            "cost_per_output_token": 3e-05,'
        - '        },'
        - '        "gpt-4-0125-preview": {'
        - '            "max_context": 128_000,'
        - '            "cost_per_input_token": 1e-05,'
        - '            "cost_per_output_token": 3e-05,'
        - '        },'
        - '        "gpt-4-turbo-2024-04-09": {'
        - '            "max_context": 128_000,'
        - '            "cost_per_input_token": 1e-05,'
        - '            "cost_per_output_token": 3e-05,'
        - '        },'
        - '        "gpt-4o-2024-05-13": {'
        - '            "max_context": 128_000,'
        - '            "cost_per_input_token": 5e-06,'
        - '            "cost_per_output_token": 15e-06,'
        - '        },'
        - '        "gpt-4o-mini-2024-07-18": {'
        - '            "max_context": 128_000,'
        - '            "cost_per_input_token": 5e-06,'
        - '            "cost_per_output_token": 15e-06,'
        - '        },'
        - '    }'
        - ''
        - '    SHORTCUTS = {'
        - '        "gpt3": "gpt-3.5-turbo-1106",'
        - '        "gpt3-legacy": "gpt-3.5-turbo-16k-0613",'
        - '        "gpt4": "gpt-4-1106-preview",'
        - '        "gpt4-legacy": "gpt-4-0613",'
        - '        "gpt4-0125": "gpt-4-0125-preview",'
        - '        "gpt3-0125": "gpt-3.5-turbo-0125",'
        - '        "gpt4-turbo": "gpt-4-turbo-2024-04-09",'
        - '        "gpt4o": "gpt-4o-2024-05-13",'
        - '        "gpt-4o-mini": "gpt-4o-mini-2024-07-18",'
        - '    }'
        - ''
        - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
        - '        super().__init__(args, commands)'
        - ''
        - '        logging.getLogger("openai").setLevel(logging.WARNING)'
        - '        logging.getLogger("httpx").setLevel(logging.WARNING)'
        - ''
        - '        self._setup_client()'
        - ''
        - '    def _setup_client(self):'
        - '        if self.args.model_name.startswith("azure"):'
        - '            logger.warning('
        - '                "The --model CLI argument is ignored when using the Azure
          GPT endpoint. "'
        - '                "The model is determined by the AZURE_OPENAI_DEPLOYMENT
          key/"'
        - '                "environment variable (this might change in the future).",'
        - '            )'
        - '            self.api_model = keys_config["AZURE_OPENAI_DEPLOYMENT"]'
        - '            self.client = AzureOpenAI('
        - '                api_key=keys_config["AZURE_OPENAI_API_KEY"],'
        - '                azure_endpoint=keys_config["AZURE_OPENAI_ENDPOINT"],'
        - '                api_version=keys_config.get("AZURE_OPENAI_API_VERSION",
          "2024-02-01"),'
        - '            )'
        - '        else:'
        - '            api_base_url: str | None = keys_config.get("OPENAI_API_BASE_URL",
          None)'
        - '            self.client = OpenAI(api_key=keys_config["OPENAI_API_KEY"],
          base_url=api_base_url)'
        - ''
        - '    def history_to_messages('
        - '        self,'
        - '        history: list[dict[str, str]],'
        - '        is_demonstration: bool = False,'
        - '    ) -> str | list[dict[str, str]]:'
        - '        """'
        - '        Create `messages` by filtering out all keys except for role/content
          per `history` turn'
        - '        """'
        - '        # Remove system messages if it is a demonstration'
        - '        if is_demonstration:'
        - '            history = [entry for entry in history if entry["role"] != "system"]'
        - '            return "\n".join([entry["content"] for entry in history])'
        - '        # Return history components with just role, content fields'
        - '        return [{k: v for k, v in entry.items() if k in ["role", "content"]}
          for entry in history]'
        - ''
        - '    @retry('
        - '        wait=wait_random_exponential(min=1, max=15),'
        - '        reraise=True,'
        - '        stop=stop_after_attempt(_MAX_RETRIES),'
        - '        retry=retry_if_not_exception_type((CostLimitExceededError, RuntimeError)),'
        - '    )'
        - '    def query(self, history: list[dict[str, str]]) -> str:'
        - '        """'
        - '        Query the OpenAI API with the given `history` and return the response.'
        - '        """'
        - '        try:'
        - '            # Perform OpenAI API call'
        - '            response = self.client.chat.completions.create('
        - '                messages=self.history_to_messages(history),'
        - '                model=self.api_model,'
        - '                temperature=self.args.temperature,'
        - '                top_p=self.args.top_p,'
        - '            )'
        - '        except BadRequestError:'
        - '            msg = f"Context window ({self.model_metadata[''max_context'']}
          tokens) exceeded"'
        - '            raise CostLimitExceededError(msg)'
        - '        # Calculate + update costs, return response'
        - '        input_tokens = response.usage.prompt_tokens'
        - '        output_tokens = response.usage.completion_tokens'
        - '        self.update_stats(input_tokens, output_tokens)'
        - '        return response.choices[0].message.content'
      - end_line: 327
        methods:
        - end_line: 327
          name: _setup_client
          start_line: 325
          text:
          - '    def _setup_client(self) -> None:'
          - '        api_base_url: str = keys_config["DEEPSEEK_API_BASE_URL"]'
          - '        self.client = OpenAI(api_key=keys_config["DEEPSEEK_API_KEY"],
            base_url=api_base_url)'
        name: DeepSeekModel
        start_line: 315
        text:
        - 'class DeepSeekModel(OpenAIModel):'
        - '    MODELS = {'
        - '        "deepseek-coder": {'
        - '            "max_context": 32_000,'
        - '            "cost_per_input_token": 1.4e-07,'
        - '            "cost_per_output_token": 2.8e-07,'
        - '        },'
        - '    }'
        - '    SHORTCUTS = {}'
        - ''
        - '    def _setup_client(self) -> None:'
        - '        api_base_url: str = keys_config["DEEPSEEK_API_BASE_URL"]'
        - '        self.client = OpenAI(api_key=keys_config["DEEPSEEK_API_KEY"], base_url=api_base_url)'
      - end_line: 408
        methods:
        - end_line: 385
          name: __init__
          start_line: 381
          text:
          - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
          - '        super().__init__(args, commands)'
          - ''
          - '        # Set Anthropic key'
          - '        self.api = Anthropic(api_key=keys_config["ANTHROPIC_API_KEY"])'
        - end_line: 396
          name: history_to_messages
          start_line: 387
          text:
          - '    def history_to_messages('
          - '        self,'
          - '        history: list[dict[str, str]],'
          - '        is_demonstration: bool = False,'
          - '    ) -> str | list[dict[str, str]]:'
          - '        """'
          - '        Create `prompt` by filtering out all keys except for role/content
            per `history` turn'
          - '        Reference: https://docs.anthropic.com/claude/reference/complete_post'
          - '        """'
          - '        return anthropic_history_to_messages(self, history, is_demonstration)'
        - end_line: 408
          name: query
          start_line: 404
          text:
          - '    def query(self, history: list[dict[str, str]]) -> str:'
          - '        """'
          - '        Query the Anthropic API with the given `history` and return the
            response.'
          - '        """'
          - '        return anthropic_query(self, history)'
        name: AnthropicModel
        start_line: 330
        text:
        - 'class AnthropicModel(BaseModel):'
        - '    MODELS = {'
        - '        "claude-instant": {'
        - '            "max_context": 100_000,'
        - '            "cost_per_input_token": 1.63e-06,'
        - '            "cost_per_output_token": 5.51e-06,'
        - '        },'
        - '        "claude-2.0": {'
        - '            "max_context": 100_000,'
        - '            "cost_per_input_token": 1.102e-05,'
        - '            "cost_per_output_token": 3.268e-05,'
        - '        },'
        - '        "claude-2.1": {'
        - '            "max_context": 100_000,'
        - '            "cost_per_input_token": 1.102e-05,'
        - '            "cost_per_output_token": 3.268e-05,'
        - '        },'
        - '        "claude-3-opus-20240229": {'
        - '            "max_context": 200_000,'
        - '            "max_tokens": 4096,  # Max tokens to generate for Claude 3
          models'
        - '            "cost_per_input_token": 1.5e-05,'
        - '            "cost_per_output_token": 7.5e-05,'
        - '        },'
        - '        "claude-3-sonnet-20240229": {'
        - '            "max_context": 200_000,'
        - '            "max_tokens": 4096,'
        - '            "cost_per_input_token": 3e-06,'
        - '            "cost_per_output_token": 1.5e-05,'
        - '        },'
        - '        "claude-3-5-sonnet-20240620": {'
        - '            "max_context": 200_000,'
        - '            "max_tokens": 4096,'
        - '            "cost_per_input_token": 3e-06,'
        - '            "cost_per_output_token": 1.5e-05,'
        - '        },'
        - '        "claude-3-haiku-20240307": {'
        - '            "max_context": 200_000,'
        - '            "max_tokens": 4096,'
        - '            "cost_per_input_token": 2.5e-07,'
        - '            "cost_per_output_token": 1.25e-06,'
        - '        },'
        - '    }'
        - ''
        - '    SHORTCUTS = {'
        - '        "claude-2": "claude-2.1",'
        - '        "claude-opus": "claude-3-opus-20240229",'
        - '        "claude-sonnet": "claude-3-sonnet-20240229",'
        - '        "claude-haiku": "claude-3-haiku-20240307",'
        - '        "claude-sonnet-3.5": "claude-3-5-sonnet-20240620",'
        - '    }'
        - ''
        - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
        - '        super().__init__(args, commands)'
        - ''
        - '        # Set Anthropic key'
        - '        self.api = Anthropic(api_key=keys_config["ANTHROPIC_API_KEY"])'
        - ''
        - '    def history_to_messages('
        - '        self,'
        - '        history: list[dict[str, str]],'
        - '        is_demonstration: bool = False,'
        - '    ) -> str | list[dict[str, str]]:'
        - '        """'
        - '        Create `prompt` by filtering out all keys except for role/content
          per `history` turn'
        - '        Reference: https://docs.anthropic.com/claude/reference/complete_post'
        - '        """'
        - '        return anthropic_history_to_messages(self, history, is_demonstration)'
        - ''
        - '    @retry('
        - '        wait=wait_random_exponential(min=1, max=15),'
        - '        reraise=True,'
        - '        stop=stop_after_attempt(_MAX_RETRIES),'
        - '        retry=retry_if_not_exception_type((CostLimitExceededError, RuntimeError)),'
        - '    )'
        - '    def query(self, history: list[dict[str, str]]) -> str:'
        - '        """'
        - '        Query the Anthropic API with the given `history` and return the
          response.'
        - '        """'
        - '        return anthropic_query(self, history)'
      - end_line: 496
        methods:
        - end_line: 466
          name: __init__
          start_line: 451
          text:
          - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
          - '        super().__init__(args, commands)'
          - ''
          - '        # Extract provider from model ID'
          - '        # https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids.html'
          - '        self.model_provider = self.api_model.split(".")[0]'
          - '        if self.model_provider == "anthropic":'
          - '            # Note: this assumes AWS credentials are already configured.'
          - '            # https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html'
          - '            self.api = AnthropicBedrock()'
          - '        elif self.model_provider in ["ai21", "amazon", "cohere", "meta",
            "mistral"]:'
          - '            msg = f"{self.api_model} is not supported!"'
          - '            raise NotImplementedError(msg)'
          - '        else:'
          - '            msg = f"Provider {self.model_provider} is not supported by
            Amazon Bedrock!"'
          - '            raise ValueError(msg)'
        - end_line: 480
          name: history_to_messages
          start_line: 468
          text:
          - '    def history_to_messages('
          - '        self,'
          - '        history: list[dict[str, str]],'
          - '        is_demonstration: bool = False,'
          - '    ) -> str | list[dict[str, str]]:'
          - '        """'
          - '        Create `prompt` from the history of messages'
          - '        """'
          - '        if self.model_provider == "anthropic":'
          - '            return anthropic_history_to_messages(self, history, is_demonstration)'
          - '        else:'
          - '            msg = f"{self.api_model} is not supported!"'
          - '            raise NotImplementedError(msg)'
        - end_line: 496
          name: query
          start_line: 488
          text:
          - '    def query(self, history: list[dict[str, str]]) -> str:'
          - '        """'
          - '        Query Amazon Bedrock with the given `history` and return the
            response.'
          - '        """'
          - '        if self.model_provider == "anthropic":'
          - '            return anthropic_query(self, history)'
          - '        else:'
          - '            msg = f"{self.api_model} is not supported!"'
          - '            raise NotImplementedError(msg)'
        name: BedrockModel
        start_line: 411
        text:
        - 'class BedrockModel(BaseModel):'
        - '    MODELS = {'
        - '        "anthropic.claude-instant-v1": {'
        - '            "max_context": 100_000,'
        - '            "max_tokens_to_sample": 4096,'
        - '            "cost_per_input_token": 8e-07,'
        - '            "cost_per_output_token": 2.4e-06,'
        - '        },'
        - '        "anthropic.claude-v2": {'
        - '            "max_context": 100_000,'
        - '            "max_tokens_to_sample": 4096,'
        - '            "cost_per_input_token": 8e-06,'
        - '            "cost_per_output_token": 2.4e-05,'
        - '        },'
        - '        "anthropic.claude-v2:1": {'
        - '            "max_context": 100_000,'
        - '            "max_tokens": 4096,'
        - '            "cost_per_input_token": 8e-06,'
        - '            "cost_per_output_token": 2.4e-05,'
        - '        },'
        - '        "anthropic.claude-3-opus-20240229-v1:0": {'
        - '            "max_context": 200_000,'
        - '            "max_tokens": 4096,'
        - '            "cost_per_input_token": 1.5e-05,'
        - '            "cost_per_output_token": 7.5e-05,'
        - '        },'
        - '        "anthropic.claude-3-sonnet-20240229-v1:0": {'
        - '            "max_context": 200_000,'
        - '            "max_tokens": 4096,'
        - '            "cost_per_input_token": 3e-06,'
        - '            "cost_per_output_token": 1.5e-05,'
        - '        },'
        - '        "anthropic.claude-3-haiku-20240307-v1:0": {'
        - '            "max_context": 200_000,'
        - '            "max_tokens": 4096,'
        - '            "cost_per_input_token": 2.5e-07,'
        - '            "cost_per_output_token": 1.25e-06,'
        - '        },'
        - '    }'
        - ''
        - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
        - '        super().__init__(args, commands)'
        - ''
        - '        # Extract provider from model ID'
        - '        # https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids.html'
        - '        self.model_provider = self.api_model.split(".")[0]'
        - '        if self.model_provider == "anthropic":'
        - '            # Note: this assumes AWS credentials are already configured.'
        - '            # https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html'
        - '            self.api = AnthropicBedrock()'
        - '        elif self.model_provider in ["ai21", "amazon", "cohere", "meta",
          "mistral"]:'
        - '            msg = f"{self.api_model} is not supported!"'
        - '            raise NotImplementedError(msg)'
        - '        else:'
        - '            msg = f"Provider {self.model_provider} is not supported by
          Amazon Bedrock!"'
        - '            raise ValueError(msg)'
        - ''
        - '    def history_to_messages('
        - '        self,'
        - '        history: list[dict[str, str]],'
        - '        is_demonstration: bool = False,'
        - '    ) -> str | list[dict[str, str]]:'
        - '        """'
        - '        Create `prompt` from the history of messages'
        - '        """'
        - '        if self.model_provider == "anthropic":'
        - '            return anthropic_history_to_messages(self, history, is_demonstration)'
        - '        else:'
        - '            msg = f"{self.api_model} is not supported!"'
        - '            raise NotImplementedError(msg)'
        - ''
        - '    @retry('
        - '        wait=wait_random_exponential(min=1, max=15),'
        - '        reraise=True,'
        - '        stop=stop_after_attempt(_MAX_RETRIES),'
        - '        retry=retry_if_not_exception_type((CostLimitExceededError, RuntimeError)),'
        - '    )'
        - '    def query(self, history: list[dict[str, str]]) -> str:'
        - '        """'
        - '        Query Amazon Bedrock with the given `history` and return the response.'
        - '        """'
        - '        if self.model_provider == "anthropic":'
        - '            return anthropic_query(self, history)'
        - '        else:'
        - '            msg = f"{self.api_model} is not supported!"'
        - '            raise NotImplementedError(msg)'
      - end_line: 665
        methods:
        - end_line: 617
          name: __init__
          start_line: 613
          text:
          - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
          - '        super().__init__(args, commands)'
          - '        from ollama import Client'
          - ''
          - '        self.client = Client(host=args.host_url)'
        - end_line: 632
          name: history_to_messages
          start_line: 619
          text:
          - '    def history_to_messages('
          - '        self,'
          - '        history: list[dict[str, str]],'
          - '        is_demonstration: bool = False,'
          - '    ) -> str | list[dict[str, str]]:'
          - '        """'
          - '        Create `messages` by filtering out all keys except for role/content
            per `history` turn'
          - '        """'
          - '        # Remove system messages if it is a demonstration'
          - '        if is_demonstration:'
          - '            history = [entry for entry in history if entry["role"] !=
            "system"]'
          - '            return "\n".join([entry["content"] for entry in history])'
          - '        # Return history components with just role, content fields'
          - '        return [{k: v for k, v in entry.items() if k in ["role", "content"]}
            for entry in history]'
        - end_line: 665
          name: query
          start_line: 640
          text:
          - '    def query(self, history: list[dict[str, str]]) -> str:'
          - '        """'
          - '        Query the Ollama API with the given `history` and return the
            response.'
          - '        """'
          - '        response = self.client.chat('
          - '            model=self.api_model,'
          - '            messages=self.history_to_messages(history),'
          - '            options={'
          - '                "temperature": self.args.temperature,'
          - '                "top_p": self.args.top_p,'
          - '            },'
          - '        )'
          - '        # Calculate + update costs, return response'
          - '        if "prompt_eval_count" in response:'
          - '            input_tokens = response["prompt_eval_count"]'
          - '        else:'
          - '            logger.warning('
          - '                "Prompt eval count not found in response. Using 0. "'
          - '                "This might be because the prompt has been cached. "'
          - '                "See https://github.com/princeton-nlp/SWE-agent/issues/44
            "'
          - '                "and https://github.com/ollama/ollama/issues/3427.",'
          - '            )'
          - '            input_tokens = 0'
          - '        output_tokens = response["eval_count"]'
          - '        self.update_stats(input_tokens, output_tokens)'
          - '        return response["message"]["content"]'
        name: OllamaModel
        start_line: 604
        text:
        - 'class OllamaModel(BaseModel):'
        - '    MODELS = defaultdict('
        - '        lambda: {'
        - '            "max_context": 128_000,'
        - '            "cost_per_input_token": 0,'
        - '            "cost_per_output_token": 0,'
        - '        },'
        - '    )'
        - ''
        - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
        - '        super().__init__(args, commands)'
        - '        from ollama import Client'
        - ''
        - '        self.client = Client(host=args.host_url)'
        - ''
        - '    def history_to_messages('
        - '        self,'
        - '        history: list[dict[str, str]],'
        - '        is_demonstration: bool = False,'
        - '    ) -> str | list[dict[str, str]]:'
        - '        """'
        - '        Create `messages` by filtering out all keys except for role/content
          per `history` turn'
        - '        """'
        - '        # Remove system messages if it is a demonstration'
        - '        if is_demonstration:'
        - '            history = [entry for entry in history if entry["role"] != "system"]'
        - '            return "\n".join([entry["content"] for entry in history])'
        - '        # Return history components with just role, content fields'
        - '        return [{k: v for k, v in entry.items() if k in ["role", "content"]}
          for entry in history]'
        - ''
        - '    @retry('
        - '        wait=wait_random_exponential(min=1, max=15),'
        - '        reraise=True,'
        - '        stop=stop_after_attempt(_MAX_RETRIES),'
        - '        retry=retry_if_not_exception_type((CostLimitExceededError, RuntimeError)),'
        - '    )'
        - '    def query(self, history: list[dict[str, str]]) -> str:'
        - '        """'
        - '        Query the Ollama API with the given `history` and return the response.'
        - '        """'
        - '        response = self.client.chat('
        - '            model=self.api_model,'
        - '            messages=self.history_to_messages(history),'
        - '            options={'
        - '                "temperature": self.args.temperature,'
        - '                "top_p": self.args.top_p,'
        - '            },'
        - '        )'
        - '        # Calculate + update costs, return response'
        - '        if "prompt_eval_count" in response:'
        - '            input_tokens = response["prompt_eval_count"]'
        - '        else:'
        - '            logger.warning('
        - '                "Prompt eval count not found in response. Using 0. "'
        - '                "This might be because the prompt has been cached. "'
        - '                "See https://github.com/princeton-nlp/SWE-agent/issues/44
          "'
        - '                "and https://github.com/ollama/ollama/issues/3427.",'
        - '            )'
        - '            input_tokens = 0'
        - '        output_tokens = response["eval_count"]'
        - '        self.update_stats(input_tokens, output_tokens)'
        - '        return response["message"]["content"]'
      - end_line: 754
        methods:
        - end_line: 712
          name: __init__
          start_line: 707
          text:
          - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
          - '        super().__init__(args, commands)'
          - '        assert together.version >= "1.1.0", "Please upgrade to Together
            SDK v1.1.0 or later."'
          - ''
          - '        # Set Together key'
          - '        together.api_key = keys_config["TOGETHER_API_KEY"]'
        - end_line: 725
          name: history_to_messages
          start_line: 714
          text:
          - '    def history_to_messages(self, history: list[dict[str, str]], is_demonstration:
            bool = False) -> str:'
          - '        """'
          - '        Create `prompt` by filtering out all keys except for role/content
            per `history` turn'
          - '        """'
          - '        # Remove system messages if it is a demonstration'
          - '        if is_demonstration:'
          - '            history = [entry for entry in history if entry["role"] !=
            "system"]'
          - '        # Map history to TogetherAI format'
          - '        mapping = {"user": "human", "assistant": "bot", "system": "bot"}'
          - '        prompt = [f''<{mapping[d["role"]]}>: {d["content"]}'' for d in
            history]'
          - '        prompt = "\n".join(prompt)'
          - '        return f"{prompt}\n<bot>:"'
        - end_line: 754
          name: query
          start_line: 733
          text:
          - '    def query(self, history: list[dict[str, str]]) -> str:'
          - '        """'
          - '        Query the Together API with the given `history` and return the
            response.'
          - '        """'
          - '        # Perform Together API call'
          - '        prompt = self.history_to_messages(history)'
          - '        # Anthropic''s count_tokens is convenient because it caches and
            utilizes huggingface/tokenizers, so we will use.'
          - '        max_tokens_to_sample = self.model_metadata["max_context"] - Anthropic().count_tokens(prompt)'
          - '        completion = together.Complete.create('
          - '            model=self.api_model,'
          - '            prompt=prompt,'
          - '            max_tokens=max_tokens_to_sample,'
          - '            stop=["<human>"],'
          - '            temperature=self.args.temperature,'
          - '            top_p=self.args.top_p,'
          - '        )'
          - '        # Calculate + update costs, return response'
          - '        response = completion["choices"][0]["text"].split("<human>")[0]'
          - '        input_tokens = completion["usage"]["prompt_tokens"]'
          - '        output_tokens = completion["usage"]["completion_tokens"]'
          - '        self.update_stats(input_tokens, output_tokens)'
          - '        return response'
        name: TogetherModel
        start_line: 668
        text:
        - 'class TogetherModel(BaseModel):'
        - '    # Check https://docs.together.ai/docs/inference-models for model names,
          context'
        - '    # Check https://www.together.ai/pricing for pricing'
        - '    MODELS = {'
        - '        "meta-llama/Llama-2-13b-chat-hf": {'
        - '            "max_context": 4096,'
        - '            "cost_per_input_token": 2.25e-07,'
        - '            "cost_per_output_token": 2.25e-07,'
        - '        },'
        - '        "meta-llama/Llama-2-70b-chat-hf": {'
        - '            "max_context": 4096,'
        - '            "cost_per_input_token": 9e-07,'
        - '            "cost_per_output_token": 9e-07,'
        - '        },'
        - '        "mistralai/Mistral-7B-Instruct-v0.2": {'
        - '            "max_context": 32768,'
        - '            "cost_per_input_token": 2e-07,'
        - '            "cost_per_output_token": 2e-07,'
        - '        },'
        - '        "togethercomputer/RedPajama-INCITE-7B-Chat": {'
        - '            "max_context": 2048,'
        - '            "cost_per_input_token": 2e-07,'
        - '            "cost_per_output_token": 2e-07,'
        - '        },'
        - '        "mistralai/Mixtral-8x7B-Instruct-v0.1": {'
        - '            "max_context": 32768,'
        - '            "cost_per_input_token": 6e-07,'
        - '            "cost_per_output_token": 6e-07,'
        - '        },'
        - '    }'
        - ''
        - '    SHORTCUTS = {'
        - '        "llama13b": "meta-llama/Llama-2-13b-chat-hf",'
        - '        "llama70b": "meta-llama/Llama-2-70b-chat-hf",'
        - '        "mistral7b": "mistralai/Mistral-7B-Instruct-v0.2",'
        - '        "mixtral8x7b": "mistralai/Mixtral-8x7B-Instruct-v0.1",'
        - '        "redpajama7b": "togethercomputer/RedPajama-INCITE-7B-Chat",'
        - '    }'
        - ''
        - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
        - '        super().__init__(args, commands)'
        - '        assert together.version >= "1.1.0", "Please upgrade to Together
          SDK v1.1.0 or later."'
        - ''
        - '        # Set Together key'
        - '        together.api_key = keys_config["TOGETHER_API_KEY"]'
        - ''
        - '    def history_to_messages(self, history: list[dict[str, str]], is_demonstration:
          bool = False) -> str:'
        - '        """'
        - '        Create `prompt` by filtering out all keys except for role/content
          per `history` turn'
        - '        """'
        - '        # Remove system messages if it is a demonstration'
        - '        if is_demonstration:'
        - '            history = [entry for entry in history if entry["role"] != "system"]'
        - '        # Map history to TogetherAI format'
        - '        mapping = {"user": "human", "assistant": "bot", "system": "bot"}'
        - '        prompt = [f''<{mapping[d["role"]]}>: {d["content"]}'' for d in
          history]'
        - '        prompt = "\n".join(prompt)'
        - '        return f"{prompt}\n<bot>:"'
        - ''
        - '    @retry('
        - '        wait=wait_random_exponential(min=1, max=15),'
        - '        reraise=True,'
        - '        stop=stop_after_attempt(_MAX_RETRIES),'
        - '        retry=retry_if_not_exception_type((CostLimitExceededError, RuntimeError)),'
        - '    )'
        - '    def query(self, history: list[dict[str, str]]) -> str:'
        - '        """'
        - '        Query the Together API with the given `history` and return the
          response.'
        - '        """'
        - '        # Perform Together API call'
        - '        prompt = self.history_to_messages(history)'
        - '        # Anthropic''s count_tokens is convenient because it caches and
          utilizes huggingface/tokenizers, so we will use.'
        - '        max_tokens_to_sample = self.model_metadata["max_context"] - Anthropic().count_tokens(prompt)'
        - '        completion = together.Complete.create('
        - '            model=self.api_model,'
        - '            prompt=prompt,'
        - '            max_tokens=max_tokens_to_sample,'
        - '            stop=["<human>"],'
        - '            temperature=self.args.temperature,'
        - '            top_p=self.args.top_p,'
        - '        )'
        - '        # Calculate + update costs, return response'
        - '        response = completion["choices"][0]["text"].split("<human>")[0]'
        - '        input_tokens = completion["usage"]["prompt_tokens"]'
        - '        output_tokens = completion["usage"]["completion_tokens"]'
        - '        self.update_stats(input_tokens, output_tokens)'
        - '        return response'
      - end_line: 809
        methods:
        - end_line: 766
          name: __init__
          start_line: 760
          text:
          - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
          - '        super().__init__(args, commands)'
          - ''
          - '        # Determine which commands require multi-line input'
          - '        self.multi_line_command_endings = {'
          - '            command.name: command.end_name for command in commands if
            command.end_name is not None'
          - '        }'
        - end_line: 781
          name: history_to_messages
          start_line: 768
          text:
          - '    def history_to_messages('
          - '        self,'
          - '        history: list[dict[str, str]],'
          - '        is_demonstration: bool = False,'
          - '    ) -> str | list[dict[str, str]]:'
          - '        """'
          - '        Create `messages` by filtering out all keys except for role/content
            per `history` turn'
          - '        """'
          - '        # Remove system messages if it is a demonstration'
          - '        if is_demonstration:'
          - '            history = [entry for entry in history if entry["role"] !=
            "system"]'
          - '            return "\n".join([entry["content"] for entry in history])'
          - '        # Return history components with just role, content fields'
          - '        return [{k: v for k, v in entry.items() if k in ["role", "content"]}
            for entry in history]'
        - end_line: 809
          name: query
          start_line: 783
          text:
          - '    def query(self, history: list[dict[str, str]], action_prompt: str
            = "> ") -> str:'
          - '        """'
          - '        Logic for handling user input to pass to SWEEnv'
          - '        """'
          - '        action = input(action_prompt)'
          - '        command_name = action.split()[0] if action else ""'
          - ''
          - '        # Special handling for multi-line input actions (i.e. edit)'
          - '        if command_name in self.multi_line_command_endings:'
          - '            buffer = [action]'
          - '            end_keyword = self.multi_line_command_endings[command_name]'
          - '            while True:'
          - '                action = input("... ")'
          - '                buffer.append(action)'
          - '                if action.rstrip() == end_keyword:'
          - '                    # Continue reading input until terminating keyword
            inputted'
          - '                    break'
          - '            action = "\n".join(buffer)'
          - '        elif action.strip() == "start_multiline_command":  # do arbitrary
            multi-line input'
          - '            buffer = []'
          - '            while True:'
          - '                action = input("... ")'
          - '                if action.rstrip() == "end_multiline_command":'
          - '                    break'
          - '                buffer.append(action)'
          - '            action = "\n".join(buffer)'
          - '        return action'
        name: HumanModel
        start_line: 757
        text:
        - 'class HumanModel(BaseModel):'
        - '    MODELS = {"human": {}}'
        - ''
        - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
        - '        super().__init__(args, commands)'
        - ''
        - '        # Determine which commands require multi-line input'
        - '        self.multi_line_command_endings = {'
        - '            command.name: command.end_name for command in commands if command.end_name
          is not None'
        - '        }'
        - ''
        - '    def history_to_messages('
        - '        self,'
        - '        history: list[dict[str, str]],'
        - '        is_demonstration: bool = False,'
        - '    ) -> str | list[dict[str, str]]:'
        - '        """'
        - '        Create `messages` by filtering out all keys except for role/content
          per `history` turn'
        - '        """'
        - '        # Remove system messages if it is a demonstration'
        - '        if is_demonstration:'
        - '            history = [entry for entry in history if entry["role"] != "system"]'
        - '            return "\n".join([entry["content"] for entry in history])'
        - '        # Return history components with just role, content fields'
        - '        return [{k: v for k, v in entry.items() if k in ["role", "content"]}
          for entry in history]'
        - ''
        - '    def query(self, history: list[dict[str, str]], action_prompt: str =
          "> ") -> str:'
        - '        """'
        - '        Logic for handling user input to pass to SWEEnv'
        - '        """'
        - '        action = input(action_prompt)'
        - '        command_name = action.split()[0] if action else ""'
        - ''
        - '        # Special handling for multi-line input actions (i.e. edit)'
        - '        if command_name in self.multi_line_command_endings:'
        - '            buffer = [action]'
        - '            end_keyword = self.multi_line_command_endings[command_name]'
        - '            while True:'
        - '                action = input("... ")'
        - '                buffer.append(action)'
        - '                if action.rstrip() == end_keyword:'
        - '                    # Continue reading input until terminating keyword
          inputted'
        - '                    break'
        - '            action = "\n".join(buffer)'
        - '        elif action.strip() == "start_multiline_command":  # do arbitrary
          multi-line input'
        - '            buffer = []'
        - '            while True:'
        - '                action = input("... ")'
        - '                if action.rstrip() == "end_multiline_command":'
        - '                    break'
        - '                buffer.append(action)'
        - '            action = "\n".join(buffer)'
        - '        return action'
      - end_line: 831
        methods:
        - end_line: 831
          name: query
          start_line: 815
          text:
          - '    def query(self, history: list[dict[str, str]]) -> str:'
          - '        """'
          - '        Logic for handling user input (both thought + action) to pass
            to SWEEnv'
          - '        """'
          - '        thought_all = ""'
          - '        thought = input("Thought (end w/ END_THOUGHT): ")'
          - '        while True:'
          - '            if "END_THOUGHT" in thought:'
          - '                thought = thought.split("END_THOUGHT")[0]'
          - '                thought_all += thought'
          - '                break'
          - '            thought_all += thought'
          - '            thought = input("... ")'
          - ''
          - '        action = super().query(history, action_prompt="Action: ")'
          - ''
          - '        return f"{thought_all}\n```\n{action}\n```"'
        name: HumanThoughtModel
        start_line: 812
        text:
        - 'class HumanThoughtModel(HumanModel):'
        - '    MODELS = {"human_thought": {}}'
        - ''
        - '    def query(self, history: list[dict[str, str]]) -> str:'
        - '        """'
        - '        Logic for handling user input (both thought + action) to pass to
          SWEEnv'
        - '        """'
        - '        thought_all = ""'
        - '        thought = input("Thought (end w/ END_THOUGHT): ")'
        - '        while True:'
        - '            if "END_THOUGHT" in thought:'
        - '                thought = thought.split("END_THOUGHT")[0]'
        - '                thought_all += thought'
        - '                break'
        - '            thought_all += thought'
        - '            thought = input("... ")'
        - ''
        - '        action = super().query(history, action_prompt="Action: ")'
        - ''
        - '        return f"{thought_all}\n```\n{action}\n```"'
      - end_line: 877
        methods:
        - end_line: 848
          name: __init__
          start_line: 837
          text:
          - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
          - '        super().__init__(args, commands)'
          - ''
          - '        if self.args.replay_path is None or not os.path.exists(self.args.replay_path):'
          - '            msg = "--replay_path must point to a file that exists to
            run a replay policy"'
          - '            raise ValueError(msg)'
          - ''
          - '        self.replays = ['
          - '            list(json.loads(x).values())[0] for x in Path(self.args.replay_path).read_text().splitlines(keepends=True)'
          - '        ]'
          - '        self.replay_idx = 0'
          - '        self.action_idx = 0'
        - end_line: 853
          name: _next_replay
          start_line: 850
          text:
          - '    def _next_replay(self) -> None:'
          - '        """Called after last action"""'
          - '        self.replay_idx += 1'
          - '        self.action_idx = 0'
        - end_line: 877
          name: query
          start_line: 855
          text:
          - '    def query(self, history: list[dict[str, str]]) -> str:'
          - '        """'
          - '        Logic for tracking which replay action to pass to SWEEnv'
          - '        """'
          - '        actions = self.replays[self.replay_idx]'
          - '        try:'
          - '            action = actions[self.action_idx]'
          - '        except IndexError:'
          - '            msg = ('
          - '                "This seems to be an incomplete trajectory. "'
          - '                "We reached the end of it, but `submit` was not called.
            "'
          - '                "Calling it now."'
          - '            )'
          - '            logger.warning(msg)'
          - '            action = "```\nsubmit\n```"'
          - ''
          - '        self.action_idx += 1'
          - ''
          - '        # Assuming `submit` is always last action of replay trajectory'
          - '        if action == "submit":'
          - '            self._next_replay()'
          - ''
          - '        return action'
        name: ReplayModel
        start_line: 834
        text:
        - 'class ReplayModel(BaseModel):'
        - '    MODELS = {"replay": {}}'
        - ''
        - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
        - '        super().__init__(args, commands)'
        - ''
        - '        if self.args.replay_path is None or not os.path.exists(self.args.replay_path):'
        - '            msg = "--replay_path must point to a file that exists to run
          a replay policy"'
        - '            raise ValueError(msg)'
        - ''
        - '        self.replays = ['
        - '            list(json.loads(x).values())[0] for x in Path(self.args.replay_path).read_text().splitlines(keepends=True)'
        - '        ]'
        - '        self.replay_idx = 0'
        - '        self.action_idx = 0'
        - ''
        - '    def _next_replay(self) -> None:'
        - '        """Called after last action"""'
        - '        self.replay_idx += 1'
        - '        self.action_idx = 0'
        - ''
        - '    def query(self, history: list[dict[str, str]]) -> str:'
        - '        """'
        - '        Logic for tracking which replay action to pass to SWEEnv'
        - '        """'
        - '        actions = self.replays[self.replay_idx]'
        - '        try:'
        - '            action = actions[self.action_idx]'
        - '        except IndexError:'
        - '            msg = ('
        - '                "This seems to be an incomplete trajectory. "'
        - '                "We reached the end of it, but `submit` was not called.
          "'
        - '                "Calling it now."'
        - '            )'
        - '            logger.warning(msg)'
        - '            action = "```\nsubmit\n```"'
        - ''
        - '        self.action_idx += 1'
        - ''
        - '        # Assuming `submit` is always last action of replay trajectory'
        - '        if action == "submit":'
        - '            self._next_replay()'
        - ''
        - '        return action'
      - end_line: 896
        methods:
        - end_line: 886
          name: __init__
          start_line: 883
          text:
          - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
          - '        """This model immediately submits. Useful for testing purposes"""'
          - '        super().__init__(args, commands)'
          - '        self._action_idx = 0'
        - end_line: 896
          name: query
          start_line: 888
          text:
          - '    def query(self, history: list[dict[str, str]]) -> str:'
          - '        # Need to at least do _something_ to submit'
          - '        if self._action_idx == 0:'
          - '            self._action_idx = 1'
          - '            action = "DISCUSSION\nLet''s reproduce the bug by creating
            a `reproduce.py` file.\n\n```\ncreate reproduce.py\n```\n"'
          - '        elif self._action_idx == 1:'
          - '            self._action_idx = 0'
          - '            action = "DISCUSSION\nThe task should be resolved, so let''s
            submit the patch.\n\n```\nsubmit\n```\n"'
          - '        return action'
        name: InstantEmptySubmitTestModel
        start_line: 880
        text:
        - 'class InstantEmptySubmitTestModel(BaseModel):'
        - '    MODELS = {"instant_empty_submit": {}}'
        - ''
        - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
        - '        """This model immediately submits. Useful for testing purposes"""'
        - '        super().__init__(args, commands)'
        - '        self._action_idx = 0'
        - ''
        - '    def query(self, history: list[dict[str, str]]) -> str:'
        - '        # Need to at least do _something_ to submit'
        - '        if self._action_idx == 0:'
        - '            self._action_idx = 1'
        - '            action = "DISCUSSION\nLet''s reproduce the bug by creating
          a `reproduce.py` file.\n\n```\ncreate reproduce.py\n```\n"'
        - '        elif self._action_idx == 1:'
        - '            self._action_idx = 0'
        - '            action = "DISCUSSION\nThe task should be resolved, so let''s
          submit the patch.\n\n```\nsubmit\n```\n"'
        - '        return action'
      functions:
      - end_line: 547
        name: anthropic_history_to_messages
        start_line: 499
        text:
        - def anthropic_history_to_messages(
        - '    model: AnthropicModel | BedrockModel,'
        - '    history: list[dict[str, str]],'
        - '    is_demonstration: bool = False,'
        - ') -> str | list[dict[str, str]]:'
        - '    """'
        - '    Create `prompt` by filtering out all keys except for role/content per
          `history` turn'
        - '    Reference: https://docs.anthropic.com/claude/reference/complete_post'
        - '    """'
        - '    # Preserve behavior for older models'
        - '    if model.api_model in ["claude-instant", "claude-2.0"] or ('
        - '        isinstance(model, BedrockModel) and model.api_model in ["anthropic.claude-instant-v1",
          "anthropic.claude-v2"]'
        - '    ):'
        - '        # Remove system messages if it is a demonstration'
        - '        if is_demonstration:'
        - '            history = [entry for entry in history if entry["role"] != "system"]'
        - '        # Map history to Claude format'
        - '        prompt = "\n\n"'
        - '        for entry in history:'
        - '            if entry["role"] in {"user", "system"}:'
        - '                prompt += f''{HUMAN_PROMPT} {entry["content"]}\n\n'''
        - '            elif entry["role"] == "assistant":'
        - '                prompt += f''{AI_PROMPT} {entry["content"]}\n\n'''
        - '        prompt += AI_PROMPT'
        - '        return prompt'
        - ''
        - '    # Remove system messages if it is a demonstration'
        - '    if is_demonstration:'
        - '        history = [entry for entry in history if entry["role"] != "system"]'
        - '        return "\n".join([entry["content"] for entry in history])'
        - ''
        - '    # Return history components with just role, content fields (no system
          message)'
        - '    messages = ['
        - '        {k: v for k, v in entry.items() if k in ["role", "content"]} for
          entry in history if entry["role"] != "system"'
        - '    ]'
        - '    compiled_messages = []  # Combine messages from the same role'
        - '    last_role = None'
        - '    for message in reversed(messages):'
        - '        if last_role == message["role"]:'
        - '            compiled_messages[-1]["content"] = message["content"] + "\n"
          + compiled_messages[-1]["content"]'
        - '        else:'
        - '            compiled_messages.append(message)'
        - '        last_role = message["role"]'
        - '    compiled_messages = list(reversed(compiled_messages))'
        - '    # Replace any empty content values with a "(No output)"'
        - '    for message in compiled_messages:'
        - '        if message["content"].strip() == "":'
        - '            message["content"] = "(No output)"'
        - '    return compiled_messages'
      - end_line: 601
        name: anthropic_query
        start_line: 550
        text:
        - 'def anthropic_query(model: AnthropicModel | BedrockModel, history: list[dict[str,
          str]]) -> str:'
        - '    """'
        - '    Query the Anthropic API with the given `history` and return the response.'
        - '    """'
        - '    # Preserve behavior for older models'
        - '    if model.api_model in ["claude-instant", "claude-2.0", "claude-2.1"]
          or ('
        - '        isinstance(model, BedrockModel) and model.api_model in ["anthropic.claude-instant-v1",
          "anthropic.claude-v2"]'
        - '    ):'
        - '        # Perform Anthropic API call'
        - '        prompt = anthropic_history_to_messages(model, history)'
        - '        if isinstance(model, BedrockModel):'
        - '            # Use a dummy Anthropic client since count_tokens'
        - '            # is not available in AnthropicBedrock'
        - '            # https://github.com/anthropics/anthropic-sdk-python/issues/353'
        - '            input_tokens = Anthropic().count_tokens(prompt)'
        - '        else:'
        - '            input_tokens = model.api.count_tokens(prompt)'
        - '        completion = model.api.completions.create('
        - '            model=model.api_model,'
        - '            prompt=prompt,'
        - '            max_tokens_to_sample=model.model_metadata["max_context"] -
          input_tokens'
        - '            if isinstance(model, Anthropic)'
        - '            else model.model_metadata["max_tokens_to_sample"],'
        - '            temperature=model.args.temperature,'
        - '            top_p=model.args.top_p,'
        - '        )'
        - '        # Calculate + update costs, return response'
        - '        response = completion.completion'
        - '        if isinstance(model, BedrockModel):'
        - '            output_tokens = Anthropic().count_tokens(response)'
        - '        else:'
        - '            output_tokens = model.api.count_tokens(response)'
        - '        model.update_stats(input_tokens, output_tokens)'
        - '        return response'
        - ''
        - '    # Get system message(s)'
        - '    system_message = "\n".join([entry["content"] for entry in history if
          entry["role"] == "system"])'
        - '    messages = anthropic_history_to_messages(model, history)'
        - ''
        - '    # Perform Anthropic API call'
        - '    response = model.api.messages.create('
        - '        messages=messages,'
        - '        max_tokens=model.model_metadata["max_tokens"],'
        - '        model=model.api_model,'
        - '        temperature=model.args.temperature,'
        - '        top_p=model.args.top_p,'
        - '        system=system_message,'
        - '    )'
        - ''
        - '    # Calculate + update costs, return response'
        - '    model.update_stats(response.usage.input_tokens, response.usage.output_tokens)'
        - '    return "\n".join([x.text for x in response.content])'
      - end_line: 934
        name: get_model
        start_line: 899
        text:
        - 'def get_model(args: ModelArguments, commands: list[Command] | None = None):'
        - '    """'
        - '    Returns correct model object given arguments and commands'
        - '    """'
        - '    if commands is None:'
        - '        commands = []'
        - '    if args.model_name == "instant_empty_submit":'
        - '        return InstantEmptySubmitTestModel(args, commands)'
        - '    if args.model_name == "human":'
        - '        return HumanModel(args, commands)'
        - '    if args.model_name == "human_thought":'
        - '        return HumanThoughtModel(args, commands)'
        - '    if args.model_name == "replay":'
        - '        return ReplayModel(args, commands)'
        - '    elif ('
        - '        args.model_name.startswith("gpt")'
        - '        or args.model_name.startswith("ft:gpt")'
        - '        or args.model_name.startswith("azure:gpt")'
        - '        or args.model_name in OpenAIModel.SHORTCUTS'
        - '    ):'
        - '        return OpenAIModel(args, commands)'
        - '    elif args.model_name.startswith("claude"):'
        - '        return AnthropicModel(args, commands)'
        - '    elif args.model_name.startswith("bedrock"):'
        - '        return BedrockModel(args, commands)'
        - '    elif args.model_name.startswith("ollama"):'
        - '        return OllamaModel(args, commands)'
        - '    elif args.model_name.startswith("deepseek"):'
        - '        return DeepSeekModel(args, commands)'
        - '    elif args.model_name in TogetherModel.SHORTCUTS:'
        - '        return TogetherModel(args, commands)'
        - '    elif args.model_name == "instant_empty_submit":'
        - '        return InstantEmptySubmitTestModel(args, commands)'
        - '    else:'
        - '        msg = f"Invalid model name: {args.model_name}"'
        - '        raise ValueError(msg)'
      text:
      - from __future__ import annotations
      - ''
      - import json
      - import logging
      - import os
      - from collections import defaultdict
      - from dataclasses import dataclass, fields
      - from pathlib import Path
      - ''
      - import together
      - from anthropic import AI_PROMPT, HUMAN_PROMPT, Anthropic, AnthropicBedrock
      - from openai import AzureOpenAI, BadRequestError, OpenAI
      - from simple_parsing.helpers.serialization.serializable import FrozenSerializable,
        Serializable
      - from tenacity import (
      - '    retry,'
      - '    retry_if_not_exception_type,'
      - '    stop_after_attempt,'
      - '    wait_random_exponential,'
      - )
      - ''
      - from sweagent.agent.commands import Command
      - from sweagent.utils.config import keys_config
      - from sweagent.utils.log import get_logger
      - ''
      - logger = get_logger("api_models")
      - ''
      - _MAX_RETRIES = keys_config.get("SWE_AGENT_MODEL_MAX_RETRIES", 10)
      - ''
      - ''
      - '@dataclass(frozen=True)'
      - 'class ModelArguments(FrozenSerializable):'
      - '    """Arguments configuring the model and its behavior."""'
      - ''
      - '    # Name of the model to use'
      - '    model_name: str'
      - '    # Cost limit for every instance (task)'
      - '    per_instance_cost_limit: float = 0.0'
      - '    # Total cost limit'
      - '    total_cost_limit: float = 0.0'
      - '    # Sampling temperature'
      - '    temperature: float = 1.0'
      - '    # Sampling top-p'
      - '    top_p: float = 1.0'
      - '    # Path to replay file when using the replay model'
      - '    replay_path: str | None = None'
      - '    # Host URL when using Ollama model'
      - '    host_url: str = "localhost:11434"'
      - ''
      - ''
      - '@dataclass'
      - 'class APIStats(Serializable):'
      - '    total_cost: float = 0'
      - '    instance_cost: float = 0'
      - '    tokens_sent: int = 0'
      - '    tokens_received: int = 0'
      - '    api_calls: int = 0'
      - ''
      - '    def __add__(self, other):'
      - '        if not isinstance(other, APIStats):'
      - '            msg = "Can only add APIStats with APIStats"'
      - '            raise TypeError(msg)'
      - ''
      - '        return APIStats('
      - '            **{field.name: getattr(self, field.name) + getattr(other, field.name)
        for field in fields(self)},'
      - '        )'
      - ''
      - '    def replace(self, other):'
      - '        if not isinstance(other, APIStats):'
      - '            msg = "Can only replace APIStats with APIStats"'
      - '            raise TypeError(msg)'
      - ''
      - '        return APIStats(**{field.name: getattr(other, field.name) for field
        in fields(self)})'
      - ''
      - ''
      - 'class ContextWindowExceededError(Exception):'
      - '    pass'
      - ''
      - ''
      - 'class CostLimitExceededError(Exception):'
      - '    pass'
      - ''
      - ''
      - 'class BaseModel:'
      - '    MODELS = {}'
      - '    SHORTCUTS = {}'
      - ''
      - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
      - '        self.args = args'
      - '        self.commands = commands'
      - '        self.model_metadata = {}'
      - '        self.stats = APIStats()'
      - ''
      - '        # Map `model_name` to API-compatible name `api_model`'
      - '        self.api_model = ('
      - '            self.SHORTCUTS[self.args.model_name] if self.args.model_name
        in self.SHORTCUTS else self.args.model_name'
      - '        )'
      - ''
      - '        # Map model name to metadata (cost, context info)'
      - '        MODELS = {'
      - '            **{dest: self.MODELS[src] for dest, src in self.SHORTCUTS.items()},'
      - '            **self.MODELS,'
      - '        }'
      - '        if args.model_name in MODELS:'
      - '            self.model_metadata = MODELS[args.model_name]'
      - '        elif args.model_name.startswith("ft:"):'
      - '            ft_model = args.model_name.split(":")[1]'
      - '            self.model_metadata = MODELS[ft_model]'
      - '        elif args.model_name.startswith("ollama:"):'
      - '            self.api_model = args.model_name.split("ollama:", 1)[1]'
      - '            self.model_metadata = self.MODELS[self.api_model]'
      - '        elif args.model_name.startswith("azure:"):'
      - '            azure_model = args.model_name.split("azure:", 1)[1]'
      - '            self.model_metadata = MODELS[azure_model]'
      - '        elif args.model_name.startswith("bedrock:"):'
      - '            self.api_model = args.model_name.split("bedrock:", 1)[1]'
      - '            self.model_metadata = MODELS[self.api_model]'
      - '        else:'
      - '            msg = f"Unregistered model ({args.model_name}). Add model name
        to MODELS metadata to {self.__class__}"'
      - '            raise ValueError(msg)'
      - ''
      - '    def reset_stats(self, other: APIStats | None = None):'
      - '        if other is None:'
      - '            self.stats = APIStats(total_cost=self.stats.total_cost)'
      - '            logger.info("Resetting model stats")'
      - '        else:'
      - '            self.stats = other'
      - ''
      - '    def update_stats(self, input_tokens: int, output_tokens: int) -> float:'
      - '        """'
      - '        Calculates the cost of a response from the openai API.'
      - ''
      - '        Args:'
      - '        input_tokens (int): The number of tokens in the prompt.'
      - '        output_tokens (int): The number of tokens in the response.'
      - ''
      - '        Returns:'
      - '        float: The cost of the response.'
      - '        """'
      - '        # Calculate cost and update cost related fields'
      - '        cost = ('
      - '            self.model_metadata["cost_per_input_token"] * input_tokens'
      - '            + self.model_metadata["cost_per_output_token"] * output_tokens'
      - '        )'
      - '        self.stats.total_cost += cost'
      - '        self.stats.instance_cost += cost'
      - '        self.stats.tokens_sent += input_tokens'
      - '        self.stats.tokens_received += output_tokens'
      - '        self.stats.api_calls += 1'
      - ''
      - '        # Log updated cost values to std. out.'
      - '        logger.info('
      - '            f"input_tokens={input_tokens:,}, "'
      - '            f"output_tokens={output_tokens:,}, "'
      - '            f"instance_cost={self.stats.instance_cost:.2f}, "'
      - '            f"cost={cost:.2f}",'
      - '        )'
      - '        logger.info('
      - '            f"total_tokens_sent={self.stats.tokens_sent:,}, "'
      - '            f"total_tokens_received={self.stats.tokens_received:,}, "'
      - '            f"total_cost={self.stats.total_cost:.2f}, "'
      - '            f"total_api_calls={self.stats.api_calls:,}",'
      - '        )'
      - ''
      - '        # Check whether total cost or instance cost limits have been exceeded'
      - '        if 0 < self.args.total_cost_limit <= self.stats.total_cost:'
      - '            logger.warning(f"Cost {self.stats.total_cost:.2f} exceeds limit
        {self.args.total_cost_limit:.2f}")'
      - '            msg = "Total cost limit exceeded"'
      - '            raise CostLimitExceededError(msg)'
      - ''
      - '        if 0 < self.args.per_instance_cost_limit <= self.stats.instance_cost:'
      - '            logger.warning(f"Cost {self.stats.instance_cost:.2f} exceeds
        limit {self.args.per_instance_cost_limit:.2f}")'
      - '            msg = "Instance cost limit exceeded"'
      - '            raise CostLimitExceededError(msg)'
      - '        return cost'
      - ''
      - '    def query(self, history: list[dict[str, str]]) -> str:'
      - '        msg = "Use a subclass of BaseModel"'
      - '        raise NotImplementedError(msg)'
      - ''
      - ''
      - 'class OpenAIModel(BaseModel):'
      - '    MODELS = {'
      - '        "gpt-3.5-turbo-0125": {'
      - '            "max_context": 16_385,'
      - '            "cost_per_input_token": 5e-07,'
      - '            "cost_per_output_token": 1.5e-06,'
      - '        },'
      - '        "gpt-3.5-turbo-1106": {'
      - '            "max_context": 16_385,'
      - '            "cost_per_input_token": 1.5e-06,'
      - '            "cost_per_output_token": 2e-06,'
      - '        },'
      - '        "gpt-3.5-turbo-16k-0613": {'
      - '            "max_context": 16_385,'
      - '            "cost_per_input_token": 1.5e-06,'
      - '            "cost_per_output_token": 2e-06,'
      - '        },'
      - '        "gpt-4-32k-0613": {'
      - '            "max_context": 32_768,'
      - '            "cost_per_input_token": 6e-05,'
      - '            "cost_per_output_token": 0.00012,'
      - '        },'
      - '        "gpt-4-0613": {'
      - '            "max_context": 8_192,'
      - '            "cost_per_input_token": 3e-05,'
      - '            "cost_per_output_token": 6e-05,'
      - '        },'
      - '        "gpt-4-1106-preview": {'
      - '            "max_context": 128_000,'
      - '            "cost_per_input_token": 1e-05,'
      - '            "cost_per_output_token": 3e-05,'
      - '        },'
      - '        "gpt-4-0125-preview": {'
      - '            "max_context": 128_000,'
      - '            "cost_per_input_token": 1e-05,'
      - '            "cost_per_output_token": 3e-05,'
      - '        },'
      - '        "gpt-4-turbo-2024-04-09": {'
      - '            "max_context": 128_000,'
      - '            "cost_per_input_token": 1e-05,'
      - '            "cost_per_output_token": 3e-05,'
      - '        },'
      - '        "gpt-4o-2024-05-13": {'
      - '            "max_context": 128_000,'
      - '            "cost_per_input_token": 5e-06,'
      - '            "cost_per_output_token": 15e-06,'
      - '        },'
      - '        "gpt-4o-mini-2024-07-18": {'
      - '            "max_context": 128_000,'
      - '            "cost_per_input_token": 5e-06,'
      - '            "cost_per_output_token": 15e-06,'
      - '        },'
      - '    }'
      - ''
      - '    SHORTCUTS = {'
      - '        "gpt3": "gpt-3.5-turbo-1106",'
      - '        "gpt3-legacy": "gpt-3.5-turbo-16k-0613",'
      - '        "gpt4": "gpt-4-1106-preview",'
      - '        "gpt4-legacy": "gpt-4-0613",'
      - '        "gpt4-0125": "gpt-4-0125-preview",'
      - '        "gpt3-0125": "gpt-3.5-turbo-0125",'
      - '        "gpt4-turbo": "gpt-4-turbo-2024-04-09",'
      - '        "gpt4o": "gpt-4o-2024-05-13",'
      - '        "gpt-4o-mini": "gpt-4o-mini-2024-07-18",'
      - '    }'
      - ''
      - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
      - '        super().__init__(args, commands)'
      - ''
      - '        logging.getLogger("openai").setLevel(logging.WARNING)'
      - '        logging.getLogger("httpx").setLevel(logging.WARNING)'
      - ''
      - '        self._setup_client()'
      - ''
      - '    def _setup_client(self):'
      - '        if self.args.model_name.startswith("azure"):'
      - '            logger.warning('
      - '                "The --model CLI argument is ignored when using the Azure
        GPT endpoint. "'
      - '                "The model is determined by the AZURE_OPENAI_DEPLOYMENT key/"'
      - '                "environment variable (this might change in the future).",'
      - '            )'
      - '            self.api_model = keys_config["AZURE_OPENAI_DEPLOYMENT"]'
      - '            self.client = AzureOpenAI('
      - '                api_key=keys_config["AZURE_OPENAI_API_KEY"],'
      - '                azure_endpoint=keys_config["AZURE_OPENAI_ENDPOINT"],'
      - '                api_version=keys_config.get("AZURE_OPENAI_API_VERSION", "2024-02-01"),'
      - '            )'
      - '        else:'
      - '            api_base_url: str | None = keys_config.get("OPENAI_API_BASE_URL",
        None)'
      - '            self.client = OpenAI(api_key=keys_config["OPENAI_API_KEY"], base_url=api_base_url)'
      - ''
      - '    def history_to_messages('
      - '        self,'
      - '        history: list[dict[str, str]],'
      - '        is_demonstration: bool = False,'
      - '    ) -> str | list[dict[str, str]]:'
      - '        """'
      - '        Create `messages` by filtering out all keys except for role/content
        per `history` turn'
      - '        """'
      - '        # Remove system messages if it is a demonstration'
      - '        if is_demonstration:'
      - '            history = [entry for entry in history if entry["role"] != "system"]'
      - '            return "\n".join([entry["content"] for entry in history])'
      - '        # Return history components with just role, content fields'
      - '        return [{k: v for k, v in entry.items() if k in ["role", "content"]}
        for entry in history]'
      - ''
      - '    @retry('
      - '        wait=wait_random_exponential(min=1, max=15),'
      - '        reraise=True,'
      - '        stop=stop_after_attempt(_MAX_RETRIES),'
      - '        retry=retry_if_not_exception_type((CostLimitExceededError, RuntimeError)),'
      - '    )'
      - '    def query(self, history: list[dict[str, str]]) -> str:'
      - '        """'
      - '        Query the OpenAI API with the given `history` and return the response.'
      - '        """'
      - '        try:'
      - '            # Perform OpenAI API call'
      - '            response = self.client.chat.completions.create('
      - '                messages=self.history_to_messages(history),'
      - '                model=self.api_model,'
      - '                temperature=self.args.temperature,'
      - '                top_p=self.args.top_p,'
      - '            )'
      - '        except BadRequestError:'
      - '            msg = f"Context window ({self.model_metadata[''max_context'']}
        tokens) exceeded"'
      - '            raise CostLimitExceededError(msg)'
      - '        # Calculate + update costs, return response'
      - '        input_tokens = response.usage.prompt_tokens'
      - '        output_tokens = response.usage.completion_tokens'
      - '        self.update_stats(input_tokens, output_tokens)'
      - '        return response.choices[0].message.content'
      - ''
      - ''
      - 'class DeepSeekModel(OpenAIModel):'
      - '    MODELS = {'
      - '        "deepseek-coder": {'
      - '            "max_context": 32_000,'
      - '            "cost_per_input_token": 1.4e-07,'
      - '            "cost_per_output_token": 2.8e-07,'
      - '        },'
      - '    }'
      - '    SHORTCUTS = {}'
      - ''
      - '    def _setup_client(self) -> None:'
      - '        api_base_url: str = keys_config["DEEPSEEK_API_BASE_URL"]'
      - '        self.client = OpenAI(api_key=keys_config["DEEPSEEK_API_KEY"], base_url=api_base_url)'
      - ''
      - ''
      - 'class AnthropicModel(BaseModel):'
      - '    MODELS = {'
      - '        "claude-instant": {'
      - '            "max_context": 100_000,'
      - '            "cost_per_input_token": 1.63e-06,'
      - '            "cost_per_output_token": 5.51e-06,'
      - '        },'
      - '        "claude-2.0": {'
      - '            "max_context": 100_000,'
      - '            "cost_per_input_token": 1.102e-05,'
      - '            "cost_per_output_token": 3.268e-05,'
      - '        },'
      - '        "claude-2.1": {'
      - '            "max_context": 100_000,'
      - '            "cost_per_input_token": 1.102e-05,'
      - '            "cost_per_output_token": 3.268e-05,'
      - '        },'
      - '        "claude-3-opus-20240229": {'
      - '            "max_context": 200_000,'
      - '            "max_tokens": 4096,  # Max tokens to generate for Claude 3 models'
      - '            "cost_per_input_token": 1.5e-05,'
      - '            "cost_per_output_token": 7.5e-05,'
      - '        },'
      - '        "claude-3-sonnet-20240229": {'
      - '            "max_context": 200_000,'
      - '            "max_tokens": 4096,'
      - '            "cost_per_input_token": 3e-06,'
      - '            "cost_per_output_token": 1.5e-05,'
      - '        },'
      - '        "claude-3-5-sonnet-20240620": {'
      - '            "max_context": 200_000,'
      - '            "max_tokens": 4096,'
      - '            "cost_per_input_token": 3e-06,'
      - '            "cost_per_output_token": 1.5e-05,'
      - '        },'
      - '        "claude-3-haiku-20240307": {'
      - '            "max_context": 200_000,'
      - '            "max_tokens": 4096,'
      - '            "cost_per_input_token": 2.5e-07,'
      - '            "cost_per_output_token": 1.25e-06,'
      - '        },'
      - '    }'
      - ''
      - '    SHORTCUTS = {'
      - '        "claude-2": "claude-2.1",'
      - '        "claude-opus": "claude-3-opus-20240229",'
      - '        "claude-sonnet": "claude-3-sonnet-20240229",'
      - '        "claude-haiku": "claude-3-haiku-20240307",'
      - '        "claude-sonnet-3.5": "claude-3-5-sonnet-20240620",'
      - '    }'
      - ''
      - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
      - '        super().__init__(args, commands)'
      - ''
      - '        # Set Anthropic key'
      - '        self.api = Anthropic(api_key=keys_config["ANTHROPIC_API_KEY"])'
      - ''
      - '    def history_to_messages('
      - '        self,'
      - '        history: list[dict[str, str]],'
      - '        is_demonstration: bool = False,'
      - '    ) -> str | list[dict[str, str]]:'
      - '        """'
      - '        Create `prompt` by filtering out all keys except for role/content
        per `history` turn'
      - '        Reference: https://docs.anthropic.com/claude/reference/complete_post'
      - '        """'
      - '        return anthropic_history_to_messages(self, history, is_demonstration)'
      - ''
      - '    @retry('
      - '        wait=wait_random_exponential(min=1, max=15),'
      - '        reraise=True,'
      - '        stop=stop_after_attempt(_MAX_RETRIES),'
      - '        retry=retry_if_not_exception_type((CostLimitExceededError, RuntimeError)),'
      - '    )'
      - '    def query(self, history: list[dict[str, str]]) -> str:'
      - '        """'
      - '        Query the Anthropic API with the given `history` and return the response.'
      - '        """'
      - '        return anthropic_query(self, history)'
      - ''
      - ''
      - 'class BedrockModel(BaseModel):'
      - '    MODELS = {'
      - '        "anthropic.claude-instant-v1": {'
      - '            "max_context": 100_000,'
      - '            "max_tokens_to_sample": 4096,'
      - '            "cost_per_input_token": 8e-07,'
      - '            "cost_per_output_token": 2.4e-06,'
      - '        },'
      - '        "anthropic.claude-v2": {'
      - '            "max_context": 100_000,'
      - '            "max_tokens_to_sample": 4096,'
      - '            "cost_per_input_token": 8e-06,'
      - '            "cost_per_output_token": 2.4e-05,'
      - '        },'
      - '        "anthropic.claude-v2:1": {'
      - '            "max_context": 100_000,'
      - '            "max_tokens": 4096,'
      - '            "cost_per_input_token": 8e-06,'
      - '            "cost_per_output_token": 2.4e-05,'
      - '        },'
      - '        "anthropic.claude-3-opus-20240229-v1:0": {'
      - '            "max_context": 200_000,'
      - '            "max_tokens": 4096,'
      - '            "cost_per_input_token": 1.5e-05,'
      - '            "cost_per_output_token": 7.5e-05,'
      - '        },'
      - '        "anthropic.claude-3-sonnet-20240229-v1:0": {'
      - '            "max_context": 200_000,'
      - '            "max_tokens": 4096,'
      - '            "cost_per_input_token": 3e-06,'
      - '            "cost_per_output_token": 1.5e-05,'
      - '        },'
      - '        "anthropic.claude-3-haiku-20240307-v1:0": {'
      - '            "max_context": 200_000,'
      - '            "max_tokens": 4096,'
      - '            "cost_per_input_token": 2.5e-07,'
      - '            "cost_per_output_token": 1.25e-06,'
      - '        },'
      - '    }'
      - ''
      - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
      - '        super().__init__(args, commands)'
      - ''
      - '        # Extract provider from model ID'
      - '        # https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids.html'
      - '        self.model_provider = self.api_model.split(".")[0]'
      - '        if self.model_provider == "anthropic":'
      - '            # Note: this assumes AWS credentials are already configured.'
      - '            # https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html'
      - '            self.api = AnthropicBedrock()'
      - '        elif self.model_provider in ["ai21", "amazon", "cohere", "meta",
        "mistral"]:'
      - '            msg = f"{self.api_model} is not supported!"'
      - '            raise NotImplementedError(msg)'
      - '        else:'
      - '            msg = f"Provider {self.model_provider} is not supported by Amazon
        Bedrock!"'
      - '            raise ValueError(msg)'
      - ''
      - '    def history_to_messages('
      - '        self,'
      - '        history: list[dict[str, str]],'
      - '        is_demonstration: bool = False,'
      - '    ) -> str | list[dict[str, str]]:'
      - '        """'
      - '        Create `prompt` from the history of messages'
      - '        """'
      - '        if self.model_provider == "anthropic":'
      - '            return anthropic_history_to_messages(self, history, is_demonstration)'
      - '        else:'
      - '            msg = f"{self.api_model} is not supported!"'
      - '            raise NotImplementedError(msg)'
      - ''
      - '    @retry('
      - '        wait=wait_random_exponential(min=1, max=15),'
      - '        reraise=True,'
      - '        stop=stop_after_attempt(_MAX_RETRIES),'
      - '        retry=retry_if_not_exception_type((CostLimitExceededError, RuntimeError)),'
      - '    )'
      - '    def query(self, history: list[dict[str, str]]) -> str:'
      - '        """'
      - '        Query Amazon Bedrock with the given `history` and return the response.'
      - '        """'
      - '        if self.model_provider == "anthropic":'
      - '            return anthropic_query(self, history)'
      - '        else:'
      - '            msg = f"{self.api_model} is not supported!"'
      - '            raise NotImplementedError(msg)'
      - ''
      - ''
      - def anthropic_history_to_messages(
      - '    model: AnthropicModel | BedrockModel,'
      - '    history: list[dict[str, str]],'
      - '    is_demonstration: bool = False,'
      - ') -> str | list[dict[str, str]]:'
      - '    """'
      - '    Create `prompt` by filtering out all keys except for role/content per
        `history` turn'
      - '    Reference: https://docs.anthropic.com/claude/reference/complete_post'
      - '    """'
      - '    # Preserve behavior for older models'
      - '    if model.api_model in ["claude-instant", "claude-2.0"] or ('
      - '        isinstance(model, BedrockModel) and model.api_model in ["anthropic.claude-instant-v1",
        "anthropic.claude-v2"]'
      - '    ):'
      - '        # Remove system messages if it is a demonstration'
      - '        if is_demonstration:'
      - '            history = [entry for entry in history if entry["role"] != "system"]'
      - '        # Map history to Claude format'
      - '        prompt = "\n\n"'
      - '        for entry in history:'
      - '            if entry["role"] in {"user", "system"}:'
      - '                prompt += f''{HUMAN_PROMPT} {entry["content"]}\n\n'''
      - '            elif entry["role"] == "assistant":'
      - '                prompt += f''{AI_PROMPT} {entry["content"]}\n\n'''
      - '        prompt += AI_PROMPT'
      - '        return prompt'
      - ''
      - '    # Remove system messages if it is a demonstration'
      - '    if is_demonstration:'
      - '        history = [entry for entry in history if entry["role"] != "system"]'
      - '        return "\n".join([entry["content"] for entry in history])'
      - ''
      - '    # Return history components with just role, content fields (no system
        message)'
      - '    messages = ['
      - '        {k: v for k, v in entry.items() if k in ["role", "content"]} for
        entry in history if entry["role"] != "system"'
      - '    ]'
      - '    compiled_messages = []  # Combine messages from the same role'
      - '    last_role = None'
      - '    for message in reversed(messages):'
      - '        if last_role == message["role"]:'
      - '            compiled_messages[-1]["content"] = message["content"] + "\n"
        + compiled_messages[-1]["content"]'
      - '        else:'
      - '            compiled_messages.append(message)'
      - '        last_role = message["role"]'
      - '    compiled_messages = list(reversed(compiled_messages))'
      - '    # Replace any empty content values with a "(No output)"'
      - '    for message in compiled_messages:'
      - '        if message["content"].strip() == "":'
      - '            message["content"] = "(No output)"'
      - '    return compiled_messages'
      - ''
      - ''
      - 'def anthropic_query(model: AnthropicModel | BedrockModel, history: list[dict[str,
        str]]) -> str:'
      - '    """'
      - '    Query the Anthropic API with the given `history` and return the response.'
      - '    """'
      - '    # Preserve behavior for older models'
      - '    if model.api_model in ["claude-instant", "claude-2.0", "claude-2.1"]
        or ('
      - '        isinstance(model, BedrockModel) and model.api_model in ["anthropic.claude-instant-v1",
        "anthropic.claude-v2"]'
      - '    ):'
      - '        # Perform Anthropic API call'
      - '        prompt = anthropic_history_to_messages(model, history)'
      - '        if isinstance(model, BedrockModel):'
      - '            # Use a dummy Anthropic client since count_tokens'
      - '            # is not available in AnthropicBedrock'
      - '            # https://github.com/anthropics/anthropic-sdk-python/issues/353'
      - '            input_tokens = Anthropic().count_tokens(prompt)'
      - '        else:'
      - '            input_tokens = model.api.count_tokens(prompt)'
      - '        completion = model.api.completions.create('
      - '            model=model.api_model,'
      - '            prompt=prompt,'
      - '            max_tokens_to_sample=model.model_metadata["max_context"] - input_tokens'
      - '            if isinstance(model, Anthropic)'
      - '            else model.model_metadata["max_tokens_to_sample"],'
      - '            temperature=model.args.temperature,'
      - '            top_p=model.args.top_p,'
      - '        )'
      - '        # Calculate + update costs, return response'
      - '        response = completion.completion'
      - '        if isinstance(model, BedrockModel):'
      - '            output_tokens = Anthropic().count_tokens(response)'
      - '        else:'
      - '            output_tokens = model.api.count_tokens(response)'
      - '        model.update_stats(input_tokens, output_tokens)'
      - '        return response'
      - ''
      - '    # Get system message(s)'
      - '    system_message = "\n".join([entry["content"] for entry in history if
        entry["role"] == "system"])'
      - '    messages = anthropic_history_to_messages(model, history)'
      - ''
      - '    # Perform Anthropic API call'
      - '    response = model.api.messages.create('
      - '        messages=messages,'
      - '        max_tokens=model.model_metadata["max_tokens"],'
      - '        model=model.api_model,'
      - '        temperature=model.args.temperature,'
      - '        top_p=model.args.top_p,'
      - '        system=system_message,'
      - '    )'
      - ''
      - '    # Calculate + update costs, return response'
      - '    model.update_stats(response.usage.input_tokens, response.usage.output_tokens)'
      - '    return "\n".join([x.text for x in response.content])'
      - ''
      - ''
      - 'class OllamaModel(BaseModel):'
      - '    MODELS = defaultdict('
      - '        lambda: {'
      - '            "max_context": 128_000,'
      - '            "cost_per_input_token": 0,'
      - '            "cost_per_output_token": 0,'
      - '        },'
      - '    )'
      - ''
      - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
      - '        super().__init__(args, commands)'
      - '        from ollama import Client'
      - ''
      - '        self.client = Client(host=args.host_url)'
      - ''
      - '    def history_to_messages('
      - '        self,'
      - '        history: list[dict[str, str]],'
      - '        is_demonstration: bool = False,'
      - '    ) -> str | list[dict[str, str]]:'
      - '        """'
      - '        Create `messages` by filtering out all keys except for role/content
        per `history` turn'
      - '        """'
      - '        # Remove system messages if it is a demonstration'
      - '        if is_demonstration:'
      - '            history = [entry for entry in history if entry["role"] != "system"]'
      - '            return "\n".join([entry["content"] for entry in history])'
      - '        # Return history components with just role, content fields'
      - '        return [{k: v for k, v in entry.items() if k in ["role", "content"]}
        for entry in history]'
      - ''
      - '    @retry('
      - '        wait=wait_random_exponential(min=1, max=15),'
      - '        reraise=True,'
      - '        stop=stop_after_attempt(_MAX_RETRIES),'
      - '        retry=retry_if_not_exception_type((CostLimitExceededError, RuntimeError)),'
      - '    )'
      - '    def query(self, history: list[dict[str, str]]) -> str:'
      - '        """'
      - '        Query the Ollama API with the given `history` and return the response.'
      - '        """'
      - '        response = self.client.chat('
      - '            model=self.api_model,'
      - '            messages=self.history_to_messages(history),'
      - '            options={'
      - '                "temperature": self.args.temperature,'
      - '                "top_p": self.args.top_p,'
      - '            },'
      - '        )'
      - '        # Calculate + update costs, return response'
      - '        if "prompt_eval_count" in response:'
      - '            input_tokens = response["prompt_eval_count"]'
      - '        else:'
      - '            logger.warning('
      - '                "Prompt eval count not found in response. Using 0. "'
      - '                "This might be because the prompt has been cached. "'
      - '                "See https://github.com/princeton-nlp/SWE-agent/issues/44
        "'
      - '                "and https://github.com/ollama/ollama/issues/3427.",'
      - '            )'
      - '            input_tokens = 0'
      - '        output_tokens = response["eval_count"]'
      - '        self.update_stats(input_tokens, output_tokens)'
      - '        return response["message"]["content"]'
      - ''
      - ''
      - 'class TogetherModel(BaseModel):'
      - '    # Check https://docs.together.ai/docs/inference-models for model names,
        context'
      - '    # Check https://www.together.ai/pricing for pricing'
      - '    MODELS = {'
      - '        "meta-llama/Llama-2-13b-chat-hf": {'
      - '            "max_context": 4096,'
      - '            "cost_per_input_token": 2.25e-07,'
      - '            "cost_per_output_token": 2.25e-07,'
      - '        },'
      - '        "meta-llama/Llama-2-70b-chat-hf": {'
      - '            "max_context": 4096,'
      - '            "cost_per_input_token": 9e-07,'
      - '            "cost_per_output_token": 9e-07,'
      - '        },'
      - '        "mistralai/Mistral-7B-Instruct-v0.2": {'
      - '            "max_context": 32768,'
      - '            "cost_per_input_token": 2e-07,'
      - '            "cost_per_output_token": 2e-07,'
      - '        },'
      - '        "togethercomputer/RedPajama-INCITE-7B-Chat": {'
      - '            "max_context": 2048,'
      - '            "cost_per_input_token": 2e-07,'
      - '            "cost_per_output_token": 2e-07,'
      - '        },'
      - '        "mistralai/Mixtral-8x7B-Instruct-v0.1": {'
      - '            "max_context": 32768,'
      - '            "cost_per_input_token": 6e-07,'
      - '            "cost_per_output_token": 6e-07,'
      - '        },'
      - '    }'
      - ''
      - '    SHORTCUTS = {'
      - '        "llama13b": "meta-llama/Llama-2-13b-chat-hf",'
      - '        "llama70b": "meta-llama/Llama-2-70b-chat-hf",'
      - '        "mistral7b": "mistralai/Mistral-7B-Instruct-v0.2",'
      - '        "mixtral8x7b": "mistralai/Mixtral-8x7B-Instruct-v0.1",'
      - '        "redpajama7b": "togethercomputer/RedPajama-INCITE-7B-Chat",'
      - '    }'
      - ''
      - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
      - '        super().__init__(args, commands)'
      - '        assert together.version >= "1.1.0", "Please upgrade to Together SDK
        v1.1.0 or later."'
      - ''
      - '        # Set Together key'
      - '        together.api_key = keys_config["TOGETHER_API_KEY"]'
      - ''
      - '    def history_to_messages(self, history: list[dict[str, str]], is_demonstration:
        bool = False) -> str:'
      - '        """'
      - '        Create `prompt` by filtering out all keys except for role/content
        per `history` turn'
      - '        """'
      - '        # Remove system messages if it is a demonstration'
      - '        if is_demonstration:'
      - '            history = [entry for entry in history if entry["role"] != "system"]'
      - '        # Map history to TogetherAI format'
      - '        mapping = {"user": "human", "assistant": "bot", "system": "bot"}'
      - '        prompt = [f''<{mapping[d["role"]]}>: {d["content"]}'' for d in history]'
      - '        prompt = "\n".join(prompt)'
      - '        return f"{prompt}\n<bot>:"'
      - ''
      - '    @retry('
      - '        wait=wait_random_exponential(min=1, max=15),'
      - '        reraise=True,'
      - '        stop=stop_after_attempt(_MAX_RETRIES),'
      - '        retry=retry_if_not_exception_type((CostLimitExceededError, RuntimeError)),'
      - '    )'
      - '    def query(self, history: list[dict[str, str]]) -> str:'
      - '        """'
      - '        Query the Together API with the given `history` and return the response.'
      - '        """'
      - '        # Perform Together API call'
      - '        prompt = self.history_to_messages(history)'
      - '        # Anthropic''s count_tokens is convenient because it caches and utilizes
        huggingface/tokenizers, so we will use.'
      - '        max_tokens_to_sample = self.model_metadata["max_context"] - Anthropic().count_tokens(prompt)'
      - '        completion = together.Complete.create('
      - '            model=self.api_model,'
      - '            prompt=prompt,'
      - '            max_tokens=max_tokens_to_sample,'
      - '            stop=["<human>"],'
      - '            temperature=self.args.temperature,'
      - '            top_p=self.args.top_p,'
      - '        )'
      - '        # Calculate + update costs, return response'
      - '        response = completion["choices"][0]["text"].split("<human>")[0]'
      - '        input_tokens = completion["usage"]["prompt_tokens"]'
      - '        output_tokens = completion["usage"]["completion_tokens"]'
      - '        self.update_stats(input_tokens, output_tokens)'
      - '        return response'
      - ''
      - ''
      - 'class HumanModel(BaseModel):'
      - '    MODELS = {"human": {}}'
      - ''
      - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
      - '        super().__init__(args, commands)'
      - ''
      - '        # Determine which commands require multi-line input'
      - '        self.multi_line_command_endings = {'
      - '            command.name: command.end_name for command in commands if command.end_name
        is not None'
      - '        }'
      - ''
      - '    def history_to_messages('
      - '        self,'
      - '        history: list[dict[str, str]],'
      - '        is_demonstration: bool = False,'
      - '    ) -> str | list[dict[str, str]]:'
      - '        """'
      - '        Create `messages` by filtering out all keys except for role/content
        per `history` turn'
      - '        """'
      - '        # Remove system messages if it is a demonstration'
      - '        if is_demonstration:'
      - '            history = [entry for entry in history if entry["role"] != "system"]'
      - '            return "\n".join([entry["content"] for entry in history])'
      - '        # Return history components with just role, content fields'
      - '        return [{k: v for k, v in entry.items() if k in ["role", "content"]}
        for entry in history]'
      - ''
      - '    def query(self, history: list[dict[str, str]], action_prompt: str = ">
        ") -> str:'
      - '        """'
      - '        Logic for handling user input to pass to SWEEnv'
      - '        """'
      - '        action = input(action_prompt)'
      - '        command_name = action.split()[0] if action else ""'
      - ''
      - '        # Special handling for multi-line input actions (i.e. edit)'
      - '        if command_name in self.multi_line_command_endings:'
      - '            buffer = [action]'
      - '            end_keyword = self.multi_line_command_endings[command_name]'
      - '            while True:'
      - '                action = input("... ")'
      - '                buffer.append(action)'
      - '                if action.rstrip() == end_keyword:'
      - '                    # Continue reading input until terminating keyword inputted'
      - '                    break'
      - '            action = "\n".join(buffer)'
      - '        elif action.strip() == "start_multiline_command":  # do arbitrary
        multi-line input'
      - '            buffer = []'
      - '            while True:'
      - '                action = input("... ")'
      - '                if action.rstrip() == "end_multiline_command":'
      - '                    break'
      - '                buffer.append(action)'
      - '            action = "\n".join(buffer)'
      - '        return action'
      - ''
      - ''
      - 'class HumanThoughtModel(HumanModel):'
      - '    MODELS = {"human_thought": {}}'
      - ''
      - '    def query(self, history: list[dict[str, str]]) -> str:'
      - '        """'
      - '        Logic for handling user input (both thought + action) to pass to
        SWEEnv'
      - '        """'
      - '        thought_all = ""'
      - '        thought = input("Thought (end w/ END_THOUGHT): ")'
      - '        while True:'
      - '            if "END_THOUGHT" in thought:'
      - '                thought = thought.split("END_THOUGHT")[0]'
      - '                thought_all += thought'
      - '                break'
      - '            thought_all += thought'
      - '            thought = input("... ")'
      - ''
      - '        action = super().query(history, action_prompt="Action: ")'
      - ''
      - '        return f"{thought_all}\n```\n{action}\n```"'
      - ''
      - ''
      - 'class ReplayModel(BaseModel):'
      - '    MODELS = {"replay": {}}'
      - ''
      - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
      - '        super().__init__(args, commands)'
      - ''
      - '        if self.args.replay_path is None or not os.path.exists(self.args.replay_path):'
      - '            msg = "--replay_path must point to a file that exists to run
        a replay policy"'
      - '            raise ValueError(msg)'
      - ''
      - '        self.replays = ['
      - '            list(json.loads(x).values())[0] for x in Path(self.args.replay_path).read_text().splitlines(keepends=True)'
      - '        ]'
      - '        self.replay_idx = 0'
      - '        self.action_idx = 0'
      - ''
      - '    def _next_replay(self) -> None:'
      - '        """Called after last action"""'
      - '        self.replay_idx += 1'
      - '        self.action_idx = 0'
      - ''
      - '    def query(self, history: list[dict[str, str]]) -> str:'
      - '        """'
      - '        Logic for tracking which replay action to pass to SWEEnv'
      - '        """'
      - '        actions = self.replays[self.replay_idx]'
      - '        try:'
      - '            action = actions[self.action_idx]'
      - '        except IndexError:'
      - '            msg = ('
      - '                "This seems to be an incomplete trajectory. "'
      - '                "We reached the end of it, but `submit` was not called. "'
      - '                "Calling it now."'
      - '            )'
      - '            logger.warning(msg)'
      - '            action = "```\nsubmit\n```"'
      - ''
      - '        self.action_idx += 1'
      - ''
      - '        # Assuming `submit` is always last action of replay trajectory'
      - '        if action == "submit":'
      - '            self._next_replay()'
      - ''
      - '        return action'
      - ''
      - ''
      - 'class InstantEmptySubmitTestModel(BaseModel):'
      - '    MODELS = {"instant_empty_submit": {}}'
      - ''
      - '    def __init__(self, args: ModelArguments, commands: list[Command]):'
      - '        """This model immediately submits. Useful for testing purposes"""'
      - '        super().__init__(args, commands)'
      - '        self._action_idx = 0'
      - ''
      - '    def query(self, history: list[dict[str, str]]) -> str:'
      - '        # Need to at least do _something_ to submit'
      - '        if self._action_idx == 0:'
      - '            self._action_idx = 1'
      - '            action = "DISCUSSION\nLet''s reproduce the bug by creating a
        `reproduce.py` file.\n\n```\ncreate reproduce.py\n```\n"'
      - '        elif self._action_idx == 1:'
      - '            self._action_idx = 0'
      - '            action = "DISCUSSION\nThe task should be resolved, so let''s
        submit the patch.\n\n```\nsubmit\n```\n"'
      - '        return action'
      - ''
      - ''
      - 'def get_model(args: ModelArguments, commands: list[Command] | None = None):'
      - '    """'
      - '    Returns correct model object given arguments and commands'
      - '    """'
      - '    if commands is None:'
      - '        commands = []'
      - '    if args.model_name == "instant_empty_submit":'
      - '        return InstantEmptySubmitTestModel(args, commands)'
      - '    if args.model_name == "human":'
      - '        return HumanModel(args, commands)'
      - '    if args.model_name == "human_thought":'
      - '        return HumanThoughtModel(args, commands)'
      - '    if args.model_name == "replay":'
      - '        return ReplayModel(args, commands)'
      - '    elif ('
      - '        args.model_name.startswith("gpt")'
      - '        or args.model_name.startswith("ft:gpt")'
      - '        or args.model_name.startswith("azure:gpt")'
      - '        or args.model_name in OpenAIModel.SHORTCUTS'
      - '    ):'
      - '        return OpenAIModel(args, commands)'
      - '    elif args.model_name.startswith("claude"):'
      - '        return AnthropicModel(args, commands)'
      - '    elif args.model_name.startswith("bedrock"):'
      - '        return BedrockModel(args, commands)'
      - '    elif args.model_name.startswith("ollama"):'
      - '        return OllamaModel(args, commands)'
      - '    elif args.model_name.startswith("deepseek"):'
      - '        return DeepSeekModel(args, commands)'
      - '    elif args.model_name in TogetherModel.SHORTCUTS:'
      - '        return TogetherModel(args, commands)'
      - '    elif args.model_name == "instant_empty_submit":'
      - '        return InstantEmptySubmitTestModel(args, commands)'
      - '    else:'
      - '        msg = f"Invalid model name: {args.model_name}"'
      - '        raise ValueError(msg)'
    parsing.py:
      classes:
      - end_line: 15
        methods: []
        name: FormatError
        start_line: 14
        text:
        - 'class FormatError(Exception):'
        - '    pass'
      - end_line: 32
        methods:
        - end_line: 32
          name: __new__
          start_line: 28
          text:
          - '    def __new__(cls, name, bases, attrs):'
          - '        new_cls = super().__new__(cls, name, bases, attrs)'
          - '        if name != "ParseFunction":'
          - '            cls._registry[name] = new_cls'
          - '        return new_cls'
        name: ParseFunctionMeta
        start_line: 21
        text:
        - 'class ParseFunctionMeta(type):'
        - '    """'
        - '    Registry maps all inherited classes to their names.'
        - '    """'
        - ''
        - '    _registry = {}'
        - ''
        - '    def __new__(cls, name, bases, attrs):'
        - '        new_cls = super().__new__(cls, name, bases, attrs)'
        - '        if name != "ParseFunction":'
        - '            cls._registry[name] = new_cls'
        - '        return new_cls'
      - end_line: 61
        methods:
        - end_line: 46
          name: __call__
          start_line: 45
          text:
          - '    def __call__(self, model_response, commands: list[Command], strict=False):'
          - '        raise NotImplementedError'
        - end_line: 53
          name: format_error_template
          start_line: 49
          text:
          - '    def format_error_template(self):'
          - '        if self._error_message is None:'
          - '            msg = "You must define an error message for your parser."'
          - '            raise NotImplementedError(msg)'
          - '        return textwrap.dedent(self._error_message)'
        - end_line: 61
          name: get
          start_line: 56
          text:
          - '    def get(cls, name):'
          - '        try:'
          - '            return cls._registry[name]()'
          - '        except KeyError:'
          - '            msg = f"Model output parser ({name}) not found."'
          - '            raise ValueError(msg)'
        name: ParseFunction
        start_line: 36
        text:
        - 'class ParseFunction(metaclass=ParseFunctionMeta):'
        - '    """'
        - '    Abstract class for parsing functions.'
        - '    We use get to generate the right parser based on the name of the parser.'
        - '    """'
        - ''
        - '    _error_message = None'
        - ''
        - '    @abstractmethod'
        - '    def __call__(self, model_response, commands: list[Command], strict=False):'
        - '        raise NotImplementedError'
        - ''
        - '    @property'
        - '    def format_error_template(self):'
        - '        if self._error_message is None:'
        - '            msg = "You must define an error message for your parser."'
        - '            raise NotImplementedError(msg)'
        - '        return textwrap.dedent(self._error_message)'
        - ''
        - '    @classmethod'
        - '    def get(cls, name):'
        - '        try:'
        - '            return cls._registry[name]()'
        - '        except KeyError:'
        - '            msg = f"Model output parser ({name}) not found."'
        - '            raise ValueError(msg)'
      - end_line: 86
        methods:
        - end_line: 86
          name: __call__
          start_line: 80
          text:
          - '    def __call__(self, model_response, commands: list[Command], strict=False):'
          - '        if model_response.split():'
          - '            action = model_response.strip().split()[0]'
          - '            if action in {command.name for command in commands}:'
          - '                return model_response, model_response'
          - '        msg = "First word in model response is not a valid command."'
          - '        raise FormatError(msg)'
        name: ActionParser
        start_line: 67
        text:
        - 'class ActionParser(ParseFunction):'
        - '    """'
        - '    Expects the model response to be a single command.'
        - '    Example: "ls -l"'
        - '    """'
        - ''
        - '    _error_message = """\'
        - '    The command you provided was not recognized. Please specify one of
          the commands (+ any necessary arguments) from the following list in your
          response. Do not include any other text.'
        - ''
        - '    COMMANDS:'
        - '    {command_docs}'
        - '    """'
        - ''
        - '    def __call__(self, model_response, commands: list[Command], strict=False):'
        - '        if model_response.split():'
        - '            action = model_response.strip().split()[0]'
        - '            if action in {command.name for command in commands}:'
        - '                return model_response, model_response'
        - '        msg = "First word in model response is not a valid command."'
        - '        raise FormatError(msg)'
      - end_line: 142
        methods:
        - end_line: 142
          name: __call__
          start_line: 110
          text:
          - '    def __call__(self, model_response, commands: list[Command], strict=False):'
          - '        """'
          - '        Parses the action from the output of the API call.'
          - '        We assume that the action is the last code block in the model_response.'
          - '        We also assume that the action is not nested within another code
            block.'
          - '        This is problematic if the model_response includes many unnamed
            ``` blocks.'
          - '        For instance:'
          - '        ```'
          - '        This is a code block.'
          - '        ```'
          - '        ```'
          - '        This is another code block.'
          - '        ```'
          - ''
          - '        In this case, only the second code block will be parsed as the
            action.'
          - '        """'
          - '        code_block_pat = re.compile(r"^```(\S*)\s*\n|^```\s*$", re.MULTILINE)'
          - '        stack = []'
          - '        last_valid_block = None'
          - '        for match in code_block_pat.finditer(model_response):'
          - '            if stack and not match.group(1):  # Closing of a code block'
          - '                start = stack.pop()'
          - '                # Check if it''s not nested within another block'
          - '                if not stack:'
          - '                    last_valid_block = (start, match)'
          - '            elif match.group(1) is not None:  # Opening of a code block'
          - '                stack.append(match)'
          - '        if last_valid_block:'
          - '            start, end = last_valid_block'
          - '            thought = model_response[: start.start()] + model_response[end.end()
            :]'
          - '            return thought, model_response[start.end() : end.start()]'
          - '        msg = "No action found in model response."'
          - '        raise FormatError(msg)'
        name: ThoughtActionParser
        start_line: 89
        text:
        - 'class ThoughtActionParser(ParseFunction):'
        - '    """'
        - '    Expects the model response to be a discussion followed by a command
          wrapped in backticks.'
        - '    Example:'
        - '    Let''s look at the files in the current directory.'
        - '    ```'
        - '    ls -l'
        - '    ```'
        - '    """'
        - ''
        - '    _error_message = """\'
        - '    Your output was not formatted correctly. You must always include one
          discussion and one command as part of your response. Make sure you do not
          have multiple discussion/command tags.'
        - '    Please make sure your output precisely matches the following format:'
        - '    DISCUSSION'
        - '    Discuss here with yourself about what your planning and what you''re
          going to do in this step.'
        - ''
        - '    ```'
        - '    command(s) that you''re going to run'
        - '    ```'
        - '    """'
        - ''
        - '    def __call__(self, model_response, commands: list[Command], strict=False):'
        - '        """'
        - '        Parses the action from the output of the API call.'
        - '        We assume that the action is the last code block in the model_response.'
        - '        We also assume that the action is not nested within another code
          block.'
        - '        This is problematic if the model_response includes many unnamed
          ``` blocks.'
        - '        For instance:'
        - '        ```'
        - '        This is a code block.'
        - '        ```'
        - '        ```'
        - '        This is another code block.'
        - '        ```'
        - ''
        - '        In this case, only the second code block will be parsed as the
          action.'
        - '        """'
        - '        code_block_pat = re.compile(r"^```(\S*)\s*\n|^```\s*$", re.MULTILINE)'
        - '        stack = []'
        - '        last_valid_block = None'
        - '        for match in code_block_pat.finditer(model_response):'
        - '            if stack and not match.group(1):  # Closing of a code block'
        - '                start = stack.pop()'
        - '                # Check if it''s not nested within another block'
        - '                if not stack:'
        - '                    last_valid_block = (start, match)'
        - '            elif match.group(1) is not None:  # Opening of a code block'
        - '                stack.append(match)'
        - '        if last_valid_block:'
        - '            start, end = last_valid_block'
        - '            thought = model_response[: start.start()] + model_response[end.end()
          :]'
        - '            return thought, model_response[start.end() : end.start()]'
        - '        msg = "No action found in model response."'
        - '        raise FormatError(msg)'
      - end_line: 188
        methods:
        - end_line: 188
          name: __call__
          start_line: 160
          text:
          - '    def __call__(self, model_response, commands: list[Command], strict=False):'
          - '        """'
          - '        Parses the action from the output of the API call.'
          - '        We assume that the action is the last code block in the model_response.'
          - '        We also assume that the action is not nested within another code
            block.'
          - '        This is problematic if the model_response includes many unnamed
            ``` blocks.'
          - '        For instance:'
          - '        <command>'
          - '        This is a code block.'
          - '        </command>'
          - '        <command>'
          - '        This is another code block.'
          - '        </command>'
          - ''
          - '        In this case, only the second code block will be parsed as the
            action.'
          - '        """'
          - '        if "<command>" not in model_response or "</command>" not in model_response:'
          - '            msg = "No action found in model response."'
          - '            raise FormatError(msg)'
          - '        # `action` is everything between the last <command> and </command>
            tags'
          - '        start_action = model_response.rfind("<command>") + len("<command>")  #
            start after the last <command> tag'
          - '        end_thought = model_response.rfind("<command>")  # end before
            the last <command> tag'
          - '        end_action = model_response.rfind("</command>")  # end before
            the last </command> tag'
          - '        restart_thought = model_response.rfind("</command>") + len("</command>")  #
            start after the last </command> tag'
          - '        # `thought` is everything not in between <command> and </command>
            tags (includes after the last </command> tag)'
          - '        action = model_response[start_action:end_action]'
          - '        thought = model_response[:end_thought] + model_response[restart_thought:]'
          - ''
          - '        return thought.strip(), action.strip()'
        name: XMLThoughtActionParser
        start_line: 145
        text:
        - 'class XMLThoughtActionParser(ParseFunction):'
        - '    """'
        - '    Expects the model response to be a discussion followed by a command
          wrapped in XML tags.'
        - '    Example:'
        - '    Let''s look at the files in the current directory.'
        - '    <command>'
        - '    ls -l'
        - '    </command>'
        - '    """'
        - ''
        - '    _error_message = """\'
        - '    Your output was not formatted correctly. You must always include one
          discussion and one command as part of your response. Make sure you do not
          have multiple discussion/command tags.'
        - '    Please make sure your output precisely matches the following format:'
        - '    """'
        - ''
        - '    def __call__(self, model_response, commands: list[Command], strict=False):'
        - '        """'
        - '        Parses the action from the output of the API call.'
        - '        We assume that the action is the last code block in the model_response.'
        - '        We also assume that the action is not nested within another code
          block.'
        - '        This is problematic if the model_response includes many unnamed
          ``` blocks.'
        - '        For instance:'
        - '        <command>'
        - '        This is a code block.'
        - '        </command>'
        - '        <command>'
        - '        This is another code block.'
        - '        </command>'
        - ''
        - '        In this case, only the second code block will be parsed as the
          action.'
        - '        """'
        - '        if "<command>" not in model_response or "</command>" not in model_response:'
        - '            msg = "No action found in model response."'
        - '            raise FormatError(msg)'
        - '        # `action` is everything between the last <command> and </command>
          tags'
        - '        start_action = model_response.rfind("<command>") + len("<command>")  #
          start after the last <command> tag'
        - '        end_thought = model_response.rfind("<command>")  # end before the
          last <command> tag'
        - '        end_action = model_response.rfind("</command>")  # end before the
          last </command> tag'
        - '        restart_thought = model_response.rfind("</command>") + len("</command>")  #
          start after the last </command> tag'
        - '        # `thought` is everything not in between <command> and </command>
          tags (includes after the last </command> tag)'
        - '        action = model_response[start_action:end_action]'
        - '        thought = model_response[:end_thought] + model_response[restart_thought:]'
        - ''
        - '        return thought.strip(), action.strip()'
      - end_line: 215
        methods: []
        name: EditFormat
        start_line: 191
        text:
        - 'class EditFormat(ThoughtActionParser):'
        - '    """'
        - '    Expects the model response to be a discussion followed by a command
          wrapped in backticks.'
        - '    Example:'
        - '    We''ll replace the contents of the current window with the following:'
        - '    ```'
        - '    import os'
        - '    os.listdir()'
        - '    ```'
        - '    """'
        - ''
        - '    _error_message = """\'
        - '    Your output was not formatted correctly. You must wrap the replacement
          text in backticks (```).'
        - '    Please make sure your output precisely matches the following format:'
        - '    COMMENTS'
        - '    You can write comments here about what you''re going to do if you want.'
        - ''
        - '    ```'
        - '    New window contents.'
        - '    Make sure you copy the entire contents of the window here, with the
          required indentation.'
        - '    Make the changes to the window above directly in this window.'
        - '    Remember that all of the window''s contents will be replaced with the
          contents of this window.'
        - '    Don''t include line numbers in your response.'
        - '    ```'
        - '    """'
      - end_line: 231
        methods:
        - end_line: 231
          name: __call__
          start_line: 227
          text:
          - '    def __call__(self, model_response, commands: list[Command], strict=False):'
          - '        """'
          - '        This doesn''t do any parsing. It just returns the model response
            as the thought and action.'
          - '        """'
          - '        return model_response, model_response'
        name: Identity
        start_line: 218
        text:
        - 'class Identity(ParseFunction):'
        - '    """'
        - '    This parser does not do any parsing. It just returns the model response
          as both the thought and action.'
        - '    """'
        - ''
        - '    _error_message = """\'
        - '    It seems like something went wrong with your output. Please try again.'
        - '    """'
        - ''
        - '    def __call__(self, model_response, commands: list[Command], strict=False):'
        - '        """'
        - '        This doesn''t do any parsing. It just returns the model response
          as the thought and action.'
        - '        """'
        - '        return model_response, model_response'
      - end_line: 314
        methods:
        - end_line: 314
          name: __call__
          start_line: 245
          text:
          - '    def __call__(self, model_response, commands: list[Command], strict=False):'
          - '        """'
          - '        Parses the action from the output of the API call.'
          - '        We assume that model output is a JSON object with the following
            fields:'
          - '        {'
          - '            "thought": "discussion text here.",'
          - '            "command": {'
          - '                "arguments": {'
          - '                    "arg1": "value1",'
          - '                    "arg2": "value2",'
          - '                    ...'
          - '                },'
          - '                "name": "command_name"'
          - '            }'
          - '        }'
          - '        """'
          - '        try:'
          - '            data = json.loads(model_response)'
          - '            if not isinstance(data, dict):'
          - '                msg = "Model output is not a JSON object."'
          - '                raise FormatError(msg)'
          - ''
          - '            # Check if required keys are present'
          - '            required_keys = ["thought", "command"]'
          - '            for key in required_keys:'
          - '                if key not in data:'
          - '                    msg = f"Key ''{key}'' is missing from model output."'
          - '                    raise FormatError(msg)'
          - ''
          - '            # Check structure of ''command'' key'
          - '            data_command = data["command"]'
          - '            if not isinstance(data_command, dict):'
          - '                msg = "Value of ''command'' key is not a JSON object."'
          - '                raise FormatError(msg)'
          - ''
          - '            # Check if required keys are present in ''command'' object'
          - '            command_keys = ["name"]'
          - '            for key in command_keys:'
          - '                if key not in data_command:'
          - '                    msg = f"Key ''{key}'' is missing from ''command''
            object."'
          - '                    raise FormatError(msg)'
          - ''
          - '            thought = data["thought"]'
          - ''
          - '            # Generate action'
          - '            commands_dict = {c.name: c for c in commands}'
          - '            command = commands_dict.get(data_command["name"])'
          - '            if command is None:'
          - '                action = data_command["name"]'
          - '                if "arguments" in data_command:'
          - '                    action += " " + " ".join(data_command["arguments"].values())'
          - '            else:'
          - '                signature = command.signature'
          - '                signature = signature.replace("[", "").replace("]", "").replace("<",
            "{").replace(">", "}")'
          - '                signature_args = extract_keys(signature)'
          - '                command_args = {k: "" for k in signature_args}'
          - ''
          - '                if "arguments" in data_command:'
          - '                    for arg in signature_args:'
          - '                        if arg in data_command["arguments"]:'
          - '                            value = data_command["arguments"][arg]'
          - '                            if should_quote(value, command):'
          - '                                value = shlex.quote(value)'
          - '                            command_args[arg] = value'
          - '                action = signature.format(**command_args)'
          - '            action = action.strip()'
          - '            return thought, action'
          - '        except json.JSONDecodeError:'
          - '            msg = "Model output is not valid JSON."'
          - '            raise FormatError(msg)'
        name: JsonParser
        start_line: 234
        text:
        - 'class JsonParser(ParseFunction):'
        - '    """'
        - '    Expects the model response to be a JSON object.'
        - '    """'
        - ''
        - '    _error_message = """\'
        - '    Your output could not be parsed as JSON. Please make sure your output
          1) is valid JSON and'
        - '    2) Includes the "thought" and "command" fields.'
        - ''
        - '    """'
        - ''
        - '    def __call__(self, model_response, commands: list[Command], strict=False):'
        - '        """'
        - '        Parses the action from the output of the API call.'
        - '        We assume that model output is a JSON object with the following
          fields:'
        - '        {'
        - '            "thought": "discussion text here.",'
        - '            "command": {'
        - '                "arguments": {'
        - '                    "arg1": "value1",'
        - '                    "arg2": "value2",'
        - '                    ...'
        - '                },'
        - '                "name": "command_name"'
        - '            }'
        - '        }'
        - '        """'
        - '        try:'
        - '            data = json.loads(model_response)'
        - '            if not isinstance(data, dict):'
        - '                msg = "Model output is not a JSON object."'
        - '                raise FormatError(msg)'
        - ''
        - '            # Check if required keys are present'
        - '            required_keys = ["thought", "command"]'
        - '            for key in required_keys:'
        - '                if key not in data:'
        - '                    msg = f"Key ''{key}'' is missing from model output."'
        - '                    raise FormatError(msg)'
        - ''
        - '            # Check structure of ''command'' key'
        - '            data_command = data["command"]'
        - '            if not isinstance(data_command, dict):'
        - '                msg = "Value of ''command'' key is not a JSON object."'
        - '                raise FormatError(msg)'
        - ''
        - '            # Check if required keys are present in ''command'' object'
        - '            command_keys = ["name"]'
        - '            for key in command_keys:'
        - '                if key not in data_command:'
        - '                    msg = f"Key ''{key}'' is missing from ''command'' object."'
        - '                    raise FormatError(msg)'
        - ''
        - '            thought = data["thought"]'
        - ''
        - '            # Generate action'
        - '            commands_dict = {c.name: c for c in commands}'
        - '            command = commands_dict.get(data_command["name"])'
        - '            if command is None:'
        - '                action = data_command["name"]'
        - '                if "arguments" in data_command:'
        - '                    action += " " + " ".join(data_command["arguments"].values())'
        - '            else:'
        - '                signature = command.signature'
        - '                signature = signature.replace("[", "").replace("]", "").replace("<",
          "{").replace(">", "}")'
        - '                signature_args = extract_keys(signature)'
        - '                command_args = {k: "" for k in signature_args}'
        - ''
        - '                if "arguments" in data_command:'
        - '                    for arg in signature_args:'
        - '                        if arg in data_command["arguments"]:'
        - '                            value = data_command["arguments"][arg]'
        - '                            if should_quote(value, command):'
        - '                                value = shlex.quote(value)'
        - '                            command_args[arg] = value'
        - '                action = signature.format(**command_args)'
        - '            action = action.strip()'
        - '            return thought, action'
        - '        except json.JSONDecodeError:'
        - '            msg = "Model output is not valid JSON."'
        - '            raise FormatError(msg)'
      functions:
      - end_line: 326
        name: extract_keys
        start_line: 317
        text:
        - 'def extract_keys(format_string):'
        - '    """'
        - '    Given a format string, returns a set of all the keys in the format
          string.'
        - '    """'
        - '    formatter = string.Formatter()'
        - '    keys = set()'
        - '    for _, field_name, _, _ in formatter.parse(format_string):'
        - '        if field_name is not None:'
        - '            keys.add(field_name)'
        - '    return keys'
      - end_line: 333
        name: should_quote
        start_line: 329
        text:
        - 'def should_quote(value, command):'
        - '    """'
        - '    Returns True if the value should be quoted, False otherwise.'
        - '    """'
        - '    return isinstance(value, str) and command.end_name is None'
      text:
      - from __future__ import annotations
      - ''
      - import json
      - import re
      - import shlex
      - import string
      - import textwrap
      - from abc import abstractmethod
      - from dataclasses import dataclass
      - ''
      - from sweagent.agent.commands import Command
      - ''
      - ''
      - 'class FormatError(Exception):'
      - '    pass'
      - ''
      - ''
      - '# ABSTRACT BASE CLASSES'
      - ''
      - ''
      - 'class ParseFunctionMeta(type):'
      - '    """'
      - '    Registry maps all inherited classes to their names.'
      - '    """'
      - ''
      - '    _registry = {}'
      - ''
      - '    def __new__(cls, name, bases, attrs):'
      - '        new_cls = super().__new__(cls, name, bases, attrs)'
      - '        if name != "ParseFunction":'
      - '            cls._registry[name] = new_cls'
      - '        return new_cls'
      - ''
      - ''
      - '@dataclass'
      - 'class ParseFunction(metaclass=ParseFunctionMeta):'
      - '    """'
      - '    Abstract class for parsing functions.'
      - '    We use get to generate the right parser based on the name of the parser.'
      - '    """'
      - ''
      - '    _error_message = None'
      - ''
      - '    @abstractmethod'
      - '    def __call__(self, model_response, commands: list[Command], strict=False):'
      - '        raise NotImplementedError'
      - ''
      - '    @property'
      - '    def format_error_template(self):'
      - '        if self._error_message is None:'
      - '            msg = "You must define an error message for your parser."'
      - '            raise NotImplementedError(msg)'
      - '        return textwrap.dedent(self._error_message)'
      - ''
      - '    @classmethod'
      - '    def get(cls, name):'
      - '        try:'
      - '            return cls._registry[name]()'
      - '        except KeyError:'
      - '            msg = f"Model output parser ({name}) not found."'
      - '            raise ValueError(msg)'
      - ''
      - ''
      - '# DEFINE NEW PARSING FUNCTIONS BELOW THIS LINE'
      - ''
      - ''
      - 'class ActionParser(ParseFunction):'
      - '    """'
      - '    Expects the model response to be a single command.'
      - '    Example: "ls -l"'
      - '    """'
      - ''
      - '    _error_message = """\'
      - '    The command you provided was not recognized. Please specify one of the
        commands (+ any necessary arguments) from the following list in your response.
        Do not include any other text.'
      - ''
      - '    COMMANDS:'
      - '    {command_docs}'
      - '    """'
      - ''
      - '    def __call__(self, model_response, commands: list[Command], strict=False):'
      - '        if model_response.split():'
      - '            action = model_response.strip().split()[0]'
      - '            if action in {command.name for command in commands}:'
      - '                return model_response, model_response'
      - '        msg = "First word in model response is not a valid command."'
      - '        raise FormatError(msg)'
      - ''
      - ''
      - 'class ThoughtActionParser(ParseFunction):'
      - '    """'
      - '    Expects the model response to be a discussion followed by a command wrapped
        in backticks.'
      - '    Example:'
      - '    Let''s look at the files in the current directory.'
      - '    ```'
      - '    ls -l'
      - '    ```'
      - '    """'
      - ''
      - '    _error_message = """\'
      - '    Your output was not formatted correctly. You must always include one
        discussion and one command as part of your response. Make sure you do not
        have multiple discussion/command tags.'
      - '    Please make sure your output precisely matches the following format:'
      - '    DISCUSSION'
      - '    Discuss here with yourself about what your planning and what you''re
        going to do in this step.'
      - ''
      - '    ```'
      - '    command(s) that you''re going to run'
      - '    ```'
      - '    """'
      - ''
      - '    def __call__(self, model_response, commands: list[Command], strict=False):'
      - '        """'
      - '        Parses the action from the output of the API call.'
      - '        We assume that the action is the last code block in the model_response.'
      - '        We also assume that the action is not nested within another code
        block.'
      - '        This is problematic if the model_response includes many unnamed ```
        blocks.'
      - '        For instance:'
      - '        ```'
      - '        This is a code block.'
      - '        ```'
      - '        ```'
      - '        This is another code block.'
      - '        ```'
      - ''
      - '        In this case, only the second code block will be parsed as the action.'
      - '        """'
      - '        code_block_pat = re.compile(r"^```(\S*)\s*\n|^```\s*$", re.MULTILINE)'
      - '        stack = []'
      - '        last_valid_block = None'
      - '        for match in code_block_pat.finditer(model_response):'
      - '            if stack and not match.group(1):  # Closing of a code block'
      - '                start = stack.pop()'
      - '                # Check if it''s not nested within another block'
      - '                if not stack:'
      - '                    last_valid_block = (start, match)'
      - '            elif match.group(1) is not None:  # Opening of a code block'
      - '                stack.append(match)'
      - '        if last_valid_block:'
      - '            start, end = last_valid_block'
      - '            thought = model_response[: start.start()] + model_response[end.end()
        :]'
      - '            return thought, model_response[start.end() : end.start()]'
      - '        msg = "No action found in model response."'
      - '        raise FormatError(msg)'
      - ''
      - ''
      - 'class XMLThoughtActionParser(ParseFunction):'
      - '    """'
      - '    Expects the model response to be a discussion followed by a command wrapped
        in XML tags.'
      - '    Example:'
      - '    Let''s look at the files in the current directory.'
      - '    <command>'
      - '    ls -l'
      - '    </command>'
      - '    """'
      - ''
      - '    _error_message = """\'
      - '    Your output was not formatted correctly. You must always include one
        discussion and one command as part of your response. Make sure you do not
        have multiple discussion/command tags.'
      - '    Please make sure your output precisely matches the following format:'
      - '    """'
      - ''
      - '    def __call__(self, model_response, commands: list[Command], strict=False):'
      - '        """'
      - '        Parses the action from the output of the API call.'
      - '        We assume that the action is the last code block in the model_response.'
      - '        We also assume that the action is not nested within another code
        block.'
      - '        This is problematic if the model_response includes many unnamed ```
        blocks.'
      - '        For instance:'
      - '        <command>'
      - '        This is a code block.'
      - '        </command>'
      - '        <command>'
      - '        This is another code block.'
      - '        </command>'
      - ''
      - '        In this case, only the second code block will be parsed as the action.'
      - '        """'
      - '        if "<command>" not in model_response or "</command>" not in model_response:'
      - '            msg = "No action found in model response."'
      - '            raise FormatError(msg)'
      - '        # `action` is everything between the last <command> and </command>
        tags'
      - '        start_action = model_response.rfind("<command>") + len("<command>")  #
        start after the last <command> tag'
      - '        end_thought = model_response.rfind("<command>")  # end before the
        last <command> tag'
      - '        end_action = model_response.rfind("</command>")  # end before the
        last </command> tag'
      - '        restart_thought = model_response.rfind("</command>") + len("</command>")  #
        start after the last </command> tag'
      - '        # `thought` is everything not in between <command> and </command>
        tags (includes after the last </command> tag)'
      - '        action = model_response[start_action:end_action]'
      - '        thought = model_response[:end_thought] + model_response[restart_thought:]'
      - ''
      - '        return thought.strip(), action.strip()'
      - ''
      - ''
      - 'class EditFormat(ThoughtActionParser):'
      - '    """'
      - '    Expects the model response to be a discussion followed by a command wrapped
        in backticks.'
      - '    Example:'
      - '    We''ll replace the contents of the current window with the following:'
      - '    ```'
      - '    import os'
      - '    os.listdir()'
      - '    ```'
      - '    """'
      - ''
      - '    _error_message = """\'
      - '    Your output was not formatted correctly. You must wrap the replacement
        text in backticks (```).'
      - '    Please make sure your output precisely matches the following format:'
      - '    COMMENTS'
      - '    You can write comments here about what you''re going to do if you want.'
      - ''
      - '    ```'
      - '    New window contents.'
      - '    Make sure you copy the entire contents of the window here, with the required
        indentation.'
      - '    Make the changes to the window above directly in this window.'
      - '    Remember that all of the window''s contents will be replaced with the
        contents of this window.'
      - '    Don''t include line numbers in your response.'
      - '    ```'
      - '    """'
      - ''
      - ''
      - 'class Identity(ParseFunction):'
      - '    """'
      - '    This parser does not do any parsing. It just returns the model response
        as both the thought and action.'
      - '    """'
      - ''
      - '    _error_message = """\'
      - '    It seems like something went wrong with your output. Please try again.'
      - '    """'
      - ''
      - '    def __call__(self, model_response, commands: list[Command], strict=False):'
      - '        """'
      - '        This doesn''t do any parsing. It just returns the model response
        as the thought and action.'
      - '        """'
      - '        return model_response, model_response'
      - ''
      - ''
      - 'class JsonParser(ParseFunction):'
      - '    """'
      - '    Expects the model response to be a JSON object.'
      - '    """'
      - ''
      - '    _error_message = """\'
      - '    Your output could not be parsed as JSON. Please make sure your output
        1) is valid JSON and'
      - '    2) Includes the "thought" and "command" fields.'
      - ''
      - '    """'
      - ''
      - '    def __call__(self, model_response, commands: list[Command], strict=False):'
      - '        """'
      - '        Parses the action from the output of the API call.'
      - '        We assume that model output is a JSON object with the following fields:'
      - '        {'
      - '            "thought": "discussion text here.",'
      - '            "command": {'
      - '                "arguments": {'
      - '                    "arg1": "value1",'
      - '                    "arg2": "value2",'
      - '                    ...'
      - '                },'
      - '                "name": "command_name"'
      - '            }'
      - '        }'
      - '        """'
      - '        try:'
      - '            data = json.loads(model_response)'
      - '            if not isinstance(data, dict):'
      - '                msg = "Model output is not a JSON object."'
      - '                raise FormatError(msg)'
      - ''
      - '            # Check if required keys are present'
      - '            required_keys = ["thought", "command"]'
      - '            for key in required_keys:'
      - '                if key not in data:'
      - '                    msg = f"Key ''{key}'' is missing from model output."'
      - '                    raise FormatError(msg)'
      - ''
      - '            # Check structure of ''command'' key'
      - '            data_command = data["command"]'
      - '            if not isinstance(data_command, dict):'
      - '                msg = "Value of ''command'' key is not a JSON object."'
      - '                raise FormatError(msg)'
      - ''
      - '            # Check if required keys are present in ''command'' object'
      - '            command_keys = ["name"]'
      - '            for key in command_keys:'
      - '                if key not in data_command:'
      - '                    msg = f"Key ''{key}'' is missing from ''command'' object."'
      - '                    raise FormatError(msg)'
      - ''
      - '            thought = data["thought"]'
      - ''
      - '            # Generate action'
      - '            commands_dict = {c.name: c for c in commands}'
      - '            command = commands_dict.get(data_command["name"])'
      - '            if command is None:'
      - '                action = data_command["name"]'
      - '                if "arguments" in data_command:'
      - '                    action += " " + " ".join(data_command["arguments"].values())'
      - '            else:'
      - '                signature = command.signature'
      - '                signature = signature.replace("[", "").replace("]", "").replace("<",
        "{").replace(">", "}")'
      - '                signature_args = extract_keys(signature)'
      - '                command_args = {k: "" for k in signature_args}'
      - ''
      - '                if "arguments" in data_command:'
      - '                    for arg in signature_args:'
      - '                        if arg in data_command["arguments"]:'
      - '                            value = data_command["arguments"][arg]'
      - '                            if should_quote(value, command):'
      - '                                value = shlex.quote(value)'
      - '                            command_args[arg] = value'
      - '                action = signature.format(**command_args)'
      - '            action = action.strip()'
      - '            return thought, action'
      - '        except json.JSONDecodeError:'
      - '            msg = "Model output is not valid JSON."'
      - '            raise FormatError(msg)'
      - ''
      - ''
      - 'def extract_keys(format_string):'
      - '    """'
      - '    Given a format string, returns a set of all the keys in the format string.'
      - '    """'
      - '    formatter = string.Formatter()'
      - '    keys = set()'
      - '    for _, field_name, _, _ in formatter.parse(format_string):'
      - '        if field_name is not None:'
      - '            keys.add(field_name)'
      - '    return keys'
      - ''
      - ''
      - 'def should_quote(value, command):'
      - '    """'
      - '    Returns True if the value should be quoted, False otherwise.'
      - '    """'
      - '    return isinstance(value, str) and command.end_name is None'
  api:
    __init__.py:
      classes: []
      functions: []
      text: []
    __pycache__:
      __init__.cpython-39.pyc: {}
      hooks.cpython-39.pyc: {}
      utils.cpython-39.pyc: {}
    hooks.py:
      classes:
      - end_line: 31
        methods:
        - end_line: 24
          name: __init__
          start_line: 19
          text:
          - '    def __init__('
          - '        self,'
          - '        wu: WebUpdate,'
          - '    ):'
          - '        super().__init__()'
          - '        self._wu = wu'
        - end_line: 28
          name: write
          start_line: 26
          text:
          - '    def write(self, message):'
          - '        message = strip_ansi_sequences(message)'
          - '        self._wu.up_log(message)'
        - end_line: 31
          name: flush
          start_line: 30
          text:
          - '    def flush(self):'
          - '        pass'
        name: StreamToSocketIO
        start_line: 18
        text:
        - 'class StreamToSocketIO(io.StringIO):'
        - '    def __init__('
        - '        self,'
        - '        wu: WebUpdate,'
        - '    ):'
        - '        super().__init__()'
        - '        self._wu = wu'
        - ''
        - '    def write(self, message):'
        - '        message = strip_ansi_sequences(message)'
        - '        self._wu.up_log(message)'
        - ''
        - '    def flush(self):'
        - '        pass'
      - end_line: 95
        methods:
        - end_line: 39
          name: __init__
          start_line: 37
          text:
          - '    def __init__(self, socketio: SocketIO):'
          - '        self._socketio = socketio'
          - '        self.log_stream = StreamToSocketIO(self)'
        - end_line: 43
          name: _emit
          start_line: 41
          text:
          - '    def _emit(self, event, data):'
          - '        """Directly wrap around socketio.emit"""'
          - '        self._socketio.emit(event, data)'
        - end_line: 47
          name: up_log
          start_line: 45
          text:
          - '    def up_log(self, message: str):'
          - '        """Update the log"""'
          - '        self._emit("log_message", {"message": message})'
        - end_line: 51
          name: up_banner
          start_line: 49
          text:
          - '    def up_banner(self, message: str):'
          - '        """Update the banner"""'
          - '        self._emit("update_banner", {"message": message})'
        - end_line: 71
          name: up_agent
          start_line: 53
          text:
          - '    def up_agent('
          - '        self,'
          - '        message: str,'
          - '        *,'
          - '        format: str = "markdown",'
          - '        thought_idx: int | None = None,'
          - '        type_: str = "info",'
          - '    ):'
          - '        """Update the agent feed"""'
          - '        self._emit('
          - '            "update",'
          - '            {'
          - '                "feed": "agent",'
          - '                "message": message,'
          - '                "format": format,'
          - '                "thought_idx": thought_idx,'
          - '                "type": type_,'
          - '            },'
          - '        )'
        - end_line: 91
          name: up_env
          start_line: 73
          text:
          - '    def up_env('
          - '        self,'
          - '        message: str,'
          - '        *,'
          - '        type_: str,'
          - '        format: str = "markdown",'
          - '        thought_idx: int | None = None,'
          - '    ):'
          - '        """Update the environment feed"""'
          - '        self._emit('
          - '            "update",'
          - '            {'
          - '                "feed": "env",'
          - '                "message": message,'
          - '                "format": format,'
          - '                "thought_idx": thought_idx,'
          - '                "type": type_,'
          - '            },'
          - '        )'
        - end_line: 95
          name: finish_run
          start_line: 93
          text:
          - '    def finish_run(self):'
          - '        """Finish the run. We use that to control which buttons are active."""'
          - '        self._emit("finish_run", {})'
        name: WebUpdate
        start_line: 34
        text:
        - 'class WebUpdate:'
        - '    """This class talks to socketio. It''s pretty much a wrapper around
          socketio.emit."""'
        - ''
        - '    def __init__(self, socketio: SocketIO):'
        - '        self._socketio = socketio'
        - '        self.log_stream = StreamToSocketIO(self)'
        - ''
        - '    def _emit(self, event, data):'
        - '        """Directly wrap around socketio.emit"""'
        - '        self._socketio.emit(event, data)'
        - ''
        - '    def up_log(self, message: str):'
        - '        """Update the log"""'
        - '        self._emit("log_message", {"message": message})'
        - ''
        - '    def up_banner(self, message: str):'
        - '        """Update the banner"""'
        - '        self._emit("update_banner", {"message": message})'
        - ''
        - '    def up_agent('
        - '        self,'
        - '        message: str,'
        - '        *,'
        - '        format: str = "markdown",'
        - '        thought_idx: int | None = None,'
        - '        type_: str = "info",'
        - '    ):'
        - '        """Update the agent feed"""'
        - '        self._emit('
        - '            "update",'
        - '            {'
        - '                "feed": "agent",'
        - '                "message": message,'
        - '                "format": format,'
        - '                "thought_idx": thought_idx,'
        - '                "type": type_,'
        - '            },'
        - '        )'
        - ''
        - '    def up_env('
        - '        self,'
        - '        message: str,'
        - '        *,'
        - '        type_: str,'
        - '        format: str = "markdown",'
        - '        thought_idx: int | None = None,'
        - '    ):'
        - '        """Update the environment feed"""'
        - '        self._emit('
        - '            "update",'
        - '            {'
        - '                "feed": "env",'
        - '                "message": message,'
        - '                "format": format,'
        - '                "thought_idx": thought_idx,'
        - '                "type": type_,'
        - '            },'
        - '        )'
        - ''
        - '    def finish_run(self):'
        - '        """Finish the run. We use that to control which buttons are active."""'
        - '        self._emit("finish_run", {})'
      - end_line: 117
        methods:
        - end_line: 101
          name: __init__
          start_line: 99
          text:
          - '    def __init__(self, wu: WebUpdate):'
          - '        """This hooks into the Main class to update the web interface"""'
          - '        self._wu = wu'
        - end_line: 104
          name: on_start
          start_line: 103
          text:
          - '    def on_start(self):'
          - '        self._wu.up_env(message="Environment container initialized",
            format="text", type_="info")'
        - end_line: 108
          name: on_end
          start_line: 106
          text:
          - '    def on_end(self):'
          - '        self._wu.up_agent(message="The run has ended", format="text")'
          - '        self._wu.finish_run()'
        - end_line: 117
          name: on_instance_completed
          start_line: 110
          text:
          - '    def on_instance_completed(self, *, info, trajectory):'
          - '        print(info.get("submission"))'
          - '        if info.get("submission") and info["exit_status"] == "submitted":'
          - '            msg = ('
          - '                "The submission was successful. You can find the patch
            (diff) in the right panel. "'
          - '                "To apply it to your code, run `git apply /path/to/patch/file.patch`.
            "'
          - '            )'
          - '            self._wu.up_agent(msg, type_="success")'
        name: MainUpdateHook
        start_line: 98
        text:
        - 'class MainUpdateHook(MainHook):'
        - '    def __init__(self, wu: WebUpdate):'
        - '        """This hooks into the Main class to update the web interface"""'
        - '        self._wu = wu'
        - ''
        - '    def on_start(self):'
        - '        self._wu.up_env(message="Environment container initialized", format="text",
          type_="info")'
        - ''
        - '    def on_end(self):'
        - '        self._wu.up_agent(message="The run has ended", format="text")'
        - '        self._wu.finish_run()'
        - ''
        - '    def on_instance_completed(self, *, info, trajectory):'
        - '        print(info.get("submission"))'
        - '        if info.get("submission") and info["exit_status"] == "submitted":'
        - '            msg = ('
        - '                "The submission was successful. You can find the patch
          (diff) in the right panel. "'
        - '                "To apply it to your code, run `git apply /path/to/patch/file.patch`.
          "'
        - '            )'
        - '            self._wu.up_agent(msg, type_="success")'
      - end_line: 152
        methods:
        - end_line: 125
          name: __init__
          start_line: 121
          text:
          - '    def __init__(self, wu: WebUpdate):'
          - '        """This hooks into the Agent class to update the web interface"""'
          - '        self._wu = wu'
          - '        self._sub_action = None'
          - '        self._thought_idx = 0'
        - end_line: 136
          name: on_actions_generated
          start_line: 127
          text:
          - '    def on_actions_generated(self, *, thought: str, action: str, output:
            str):'
          - '        self._thought_idx += 1'
          - '        for prefix in ["DISCUSSION\n", "THOUGHT\n", "DISCUSSION", "THOUGHT"]:'
          - '            thought = thought.replace(prefix, "")'
          - '        self._wu.up_agent('
          - '            message=thought,'
          - '            format="markdown",'
          - '            thought_idx=self._thought_idx,'
          - '            type_="thought",'
          - '        )'
        - end_line: 142
          name: on_sub_action_started
          start_line: 138
          text:
          - '    def on_sub_action_started(self, *, sub_action: dict):'
          - '        # msg = f"```bash\n{sub_action[''action'']}\n```"'
          - '        msg = "$ " + sub_action["action"].strip()'
          - '        self._sub_action = sub_action["action"].strip()'
          - '        self._wu.up_env(message=msg, thought_idx=self._thought_idx, type_="command")'
        - end_line: 152
          name: on_sub_action_executed
          start_line: 144
          text:
          - '    def on_sub_action_executed(self, *, obs: str, done: bool):'
          - '        type_ = "output"'
          - '        if self._sub_action == "submit":'
          - '            type_ = "diff"'
          - '        if obs is None:'
          - '            # This can happen for empty patch submissions'
          - '            obs = ""'
          - '        msg = obs.strip()'
          - '        self._wu.up_env(message=msg, thought_idx=self._thought_idx, type_=type_)'
        name: AgentUpdateHook
        start_line: 120
        text:
        - 'class AgentUpdateHook(AgentHook):'
        - '    def __init__(self, wu: WebUpdate):'
        - '        """This hooks into the Agent class to update the web interface"""'
        - '        self._wu = wu'
        - '        self._sub_action = None'
        - '        self._thought_idx = 0'
        - ''
        - '    def on_actions_generated(self, *, thought: str, action: str, output:
          str):'
        - '        self._thought_idx += 1'
        - '        for prefix in ["DISCUSSION\n", "THOUGHT\n", "DISCUSSION", "THOUGHT"]:'
        - '            thought = thought.replace(prefix, "")'
        - '        self._wu.up_agent('
        - '            message=thought,'
        - '            format="markdown",'
        - '            thought_idx=self._thought_idx,'
        - '            type_="thought",'
        - '        )'
        - ''
        - '    def on_sub_action_started(self, *, sub_action: dict):'
        - '        # msg = f"```bash\n{sub_action[''action'']}\n```"'
        - '        msg = "$ " + sub_action["action"].strip()'
        - '        self._sub_action = sub_action["action"].strip()'
        - '        self._wu.up_env(message=msg, thought_idx=self._thought_idx, type_="command")'
        - ''
        - '    def on_sub_action_executed(self, *, obs: str, done: bool):'
        - '        type_ = "output"'
        - '        if self._sub_action == "submit":'
        - '            type_ = "diff"'
        - '        if obs is None:'
        - '            # This can happen for empty patch submissions'
        - '            obs = ""'
        - '        msg = obs.strip()'
        - '        self._wu.up_env(message=msg, thought_idx=self._thought_idx, type_=type_)'
      - end_line: 161
        methods:
        - end_line: 158
          name: __init__
          start_line: 156
          text:
          - '    def __init__(self, wu: WebUpdate):'
          - '        """This hooks into the environment class to update the web interface"""'
          - '        self._wu = wu'
        - end_line: 161
          name: on_close
          start_line: 160
          text:
          - '    def on_close(self):'
          - '        self._wu.up_env(message="Environment closed", format="text",
            type_="info")'
        name: EnvUpdateHook
        start_line: 155
        text:
        - 'class EnvUpdateHook(EnvHook):'
        - '    def __init__(self, wu: WebUpdate):'
        - '        """This hooks into the environment class to update the web interface"""'
        - '        self._wu = wu'
        - ''
        - '    def on_close(self):'
        - '        self._wu.up_env(message="Environment closed", format="text", type_="info")'
      functions: []
      text:
      - from __future__ import annotations
      - ''
      - import io
      - import sys
      - ''
      - from flask_socketio import SocketIO
      - ''
      - from sweagent import PACKAGE_DIR
      - from sweagent.agent.agents import AgentHook
      - from sweagent.api.utils import strip_ansi_sequences
      - from sweagent.environment.swe_env import EnvHook
      - ''
      - '# baaaaaaad'
      - sys.path.append(str(PACKAGE_DIR.parent))
      - from run import MainHook
      - ''
      - ''
      - 'class StreamToSocketIO(io.StringIO):'
      - '    def __init__('
      - '        self,'
      - '        wu: WebUpdate,'
      - '    ):'
      - '        super().__init__()'
      - '        self._wu = wu'
      - ''
      - '    def write(self, message):'
      - '        message = strip_ansi_sequences(message)'
      - '        self._wu.up_log(message)'
      - ''
      - '    def flush(self):'
      - '        pass'
      - ''
      - ''
      - 'class WebUpdate:'
      - '    """This class talks to socketio. It''s pretty much a wrapper around socketio.emit."""'
      - ''
      - '    def __init__(self, socketio: SocketIO):'
      - '        self._socketio = socketio'
      - '        self.log_stream = StreamToSocketIO(self)'
      - ''
      - '    def _emit(self, event, data):'
      - '        """Directly wrap around socketio.emit"""'
      - '        self._socketio.emit(event, data)'
      - ''
      - '    def up_log(self, message: str):'
      - '        """Update the log"""'
      - '        self._emit("log_message", {"message": message})'
      - ''
      - '    def up_banner(self, message: str):'
      - '        """Update the banner"""'
      - '        self._emit("update_banner", {"message": message})'
      - ''
      - '    def up_agent('
      - '        self,'
      - '        message: str,'
      - '        *,'
      - '        format: str = "markdown",'
      - '        thought_idx: int | None = None,'
      - '        type_: str = "info",'
      - '    ):'
      - '        """Update the agent feed"""'
      - '        self._emit('
      - '            "update",'
      - '            {'
      - '                "feed": "agent",'
      - '                "message": message,'
      - '                "format": format,'
      - '                "thought_idx": thought_idx,'
      - '                "type": type_,'
      - '            },'
      - '        )'
      - ''
      - '    def up_env('
      - '        self,'
      - '        message: str,'
      - '        *,'
      - '        type_: str,'
      - '        format: str = "markdown",'
      - '        thought_idx: int | None = None,'
      - '    ):'
      - '        """Update the environment feed"""'
      - '        self._emit('
      - '            "update",'
      - '            {'
      - '                "feed": "env",'
      - '                "message": message,'
      - '                "format": format,'
      - '                "thought_idx": thought_idx,'
      - '                "type": type_,'
      - '            },'
      - '        )'
      - ''
      - '    def finish_run(self):'
      - '        """Finish the run. We use that to control which buttons are active."""'
      - '        self._emit("finish_run", {})'
      - ''
      - ''
      - 'class MainUpdateHook(MainHook):'
      - '    def __init__(self, wu: WebUpdate):'
      - '        """This hooks into the Main class to update the web interface"""'
      - '        self._wu = wu'
      - ''
      - '    def on_start(self):'
      - '        self._wu.up_env(message="Environment container initialized", format="text",
        type_="info")'
      - ''
      - '    def on_end(self):'
      - '        self._wu.up_agent(message="The run has ended", format="text")'
      - '        self._wu.finish_run()'
      - ''
      - '    def on_instance_completed(self, *, info, trajectory):'
      - '        print(info.get("submission"))'
      - '        if info.get("submission") and info["exit_status"] == "submitted":'
      - '            msg = ('
      - '                "The submission was successful. You can find the patch (diff)
        in the right panel. "'
      - '                "To apply it to your code, run `git apply /path/to/patch/file.patch`.
        "'
      - '            )'
      - '            self._wu.up_agent(msg, type_="success")'
      - ''
      - ''
      - 'class AgentUpdateHook(AgentHook):'
      - '    def __init__(self, wu: WebUpdate):'
      - '        """This hooks into the Agent class to update the web interface"""'
      - '        self._wu = wu'
      - '        self._sub_action = None'
      - '        self._thought_idx = 0'
      - ''
      - '    def on_actions_generated(self, *, thought: str, action: str, output:
        str):'
      - '        self._thought_idx += 1'
      - '        for prefix in ["DISCUSSION\n", "THOUGHT\n", "DISCUSSION", "THOUGHT"]:'
      - '            thought = thought.replace(prefix, "")'
      - '        self._wu.up_agent('
      - '            message=thought,'
      - '            format="markdown",'
      - '            thought_idx=self._thought_idx,'
      - '            type_="thought",'
      - '        )'
      - ''
      - '    def on_sub_action_started(self, *, sub_action: dict):'
      - '        # msg = f"```bash\n{sub_action[''action'']}\n```"'
      - '        msg = "$ " + sub_action["action"].strip()'
      - '        self._sub_action = sub_action["action"].strip()'
      - '        self._wu.up_env(message=msg, thought_idx=self._thought_idx, type_="command")'
      - ''
      - '    def on_sub_action_executed(self, *, obs: str, done: bool):'
      - '        type_ = "output"'
      - '        if self._sub_action == "submit":'
      - '            type_ = "diff"'
      - '        if obs is None:'
      - '            # This can happen for empty patch submissions'
      - '            obs = ""'
      - '        msg = obs.strip()'
      - '        self._wu.up_env(message=msg, thought_idx=self._thought_idx, type_=type_)'
      - ''
      - ''
      - 'class EnvUpdateHook(EnvHook):'
      - '    def __init__(self, wu: WebUpdate):'
      - '        """This hooks into the environment class to update the web interface"""'
      - '        self._wu = wu'
      - ''
      - '    def on_close(self):'
      - '        self._wu.up_env(message="Environment closed", format="text", type_="info")'
      - ''
      - '    # def on_query_message_added('
      - '    #         self,'
      - '    #         *,'
      - '    #         role: str,'
      - '    #         content: str,'
      - '    #         agent: str,'
      - '    #         is_demo: bool = False,'
      - '    #         thought: str = "",'
      - '    #         action: str = ""'
      - '    #     ):'
      - '    #     if role == "assistant":'
      - '    #         return'
      - '    #     if thought or action:'
      - '    #         return'
      - '    #     if is_demo:'
      - '    #         return self._wu.up_agent(title="Demo", message=content, thought_idx=self._thought_idx
        + 1)'
      - '    #     self._wu.up_agent(title="Query", message=content, thought_idx=self._thought_idx
        + 1)'
    index.html: {}
    requirements.txt: {}
    server.py:
      classes:
      - end_line: 93
        methods:
        - end_line: 64
          name: __init__
          start_line: 61
          text:
          - '    def __init__(self, settings: ScriptArguments, wu: WebUpdate):'
          - '        super().__init__()'
          - '        self._wu = wu'
          - '        self._settings = settings'
        - end_line: 86
          name: run
          start_line: 66
          text:
          - '    def run(self) -> None:'
          - '        # fixme: This actually redirects all output from all threads
            to the socketio, which is not what we want'
          - '        with redirect_stdout(self._wu.log_stream):'
          - '            with redirect_stderr(self._wu.log_stream):'
          - '                try:'
          - '                    main = Main(self._settings)'
          - '                    main.add_hook(MainUpdateHook(self._wu))'
          - '                    main.agent.add_hook(AgentUpdateHook(self._wu))'
          - '                    main.env.add_hook(EnvUpdateHook(self._wu))'
          - '                    main.main()'
          - '                except Exception as e:'
          - '                    short_msg = str(e)'
          - '                    max_len = 350'
          - '                    if len(short_msg) > max_len:'
          - '                        short_msg = f"{short_msg[:max_len]}... (see log
            for details)"'
          - '                    traceback_str = traceback.format_exc()'
          - '                    self._wu.up_log(traceback_str)'
          - '                    self._wu.up_agent(f"Error: {short_msg}")'
          - '                    self._wu.up_banner("Critical error: " + short_msg)'
          - '                    self._wu.finish_run()'
          - '                    raise'
        - end_line: 93
          name: stop
          start_line: 88
          text:
          - '    def stop(self):'
          - '        while self.is_alive():'
          - '            self.raise_exc(SystemExit)'
          - '            time.sleep(0.1)'
          - '        self._wu.finish_run()'
          - '        self._wu.up_agent("Run stopped by user")'
        name: MainThread
        start_line: 60
        text:
        - 'class MainThread(ThreadWithExc):'
        - '    def __init__(self, settings: ScriptArguments, wu: WebUpdate):'
        - '        super().__init__()'
        - '        self._wu = wu'
        - '        self._settings = settings'
        - ''
        - '    def run(self) -> None:'
        - '        # fixme: This actually redirects all output from all threads to
          the socketio, which is not what we want'
        - '        with redirect_stdout(self._wu.log_stream):'
        - '            with redirect_stderr(self._wu.log_stream):'
        - '                try:'
        - '                    main = Main(self._settings)'
        - '                    main.add_hook(MainUpdateHook(self._wu))'
        - '                    main.agent.add_hook(AgentUpdateHook(self._wu))'
        - '                    main.env.add_hook(EnvUpdateHook(self._wu))'
        - '                    main.main()'
        - '                except Exception as e:'
        - '                    short_msg = str(e)'
        - '                    max_len = 350'
        - '                    if len(short_msg) > max_len:'
        - '                        short_msg = f"{short_msg[:max_len]}... (see log
          for details)"'
        - '                    traceback_str = traceback.format_exc()'
        - '                    self._wu.up_log(traceback_str)'
        - '                    self._wu.up_agent(f"Error: {short_msg}")'
        - '                    self._wu.up_banner("Critical error: " + short_msg)'
        - '                    self._wu.finish_run()'
        - '                    raise'
        - ''
        - '    def stop(self):'
        - '        while self.is_alive():'
        - '            self.raise_exc(SystemExit)'
        - '            time.sleep(0.1)'
        - '        self._wu.finish_run()'
        - '        self._wu.up_agent("Run stopped by user")'
      functions:
      - end_line: 57
        name: ensure_session_id_set
        start_line: 51
        text:
        - 'def ensure_session_id_set():'
        - '    """Ensures a session ID is set for this user"""'
        - '    session_id = session.get("session_id", None)'
        - '    if not session_id:'
        - '        session_id = uuid4().hex'
        - '        session["session_id"] = session_id'
        - '    return session_id'
      - end_line: 98
        name: index
        start_line: 97
        text:
        - 'def index():'
        - '    return render_template("index.html")'
      - end_line: 103
        name: handle_connect
        start_line: 102
        text:
        - 'def handle_connect():'
        - '    print("Client connected")'
      - end_line: 116
        name: write_env_yaml
        start_line: 106
        text:
        - 'def write_env_yaml(data) -> str:'
        - '    data: Any = AttrDict(copy.deepcopy(dict(data)))'
        - '    if not data.install_command_active:'
        - '        data.install = ""'
        - '    del data.install_command_active'
        - '    data.pip_packages = [p.strip() for p in data.pip_packages.split("\n")
          if p.strip()]'
        - '    path = Path(tempfile.NamedTemporaryFile(delete=False, suffix=".yml").name)'
        - '    # Make sure that the file is deleted when the program exits'
        - '    atexit.register(path.unlink)'
        - '    path.write_text(yaml.dump(dict(data)))'
        - '    return str(path)'
      - end_line: 204
        name: _build_cors_preflight_response
        start_line: 199
        text:
        - 'def _build_cors_preflight_response():'
        - '    response = make_response()'
        - '    response.headers.add("Access-Control-Allow-Origin", "*")'
        - '    response.headers.add("Access-Control-Allow-Headers", "*")'
        - '    response.headers.add("Access-Control-Allow-Methods", "*")'
        - '    return response'
      text:
      - from __future__ import annotations
      - ''
      - 'try:'
      - '    import flask  # noqa'
      - 'except ImportError as e:'
      - '    msg = ('
      - '        "Flask not found. You probably haven''t installed the dependencies
        for SWE-agent. "'
      - '        "Please go to the root of the repository and run `pip install -e
        .`"'
      - '    )'
      - '    raise RuntimeError(msg) from e'
      - import atexit
      - import copy
      - import json
      - import sys
      - import tempfile
      - import time
      - import traceback
      - from contextlib import redirect_stderr, redirect_stdout
      - from pathlib import Path
      - from typing import Any
      - from uuid import uuid4
      - ''
      - import yaml
      - from flask import Flask, make_response, render_template, request, session
      - from flask_cors import CORS
      - from flask_socketio import SocketIO
      - ''
      - from sweagent import CONFIG_DIR, PACKAGE_DIR
      - from sweagent.agent.agents import AgentArguments
      - from sweagent.agent.models import ModelArguments
      - from sweagent.api.hooks import AgentUpdateHook, EnvUpdateHook, MainUpdateHook,
        WebUpdate
      - from sweagent.api.utils import AttrDict, ThreadWithExc
      - from sweagent.environment.swe_env import EnvironmentArguments
      - ''
      - '# baaaaaaad'
      - sys.path.append(str(PACKAGE_DIR.parent))
      - from run import ActionsArguments, Main, ScriptArguments
      - ''
      - app = Flask(__name__, template_folder=Path(__file__).parent)
      - CORS(app)
      - socketio = SocketIO(app, cors_allowed_origins="*")
      - '# Setting these variables outside of `if __name__ == "__main__"` because
        when run Flask server with'
      - '# `flask run` it will skip the if block. Therefore, the app will return an
        error for missing `secret_key`'
      - '# Setting it here will allow both `flask run` and `python server.py` to work'
      - app.secret_key = "super secret key"
      - app.config["SESSION_TYPE"] = "memcache"
      - ''
      - 'THREADS: dict[str, MainThread] = {}'
      - ''
      - ''
      - 'def ensure_session_id_set():'
      - '    """Ensures a session ID is set for this user"""'
      - '    session_id = session.get("session_id", None)'
      - '    if not session_id:'
      - '        session_id = uuid4().hex'
      - '        session["session_id"] = session_id'
      - '    return session_id'
      - ''
      - ''
      - 'class MainThread(ThreadWithExc):'
      - '    def __init__(self, settings: ScriptArguments, wu: WebUpdate):'
      - '        super().__init__()'
      - '        self._wu = wu'
      - '        self._settings = settings'
      - ''
      - '    def run(self) -> None:'
      - '        # fixme: This actually redirects all output from all threads to the
        socketio, which is not what we want'
      - '        with redirect_stdout(self._wu.log_stream):'
      - '            with redirect_stderr(self._wu.log_stream):'
      - '                try:'
      - '                    main = Main(self._settings)'
      - '                    main.add_hook(MainUpdateHook(self._wu))'
      - '                    main.agent.add_hook(AgentUpdateHook(self._wu))'
      - '                    main.env.add_hook(EnvUpdateHook(self._wu))'
      - '                    main.main()'
      - '                except Exception as e:'
      - '                    short_msg = str(e)'
      - '                    max_len = 350'
      - '                    if len(short_msg) > max_len:'
      - '                        short_msg = f"{short_msg[:max_len]}... (see log for
        details)"'
      - '                    traceback_str = traceback.format_exc()'
      - '                    self._wu.up_log(traceback_str)'
      - '                    self._wu.up_agent(f"Error: {short_msg}")'
      - '                    self._wu.up_banner("Critical error: " + short_msg)'
      - '                    self._wu.finish_run()'
      - '                    raise'
      - ''
      - '    def stop(self):'
      - '        while self.is_alive():'
      - '            self.raise_exc(SystemExit)'
      - '            time.sleep(0.1)'
      - '        self._wu.finish_run()'
      - '        self._wu.up_agent("Run stopped by user")'
      - ''
      - ''
      - '@app.route("/")'
      - 'def index():'
      - '    return render_template("index.html")'
      - ''
      - ''
      - '@socketio.on("connect")'
      - 'def handle_connect():'
      - '    print("Client connected")'
      - ''
      - ''
      - 'def write_env_yaml(data) -> str:'
      - '    data: Any = AttrDict(copy.deepcopy(dict(data)))'
      - '    if not data.install_command_active:'
      - '        data.install = ""'
      - '    del data.install_command_active'
      - '    data.pip_packages = [p.strip() for p in data.pip_packages.split("\n")
        if p.strip()]'
      - '    path = Path(tempfile.NamedTemporaryFile(delete=False, suffix=".yml").name)'
      - '    # Make sure that the file is deleted when the program exits'
      - '    atexit.register(path.unlink)'
      - '    path.write_text(yaml.dump(dict(data)))'
      - '    return str(path)'
      - ''
      - ''
      - '@app.route("/run", methods=["GET", "OPTIONS"])'
      - 'def run():'
      - '    session_id = ensure_session_id_set()'
      - '    if request.method == "OPTIONS":  # CORS preflight'
      - '        return _build_cors_preflight_response()'
      - '    # While we''re running as a local UI, let''s make sure that there''s
        at most'
      - '    # one run at a time'
      - '    global THREADS'
      - '    for thread in THREADS.values():'
      - '        if thread.is_alive():'
      - '            thread.stop()'
      - '    wu = WebUpdate(socketio)'
      - '    wu.up_agent("Starting the run")'
      - '    # Use Any type to silence annoying false positives from mypy'
      - '    run: Any = AttrDict.from_nested_dicts(json.loads(request.args["runConfig"]))'
      - '    print(run)'
      - '    print(run.environment)'
      - '    print(run.environment.base_commit)'
      - '    model_name: str = run.agent.model.model_name'
      - '    environment_setup = ""'
      - '    environment_input_type = run.environment.environment_setup.input_type'
      - '    if environment_input_type == "manual":'
      - '        environment_setup = str(write_env_yaml(run.environment.environment_setup.manual))'
      - '    elif environment_input_type == "script_path":'
      - '        environment_setup = run.environment.environment_setup.script_path["script_path"]'
      - '    else:'
      - '        msg = f"Unknown input type: {environment_input_type}"'
      - '        raise ValueError(msg)'
      - '    if not environment_setup.strip():'
      - '        environment_setup = None'
      - '    test_run: bool = run.extra.test_run'
      - '    if test_run:'
      - '        model_name = "instant_empty_submit"'
      - '    defaults = ScriptArguments('
      - '        suffix="",'
      - '        environment=EnvironmentArguments('
      - '            image_name="sweagent/swe-agent:latest",'
      - '            data_path=run.environment.data_path,'
      - '            base_commit=run.environment.base_commit,'
      - '            split="dev",'
      - '            verbose=True,'
      - '            install_environment=True,'
      - '            repo_path=run.environment.repo_path,'
      - '            environment_setup=environment_setup,'
      - '        ),'
      - '        skip_existing=False,'
      - '        agent=AgentArguments('
      - '            model=ModelArguments('
      - '                model_name=model_name,'
      - '                total_cost_limit=0.0,'
      - '                per_instance_cost_limit=3.0,'
      - '                temperature=0.0,'
      - '                top_p=0.95,'
      - '            ),'
      - '            config_file=CONFIG_DIR / "default_from_url.yaml",'
      - '        ),'
      - '        actions=ActionsArguments(open_pr=False, skip_if_commits_reference_issue=True),'
      - '        raise_exceptions=True,'
      - '    )'
      - '    thread = MainThread(defaults, wu)'
      - '    THREADS[session_id] = thread'
      - '    thread.start()'
      - '    return "Commands are being executed", 202'
      - ''
      - ''
      - '@app.route("/stop")'
      - 'def stop():'
      - '    session_id = ensure_session_id_set()'
      - '    global THREADS'
      - '    print(f"Stopping session {session_id}")'
      - '    print(THREADS)'
      - '    thread = THREADS.get(session_id)'
      - '    if thread and thread.is_alive():'
      - '        print(f"Thread {thread} is alive")'
      - '        thread.stop()'
      - '    else:'
      - '        print(f"Thread {thread} is not alive")'
      - '    return "Stopping computation", 202'
      - ''
      - ''
      - 'def _build_cors_preflight_response():'
      - '    response = make_response()'
      - '    response.headers.add("Access-Control-Allow-Origin", "*")'
      - '    response.headers.add("Access-Control-Allow-Headers", "*")'
      - '    response.headers.add("Access-Control-Allow-Methods", "*")'
      - '    return response'
      - ''
      - ''
      - 'if __name__ == "__main__":'
      - '    app.debug = True'
      - '    socketio.run(app, port=8000, debug=True, allow_unsafe_werkzeug=True)'
    utils.py:
      classes:
      - end_line: 89
        methods:
        - end_line: 64
          name: _get_my_tid
          start_line: 42
          text:
          - '    def _get_my_tid(self):'
          - '        """determines this (self''s) thread id'
          - ''
          - '        CAREFUL: this function is executed in the context of the caller'
          - '        thread, to get the identity of the thread represented by this'
          - '        instance.'
          - '        """'
          - '        if not self.is_alive():'
          - '            msg = "the thread is not active"'
          - '            raise threading.ThreadError(msg)'
          - ''
          - '        # do we have it cached?'
          - '        if hasattr(self, "_thread_id"):'
          - '            return self._thread_id'
          - ''
          - '        # no, look for it in the _active dict'
          - '        for tid, tobj in threading._active.items():'
          - '            if tobj is self:'
          - '                self._thread_id = tid'
          - '                return tid'
          - ''
          - '        msg = "could not determine the thread''s id"'
          - '        raise RuntimeError(msg)'
        - end_line: 89
          name: raise_exc
          start_line: 66
          text:
          - '    def raise_exc(self, exctype):'
          - '        """Raises the given exception type in the context of this thread.'
          - ''
          - '        If the thread is busy in a system call (time.sleep(),'
          - '        socket.accept(), ...), the exception is simply ignored.'
          - ''
          - '        If you are sure that your exception should terminate the thread,'
          - '        one way to ensure that it works is:'
          - ''
          - '            t = ThreadWithExc( ... )'
          - '            ...'
          - '            t.raise_exc( SomeException )'
          - '            while t.isAlive():'
          - '                time.sleep( 0.1 )'
          - '                t.raise_exc( SomeException )'
          - ''
          - '        If the exception is to be caught by the thread, you need a way
            to'
          - '        check that your thread has caught it.'
          - ''
          - '        CAREFUL: this function is executed in the context of the'
          - '        caller thread, to raise an exception in the context of the'
          - '        thread represented by this instance.'
          - '        """'
          - '        _async_raise(self._get_my_tid(), exctype)'
        name: ThreadWithExc
        start_line: 32
        text:
        - 'class ThreadWithExc(threading.Thread):'
        - '    """A thread class that supports raising an exception in the thread
          from'
        - '    another thread.'
        - ''
        - '    This code is modified from the following SO answer:'
        - '    Author: Philippe F'
        - '    Posted: Nov 28, 2008'
        - '    URL: https://stackoverflow.com/a/325528/'
        - '    """'
        - ''
        - '    def _get_my_tid(self):'
        - '        """determines this (self''s) thread id'
        - ''
        - '        CAREFUL: this function is executed in the context of the caller'
        - '        thread, to get the identity of the thread represented by this'
        - '        instance.'
        - '        """'
        - '        if not self.is_alive():'
        - '            msg = "the thread is not active"'
        - '            raise threading.ThreadError(msg)'
        - ''
        - '        # do we have it cached?'
        - '        if hasattr(self, "_thread_id"):'
        - '            return self._thread_id'
        - ''
        - '        # no, look for it in the _active dict'
        - '        for tid, tobj in threading._active.items():'
        - '            if tobj is self:'
        - '                self._thread_id = tid'
        - '                return tid'
        - ''
        - '        msg = "could not determine the thread''s id"'
        - '        raise RuntimeError(msg)'
        - ''
        - '    def raise_exc(self, exctype):'
        - '        """Raises the given exception type in the context of this thread.'
        - ''
        - '        If the thread is busy in a system call (time.sleep(),'
        - '        socket.accept(), ...), the exception is simply ignored.'
        - ''
        - '        If you are sure that your exception should terminate the thread,'
        - '        one way to ensure that it works is:'
        - ''
        - '            t = ThreadWithExc( ... )'
        - '            ...'
        - '            t.raise_exc( SomeException )'
        - '            while t.isAlive():'
        - '                time.sleep( 0.1 )'
        - '                t.raise_exc( SomeException )'
        - ''
        - '        If the exception is to be caught by the thread, you need a way
          to'
        - '        check that your thread has caught it.'
        - ''
        - '        CAREFUL: this function is executed in the context of the'
        - '        caller thread, to raise an exception in the context of the'
        - '        thread represented by this instance.'
        - '        """'
        - '        _async_raise(self._get_my_tid(), exctype)'
      - end_line: 147
        methods:
        - end_line: 139
          name: __init__
          start_line: 137
          text:
          - '    def __init__(self, *args, **kwargs):'
          - '        super().__init__(*args, **kwargs)'
          - '        self.__dict__ = self'
        - end_line: 147
          name: from_nested_dicts
          start_line: 142
          text:
          - '    def from_nested_dicts(cls, data):'
          - '        """Construct nested AttrDicts from nested dictionaries."""'
          - '        if not isinstance(data, dict):'
          - '            return data'
          - '        else:'
          - '            return cls({key: cls.from_nested_dicts(data[key]) for key
            in data})'
        name: AttrDict
        start_line: 114
        text:
        - 'class AttrDict(dict):'
        - '    """Dictionary subclass whose entries can be accessed by attributes
          (as well'
        - '        as normally).'
        - ''
        - '    Author: https://stackoverflow.com/users/355230/martineau'
        - '    Posted June 26, 2016'
        - '    Post: https://stackoverflow.com/questions/38034377/'
        - ''
        - '    >>> obj = AttrDict()'
        - '    >>> obj[''test''] = ''hi'''
        - '    >>> print obj.test'
        - '    hi'
        - '    >>> del obj.test'
        - '    >>> obj.test = ''bye'''
        - '    >>> print obj[''test'']'
        - '    bye'
        - '    >>> print len(obj)'
        - '    1'
        - '    >>> obj.clear()'
        - '    >>> print len(obj)'
        - '    0'
        - '    """'
        - ''
        - '    def __init__(self, *args, **kwargs):'
        - '        super().__init__(*args, **kwargs)'
        - '        self.__dict__ = self'
        - ''
        - '    @classmethod'
        - '    def from_nested_dicts(cls, data):'
        - '        """Construct nested AttrDicts from nested dictionaries."""'
        - '        if not isinstance(data, dict):'
        - '            return data'
        - '        else:'
        - '            return cls({key: cls.from_nested_dicts(data[key]) for key in
          data})'
      functions:
      - end_line: 29
        name: _async_raise
        start_line: 9
        text:
        - 'def _async_raise(tid, exctype):'
        - '    """Raises an exception in the threads with id tid'
        - ''
        - '    This code is modified from the following SO answer:'
        - '    Author: Philippe F'
        - '    Posted: Nov 28, 2008'
        - '    URL: https://stackoverflow.com/a/325528/'
        - '    """'
        - '    if not inspect.isclass(exctype):'
        - '        msg = "Only types can be raised (not instances)"'
        - '        raise TypeError(msg)'
        - '    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(ctypes.c_long(tid),
          ctypes.py_object(exctype))'
        - '    if res == 0:'
        - '        msg = "invalid thread id"'
        - '        raise ValueError(msg)'
        - '    elif res != 1:'
        - '        # "if it returns a number greater than one, you''re in trouble,'
        - '        # and you should call it again with exc=NULL to revert the effect"'
        - '        ctypes.pythonapi.PyThreadState_SetAsyncExc(ctypes.c_long(tid),
          None)'
        - '        msg = "PyThreadState_SetAsyncExc failed"'
        - '        raise SystemError(msg)'
      - end_line: 111
        name: strip_ansi_sequences
        start_line: 110
        text:
        - 'def strip_ansi_sequences(string: str) -> str:'
        - '    return _ANSI_ESCAPE.sub("", string)'
      text:
      - from __future__ import annotations
      - ''
      - import ctypes
      - import inspect
      - import re
      - import threading
      - ''
      - ''
      - 'def _async_raise(tid, exctype):'
      - '    """Raises an exception in the threads with id tid'
      - ''
      - '    This code is modified from the following SO answer:'
      - '    Author: Philippe F'
      - '    Posted: Nov 28, 2008'
      - '    URL: https://stackoverflow.com/a/325528/'
      - '    """'
      - '    if not inspect.isclass(exctype):'
      - '        msg = "Only types can be raised (not instances)"'
      - '        raise TypeError(msg)'
      - '    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(ctypes.c_long(tid),
        ctypes.py_object(exctype))'
      - '    if res == 0:'
      - '        msg = "invalid thread id"'
      - '        raise ValueError(msg)'
      - '    elif res != 1:'
      - '        # "if it returns a number greater than one, you''re in trouble,'
      - '        # and you should call it again with exc=NULL to revert the effect"'
      - '        ctypes.pythonapi.PyThreadState_SetAsyncExc(ctypes.c_long(tid), None)'
      - '        msg = "PyThreadState_SetAsyncExc failed"'
      - '        raise SystemError(msg)'
      - ''
      - ''
      - 'class ThreadWithExc(threading.Thread):'
      - '    """A thread class that supports raising an exception in the thread from'
      - '    another thread.'
      - ''
      - '    This code is modified from the following SO answer:'
      - '    Author: Philippe F'
      - '    Posted: Nov 28, 2008'
      - '    URL: https://stackoverflow.com/a/325528/'
      - '    """'
      - ''
      - '    def _get_my_tid(self):'
      - '        """determines this (self''s) thread id'
      - ''
      - '        CAREFUL: this function is executed in the context of the caller'
      - '        thread, to get the identity of the thread represented by this'
      - '        instance.'
      - '        """'
      - '        if not self.is_alive():'
      - '            msg = "the thread is not active"'
      - '            raise threading.ThreadError(msg)'
      - ''
      - '        # do we have it cached?'
      - '        if hasattr(self, "_thread_id"):'
      - '            return self._thread_id'
      - ''
      - '        # no, look for it in the _active dict'
      - '        for tid, tobj in threading._active.items():'
      - '            if tobj is self:'
      - '                self._thread_id = tid'
      - '                return tid'
      - ''
      - '        msg = "could not determine the thread''s id"'
      - '        raise RuntimeError(msg)'
      - ''
      - '    def raise_exc(self, exctype):'
      - '        """Raises the given exception type in the context of this thread.'
      - ''
      - '        If the thread is busy in a system call (time.sleep(),'
      - '        socket.accept(), ...), the exception is simply ignored.'
      - ''
      - '        If you are sure that your exception should terminate the thread,'
      - '        one way to ensure that it works is:'
      - ''
      - '            t = ThreadWithExc( ... )'
      - '            ...'
      - '            t.raise_exc( SomeException )'
      - '            while t.isAlive():'
      - '                time.sleep( 0.1 )'
      - '                t.raise_exc( SomeException )'
      - ''
      - '        If the exception is to be caught by the thread, you need a way to'
      - '        check that your thread has caught it.'
      - ''
      - '        CAREFUL: this function is executed in the context of the'
      - '        caller thread, to raise an exception in the context of the'
      - '        thread represented by this instance.'
      - '        """'
      - '        _async_raise(self._get_my_tid(), exctype)'
      - ''
      - ''
      - '# From Martijn Pieters at https://stackoverflow.com/a/14693789'
      - '# 7-bit C1 ANSI sequences'
      - _ANSI_ESCAPE = re.compile(
      - '    r"""'
      - '    \x1B  # ESC'
      - '    (?:   # 7-bit C1 Fe (except CSI)'
      - '        [@-Z\\-_]'
      - '    |     # or [ for CSI, followed by a control sequence'
      - '        \['
      - '        [0-?]*  # Parameter bytes'
      - '        [ -/]*  # Intermediate bytes'
      - '        [@-~]   # Final byte'
      - '    )'
      - '""",'
      - '    re.VERBOSE,'
      - )
      - ''
      - ''
      - 'def strip_ansi_sequences(string: str) -> str:'
      - '    return _ANSI_ESCAPE.sub("", string)'
      - ''
      - ''
      - 'class AttrDict(dict):'
      - '    """Dictionary subclass whose entries can be accessed by attributes (as
        well'
      - '        as normally).'
      - ''
      - '    Author: https://stackoverflow.com/users/355230/martineau'
      - '    Posted June 26, 2016'
      - '    Post: https://stackoverflow.com/questions/38034377/'
      - ''
      - '    >>> obj = AttrDict()'
      - '    >>> obj[''test''] = ''hi'''
      - '    >>> print obj.test'
      - '    hi'
      - '    >>> del obj.test'
      - '    >>> obj.test = ''bye'''
      - '    >>> print obj[''test'']'
      - '    bye'
      - '    >>> print len(obj)'
      - '    1'
      - '    >>> obj.clear()'
      - '    >>> print len(obj)'
      - '    0'
      - '    """'
      - ''
      - '    def __init__(self, *args, **kwargs):'
      - '        super().__init__(*args, **kwargs)'
      - '        self.__dict__ = self'
      - ''
      - '    @classmethod'
      - '    def from_nested_dicts(cls, data):'
      - '        """Construct nested AttrDicts from nested dictionaries."""'
      - '        if not isinstance(data, dict):'
      - '            return data'
      - '        else:'
      - '            return cls({key: cls.from_nested_dicts(data[key]) for key in
        data})'
  environment:
    __init__.py:
      classes: []
      functions: []
      text: []
    __pycache__:
      __init__.cpython-39.pyc: {}
      swe_env.cpython-39.pyc: {}
      utils.cpython-39.pyc: {}
    swe_env.py:
      classes:
      - end_line: 105
        methods:
        - end_line: 105
          name: __post_init__
          start_line: 94
          text:
          - '    def __post_init__(self):'
          - '        if self.timeout is not None:'
          - '            default_logger.warning("The ''timeout'' argument is deprecated
            and has no effect.")'
          - '        if self.cache_task_images and self.container_name:'
          - '            msg = ('
          - '                "Not allowed to use persistent container with caching
            task images "'
          - '                "(probably doesn''t make sense and takes excessive space)."'
          - '            )'
          - '            raise ValueError(msg)'
          - '        if self.container_name is not None and self.container_name.strip()
            == "":'
          - '            msg = "Set container_name to None if you don''t want to use
            a persistent container."'
          - '            raise ValueError(msg)'
        name: EnvironmentArguments
        start_line: 55
        text:
        - 'class EnvironmentArguments(FrozenSerializable):'
        - '    """Configure data sources and setup instructions for the environment
          in which we solve the tasks."""'
        - ''
        - '    # Source of issue statement/problem statement. To run over a batch
          of issues: Path to a data file'
        - '    # (`json`, `jsonl`) or directory. To run over single issue: github
          issue url or path to markdown file'
        - '    # with problem statement or problem statement as text prefixed with
          `text://`.'
        - '    data_path: str'
        - '    # Name of the docker image to use for the environment. Defaults to
          sweagent/swe-agent:latest'
        - '    image_name: str = "sweagent/swe-agent:latest"'
        - '    # When running over SWE-bench issues: Specify the split to use.'
        - '    split: str = "dev"'
        - '    # Specify a branch name or a commit hash to checkout before running
          the task.'
        - '    # Only used when running over a single problem statement/issue.'
        - '    base_commit: str | None = None'
        - '    # Use a persistent container with this name. After every task, the
          container will be paused, but not removed.'
        - '    # This is useful for speedup when running multiple tasks from the same
          repositories in a row, as the repositories'
        - '    # will have already been cloned and the conda environments will have
          been installed.'
        - '    container_name: str | None = None'
        - '    # Try to install the environment before running the task.'
        - '    install_environment: bool = True'
        - '    # No effect, kept for backwards compatibility.'
        - '    timeout: int | None = None'
        - '    # Enable environment logger.'
        - '    verbose: bool = False'
        - '    # Do not use attempt to use a repository mirror from https://github.com/swe-bench.'
        - '    no_mirror: bool = False'
        - '    # Cache task images to speed up task initialization. This means that
          the environment will be saved as a'
        - '    # docker image for every repository, base commit, and setup combination.
          This uses quite a bit of disk space'
        - '    # but speeds up task initialization significantly when running over
          multiple issues from the same repository'
        - '    # (or using different models for the same issues).'
        - '    cache_task_images: bool = False'
        - '    # Custom environment setup. Currently only used when data_path points
          to a single issue.'
        - '    # This needs to be either a string pointing to a yaml file (with yaml,
          yml file extension)'
        - '    # or a shell script (with sh extension).'
        - '    # See https://princeton-nlp.github.io/SWE-agent/usage/cl_tutorial#environment-setup'
        - '    environment_setup: str | None = None'
        - '    # Only used when running on single issue. Path to local repository
          or github repository.'
        - '    repo_path: str = ""'
        - ''
        - '    def __post_init__(self):'
        - '        if self.timeout is not None:'
        - '            default_logger.warning("The ''timeout'' argument is deprecated
          and has no effect.")'
        - '        if self.cache_task_images and self.container_name:'
        - '            msg = ('
        - '                "Not allowed to use persistent container with caching task
          images "'
        - '                "(probably doesn''t make sense and takes excessive space)."'
        - '            )'
        - '            raise ValueError(msg)'
        - '        if self.container_name is not None and self.container_name.strip()
          == "":'
        - '            msg = "Set container_name to None if you don''t want to use
          a persistent container."'
        - '            raise ValueError(msg)'
      - end_line: 131
        methods:
        - end_line: 117
          name: on_init
          start_line: 116
          text:
          - '    def on_init(self) -> None:'
          - '        """Gets called when the hook is added"""'
        - end_line: 125
          name: on_copy_repo_started
          start_line: 119
          text:
          - '    def on_copy_repo_started(self, *, repo_type: str, repo_path: str)
            -> None:'
          - '        """Gets called when the repository is being cloned to the container'
          - ''
          - '        Args:'
          - '            repo_type: Type of repository. Either ''local'' or ''github'''
          - '            repo_path: Path to the repository'
          - '        """'
        - end_line: 128
          name: on_install_env_started
          start_line: 127
          text:
          - '    def on_install_env_started(self) -> None:'
          - '        """Called when we start installing the environment"""'
        - end_line: 131
          name: on_close
          start_line: 130
          text:
          - '    def on_close(self):'
          - '        """Called when the environment is closed"""'
        name: EnvHook
        start_line: 108
        text:
        - 'class EnvHook:'
        - '    """Hook to be used in `SWEEnv`.'
        - ''
        - '    Subclass this class, add functionality and add it with `SWEEEnv.add_hook(hook)`.'
        - '    This allows to inject custom functionality at different stages of the
          environment'
        - '    lifecycle, in particular to connect SWE-agent to a new interface (like
          a GUI).'
        - '    """'
        - ''
        - '    def on_init(self) -> None:'
        - '        """Gets called when the hook is added"""'
        - ''
        - '    def on_copy_repo_started(self, *, repo_type: str, repo_path: str) ->
          None:'
        - '        """Gets called when the repository is being cloned to the container'
        - ''
        - '        Args:'
        - '            repo_type: Type of repository. Either ''local'' or ''github'''
        - '            repo_path: Path to the repository'
        - '        """'
        - ''
        - '    def on_install_env_started(self) -> None:'
        - '        """Called when we start installing the environment"""'
        - ''
        - '    def on_close(self):'
        - '        """Called when the environment is closed"""'
      - end_line: 1199
        methods:
        - end_line: 191
          name: __init__
          start_line: 141
          text:
          - '    def __init__(self, args: EnvironmentArguments):'
          - '        super().__init__()'
          - '        t0 = time.perf_counter()'
          - '        self.args = args'
          - '        self.base_commit: str | None = None'
          - '        self.communicate_output: str | None = None'
          - '        self.container_name: str | None = args.container_name'
          - '        self.install_environment = args.install_environment'
          - '        self.logger = get_logger("SWEEnv")'
          - '        self.persistent = args.container_name is not None'
          - '        self.returncode: None | int = None'
          - '        if not self.args.verbose:'
          - '            # fixme: This creates problems if we have multiple instances
            of this class'
          - '            self.logger.disabled = True'
          - ''
          - '        #: The commit hash of the swe-agent repository'
          - '        self.commit_sha = None'
          - '        try:'
          - '            repo = Repo(REPO_ROOT, search_parent_directories=True)'
          - '            self.commit_sha = repo.head.object.hexsha'
          - '        except KeyboardInterrupt:'
          - '            raise'
          - '        except Exception as e:'
          - '            self.logger.exception("Failed to get commit hash for this
            repo: %s", str(e))'
          - ''
          - '        self._github_token: str = keys_config.get("GITHUB_TOKEN", "")  #
            type: ignore'
          - ''
          - '        # Load Task Instances'
          - '        self.data_path = self.args.data_path'
          - '        self.data = get_instances('
          - '            self.data_path,'
          - '            self.args.base_commit,'
          - '            self.args.split,'
          - '            token=self._github_token,'
          - '            repo_path=self.args.repo_path,'
          - '        )'
          - '        #: Instance we''re currently processing. Gets set in self.reset.'
          - '        self.record: dict[str, Any] | None = None'
          - "        self.logger.info(f\"\U0001F4BD Loaded dataset from {self.data_path}\"\
            )"
          - ''
          - '        # Establish connection with execution container'
          - '        self.image_name = args.image_name'
          - '        self.container_obj: docker.models.containers.Container | None
            = None'
          - '        self.container: subprocess.Popen | None = None'
          - '        self._reset_container()'
          - ''
          - '        self.idx = 0'
          - '        self.clean_multi_line_functions = lambda x: x'
          - '        self.hooks: list[EnvHook] = []'
          - ''
          - '        self.logger.debug("Environment initialization took %.2f seconds",
            time.perf_counter() - t0)'
        - end_line: 201
          name: _get_cached_task_image_name
          start_line: 193
          text:
          - '    def _get_cached_task_image_name(self) -> str:'
          - '        assert self.record is not None'
          - '        inputs: list[str] = ['
          - '            self.record["repo"],'
          - '            self.record["base_commit"],'
          - '            self.args.environment_setup or "no_setup",'
          - '        ]'
          - '        tag = hashlib.sha256("".join(inputs).encode()).hexdigest()[:50]'
          - '        return f"{self.cached_image_prefix}{tag}"'
        - end_line: 210
          name: add_hook
          start_line: 203
          text:
          - '    def add_hook(self, hook: EnvHook):'
          - '        """Add `EnvHook` to the environment.'
          - ''
          - '        This allows to inject custom functionality at different stages
            of the environment'
          - '        lifecycle, in particular to connect SWE-agent to a new interface
            (like a GUI).'
          - '        """'
          - '        hook.on_init()'
          - '        self.hooks.append(hook)'
        - end_line: 216
          name: _repo_name
          start_line: 213
          text:
          - '    def _repo_name(self) -> str:'
          - '        """Name of the local copy of the repository"""'
          - '        assert self.record is not None'
          - '        return self.record["repo"].replace("/", "__")'
        - end_line: 278
          name: _copy_repo
          start_line: 218
          text:
          - '    def _copy_repo(self) -> str:'
          - '        """Clone/copy repository/codebase in container'
          - ''
          - '        Returns:'
          - '            folder name of clone'
          - '        """'
          - '        assert self.container_obj is not None'
          - '        assert self.record is not None  # mypy'
          - '        for hook in self.hooks:'
          - '            hook.on_copy_repo_started(repo_type=self.record["repo_type"],
            repo_path=self.record["repo"])'
          - '        if self.record["repo_type"] == "local":'
          - '            copy_anything_to_container('
          - '                self.container_obj,'
          - '                self.record["repo"].removeprefix("local://"),'
          - '                "/" + self._repo_name,'
          - '            )'
          - '            self.communicate_with_handling('
          - '                input=f"chown -R root:root {self._repo_name}",'
          - '                error_msg="Failed to change permissions on copied repository",'
          - '            )'
          - '            return self._repo_name'
          - '        assert self.record["repo_type"] == "github"'
          - '        token_prefix = ""'
          - '        if self._github_token:'
          - '            token_prefix = f"{self._github_token}@"'
          - '        # fixme: This if statement is brittle and should probably be
            replaced with better logic'
          - '        if not self.args.no_mirror and self.record["problem_statement_source"]
            == "swe-bench":'
          - '            self.logger.info(f"{self._repo_name} not found in container,
            cloning...")'
          - '            clone_url = f"https://{token_prefix}github.com/swe-bench/{self._repo_name}.git"'
          - '        else:'
          - '            self.logger.info("Trying to clone from non-mirror...")'
          - '            clone_url = f"https://{token_prefix}github.com/{self.record[''repo'']}.git"'
          - '        clone_method = keys_config.get("SWE_AGENT_CLONE_METHOD", default="shallow",
            choices=["shallow", "full"])'
          - '        if len(self.data) > 1 or self.persistent:'
          - '            msg = "Falling back to full cloning method due to multiple
            instances or persistent container"'
          - '            clone_method = "full"'
          - '            self.logger.debug(msg)'
          - '        if clone_method == "full":'
          - '            self.communicate_with_handling('
          - '                input=f"git clone {clone_url} {self._repo_name}",'
          - '                error_msg="Failed to clone repository from conservative
            method",'
          - '                timeout_duration=LONG_TIMEOUT,'
          - '            )'
          - '        else:'
          - '            base_commit = self.record["base_commit"]'
          - '            self.communicate_with_handling('
          - '                input="&&".join('
          - '                    ('
          - '                        f"mkdir {self._repo_name}",'
          - '                        f"cd {self._repo_name}",'
          - '                        "git init",'
          - '                        f"git remote add origin {clone_url}",'
          - '                        f"git fetch --depth 1 origin {base_commit}",'
          - '                        "git checkout FETCH_HEAD",'
          - '                        "cd ..",'
          - '                    )'
          - '                ),'
          - '                error_msg="Failed to clone repository with fast method",'
          - '                timeout_duration=LONG_TIMEOUT,'
          - '            )'
          - '        return self._repo_name'
        - end_line: 392
          name: reset
          start_line: 280
          text:
          - '    def reset(self, index: int | None = None, apply_test_patch: bool
            = False) -> tuple[str | None, dict]:'
          - '        """'
          - '        Function to reset container between each task instance.'
          - ''
          - '        * Clones instance''s repository'
          - '        * Cleans repository of prior modifications'
          - '        * Resets environment variables'
          - '        * Check out base commit'
          - ''
          - '        Args:'
          - '            index: index of task instance to reset to'
          - ''
          - '        Returns:'
          - '            observation: output from container'
          - '            info: additional information (e.g. debugging information)'
          - '        """'
          - '        info = {}'
          - '        info["commit_sha"] = self.commit_sha'
          - ''
          - '        # Get task instance'
          - '        self.idx = index if index is not None else self.idx'
          - '        self.record = self.data[self.idx]'
          - '        self.idx += 1'
          - ''
          - '        # Set query, gold command'
          - '        self.base_commit = self.record["base_commit"]'
          - '        self.query = self.record["problem_statement"]'
          - '        self.reward = None'
          - ''
          - '        ### Reset Container ###'
          - ''
          - '        if self.args.cache_task_images:'
          - '            cached_image = self._get_cached_task_image_name()'
          - '            if image_exists(cached_image):'
          - '                self.logger.info(f"Restore environment from cached image
            {cached_image}")'
          - '                self.close()  # stop current container'
          - '                self._init_container(cached_image=cached_image)'
          - '                self.communicate("export $(xargs </.env)")'
          - '                envs = self.communicate("env")'
          - '                self.logger.debug(f"Environment variables restored from
            the image:\n{envs}\n")'
          - '                if apply_test_patch:'
          - '                    self._apply_test_patch()'
          - '                return None, info'
          - '            else:'
          - '                self.logger.info(f"Cached image {cached_image} not found,
            rebuilding task environment...")'
          - ''
          - '        # Clone repository if not already cloned'
          - '        self.communicate(input="cd /")'
          - '        folders = self.communicate(input="ls").split("\n")'
          - '        if self._repo_name not in folders:'
          - '            self._copy_repo()'
          - ''
          - '        # Clean repository of any modifications + Checkout base commit'
          - '        for cmd in ['
          - '            "echo -n > /root/files_to_edit.txt",'
          - '            f"cd {self._repo_name}",'
          - '            "export ROOT=$(pwd -P)",'
          - '            "git status",'
          - '            "git restore .",'
          - '            f"git reset --hard {self.base_commit}",'
          - '            "git clean -fdxq",'
          - '        ]:'
          - '            self.communicate_with_handling('
          - '                input=cmd,'
          - '                error_msg="Failed to clean repository",'
          - '            )'
          - ''
          - '        # Reset environment variables'
          - '        for cmd in ['
          - '            ''export CURRENT_FILE=""'','
          - '            "export CURRENT_LINE=0",'
          - '            "export SEARCH_RESULTS=()",'
          - '            "export SEARCH_FILES=()",'
          - '            "export SEARCH_INDEX=0",'
          - '        ]:'
          - '            self.communicate_with_handling('
          - '                input=cmd,'
          - '                error_msg="Failed to reset environment variables",'
          - '            )'
          - ''
          - '        # Set up environment'
          - '        self.communicate_with_handling('
          - '            "source /root/miniconda3/etc/profile.d/conda.sh",'
          - '            error_msg="Failed to source conda",'
          - '        )'
          - ''
          - '        system = self.communicate("uname -s").strip().lower()'
          - '        arch = self.communicate("uname -m").strip().lower()'
          - '        if system == "linux" and arch == "x86_64":'
          - '            self.communicate_with_handling('
          - '                "apt update; apt install build-essential -y",'
          - '                error_msg="Failed to install build-essential",'
          - '                timeout_duration=LONG_TIMEOUT,'
          - '            )'
          - ''
          - '        # Call install environment helper function if specified'
          - '        if self.install_environment:'
          - '            self.install_env()'
          - '        # Install mypy for linting purposes'
          - '        self.communicate_with_handling("pip install flake8", error_msg="Failed
            to install flake8 (lint library)")'
          - ''
          - '        if self.args.cache_task_images:'
          - '            envs = self.communicate("env")'
          - '            self.logger.debug(f"Environment variables to save:\n{envs}\n")'
          - '            self.communicate("env >> /.env")'
          - '            assert self.container_obj is not None  # mypy'
          - '            self.container_obj.commit(cached_image)'
          - '            self.logger.info(f"Container with environment {self.container_obj.id}
            cached as image {cached_image}")'
          - ''
          - '        if apply_test_patch:'
          - '            self._apply_test_patch()'
          - '        # Write any metadata to info if necessary'
          - '        return None, info'
        - end_line: 411
          name: _apply_test_patch
          start_line: 394
          text:
          - '    def _apply_test_patch(self):'
          - '        """'
          - '        Apply test patch for oracle setting'
          - '        """'
          - '        assert self.record is not None'
          - '        path_to_patch = "test.patch"'
          - '        with open(path_to_patch, "w") as f:'
          - '            f.write(self.record["test_patch"])'
          - '        subprocess.run('
          - '            f"docker cp {path_to_patch} {self.container_name}:/root/test.patch",'
          - '            shell=True,'
          - '            check=False,'
          - '        )'
          - '        self.communicate_with_handling('
          - '            input="git apply /root/test.patch",'
          - '            error_msg="Failed to apply test patch correctly",'
          - '        )'
          - '        os.remove(path_to_patch)'
        - end_line: 490
          name: step
          start_line: 413
          text:
          - '    def step(self, action: str) -> tuple[str | None, int, bool, dict]:'
          - '        """'
          - '        Runs an action proposed by the agent in the environment and returns
            the corresponding output.'
          - ''
          - '        Args:'
          - '            action: command to run in bash shell'
          - ''
          - '        Returns:'
          - '            observation:  output from container'
          - '            reward: value between 0 and 1 quantifying correctness of
            output + environment state'
          - '            done: whether task is over'
          - '            info: additional information (e.g. debugging information)'
          - '        """'
          - '        info = {}'
          - ''
          - '        observation = ""'
          - '        # Handle special actions'
          - '        if action.strip() == "skip":'
          - '            observation = "Skipped"'
          - '            info["exit_status"] = "skipped"'
          - '            return observation, 0, True, info'
          - '        if action in {"exit_context", "exit_cost", "exit_error", "exit_format",
            "exit_api"}:'
          - '            try:'
          - '                observation = self.communicate(input="submit")'
          - '                submission = self.get_submission(observation)'
          - '                assert submission is not None and submission.strip()
            != "", AssertionError("No submission found.")'
          - '                self.logger.info(f"Found submission: {submission}")'
          - '                info["exit_status"] = f"submitted ({action})"'
          - '                info["submission"] = submission'
          - '                observation = "Exited (autosubmitted)"'
          - '                self.logger.info("Exiting with autosubmission")'
          - '                return observation, 0, True, info'
          - '            except KeyboardInterrupt:'
          - '                raise'
          - '            except:'
          - '                observation = "Exited"'
          - '                info["exit_status"] = action'
          - '                return observation, 0, True, info'
          - ''
          - '        # Attempt to run action in container'
          - '        observation = ""'
          - '        try:'
          - '            observation = self.communicate(input=action, timeout_duration=AGENT_ACTION_TIMEOUT,
            set_last_action=True)'
          - '        except TimeoutError:'
          - '            try:'
          - '                self.interrupt()'
          - '                observation += "\nEXECUTION TIMED OUT"'
          - '            except RuntimeError as e:'
          - '                observation += "\nEXECUTION TIMED OUT AND INTERRUPT FAILED.
            RESTARTING PROCESS."'
          - '                info["exit_status"] = "early_exit"'
          - '                self.logger.warning(f"Failed to interrupt container:
            {e}\nRESTARTING PROCESS.")'
          - '                self.reset_container()'
          - '                return observation, 0, True, info'
          - '        except RuntimeError as e:'
          - '            observation += "\nCOMMAND FAILED TO EXECUTE. RESTARTING PROCESS."'
          - '            info["exit_status"] = "early_exit"'
          - '            self.logger.warning(f"Failed to execute command: {e}\nRESTARTING
            PROCESS.")'
          - '            self.reset_container()'
          - '            return observation, 0, True, info'
          - '        except BrokenPipeError as e:'
          - '            observation += "\nBROKEN PIPE ERROR. RESTARTING PROCESS."'
          - '            info["exit_status"] = "early_exit"'
          - '            self.logger.error(f"Broken pipe error: {e}\nRESTARTING PROCESS.")'
          - '            self.reset_container()'
          - '            return observation, 0, True, info'
          - '        except Exception:'
          - '            observation += "\nEXECUTION FAILED OR COMMAND MALFORMED"'
          - '            self.logger.exception("Unknown exception")'
          - ''
          - '        # Record submission and end episode if `submit` keyword found'
          - '        submission = self.get_submission(observation)'
          - '        if submission is not None:'
          - '            self.logger.info(f"Found submission: {submission}")'
          - '            info["exit_status"] = "submitted"'
          - '            info["submission"] = submission if submission.strip() !=
            "" else None'
          - '            observation = submission if submission.strip() != "" else
            None'
          - '            return observation, 0, True, info'
          - '        return observation, 0, False, info'
        - end_line: 543
          name: close
          start_line: 492
          text:
          - '    def close(self) -> None:'
          - '        """'
          - '        Handle environment shutdown'
          - '        """'
          - '        self.logger.info("Beginning environment shutdown...")'
          - '        try:'
          - '            self.communicate(input="exit")'
          - '        except KeyboardInterrupt:'
          - '            raise'
          - '        except:'
          - '            self.logger.warning("Errors when exiting container", exc_info=True)'
          - '        assert self.container is not None  # mypy'
          - '        self.container.terminate()'
          - '        if self.container_obj is None:'
          - '            pass'
          - '        elif self.persistent:'
          - '            # stopping is Podman specific, but doesn''t hurt to include'
          - '            # https://stackoverflow.com/a/32428199/'
          - '            # Want to avoid https://github.com/princeton-nlp/SWE-agent/issues/496'
          - '            # Note that container_obj.status might not be updated throughout
            the container'
          - '            # lifecycle, so let''s get the container_obj again'
          - '            assert self.container_name'
          - '            try:'
          - '                self.container_obj = docker.from_env().containers.get(self.container_name)'
          - '            except Exception as e:'
          - '                self.logger.warning(f"Failed to get fresh container object:
            {e}", exc_info=True)'
          - '            if self.container_obj.status not in {"paused", "exited",
            "dead", "stopping"}:'
          - '                try:'
          - '                    self.container_obj.pause()'
          - '                except Exception:'
          - '                    self.logger.warning("Failed to pause container.",
            exc_info=True)'
          - '                except KeyboardInterrupt:'
          - '                    raise'
          - '                else:'
          - '                    self.logger.info("Agent container paused")'
          - '            else:'
          - '                self.logger.info(f"Agent container status: {self.container_obj.status}")'
          - '        else:'
          - '            try:'
          - '                self.container_obj.remove(force=True)'
          - '            except KeyboardInterrupt:'
          - '                raise'
          - '            except docker.errors.NotFound:'
          - '                # We already tried to exit the container, so it''s actually
            good if'
          - '                # it''s not found'
          - '                pass'
          - '            except Exception:'
          - '                self.logger.warning("Failed to remove container", exc_info=True)'
          - '            else:'
          - '                self.logger.info("Agent container stopped")'
          - '        for hook in self.hooks:'
          - '            hook.on_close()'
        - end_line: 558
          name: _reset_container
          start_line: 547
          text:
          - '    def _reset_container(self) -> None:'
          - '        if self.container is not None:'
          - '            try:'
          - '                self.container.terminate()'
          - '            except KeyboardInterrupt:'
          - '                raise'
          - '            except:'
          - '                self.logger.warning("Failed to terminate container",
            exc_info=True)'
          - '            else:'
          - '                self.logger.debug("Terminated container")'
          - '        self._init_container()'
          - '        self._init_scripts()'
        - end_line: 564
          name: reset_container
          start_line: 560
          text:
          - '    def reset_container(self) -> None:'
          - '        self.close()'
          - '        self.container = None'
          - '        self.container_obj = None'
          - '        self._reset_container()'
        - end_line: 575
          name: _get_container_name
          start_line: 567
          text:
          - '    def _get_container_name(image_name: str) -> str:'
          - '        """Return name of container"""'
          - '        process_id = str(os.getpid())'
          - '        current_time = str(datetime.datetime.now())'
          - '        unique_string = current_time + process_id'
          - '        hash_object = hashlib.sha256(unique_string.encode())'
          - '        image_name_sanitized = image_name.replace("/", "-")'
          - '        image_name_sanitized = image_name_sanitized.replace(":", "-")'
          - '        return f"{image_name_sanitized}-{hash_object.hexdigest()[:10]}"'
        - end_line: 618
          name: _init_container
          start_line: 577
          text:
          - '    def _init_container(self, cached_image: str | None = None) -> None:'
          - '        """'
          - '        Handles container initialization. Defines container name and
            creates it.'
          - '        If cached_image is provided, it will use that image name instead
            of the default.'
          - '        """'
          - '        image_name = self.image_name'
          - '        if cached_image is not None:'
          - '            image_name = cached_image'
          - '            self.logger.info(f"Using cached image: {image_name}")'
          - '        if self.persistent:'
          - '            assert self.container_name is not None'
          - '        else:'
          - '            # Make sure that we get a new container name just in case
            removing didn''t work.'
          - '            # Might be a fix for https://github.com/princeton-nlp/SWE-agent/issues/451'
          - '            self.container_name = self._get_container_name(image_name)'
          - '        self.container, self.parent_pids = get_container(self.container_name,
            image_name, persistent=self.persistent)'
          - '        try:'
          - '            client = docker.from_env(timeout=600)'
          - '        except docker.errors.DockerException as e:'
          - '            if "Error while fetching server API version" in str(e):'
          - '                msg = "Docker is not running. Please start Docker and
            try again."'
          - '            else:'
          - '                msg = "Unknown docker exception occurred. Are you sure
            docker is running?"'
          - '            raise RuntimeError(msg) from e'
          - '        t0 = time.time()'
          - '        self.container_obj = None'
          - '        while time.time() - t0 < 60:'
          - '            try:'
          - '                self.container_obj = client.containers.get(self.container_name)'
          - '            except docker.errors.NotFound:'
          - '                self.logger.debug("Couldn''t find container. Let''s wait
            and retry.")'
          - '                time.sleep(1)'
          - '            else:'
          - '                break'
          - '        else:'
          - '            print(f"{self.persistent=}")'
          - '            available_containers = client.containers.list(all=True)'
          - '            available_containers_info = json.dumps([str(c.attrs) for
            c in available_containers], indent=2)'
          - '            print(available_containers_info)'
          - '            msg = "Failed to get container object."'
          - '            raise RuntimeError(msg)'
          - "        self.logger.info(\"\U0001F331 Environment Initialized\")"
        - end_line: 639
          name: _init_scripts
          start_line: 620
          text:
          - '    def _init_scripts(self):'
          - '        """'
          - '        Initialize custom commands within container'
          - '        """'
          - '        self.communicate_with_handling('
          - '            "source /root/.bashrc",'
          - '            error_msg="Failed to source .bashrc",'
          - '        )'
          - '        self.communicate_with_handling('
          - '            "mkdir -p /root/commands",'
          - '            error_msg="Failed to create commands directory",'
          - '        )'
          - '        self.communicate_with_handling('
          - '            "touch /root/commands/__init__.py",'
          - '            error_msg="Failed to create __init__.py",'
          - '        )'
          - '        self.communicate_with_handling('
          - '            "export PATH=$PATH:/root/commands",'
          - '            error_msg="Failed to add commands directory to PATH",'
          - '        )'
        - end_line: 688
          name: _communicate_experimental
          start_line: 641
          text:
          - '    def _communicate_experimental('
          - '        self,'
          - '        input: str,'
          - '        timeout_duration: int | float = 25,'
          - '    ) -> str:'
          - '        """Experimental version of `_communicate`"""'
          - '        assert self.container is not None'
          - '        # Sleep to ensure that the exit code is in the last line'
          - '        # See https://github.com/princeton-nlp/SWE-agent/issues/595'
          - '        command_suffix = ('
          - '            f''EXITSTATUS="$?"; sleep 0.01; echo {PROCESS_DONE_MARKER_START}$EXITSTATUS{PROCESS_DONE_MARKER_END}\n'''
          - '        )'
          - '        try:'
          - '            self.returncode = None'
          - '            cmd = input if input.endswith("\n") else input + "\n"'
          - '            cmd += command_suffix'
          - '            os.write(self.container.stdin.fileno(), cmd.encode())'
          - '            time.sleep(0.03)'
          - '            self.container.stdin.flush()'
          - '        except BrokenPipeError:'
          - '            traceback.print_exc()'
          - '            self.logger.error("Failed to communicate with container.
            Check docker logs for more information.")'
          - '            msg = "Failed to communicate with container"'
          - '            raise RuntimeError(msg)'
          - ''
          - '        try:'
          - '            buffer, exit_code = read_with_timeout_experimental(self.container,
            timeout_duration)'
          - '        except Exception:'
          - '            msg = f"Read with timeout failed on input:\n---\n{input}\n---"'
          - '            self.logger.error(msg)'
          - '            raise'
          - '        if exit_code == "$EXITSTATUS":'
          - '            # this sometimes happens if the command badly fails'
          - '            # for example if you just try to run python with no arguments'
          - '            # in this case, the error message is usually also garbage,
            so let''s set'
          - '            # something new.'
          - '            # See https://github.com/princeton-nlp/SWE-agent/issues/630'
          - '            buffer = ('
          - '                "Unkknown error occurred when running the command. Please
            double check syntax "'
          - '                "and that you''re not running an interactive command."'
          - '            )'
          - '            self.logger.warning("Couldn''t get real exit code. Setting
            it to 999")'
          - '            exit_code = 999'
          - '        elif not exit_code.isdigit():'
          - '            msg = f"Failed to get exit code. Output:\n---\n{buffer}\n---"'
          - '            raise RuntimeError(msg)'
          - '        self.returncode = int(exit_code)'
          - '        return buffer'
        - end_line: 731
          name: _communicate
          start_line: 690
          text:
          - '    def _communicate('
          - '        self,'
          - '        input: str,'
          - '        timeout_duration: int | float = 25,'
          - '    ) -> str:'
          - '        """Runs command in container and returns output'
          - ''
          - '        Args:'
          - '            input: command to run in container'
          - '            timeout_duration: duration to wait for output'
          - '        """'
          - '        assert self.container is not None'
          - '        communicate_method = keys_config.get('
          - '            "SWE_AGENT_COMMUNICATE_METHOD", default="end-marker", choices=["end-marker",
            "processes"]'
          - '        )'
          - '        if communicate_method == "end-marker":'
          - '            return self._communicate_experimental(input, timeout_duration)'
          - '        try:'
          - '            self.returncode = None'
          - '            cmd = input if input.endswith("\n") else input + "\n"'
          - '            os.write(self.container.stdin.fileno(), cmd.encode())'
          - '            time.sleep(0.1)'
          - '            self.container.stdin.flush()'
          - '        except BrokenPipeError:'
          - '            traceback.print_exc()'
          - '            self.logger.error("Failed to communicate with container.
            Check docker logs for more information.")'
          - '            msg = "Failed to communicate with container"'
          - '            raise RuntimeError(msg)'
          - '        try:'
          - '            buffer = read_with_timeout(self.container, self.get_pids,
            timeout_duration)'
          - '            self.container.stdin.write("echo $?\n")'
          - '            time.sleep(0.1)'
          - '            self.container.stdin.flush()'
          - '            exit_code = read_with_timeout(self.container, self.get_pids,
            5).strip()'
          - '        except Exception as e:'
          - '            self.logger.error(f"Read with timeout failed on input:\n---\n{input}\n---")'
          - '            raise e'
          - '        if not exit_code.isdigit():'
          - '            msg = f"Failed to get exit code. Output:\n---\n{buffer}\n---"'
          - '            raise RuntimeError(msg)'
          - '        self.returncode = int(exit_code)'
          - '        return buffer'
        - end_line: 742
          name: _check_syntax
          start_line: 733
          text:
          - '    def _check_syntax(self, input: str) -> tuple[str, bool]:'
          - '        """'
          - '        Check syntax of command.'
          - ''
          - '        Returns:'
          - '            output: Output of the command'
          - '            success: whether the exit code was 0'
          - '        """'
          - '        output = self._communicate(f"/bin/bash -n <<''EOF''\n{input}\nEOF\n")'
          - '        return output, self.returncode == 0'
        - end_line: 778
          name: communicate
          start_line: 744
          text:
          - '    def communicate(self, input: str, timeout_duration: int | float =
            25, *, set_last_action: bool = False) -> str:'
          - '        """'
          - '        Sends input to container and returns output'
          - ''
          - '        Args:'
          - '            input: input to send to container'
          - '            timeout_duration: duration to wait for output'
          - '            set_last_action: whether to set the LAST_ACTION environment
            variable'
          - ''
          - '        Returns:'
          - '            output: output from container'
          - '        """'
          - '        if input.strip() != "exit":'
          - '            self.logger.log(logging.TRACE, "Input:\n%s", input)  # type:
            ignore'
          - '            output, valid = self._check_syntax(input)'
          - '            if not valid:'
          - '                return output  # shows syntax errors'
          - '            output = self._communicate('
          - '                input,'
          - '                timeout_duration=timeout_duration,'
          - '            )'
          - '            self.logger.log(logging.TRACE, "Output:\n%s", output)  #
            type: ignore'
          - '            self.communicate_output = output'
          - '            if set_last_action:'
          - '                # Cannot merge this with last command, because of multiline
            command'
          - '                # handling.'
          - '                last_action_string = shlex.quote(input.strip())'
          - '                input = f"export LAST_ACTION={last_action_string}"'
          - '                self._communicate(input, timeout_duration=5)'
          - '            return output'
          - '        else:'
          - '            self.container.terminate()'
          - '            self.returncode = 0'
          - '            self.communicate_output = ""'
          - '            return ""'
        - end_line: 798
          name: communicate_with_handling
          start_line: 780
          text:
          - '    def communicate_with_handling(self, input: str, error_msg: str, timeout_duration:
            int | float = 25) -> str:'
          - '        """'
          - '        Wrapper for communicate function that raises error if return
            code is non-zero'
          - ''
          - '        Args:'
          - '            input: input to send to container'
          - '            error_msg: error message to raise if return code is non-zero'
          - '            timeout_duration: duration to wait for output'
          - ''
          - '        Returns:'
          - '            output: output from container'
          - '        """'
          - '        logs = self.communicate(input, timeout_duration=timeout_duration)'
          - '        if self.returncode != 0:'
          - '            self.logger.error(f"{error_msg}: {logs}")'
          - '            self.close()'
          - '            msg = f"{error_msg}: {logs}"'
          - '            raise RuntimeError(msg)'
          - '        return logs'
        - end_line: 806
          name: get_available_actions
          start_line: 800
          text:
          - '    def get_available_actions(self) -> list[str]:'
          - '        """'
          - '        Returns list of available actions in current environment state'
          - ''
          - '        Currently not in use.'
          - '        """'
          - '        return []'
        - end_line: 823
          name: get_pids
          start_line: 808
          text:
          - '    def get_pids(self, all_pids: bool = False) -> list[str]:'
          - '        """'
          - '        Gets list of processes running inside docker container'
          - ''
          - '        Args:'
          - '            all_pids: whether to return all pids, or whether to exclude
            ps'
          - '                and parent PIDs'
          - ''
          - '        Returns:'
          - '            list of PIDs'
          - '        """'
          - '        pids = self.container_obj.exec_run("ps -eo pid,comm --no-headers").output.decode().split("\n")'
          - '        pids = [x.split() for x in pids if x]'
          - '        if not all_pids:'
          - '            pids = [x for x in pids if x[1] != "ps" and x[0] not in self.parent_pids]'
          - '        return pids'
        - end_line: 839
          name: get_submission
          start_line: 825
          text:
          - '    def get_submission(self, output: str) -> str | None:'
          - '        """'
          - '        Function for extracting diff patch submission at the end of an
            episode.'
          - ''
          - '        Args:'
          - '            output: `submit` observation'
          - ''
          - '        Returns:'
          - '            submission: diff patch submission'
          - '        """'
          - '        pattern = r"\<\<SUBMISSION\|\|(.*)\|\|SUBMISSION\>\>"'
          - '        match = re.search(pattern, output, re.DOTALL)'
          - '        if match is None:'
          - '            return None'
          - '        return match.group(1)'
        - end_line: 853
          name: run_shell_script
          start_line: 841
          text:
          - '    def run_shell_script(self, script_path: Path, *, location: str) ->
            None:'
          - '        """Run custom script supplied by user at `script_path`'
          - ''
          - '        Args:'
          - '            script_path: path to script file'
          - '            location: location of script file ''host'' or ''container'''
          - '        """'
          - '        if location == "host":'
          - '            return self._run_shell_script_host(script_path)'
          - '        elif location == "container":'
          - '            raise NotImplementedError'
          - '        msg = f"Invalid ''location'': {location}"'
          - '        raise ValueError(msg)'
        - end_line: 866
          name: _run_shell_script_host
          start_line: 855
          text:
          - '    def _run_shell_script_host(self, script_path: Path) -> None:'
          - '        """Run shell script file (located on host) in container"""'
          - '        if not script_path.is_file():'
          - '            msg = f"Script not found at {script_path}"'
          - '            raise FileNotFoundError(msg)'
          - '        shell_commands = Path(script_path).read_text().splitlines(keepends=True)'
          - '        for i, cmd in enumerate(shell_commands):'
          - '            self.communicate_with_handling('
          - '                cmd,'
          - '                error_msg=f"Failed to execute line {i}.",'
          - '                timeout_duration=LONG_TIMEOUT,'
          - '            )'
        - end_line: 903
          name: _get_install_configs
          start_line: 868
          text:
          - '    def _get_install_configs(self) -> dict | None:'
          - '        """Return config for environment setup"""'
          - '        assert self.record is not None  # mypy'
          - '        if ('
          - '            self.record["problem_statement_source"] != "swe-bench" or
            self.record["repo_type"] == "local"'
          - '        ) and self.args.environment_setup is None:'
          - '            self.logger.warning('
          - '                "install_environment is set to True, but the data path
            is a GitHub URL "'
          - '                "without an environment config file (environment_config
            key/flag). "'
          - '                "Skipping conda environment installation.",'
          - '            )'
          - '            return None'
          - '        if self.args.environment_setup is not None:'
          - '            assert isinstance(self.args.environment_setup, (str, os.PathLike))'
          - '            if Path(self.args.environment_setup).suffix in [".yml", ".yaml"]:'
          - '                try:'
          - '                    return yaml.safe_load(Path(self.args.environment_setup).read_text())'
          - '                except Exception as e:'
          - '                    msg = "Environment config file needs to be a yaml
            file"'
          - '                    raise ValueError(msg) from e'
          - '            elif Path(self.args.environment_setup).suffix == ".sh":'
          - '                return {'
          - '                    "shell_script_path": self.args.environment_setup,'
          - '                }'
          - '            else:'
          - '                msg = "Environment config file needs to be a yaml file
            or shell script"'
          - '                raise ValueError(msg)'
          - '        else:'
          - '            try:'
          - '                return MAP_REPO_VERSION_TO_SPECS[self.record["repo"]][str(self.record["version"])]'
          - '            except KeyError as e:'
          - '                msg = ('
          - '                    "Tried to look up install configs in swe-bench, but
            failed. "'
          - '                    "You can set a custom environment config with the
            environment_config key/flag."'
          - '                )'
          - '                raise ValueError(msg) from e'
        - end_line: 907
          name: _conda_environment_exists
          start_line: 905
          text:
          - '    def _conda_environment_exists(self, env_name: str) -> bool:'
          - '        env_check = self.communicate(f"conda env list | grep {env_name}",
            timeout_duration=LONG_TIMEOUT)'
          - '        return env_check.strip() != ""'
        - end_line: 1050
          name: install_env
          start_line: 909
          text:
          - '    def install_env(self) -> None:'
          - '        """'
          - '        Creates conda environment and installs third party dependencies
            to allow code execution'
          - '        """'
          - '        t0 = time.perf_counter()'
          - '        for hook in self.hooks:'
          - '            hook.on_install_env_started()'
          - '        install_configs = self._get_install_configs()'
          - '        if not install_configs:'
          - '            return'
          - '        if "shell_script_path" in install_configs:'
          - '            assert len(install_configs) == 1'
          - '            self.run_shell_script(Path(install_configs["shell_script_path"]),
            location="host")'
          - '            return'
          - '        assert self.record is not None  # mypy'
          - '        # Create environment if does not exist yet'
          - '        env_name = f"{self._repo_name}__{self.record[''version'']}"'
          - '        if not self._conda_environment_exists(env_name):'
          - '            self.logger.info(f"{env_name} conda env not found, creating...")'
          - '            packages = install_configs.get("packages", "")'
          - '            if packages == "requirements.txt":'
          - '                # Create conda environment'
          - '                self.communicate_with_handling('
          - '                    f"conda create -n {env_name} python={install_configs[''python'']}
            -y",'
          - '                    error_msg="Failed to create conda environment",'
          - '                    timeout_duration=LONG_TIMEOUT,'
          - '                )'
          - '                self.logger.debug("Created conda environment")'
          - '                # Write reqs to requirements.txt in docker container'
          - '                content_reqs = get_requirements(self.record)'
          - '                copy_file_to_container(self.container_obj, content_reqs,
            PATH_TO_REQS)'
          - '                # Create conda environment + install reqs'
          - '                self.communicate_with_handling('
          - '                    f"conda activate {env_name}",'
          - '                    error_msg="Failed to activate conda environment",'
          - '                )'
          - '                self.communicate_with_handling('
          - '                    f"pip install -r {PATH_TO_REQS}",'
          - '                    error_msg="Failed to install requirements.txt",'
          - '                    timeout_duration=LONG_TIMEOUT,'
          - '                )'
          - '                self.logger.debug("Installed requirements from requirements.txt")'
          - '                self.communicate(f"rm {PATH_TO_REQS}")'
          - '            elif packages == "environment.yml":'
          - '                # Write environment.yml to file'
          - '                content_env_yml = get_environment_yml(self.record, env_name)'
          - '                # Hotfix for'
          - '                if not install_configs.get("no_use_env"):'
          - '                    content_env_yml += f''\n  - python={install_configs["python"]}\n'''
          - '                copy_file_to_container(self.container_obj, content_env_yml,
            PATH_TO_ENV_YML)'
          - '                if install_configs.get("no_use_env"):'
          - '                    # Create conda environment'
          - '                    self.communicate_with_handling('
          - '                        f"conda create -c conda-forge -n {env_name} python={install_configs[''python'']}
            -y",'
          - '                        error_msg="Failed to create conda environment",'
          - '                        timeout_duration=LONG_TIMEOUT,'
          - '                    )'
          - '                    self.logger.debug("Created conda environment")'
          - '                    # Install packages'
          - '                    self.communicate_with_handling('
          - '                        f"conda env update -f {PATH_TO_ENV_YML}",'
          - '                        error_msg="Failed to install environment.yml",'
          - '                        timeout_duration=LONG_TIMEOUT,'
          - '                    )'
          - '                    self.logger.debug("Installed packages from environment.yml")'
          - '                else:'
          - '                    # Create environment + install packages'
          - '                    self.communicate_with_handling('
          - '                        f"conda env create --file {PATH_TO_ENV_YML}",'
          - '                        error_msg="Failed to create conda environment
            with environment.yml",'
          - '                        timeout_duration=LONG_TIMEOUT,'
          - '                    )'
          - '                    self.logger.debug("Created conda environment with
            environment.yml")'
          - '                self.communicate(f"rm {PATH_TO_ENV_YML}")'
          - '            else:'
          - '                python_env = f"python{install_configs[''python'']}"'
          - '                if self._conda_environment_exists(python_env):'
          - '                    self.communicate_with_handling('
          - '                        f"conda create --name {env_name} --clone {python_env}",'
          - '                        error_msg="Failed to clone conda environment",'
          - '                        timeout_duration=LONG_TIMEOUT,'
          - '                    )'
          - '                    self.logger.debug("Cloned python conda environment")'
          - '                else:'
          - '                    self.logger.debug(f"Could not find {python_env},
            creating new environment")'
          - '                    self.communicate_with_handling('
          - '                        f"conda create -n {env_name} python={install_configs[''python'']}
            -y",'
          - '                        error_msg="Failed to create conda environment",'
          - '                        timeout_duration=LONG_TIMEOUT,'
          - '                    )'
          - '                self.communicate_with_handling('
          - '                    f"conda activate {env_name}",'
          - '                    error_msg="Failed to activate conda environment",'
          - '                )'
          - '                if packages.strip():'
          - '                    self.communicate_with_handling('
          - '                        f"conda install {packages} -y",'
          - '                        error_msg="Failed to install packages",'
          - '                        timeout_duration=LONG_TIMEOUT,'
          - '                    )'
          - '                    self.logger.debug("Installed conda packages")'
          - '            # Install extra pip packages if specified'
          - '            if install_configs.get("pip_packages"):'
          - '                self.communicate_with_handling('
          - '                    f"source activate {env_name} && pip install {'' ''.join(install_configs[''pip_packages''])}",'
          - '                    error_msg="Failed to install pip packages",'
          - '                    timeout_duration=LONG_TIMEOUT,'
          - '                )'
          - '                self.logger.debug("Installed extra pip dependencies")'
          - ''
          - '        # Activate environment'
          - '        self.communicate_with_handling(f"conda activate {env_name}",
            error_msg="Failed to activate conda environment")'
          - ''
          - '        # Install repo at base commit'
          - '        if install_configs.get("pre_install"):'
          - '            self.logger.info("Running pre-install commands...")'
          - '            for pre_install_cmd in install_configs["pre_install"]:'
          - '                self.communicate_with_handling('
          - '                    pre_install_cmd,'
          - '                    error_msg="Pre-install commands failed to execute
            successfully",'
          - '                    timeout_duration=LONG_TIMEOUT,'
          - '                )'
          - '            self.logger.debug("Ran pre-install commands")'
          - '        self.logger.info(f"Installing {self._repo_name} at base commit...")'
          - '        if install_configs.get("install"):'
          - '            install_cmd = install_configs["install"]'
          - '            self.communicate_with_handling('
          - '                install_cmd,'
          - '                error_msg="Install command failed to execute successfully",'
          - '                timeout_duration=LONG_TIMEOUT,'
          - '            )'
          - '            self.logger.debug("Ran install command")'
          - '        if install_configs.get("post_install"):'
          - '            self.logger.info("Running post-install commands...")'
          - '            for post_install_cmd in install_configs["post_install"]:'
          - '                self.communicate_with_handling('
          - '                    post_install_cmd,'
          - '                    error_msg="Post-install commands failed to execute
            successfully",'
          - '                )'
          - '            self.logger.debug("Ran post-install commands")'
          - ''
          - '        self.logger.info("Installation step took %.2f seconds", time.perf_counter()
            - t0)'
        - end_line: 1078
          name: add_commands
          start_line: 1052
          text:
          - '    def add_commands(self, commands: list[dict]) -> None:'
          - '        """'
          - '        Adds custom commands to container'
          - '        """'
          - '        for command in commands:'
          - '            name = command["name"]'
          - '            contents = command["contents"]'
          - '            copy_file_to_container(self.container_obj, contents, f"/root/commands/{name}")'
          - '            if command["type"] == "source_file":'
          - '                self.communicate_with_handling('
          - '                    f"source /root/commands/{name}",'
          - '                    error_msg=('
          - '                        f"Failed to source {name}. If you meant to make
            a script,"'
          - '                        " start the file with a shebang (e.g. #!/usr/bin/env
            python)."'
          - '                    ),'
          - '                )'
          - '            elif command["type"] == "script":'
          - '                self.communicate_with_handling('
          - '                    f"chmod +x /root/commands/{name}",'
          - '                    error_msg=f"Failed to chmod {name}",'
          - '                )'
          - '            elif command["type"] == "utility":'
          - '                # nothing to do for utility scripts'
          - '                pass'
          - '            else:'
          - '                msg = f"Invalid command type: {command[''type'']}"'
          - '                raise ValueError(msg)'
        - end_line: 1099
          name: interrupt
          start_line: 1080
          text:
          - '    def interrupt(self) -> None:'
          - '        """'
          - '        Send interrupt signal to container and exhaust stdout buffer
            with a communicate call'
          - '        """'
          - '        assert self.container is not None'
          - '        assert self.container_obj is not None'
          - '        pids = self.get_pids()'
          - '        for pid, cmd in pids:'
          - '            if pid not in self.parent_pids and cmd != "ps":'
          - '                self.container_obj.exec_run(f"kill -9 {pid}")'
          - '        try:'
          - '            _ = read_with_timeout(self.container, self.get_pids, 20)'
          - '        except TimeoutError:'
          - '            pass'
          - '        try:'
          - '            output = self.communicate(input="echo ''interrupted''", timeout_duration=5)'
          - '            assert output.strip().endswith("interrupted"), "container
            health check failed"'
          - '        except TimeoutError:'
          - '            msg = "Failed to interrupt container"'
          - '            raise RuntimeError(msg)'
        - end_line: 1199
          name: open_pr
          start_line: 1101
          text:
          - '    def open_pr(self, *, trajectory, _dry_run: bool = False) -> None:'
          - '        """Create PR to repository'
          - ''
          - '        Args:'
          - '            trajectory: Trajectory of actions taken by the agent'
          - '            _dry_run: Whether to actually push anything or just simulate
            it'
          - '        """'
          - '        self.logger.info("Opening PR")'
          - '        # TODO: have better way of handling this'
          - '        # Adding random string suffix to avoid name conflicts if we had
            a previously failed run'
          - '        issue_url = self.args.data_path'
          - '        try:'
          - '            issue = get_gh_issue_data(issue_url, token=self._github_token)'
          - '        except InvalidGithubURL as e:'
          - '            msg = "Data path must be a github issue URL if --open_pr
            is set."'
          - '            raise ValueError(msg) from e'
          - '        branch_name = f"swe-agent-fix-#{issue.number}-" + str(random.random())[2:10]'
          - ''
          - '        self.communicate_with_handling('
          - '            input="rm -f model.patch",'
          - '            error_msg="Failed to remove model patch",'
          - '            timeout_duration=10,'
          - '        )'
          - '        self.communicate_with_handling('
          - '            input=f"git checkout -b {branch_name}",'
          - '            error_msg="Failed to switch to new branch",'
          - '            timeout_duration=10,'
          - '        )'
          - '        self.communicate_with_handling('
          - '            input="git add .",'
          - '            error_msg="Failed to add commits",'
          - '            timeout_duration=10,'
          - '        )'
          - '        dry_run_flag = "--allow-empty" if _dry_run else ""'
          - '        commit_msg = ['
          - '            shlex.quote("Fix: {issue.title}"),'
          - '            shlex.quote("Closes #{issue.number}"),'
          - '        ]'
          - '        self.communicate_with_handling('
          - '            input=f"git commit -m {commit_msg[0]} -m  {commit_msg[1]}
            {dry_run_flag}",'
          - '            error_msg="Failed to commit changes",'
          - '            timeout_duration=10,'
          - '        )'
          - ''
          - '        owner, repo, _ = parse_gh_issue_url(issue_url)'
          - '        # If `--repo_path` was specified with a different github URL,
            then the record will contain'
          - '        # the forking user'
          - '        assert self.record is not None'
          - '        if self.record["repo_type"] != "github":'
          - '            # We already validated that `--data_path` is a github issue
            URL'
          - '            # so this is the only case where we can reach here'
          - '            msg = "--repo_path must point to a github URL if --open_pr
            is set"'
          - '            raise ValueError(msg)'
          - '        forker, _ = self.record["repo"].split("/")'
          - '        head = branch_name'
          - '        remote = "origin"'
          - '        if forker != owner:'
          - '            head = f"{forker}:{branch_name}"'
          - '            token_prefix = ""'
          - '            if self._github_token:'
          - '                token_prefix = f"{self._github_token}@"'
          - '            fork_url = f"https://{token_prefix}github.com/{forker}/{repo}.git"'
          - '            self.logger.debug(f"Using fork: {fork_url}")'
          - '            self.communicate_with_handling('
          - '                input=f"git remote add fork {fork_url}",'
          - '                error_msg="Failed to create new git remote",'
          - '                timeout_duration=10,'
          - '            )'
          - '            remote = "fork"'
          - '        dry_run_prefix = "echo " if _dry_run else ""'
          - '        self.communicate_with_handling('
          - '            input=f"{dry_run_prefix} git push {remote} {branch_name}",'
          - '            error_msg=('
          - '                "Failed to push branch to remote. Please check your token
            and permissions. "'
          - '                "You might want to push to a fork with the push_gh_repo_url
            option."'
          - '            ),'
          - '            timeout_duration=10,'
          - '        )'
          - '        body = ('
          - '            f"This is a PR opened by AI tool [SWE Agent](https://github.com/princeton-nlp/SWE-agent/)
            "'
          - '            f"to close [#{issue.number}]({issue_url}) ({issue.title}).\n\nCloses
            #{issue.number}."'
          - '        )'
          - '        body += "\n\n" + format_trajectory_markdown(trajectory)'
          - '        api = GhApi(token=self._github_token)'
          - '        if not _dry_run:'
          - '            pr_info = api.pulls.create('
          - '                owner=owner,'
          - '                repo=repo,'
          - '                title=f"SWE-agent[bot] PR to fix: {issue.title}",'
          - '                head=head,'
          - '                base="main",'
          - '                body=body,'
          - '                draft=True,'
          - '            )'
          - '            self.logger.info('
          - "                f\"\U0001F389 PR created as a draft at {pr_info.html_url}.\
            \ Please review it carefully, push \""
          - '                "any required changes onto the branch and then click
            "'
          - '                "''Ready for Review'' to bring it to the attention of
            the maintainers.",'
          - '            )'
        name: SWEEnv
        start_line: 134
        text:
        - 'class SWEEnv(gym.Env):'
        - '    """Gym environment for SWE-bench. This class should handle all communication
          with the docker container."""'
        - ''
        - '    name = "swe_main"'
        - '    # This prefix will be prepended to the image name when caching task
          images'
        - '    cached_image_prefix = "swe-agent-task-env-"'
        - ''
        - '    def __init__(self, args: EnvironmentArguments):'
        - '        super().__init__()'
        - '        t0 = time.perf_counter()'
        - '        self.args = args'
        - '        self.base_commit: str | None = None'
        - '        self.communicate_output: str | None = None'
        - '        self.container_name: str | None = args.container_name'
        - '        self.install_environment = args.install_environment'
        - '        self.logger = get_logger("SWEEnv")'
        - '        self.persistent = args.container_name is not None'
        - '        self.returncode: None | int = None'
        - '        if not self.args.verbose:'
        - '            # fixme: This creates problems if we have multiple instances
          of this class'
        - '            self.logger.disabled = True'
        - ''
        - '        #: The commit hash of the swe-agent repository'
        - '        self.commit_sha = None'
        - '        try:'
        - '            repo = Repo(REPO_ROOT, search_parent_directories=True)'
        - '            self.commit_sha = repo.head.object.hexsha'
        - '        except KeyboardInterrupt:'
        - '            raise'
        - '        except Exception as e:'
        - '            self.logger.exception("Failed to get commit hash for this repo:
          %s", str(e))'
        - ''
        - '        self._github_token: str = keys_config.get("GITHUB_TOKEN", "")  #
          type: ignore'
        - ''
        - '        # Load Task Instances'
        - '        self.data_path = self.args.data_path'
        - '        self.data = get_instances('
        - '            self.data_path,'
        - '            self.args.base_commit,'
        - '            self.args.split,'
        - '            token=self._github_token,'
        - '            repo_path=self.args.repo_path,'
        - '        )'
        - '        #: Instance we''re currently processing. Gets set in self.reset.'
        - '        self.record: dict[str, Any] | None = None'
        - "        self.logger.info(f\"\U0001F4BD Loaded dataset from {self.data_path}\"\
          )"
        - ''
        - '        # Establish connection with execution container'
        - '        self.image_name = args.image_name'
        - '        self.container_obj: docker.models.containers.Container | None =
          None'
        - '        self.container: subprocess.Popen | None = None'
        - '        self._reset_container()'
        - ''
        - '        self.idx = 0'
        - '        self.clean_multi_line_functions = lambda x: x'
        - '        self.hooks: list[EnvHook] = []'
        - ''
        - '        self.logger.debug("Environment initialization took %.2f seconds",
          time.perf_counter() - t0)'
        - ''
        - '    def _get_cached_task_image_name(self) -> str:'
        - '        assert self.record is not None'
        - '        inputs: list[str] = ['
        - '            self.record["repo"],'
        - '            self.record["base_commit"],'
        - '            self.args.environment_setup or "no_setup",'
        - '        ]'
        - '        tag = hashlib.sha256("".join(inputs).encode()).hexdigest()[:50]'
        - '        return f"{self.cached_image_prefix}{tag}"'
        - ''
        - '    def add_hook(self, hook: EnvHook):'
        - '        """Add `EnvHook` to the environment.'
        - ''
        - '        This allows to inject custom functionality at different stages
          of the environment'
        - '        lifecycle, in particular to connect SWE-agent to a new interface
          (like a GUI).'
        - '        """'
        - '        hook.on_init()'
        - '        self.hooks.append(hook)'
        - ''
        - '    @property'
        - '    def _repo_name(self) -> str:'
        - '        """Name of the local copy of the repository"""'
        - '        assert self.record is not None'
        - '        return self.record["repo"].replace("/", "__")'
        - ''
        - '    def _copy_repo(self) -> str:'
        - '        """Clone/copy repository/codebase in container'
        - ''
        - '        Returns:'
        - '            folder name of clone'
        - '        """'
        - '        assert self.container_obj is not None'
        - '        assert self.record is not None  # mypy'
        - '        for hook in self.hooks:'
        - '            hook.on_copy_repo_started(repo_type=self.record["repo_type"],
          repo_path=self.record["repo"])'
        - '        if self.record["repo_type"] == "local":'
        - '            copy_anything_to_container('
        - '                self.container_obj,'
        - '                self.record["repo"].removeprefix("local://"),'
        - '                "/" + self._repo_name,'
        - '            )'
        - '            self.communicate_with_handling('
        - '                input=f"chown -R root:root {self._repo_name}",'
        - '                error_msg="Failed to change permissions on copied repository",'
        - '            )'
        - '            return self._repo_name'
        - '        assert self.record["repo_type"] == "github"'
        - '        token_prefix = ""'
        - '        if self._github_token:'
        - '            token_prefix = f"{self._github_token}@"'
        - '        # fixme: This if statement is brittle and should probably be replaced
          with better logic'
        - '        if not self.args.no_mirror and self.record["problem_statement_source"]
          == "swe-bench":'
        - '            self.logger.info(f"{self._repo_name} not found in container,
          cloning...")'
        - '            clone_url = f"https://{token_prefix}github.com/swe-bench/{self._repo_name}.git"'
        - '        else:'
        - '            self.logger.info("Trying to clone from non-mirror...")'
        - '            clone_url = f"https://{token_prefix}github.com/{self.record[''repo'']}.git"'
        - '        clone_method = keys_config.get("SWE_AGENT_CLONE_METHOD", default="shallow",
          choices=["shallow", "full"])'
        - '        if len(self.data) > 1 or self.persistent:'
        - '            msg = "Falling back to full cloning method due to multiple
          instances or persistent container"'
        - '            clone_method = "full"'
        - '            self.logger.debug(msg)'
        - '        if clone_method == "full":'
        - '            self.communicate_with_handling('
        - '                input=f"git clone {clone_url} {self._repo_name}",'
        - '                error_msg="Failed to clone repository from conservative
          method",'
        - '                timeout_duration=LONG_TIMEOUT,'
        - '            )'
        - '        else:'
        - '            base_commit = self.record["base_commit"]'
        - '            self.communicate_with_handling('
        - '                input="&&".join('
        - '                    ('
        - '                        f"mkdir {self._repo_name}",'
        - '                        f"cd {self._repo_name}",'
        - '                        "git init",'
        - '                        f"git remote add origin {clone_url}",'
        - '                        f"git fetch --depth 1 origin {base_commit}",'
        - '                        "git checkout FETCH_HEAD",'
        - '                        "cd ..",'
        - '                    )'
        - '                ),'
        - '                error_msg="Failed to clone repository with fast method",'
        - '                timeout_duration=LONG_TIMEOUT,'
        - '            )'
        - '        return self._repo_name'
        - ''
        - '    def reset(self, index: int | None = None, apply_test_patch: bool =
          False) -> tuple[str | None, dict]:'
        - '        """'
        - '        Function to reset container between each task instance.'
        - ''
        - '        * Clones instance''s repository'
        - '        * Cleans repository of prior modifications'
        - '        * Resets environment variables'
        - '        * Check out base commit'
        - ''
        - '        Args:'
        - '            index: index of task instance to reset to'
        - ''
        - '        Returns:'
        - '            observation: output from container'
        - '            info: additional information (e.g. debugging information)'
        - '        """'
        - '        info = {}'
        - '        info["commit_sha"] = self.commit_sha'
        - ''
        - '        # Get task instance'
        - '        self.idx = index if index is not None else self.idx'
        - '        self.record = self.data[self.idx]'
        - '        self.idx += 1'
        - ''
        - '        # Set query, gold command'
        - '        self.base_commit = self.record["base_commit"]'
        - '        self.query = self.record["problem_statement"]'
        - '        self.reward = None'
        - ''
        - '        ### Reset Container ###'
        - ''
        - '        if self.args.cache_task_images:'
        - '            cached_image = self._get_cached_task_image_name()'
        - '            if image_exists(cached_image):'
        - '                self.logger.info(f"Restore environment from cached image
          {cached_image}")'
        - '                self.close()  # stop current container'
        - '                self._init_container(cached_image=cached_image)'
        - '                self.communicate("export $(xargs </.env)")'
        - '                envs = self.communicate("env")'
        - '                self.logger.debug(f"Environment variables restored from
          the image:\n{envs}\n")'
        - '                if apply_test_patch:'
        - '                    self._apply_test_patch()'
        - '                return None, info'
        - '            else:'
        - '                self.logger.info(f"Cached image {cached_image} not found,
          rebuilding task environment...")'
        - ''
        - '        # Clone repository if not already cloned'
        - '        self.communicate(input="cd /")'
        - '        folders = self.communicate(input="ls").split("\n")'
        - '        if self._repo_name not in folders:'
        - '            self._copy_repo()'
        - ''
        - '        # Clean repository of any modifications + Checkout base commit'
        - '        for cmd in ['
        - '            "echo -n > /root/files_to_edit.txt",'
        - '            f"cd {self._repo_name}",'
        - '            "export ROOT=$(pwd -P)",'
        - '            "git status",'
        - '            "git restore .",'
        - '            f"git reset --hard {self.base_commit}",'
        - '            "git clean -fdxq",'
        - '        ]:'
        - '            self.communicate_with_handling('
        - '                input=cmd,'
        - '                error_msg="Failed to clean repository",'
        - '            )'
        - ''
        - '        # Reset environment variables'
        - '        for cmd in ['
        - '            ''export CURRENT_FILE=""'','
        - '            "export CURRENT_LINE=0",'
        - '            "export SEARCH_RESULTS=()",'
        - '            "export SEARCH_FILES=()",'
        - '            "export SEARCH_INDEX=0",'
        - '        ]:'
        - '            self.communicate_with_handling('
        - '                input=cmd,'
        - '                error_msg="Failed to reset environment variables",'
        - '            )'
        - ''
        - '        # Set up environment'
        - '        self.communicate_with_handling('
        - '            "source /root/miniconda3/etc/profile.d/conda.sh",'
        - '            error_msg="Failed to source conda",'
        - '        )'
        - ''
        - '        system = self.communicate("uname -s").strip().lower()'
        - '        arch = self.communicate("uname -m").strip().lower()'
        - '        if system == "linux" and arch == "x86_64":'
        - '            self.communicate_with_handling('
        - '                "apt update; apt install build-essential -y",'
        - '                error_msg="Failed to install build-essential",'
        - '                timeout_duration=LONG_TIMEOUT,'
        - '            )'
        - ''
        - '        # Call install environment helper function if specified'
        - '        if self.install_environment:'
        - '            self.install_env()'
        - '        # Install mypy for linting purposes'
        - '        self.communicate_with_handling("pip install flake8", error_msg="Failed
          to install flake8 (lint library)")'
        - ''
        - '        if self.args.cache_task_images:'
        - '            envs = self.communicate("env")'
        - '            self.logger.debug(f"Environment variables to save:\n{envs}\n")'
        - '            self.communicate("env >> /.env")'
        - '            assert self.container_obj is not None  # mypy'
        - '            self.container_obj.commit(cached_image)'
        - '            self.logger.info(f"Container with environment {self.container_obj.id}
          cached as image {cached_image}")'
        - ''
        - '        if apply_test_patch:'
        - '            self._apply_test_patch()'
        - '        # Write any metadata to info if necessary'
        - '        return None, info'
        - ''
        - '    def _apply_test_patch(self):'
        - '        """'
        - '        Apply test patch for oracle setting'
        - '        """'
        - '        assert self.record is not None'
        - '        path_to_patch = "test.patch"'
        - '        with open(path_to_patch, "w") as f:'
        - '            f.write(self.record["test_patch"])'
        - '        subprocess.run('
        - '            f"docker cp {path_to_patch} {self.container_name}:/root/test.patch",'
        - '            shell=True,'
        - '            check=False,'
        - '        )'
        - '        self.communicate_with_handling('
        - '            input="git apply /root/test.patch",'
        - '            error_msg="Failed to apply test patch correctly",'
        - '        )'
        - '        os.remove(path_to_patch)'
        - ''
        - '    def step(self, action: str) -> tuple[str | None, int, bool, dict]:'
        - '        """'
        - '        Runs an action proposed by the agent in the environment and returns
          the corresponding output.'
        - ''
        - '        Args:'
        - '            action: command to run in bash shell'
        - ''
        - '        Returns:'
        - '            observation:  output from container'
        - '            reward: value between 0 and 1 quantifying correctness of output
          + environment state'
        - '            done: whether task is over'
        - '            info: additional information (e.g. debugging information)'
        - '        """'
        - '        info = {}'
        - ''
        - '        observation = ""'
        - '        # Handle special actions'
        - '        if action.strip() == "skip":'
        - '            observation = "Skipped"'
        - '            info["exit_status"] = "skipped"'
        - '            return observation, 0, True, info'
        - '        if action in {"exit_context", "exit_cost", "exit_error", "exit_format",
          "exit_api"}:'
        - '            try:'
        - '                observation = self.communicate(input="submit")'
        - '                submission = self.get_submission(observation)'
        - '                assert submission is not None and submission.strip() !=
          "", AssertionError("No submission found.")'
        - '                self.logger.info(f"Found submission: {submission}")'
        - '                info["exit_status"] = f"submitted ({action})"'
        - '                info["submission"] = submission'
        - '                observation = "Exited (autosubmitted)"'
        - '                self.logger.info("Exiting with autosubmission")'
        - '                return observation, 0, True, info'
        - '            except KeyboardInterrupt:'
        - '                raise'
        - '            except:'
        - '                observation = "Exited"'
        - '                info["exit_status"] = action'
        - '                return observation, 0, True, info'
        - ''
        - '        # Attempt to run action in container'
        - '        observation = ""'
        - '        try:'
        - '            observation = self.communicate(input=action, timeout_duration=AGENT_ACTION_TIMEOUT,
          set_last_action=True)'
        - '        except TimeoutError:'
        - '            try:'
        - '                self.interrupt()'
        - '                observation += "\nEXECUTION TIMED OUT"'
        - '            except RuntimeError as e:'
        - '                observation += "\nEXECUTION TIMED OUT AND INTERRUPT FAILED.
          RESTARTING PROCESS."'
        - '                info["exit_status"] = "early_exit"'
        - '                self.logger.warning(f"Failed to interrupt container: {e}\nRESTARTING
          PROCESS.")'
        - '                self.reset_container()'
        - '                return observation, 0, True, info'
        - '        except RuntimeError as e:'
        - '            observation += "\nCOMMAND FAILED TO EXECUTE. RESTARTING PROCESS."'
        - '            info["exit_status"] = "early_exit"'
        - '            self.logger.warning(f"Failed to execute command: {e}\nRESTARTING
          PROCESS.")'
        - '            self.reset_container()'
        - '            return observation, 0, True, info'
        - '        except BrokenPipeError as e:'
        - '            observation += "\nBROKEN PIPE ERROR. RESTARTING PROCESS."'
        - '            info["exit_status"] = "early_exit"'
        - '            self.logger.error(f"Broken pipe error: {e}\nRESTARTING PROCESS.")'
        - '            self.reset_container()'
        - '            return observation, 0, True, info'
        - '        except Exception:'
        - '            observation += "\nEXECUTION FAILED OR COMMAND MALFORMED"'
        - '            self.logger.exception("Unknown exception")'
        - ''
        - '        # Record submission and end episode if `submit` keyword found'
        - '        submission = self.get_submission(observation)'
        - '        if submission is not None:'
        - '            self.logger.info(f"Found submission: {submission}")'
        - '            info["exit_status"] = "submitted"'
        - '            info["submission"] = submission if submission.strip() != ""
          else None'
        - '            observation = submission if submission.strip() != "" else None'
        - '            return observation, 0, True, info'
        - '        return observation, 0, False, info'
        - ''
        - '    def close(self) -> None:'
        - '        """'
        - '        Handle environment shutdown'
        - '        """'
        - '        self.logger.info("Beginning environment shutdown...")'
        - '        try:'
        - '            self.communicate(input="exit")'
        - '        except KeyboardInterrupt:'
        - '            raise'
        - '        except:'
        - '            self.logger.warning("Errors when exiting container", exc_info=True)'
        - '        assert self.container is not None  # mypy'
        - '        self.container.terminate()'
        - '        if self.container_obj is None:'
        - '            pass'
        - '        elif self.persistent:'
        - '            # stopping is Podman specific, but doesn''t hurt to include'
        - '            # https://stackoverflow.com/a/32428199/'
        - '            # Want to avoid https://github.com/princeton-nlp/SWE-agent/issues/496'
        - '            # Note that container_obj.status might not be updated throughout
          the container'
        - '            # lifecycle, so let''s get the container_obj again'
        - '            assert self.container_name'
        - '            try:'
        - '                self.container_obj = docker.from_env().containers.get(self.container_name)'
        - '            except Exception as e:'
        - '                self.logger.warning(f"Failed to get fresh container object:
          {e}", exc_info=True)'
        - '            if self.container_obj.status not in {"paused", "exited", "dead",
          "stopping"}:'
        - '                try:'
        - '                    self.container_obj.pause()'
        - '                except Exception:'
        - '                    self.logger.warning("Failed to pause container.", exc_info=True)'
        - '                except KeyboardInterrupt:'
        - '                    raise'
        - '                else:'
        - '                    self.logger.info("Agent container paused")'
        - '            else:'
        - '                self.logger.info(f"Agent container status: {self.container_obj.status}")'
        - '        else:'
        - '            try:'
        - '                self.container_obj.remove(force=True)'
        - '            except KeyboardInterrupt:'
        - '                raise'
        - '            except docker.errors.NotFound:'
        - '                # We already tried to exit the container, so it''s actually
          good if'
        - '                # it''s not found'
        - '                pass'
        - '            except Exception:'
        - '                self.logger.warning("Failed to remove container", exc_info=True)'
        - '            else:'
        - '                self.logger.info("Agent container stopped")'
        - '        for hook in self.hooks:'
        - '            hook.on_close()'
        - ''
        - '    # MARK: Helper functions #'
        - ''
        - '    def _reset_container(self) -> None:'
        - '        if self.container is not None:'
        - '            try:'
        - '                self.container.terminate()'
        - '            except KeyboardInterrupt:'
        - '                raise'
        - '            except:'
        - '                self.logger.warning("Failed to terminate container", exc_info=True)'
        - '            else:'
        - '                self.logger.debug("Terminated container")'
        - '        self._init_container()'
        - '        self._init_scripts()'
        - ''
        - '    def reset_container(self) -> None:'
        - '        self.close()'
        - '        self.container = None'
        - '        self.container_obj = None'
        - '        self._reset_container()'
        - ''
        - '    @staticmethod'
        - '    def _get_container_name(image_name: str) -> str:'
        - '        """Return name of container"""'
        - '        process_id = str(os.getpid())'
        - '        current_time = str(datetime.datetime.now())'
        - '        unique_string = current_time + process_id'
        - '        hash_object = hashlib.sha256(unique_string.encode())'
        - '        image_name_sanitized = image_name.replace("/", "-")'
        - '        image_name_sanitized = image_name_sanitized.replace(":", "-")'
        - '        return f"{image_name_sanitized}-{hash_object.hexdigest()[:10]}"'
        - ''
        - '    def _init_container(self, cached_image: str | None = None) -> None:'
        - '        """'
        - '        Handles container initialization. Defines container name and creates
          it.'
        - '        If cached_image is provided, it will use that image name instead
          of the default.'
        - '        """'
        - '        image_name = self.image_name'
        - '        if cached_image is not None:'
        - '            image_name = cached_image'
        - '            self.logger.info(f"Using cached image: {image_name}")'
        - '        if self.persistent:'
        - '            assert self.container_name is not None'
        - '        else:'
        - '            # Make sure that we get a new container name just in case removing
          didn''t work.'
        - '            # Might be a fix for https://github.com/princeton-nlp/SWE-agent/issues/451'
        - '            self.container_name = self._get_container_name(image_name)'
        - '        self.container, self.parent_pids = get_container(self.container_name,
          image_name, persistent=self.persistent)'
        - '        try:'
        - '            client = docker.from_env(timeout=600)'
        - '        except docker.errors.DockerException as e:'
        - '            if "Error while fetching server API version" in str(e):'
        - '                msg = "Docker is not running. Please start Docker and try
          again."'
        - '            else:'
        - '                msg = "Unknown docker exception occurred. Are you sure
          docker is running?"'
        - '            raise RuntimeError(msg) from e'
        - '        t0 = time.time()'
        - '        self.container_obj = None'
        - '        while time.time() - t0 < 60:'
        - '            try:'
        - '                self.container_obj = client.containers.get(self.container_name)'
        - '            except docker.errors.NotFound:'
        - '                self.logger.debug("Couldn''t find container. Let''s wait
          and retry.")'
        - '                time.sleep(1)'
        - '            else:'
        - '                break'
        - '        else:'
        - '            print(f"{self.persistent=}")'
        - '            available_containers = client.containers.list(all=True)'
        - '            available_containers_info = json.dumps([str(c.attrs) for c
          in available_containers], indent=2)'
        - '            print(available_containers_info)'
        - '            msg = "Failed to get container object."'
        - '            raise RuntimeError(msg)'
        - "        self.logger.info(\"\U0001F331 Environment Initialized\")"
        - ''
        - '    def _init_scripts(self):'
        - '        """'
        - '        Initialize custom commands within container'
        - '        """'
        - '        self.communicate_with_handling('
        - '            "source /root/.bashrc",'
        - '            error_msg="Failed to source .bashrc",'
        - '        )'
        - '        self.communicate_with_handling('
        - '            "mkdir -p /root/commands",'
        - '            error_msg="Failed to create commands directory",'
        - '        )'
        - '        self.communicate_with_handling('
        - '            "touch /root/commands/__init__.py",'
        - '            error_msg="Failed to create __init__.py",'
        - '        )'
        - '        self.communicate_with_handling('
        - '            "export PATH=$PATH:/root/commands",'
        - '            error_msg="Failed to add commands directory to PATH",'
        - '        )'
        - ''
        - '    def _communicate_experimental('
        - '        self,'
        - '        input: str,'
        - '        timeout_duration: int | float = 25,'
        - '    ) -> str:'
        - '        """Experimental version of `_communicate`"""'
        - '        assert self.container is not None'
        - '        # Sleep to ensure that the exit code is in the last line'
        - '        # See https://github.com/princeton-nlp/SWE-agent/issues/595'
        - '        command_suffix = ('
        - '            f''EXITSTATUS="$?"; sleep 0.01; echo {PROCESS_DONE_MARKER_START}$EXITSTATUS{PROCESS_DONE_MARKER_END}\n'''
        - '        )'
        - '        try:'
        - '            self.returncode = None'
        - '            cmd = input if input.endswith("\n") else input + "\n"'
        - '            cmd += command_suffix'
        - '            os.write(self.container.stdin.fileno(), cmd.encode())'
        - '            time.sleep(0.03)'
        - '            self.container.stdin.flush()'
        - '        except BrokenPipeError:'
        - '            traceback.print_exc()'
        - '            self.logger.error("Failed to communicate with container. Check
          docker logs for more information.")'
        - '            msg = "Failed to communicate with container"'
        - '            raise RuntimeError(msg)'
        - ''
        - '        try:'
        - '            buffer, exit_code = read_with_timeout_experimental(self.container,
          timeout_duration)'
        - '        except Exception:'
        - '            msg = f"Read with timeout failed on input:\n---\n{input}\n---"'
        - '            self.logger.error(msg)'
        - '            raise'
        - '        if exit_code == "$EXITSTATUS":'
        - '            # this sometimes happens if the command badly fails'
        - '            # for example if you just try to run python with no arguments'
        - '            # in this case, the error message is usually also garbage,
          so let''s set'
        - '            # something new.'
        - '            # See https://github.com/princeton-nlp/SWE-agent/issues/630'
        - '            buffer = ('
        - '                "Unkknown error occurred when running the command. Please
          double check syntax "'
        - '                "and that you''re not running an interactive command."'
        - '            )'
        - '            self.logger.warning("Couldn''t get real exit code. Setting
          it to 999")'
        - '            exit_code = 999'
        - '        elif not exit_code.isdigit():'
        - '            msg = f"Failed to get exit code. Output:\n---\n{buffer}\n---"'
        - '            raise RuntimeError(msg)'
        - '        self.returncode = int(exit_code)'
        - '        return buffer'
        - ''
        - '    def _communicate('
        - '        self,'
        - '        input: str,'
        - '        timeout_duration: int | float = 25,'
        - '    ) -> str:'
        - '        """Runs command in container and returns output'
        - ''
        - '        Args:'
        - '            input: command to run in container'
        - '            timeout_duration: duration to wait for output'
        - '        """'
        - '        assert self.container is not None'
        - '        communicate_method = keys_config.get('
        - '            "SWE_AGENT_COMMUNICATE_METHOD", default="end-marker", choices=["end-marker",
          "processes"]'
        - '        )'
        - '        if communicate_method == "end-marker":'
        - '            return self._communicate_experimental(input, timeout_duration)'
        - '        try:'
        - '            self.returncode = None'
        - '            cmd = input if input.endswith("\n") else input + "\n"'
        - '            os.write(self.container.stdin.fileno(), cmd.encode())'
        - '            time.sleep(0.1)'
        - '            self.container.stdin.flush()'
        - '        except BrokenPipeError:'
        - '            traceback.print_exc()'
        - '            self.logger.error("Failed to communicate with container. Check
          docker logs for more information.")'
        - '            msg = "Failed to communicate with container"'
        - '            raise RuntimeError(msg)'
        - '        try:'
        - '            buffer = read_with_timeout(self.container, self.get_pids, timeout_duration)'
        - '            self.container.stdin.write("echo $?\n")'
        - '            time.sleep(0.1)'
        - '            self.container.stdin.flush()'
        - '            exit_code = read_with_timeout(self.container, self.get_pids,
          5).strip()'
        - '        except Exception as e:'
        - '            self.logger.error(f"Read with timeout failed on input:\n---\n{input}\n---")'
        - '            raise e'
        - '        if not exit_code.isdigit():'
        - '            msg = f"Failed to get exit code. Output:\n---\n{buffer}\n---"'
        - '            raise RuntimeError(msg)'
        - '        self.returncode = int(exit_code)'
        - '        return buffer'
        - ''
        - '    def _check_syntax(self, input: str) -> tuple[str, bool]:'
        - '        """'
        - '        Check syntax of command.'
        - ''
        - '        Returns:'
        - '            output: Output of the command'
        - '            success: whether the exit code was 0'
        - '        """'
        - '        output = self._communicate(f"/bin/bash -n <<''EOF''\n{input}\nEOF\n")'
        - '        return output, self.returncode == 0'
        - ''
        - '    def communicate(self, input: str, timeout_duration: int | float = 25,
          *, set_last_action: bool = False) -> str:'
        - '        """'
        - '        Sends input to container and returns output'
        - ''
        - '        Args:'
        - '            input: input to send to container'
        - '            timeout_duration: duration to wait for output'
        - '            set_last_action: whether to set the LAST_ACTION environment
          variable'
        - ''
        - '        Returns:'
        - '            output: output from container'
        - '        """'
        - '        if input.strip() != "exit":'
        - '            self.logger.log(logging.TRACE, "Input:\n%s", input)  # type:
          ignore'
        - '            output, valid = self._check_syntax(input)'
        - '            if not valid:'
        - '                return output  # shows syntax errors'
        - '            output = self._communicate('
        - '                input,'
        - '                timeout_duration=timeout_duration,'
        - '            )'
        - '            self.logger.log(logging.TRACE, "Output:\n%s", output)  # type:
          ignore'
        - '            self.communicate_output = output'
        - '            if set_last_action:'
        - '                # Cannot merge this with last command, because of multiline
          command'
        - '                # handling.'
        - '                last_action_string = shlex.quote(input.strip())'
        - '                input = f"export LAST_ACTION={last_action_string}"'
        - '                self._communicate(input, timeout_duration=5)'
        - '            return output'
        - '        else:'
        - '            self.container.terminate()'
        - '            self.returncode = 0'
        - '            self.communicate_output = ""'
        - '            return ""'
        - ''
        - '    def communicate_with_handling(self, input: str, error_msg: str, timeout_duration:
          int | float = 25) -> str:'
        - '        """'
        - '        Wrapper for communicate function that raises error if return code
          is non-zero'
        - ''
        - '        Args:'
        - '            input: input to send to container'
        - '            error_msg: error message to raise if return code is non-zero'
        - '            timeout_duration: duration to wait for output'
        - ''
        - '        Returns:'
        - '            output: output from container'
        - '        """'
        - '        logs = self.communicate(input, timeout_duration=timeout_duration)'
        - '        if self.returncode != 0:'
        - '            self.logger.error(f"{error_msg}: {logs}")'
        - '            self.close()'
        - '            msg = f"{error_msg}: {logs}"'
        - '            raise RuntimeError(msg)'
        - '        return logs'
        - ''
        - '    def get_available_actions(self) -> list[str]:'
        - '        """'
        - '        Returns list of available actions in current environment state'
        - ''
        - '        Currently not in use.'
        - '        """'
        - '        return []'
        - ''
        - '    def get_pids(self, all_pids: bool = False) -> list[str]:'
        - '        """'
        - '        Gets list of processes running inside docker container'
        - ''
        - '        Args:'
        - '            all_pids: whether to return all pids, or whether to exclude
          ps'
        - '                and parent PIDs'
        - ''
        - '        Returns:'
        - '            list of PIDs'
        - '        """'
        - '        pids = self.container_obj.exec_run("ps -eo pid,comm --no-headers").output.decode().split("\n")'
        - '        pids = [x.split() for x in pids if x]'
        - '        if not all_pids:'
        - '            pids = [x for x in pids if x[1] != "ps" and x[0] not in self.parent_pids]'
        - '        return pids'
        - ''
        - '    def get_submission(self, output: str) -> str | None:'
        - '        """'
        - '        Function for extracting diff patch submission at the end of an
          episode.'
        - ''
        - '        Args:'
        - '            output: `submit` observation'
        - ''
        - '        Returns:'
        - '            submission: diff patch submission'
        - '        """'
        - '        pattern = r"\<\<SUBMISSION\|\|(.*)\|\|SUBMISSION\>\>"'
        - '        match = re.search(pattern, output, re.DOTALL)'
        - '        if match is None:'
        - '            return None'
        - '        return match.group(1)'
        - ''
        - '    def run_shell_script(self, script_path: Path, *, location: str) ->
          None:'
        - '        """Run custom script supplied by user at `script_path`'
        - ''
        - '        Args:'
        - '            script_path: path to script file'
        - '            location: location of script file ''host'' or ''container'''
        - '        """'
        - '        if location == "host":'
        - '            return self._run_shell_script_host(script_path)'
        - '        elif location == "container":'
        - '            raise NotImplementedError'
        - '        msg = f"Invalid ''location'': {location}"'
        - '        raise ValueError(msg)'
        - ''
        - '    def _run_shell_script_host(self, script_path: Path) -> None:'
        - '        """Run shell script file (located on host) in container"""'
        - '        if not script_path.is_file():'
        - '            msg = f"Script not found at {script_path}"'
        - '            raise FileNotFoundError(msg)'
        - '        shell_commands = Path(script_path).read_text().splitlines(keepends=True)'
        - '        for i, cmd in enumerate(shell_commands):'
        - '            self.communicate_with_handling('
        - '                cmd,'
        - '                error_msg=f"Failed to execute line {i}.",'
        - '                timeout_duration=LONG_TIMEOUT,'
        - '            )'
        - ''
        - '    def _get_install_configs(self) -> dict | None:'
        - '        """Return config for environment setup"""'
        - '        assert self.record is not None  # mypy'
        - '        if ('
        - '            self.record["problem_statement_source"] != "swe-bench" or self.record["repo_type"]
          == "local"'
        - '        ) and self.args.environment_setup is None:'
        - '            self.logger.warning('
        - '                "install_environment is set to True, but the data path
          is a GitHub URL "'
        - '                "without an environment config file (environment_config
          key/flag). "'
        - '                "Skipping conda environment installation.",'
        - '            )'
        - '            return None'
        - '        if self.args.environment_setup is not None:'
        - '            assert isinstance(self.args.environment_setup, (str, os.PathLike))'
        - '            if Path(self.args.environment_setup).suffix in [".yml", ".yaml"]:'
        - '                try:'
        - '                    return yaml.safe_load(Path(self.args.environment_setup).read_text())'
        - '                except Exception as e:'
        - '                    msg = "Environment config file needs to be a yaml file"'
        - '                    raise ValueError(msg) from e'
        - '            elif Path(self.args.environment_setup).suffix == ".sh":'
        - '                return {'
        - '                    "shell_script_path": self.args.environment_setup,'
        - '                }'
        - '            else:'
        - '                msg = "Environment config file needs to be a yaml file
          or shell script"'
        - '                raise ValueError(msg)'
        - '        else:'
        - '            try:'
        - '                return MAP_REPO_VERSION_TO_SPECS[self.record["repo"]][str(self.record["version"])]'
        - '            except KeyError as e:'
        - '                msg = ('
        - '                    "Tried to look up install configs in swe-bench, but
          failed. "'
        - '                    "You can set a custom environment config with the environment_config
          key/flag."'
        - '                )'
        - '                raise ValueError(msg) from e'
        - ''
        - '    def _conda_environment_exists(self, env_name: str) -> bool:'
        - '        env_check = self.communicate(f"conda env list | grep {env_name}",
          timeout_duration=LONG_TIMEOUT)'
        - '        return env_check.strip() != ""'
        - ''
        - '    def install_env(self) -> None:'
        - '        """'
        - '        Creates conda environment and installs third party dependencies
          to allow code execution'
        - '        """'
        - '        t0 = time.perf_counter()'
        - '        for hook in self.hooks:'
        - '            hook.on_install_env_started()'
        - '        install_configs = self._get_install_configs()'
        - '        if not install_configs:'
        - '            return'
        - '        if "shell_script_path" in install_configs:'
        - '            assert len(install_configs) == 1'
        - '            self.run_shell_script(Path(install_configs["shell_script_path"]),
          location="host")'
        - '            return'
        - '        assert self.record is not None  # mypy'
        - '        # Create environment if does not exist yet'
        - '        env_name = f"{self._repo_name}__{self.record[''version'']}"'
        - '        if not self._conda_environment_exists(env_name):'
        - '            self.logger.info(f"{env_name} conda env not found, creating...")'
        - '            packages = install_configs.get("packages", "")'
        - '            if packages == "requirements.txt":'
        - '                # Create conda environment'
        - '                self.communicate_with_handling('
        - '                    f"conda create -n {env_name} python={install_configs[''python'']}
          -y",'
        - '                    error_msg="Failed to create conda environment",'
        - '                    timeout_duration=LONG_TIMEOUT,'
        - '                )'
        - '                self.logger.debug("Created conda environment")'
        - '                # Write reqs to requirements.txt in docker container'
        - '                content_reqs = get_requirements(self.record)'
        - '                copy_file_to_container(self.container_obj, content_reqs,
          PATH_TO_REQS)'
        - '                # Create conda environment + install reqs'
        - '                self.communicate_with_handling('
        - '                    f"conda activate {env_name}",'
        - '                    error_msg="Failed to activate conda environment",'
        - '                )'
        - '                self.communicate_with_handling('
        - '                    f"pip install -r {PATH_TO_REQS}",'
        - '                    error_msg="Failed to install requirements.txt",'
        - '                    timeout_duration=LONG_TIMEOUT,'
        - '                )'
        - '                self.logger.debug("Installed requirements from requirements.txt")'
        - '                self.communicate(f"rm {PATH_TO_REQS}")'
        - '            elif packages == "environment.yml":'
        - '                # Write environment.yml to file'
        - '                content_env_yml = get_environment_yml(self.record, env_name)'
        - '                # Hotfix for'
        - '                if not install_configs.get("no_use_env"):'
        - '                    content_env_yml += f''\n  - python={install_configs["python"]}\n'''
        - '                copy_file_to_container(self.container_obj, content_env_yml,
          PATH_TO_ENV_YML)'
        - '                if install_configs.get("no_use_env"):'
        - '                    # Create conda environment'
        - '                    self.communicate_with_handling('
        - '                        f"conda create -c conda-forge -n {env_name} python={install_configs[''python'']}
          -y",'
        - '                        error_msg="Failed to create conda environment",'
        - '                        timeout_duration=LONG_TIMEOUT,'
        - '                    )'
        - '                    self.logger.debug("Created conda environment")'
        - '                    # Install packages'
        - '                    self.communicate_with_handling('
        - '                        f"conda env update -f {PATH_TO_ENV_YML}",'
        - '                        error_msg="Failed to install environment.yml",'
        - '                        timeout_duration=LONG_TIMEOUT,'
        - '                    )'
        - '                    self.logger.debug("Installed packages from environment.yml")'
        - '                else:'
        - '                    # Create environment + install packages'
        - '                    self.communicate_with_handling('
        - '                        f"conda env create --file {PATH_TO_ENV_YML}",'
        - '                        error_msg="Failed to create conda environment with
          environment.yml",'
        - '                        timeout_duration=LONG_TIMEOUT,'
        - '                    )'
        - '                    self.logger.debug("Created conda environment with environment.yml")'
        - '                self.communicate(f"rm {PATH_TO_ENV_YML}")'
        - '            else:'
        - '                python_env = f"python{install_configs[''python'']}"'
        - '                if self._conda_environment_exists(python_env):'
        - '                    self.communicate_with_handling('
        - '                        f"conda create --name {env_name} --clone {python_env}",'
        - '                        error_msg="Failed to clone conda environment",'
        - '                        timeout_duration=LONG_TIMEOUT,'
        - '                    )'
        - '                    self.logger.debug("Cloned python conda environment")'
        - '                else:'
        - '                    self.logger.debug(f"Could not find {python_env}, creating
          new environment")'
        - '                    self.communicate_with_handling('
        - '                        f"conda create -n {env_name} python={install_configs[''python'']}
          -y",'
        - '                        error_msg="Failed to create conda environment",'
        - '                        timeout_duration=LONG_TIMEOUT,'
        - '                    )'
        - '                self.communicate_with_handling('
        - '                    f"conda activate {env_name}",'
        - '                    error_msg="Failed to activate conda environment",'
        - '                )'
        - '                if packages.strip():'
        - '                    self.communicate_with_handling('
        - '                        f"conda install {packages} -y",'
        - '                        error_msg="Failed to install packages",'
        - '                        timeout_duration=LONG_TIMEOUT,'
        - '                    )'
        - '                    self.logger.debug("Installed conda packages")'
        - '            # Install extra pip packages if specified'
        - '            if install_configs.get("pip_packages"):'
        - '                self.communicate_with_handling('
        - '                    f"source activate {env_name} && pip install {'' ''.join(install_configs[''pip_packages''])}",'
        - '                    error_msg="Failed to install pip packages",'
        - '                    timeout_duration=LONG_TIMEOUT,'
        - '                )'
        - '                self.logger.debug("Installed extra pip dependencies")'
        - ''
        - '        # Activate environment'
        - '        self.communicate_with_handling(f"conda activate {env_name}", error_msg="Failed
          to activate conda environment")'
        - ''
        - '        # Install repo at base commit'
        - '        if install_configs.get("pre_install"):'
        - '            self.logger.info("Running pre-install commands...")'
        - '            for pre_install_cmd in install_configs["pre_install"]:'
        - '                self.communicate_with_handling('
        - '                    pre_install_cmd,'
        - '                    error_msg="Pre-install commands failed to execute successfully",'
        - '                    timeout_duration=LONG_TIMEOUT,'
        - '                )'
        - '            self.logger.debug("Ran pre-install commands")'
        - '        self.logger.info(f"Installing {self._repo_name} at base commit...")'
        - '        if install_configs.get("install"):'
        - '            install_cmd = install_configs["install"]'
        - '            self.communicate_with_handling('
        - '                install_cmd,'
        - '                error_msg="Install command failed to execute successfully",'
        - '                timeout_duration=LONG_TIMEOUT,'
        - '            )'
        - '            self.logger.debug("Ran install command")'
        - '        if install_configs.get("post_install"):'
        - '            self.logger.info("Running post-install commands...")'
        - '            for post_install_cmd in install_configs["post_install"]:'
        - '                self.communicate_with_handling('
        - '                    post_install_cmd,'
        - '                    error_msg="Post-install commands failed to execute
          successfully",'
        - '                )'
        - '            self.logger.debug("Ran post-install commands")'
        - ''
        - '        self.logger.info("Installation step took %.2f seconds", time.perf_counter()
          - t0)'
        - ''
        - '    def add_commands(self, commands: list[dict]) -> None:'
        - '        """'
        - '        Adds custom commands to container'
        - '        """'
        - '        for command in commands:'
        - '            name = command["name"]'
        - '            contents = command["contents"]'
        - '            copy_file_to_container(self.container_obj, contents, f"/root/commands/{name}")'
        - '            if command["type"] == "source_file":'
        - '                self.communicate_with_handling('
        - '                    f"source /root/commands/{name}",'
        - '                    error_msg=('
        - '                        f"Failed to source {name}. If you meant to make
          a script,"'
        - '                        " start the file with a shebang (e.g. #!/usr/bin/env
          python)."'
        - '                    ),'
        - '                )'
        - '            elif command["type"] == "script":'
        - '                self.communicate_with_handling('
        - '                    f"chmod +x /root/commands/{name}",'
        - '                    error_msg=f"Failed to chmod {name}",'
        - '                )'
        - '            elif command["type"] == "utility":'
        - '                # nothing to do for utility scripts'
        - '                pass'
        - '            else:'
        - '                msg = f"Invalid command type: {command[''type'']}"'
        - '                raise ValueError(msg)'
        - ''
        - '    def interrupt(self) -> None:'
        - '        """'
        - '        Send interrupt signal to container and exhaust stdout buffer with
          a communicate call'
        - '        """'
        - '        assert self.container is not None'
        - '        assert self.container_obj is not None'
        - '        pids = self.get_pids()'
        - '        for pid, cmd in pids:'
        - '            if pid not in self.parent_pids and cmd != "ps":'
        - '                self.container_obj.exec_run(f"kill -9 {pid}")'
        - '        try:'
        - '            _ = read_with_timeout(self.container, self.get_pids, 20)'
        - '        except TimeoutError:'
        - '            pass'
        - '        try:'
        - '            output = self.communicate(input="echo ''interrupted''", timeout_duration=5)'
        - '            assert output.strip().endswith("interrupted"), "container health
          check failed"'
        - '        except TimeoutError:'
        - '            msg = "Failed to interrupt container"'
        - '            raise RuntimeError(msg)'
        - ''
        - '    def open_pr(self, *, trajectory, _dry_run: bool = False) -> None:'
        - '        """Create PR to repository'
        - ''
        - '        Args:'
        - '            trajectory: Trajectory of actions taken by the agent'
        - '            _dry_run: Whether to actually push anything or just simulate
          it'
        - '        """'
        - '        self.logger.info("Opening PR")'
        - '        # TODO: have better way of handling this'
        - '        # Adding random string suffix to avoid name conflicts if we had
          a previously failed run'
        - '        issue_url = self.args.data_path'
        - '        try:'
        - '            issue = get_gh_issue_data(issue_url, token=self._github_token)'
        - '        except InvalidGithubURL as e:'
        - '            msg = "Data path must be a github issue URL if --open_pr is
          set."'
        - '            raise ValueError(msg) from e'
        - '        branch_name = f"swe-agent-fix-#{issue.number}-" + str(random.random())[2:10]'
        - ''
        - '        self.communicate_with_handling('
        - '            input="rm -f model.patch",'
        - '            error_msg="Failed to remove model patch",'
        - '            timeout_duration=10,'
        - '        )'
        - '        self.communicate_with_handling('
        - '            input=f"git checkout -b {branch_name}",'
        - '            error_msg="Failed to switch to new branch",'
        - '            timeout_duration=10,'
        - '        )'
        - '        self.communicate_with_handling('
        - '            input="git add .",'
        - '            error_msg="Failed to add commits",'
        - '            timeout_duration=10,'
        - '        )'
        - '        dry_run_flag = "--allow-empty" if _dry_run else ""'
        - '        commit_msg = ['
        - '            shlex.quote("Fix: {issue.title}"),'
        - '            shlex.quote("Closes #{issue.number}"),'
        - '        ]'
        - '        self.communicate_with_handling('
        - '            input=f"git commit -m {commit_msg[0]} -m  {commit_msg[1]} {dry_run_flag}",'
        - '            error_msg="Failed to commit changes",'
        - '            timeout_duration=10,'
        - '        )'
        - ''
        - '        owner, repo, _ = parse_gh_issue_url(issue_url)'
        - '        # If `--repo_path` was specified with a different github URL, then
          the record will contain'
        - '        # the forking user'
        - '        assert self.record is not None'
        - '        if self.record["repo_type"] != "github":'
        - '            # We already validated that `--data_path` is a github issue
          URL'
        - '            # so this is the only case where we can reach here'
        - '            msg = "--repo_path must point to a github URL if --open_pr
          is set"'
        - '            raise ValueError(msg)'
        - '        forker, _ = self.record["repo"].split("/")'
        - '        head = branch_name'
        - '        remote = "origin"'
        - '        if forker != owner:'
        - '            head = f"{forker}:{branch_name}"'
        - '            token_prefix = ""'
        - '            if self._github_token:'
        - '                token_prefix = f"{self._github_token}@"'
        - '            fork_url = f"https://{token_prefix}github.com/{forker}/{repo}.git"'
        - '            self.logger.debug(f"Using fork: {fork_url}")'
        - '            self.communicate_with_handling('
        - '                input=f"git remote add fork {fork_url}",'
        - '                error_msg="Failed to create new git remote",'
        - '                timeout_duration=10,'
        - '            )'
        - '            remote = "fork"'
        - '        dry_run_prefix = "echo " if _dry_run else ""'
        - '        self.communicate_with_handling('
        - '            input=f"{dry_run_prefix} git push {remote} {branch_name}",'
        - '            error_msg=('
        - '                "Failed to push branch to remote. Please check your token
          and permissions. "'
        - '                "You might want to push to a fork with the push_gh_repo_url
          option."'
        - '            ),'
        - '            timeout_duration=10,'
        - '        )'
        - '        body = ('
        - '            f"This is a PR opened by AI tool [SWE Agent](https://github.com/princeton-nlp/SWE-agent/)
          "'
        - '            f"to close [#{issue.number}]({issue_url}) ({issue.title}).\n\nCloses
          #{issue.number}."'
        - '        )'
        - '        body += "\n\n" + format_trajectory_markdown(trajectory)'
        - '        api = GhApi(token=self._github_token)'
        - '        if not _dry_run:'
        - '            pr_info = api.pulls.create('
        - '                owner=owner,'
        - '                repo=repo,'
        - '                title=f"SWE-agent[bot] PR to fix: {issue.title}",'
        - '                head=head,'
        - '                base="main",'
        - '                body=body,'
        - '                draft=True,'
        - '            )'
        - '            self.logger.info('
        - "                f\"\U0001F389 PR created as a draft at {pr_info.html_url}.\
          \ Please review it carefully, push \""
        - '                "any required changes onto the branch and then click "'
        - '                "''Ready for Review'' to bring it to the attention of the
          maintainers.",'
        - '            )'
      functions: []
      text:
      - from __future__ import annotations
      - ''
      - import datetime
      - import hashlib
      - import json
      - import logging
      - import os
      - import random
      - import re
      - import shlex
      - import subprocess
      - import time
      - import traceback
      - from dataclasses import dataclass
      - from pathlib import Path
      - from typing import Any
      - ''
      - import gymnasium as gym
      - import yaml
      - from ghapi.all import GhApi
      - from git import Repo
      - from simple_parsing.helpers.serialization.serializable import FrozenSerializable
      - from swebench.harness.constants import MAP_REPO_VERSION_TO_SPECS
      - from swebench.harness.utils import get_environment_yml, get_requirements
      - ''
      - import docker
      - import docker.errors
      - import docker.models.containers
      - from sweagent import REPO_ROOT
      - from sweagent.environment.utils import (
      - '    PROCESS_DONE_MARKER_END,'
      - '    PROCESS_DONE_MARKER_START,'
      - '    InvalidGithubURL,'
      - '    copy_anything_to_container,'
      - '    copy_file_to_container,'
      - '    format_trajectory_markdown,'
      - '    get_container,'
      - '    get_gh_issue_data,'
      - '    get_instances,'
      - '    image_exists,'
      - '    parse_gh_issue_url,'
      - '    read_with_timeout,'
      - '    read_with_timeout_experimental,'
      - )
      - from sweagent.utils.config import keys_config
      - from sweagent.utils.log import default_logger, get_logger
      - ''
      - LONG_TIMEOUT = float(keys_config.get("SWE_AGENT_ENV_LONG_TIMEOUT", 500))
      - AGENT_ACTION_TIMEOUT = float(keys_config.get("SWE_AGENT_ACTION_TIMEOUT", 25))
      - PATH_TO_REQS = "/root/requirements.txt"
      - PATH_TO_ENV_YML = "/root/environment.yml"
      - ''
      - ''
      - '@dataclass(frozen=True)'
      - 'class EnvironmentArguments(FrozenSerializable):'
      - '    """Configure data sources and setup instructions for the environment
        in which we solve the tasks."""'
      - ''
      - '    # Source of issue statement/problem statement. To run over a batch of
        issues: Path to a data file'
      - '    # (`json`, `jsonl`) or directory. To run over single issue: github issue
        url or path to markdown file'
      - '    # with problem statement or problem statement as text prefixed with `text://`.'
      - '    data_path: str'
      - '    # Name of the docker image to use for the environment. Defaults to sweagent/swe-agent:latest'
      - '    image_name: str = "sweagent/swe-agent:latest"'
      - '    # When running over SWE-bench issues: Specify the split to use.'
      - '    split: str = "dev"'
      - '    # Specify a branch name or a commit hash to checkout before running the
        task.'
      - '    # Only used when running over a single problem statement/issue.'
      - '    base_commit: str | None = None'
      - '    # Use a persistent container with this name. After every task, the container
        will be paused, but not removed.'
      - '    # This is useful for speedup when running multiple tasks from the same
        repositories in a row, as the repositories'
      - '    # will have already been cloned and the conda environments will have
        been installed.'
      - '    container_name: str | None = None'
      - '    # Try to install the environment before running the task.'
      - '    install_environment: bool = True'
      - '    # No effect, kept for backwards compatibility.'
      - '    timeout: int | None = None'
      - '    # Enable environment logger.'
      - '    verbose: bool = False'
      - '    # Do not use attempt to use a repository mirror from https://github.com/swe-bench.'
      - '    no_mirror: bool = False'
      - '    # Cache task images to speed up task initialization. This means that
        the environment will be saved as a'
      - '    # docker image for every repository, base commit, and setup combination.
        This uses quite a bit of disk space'
      - '    # but speeds up task initialization significantly when running over multiple
        issues from the same repository'
      - '    # (or using different models for the same issues).'
      - '    cache_task_images: bool = False'
      - '    # Custom environment setup. Currently only used when data_path points
        to a single issue.'
      - '    # This needs to be either a string pointing to a yaml file (with yaml,
        yml file extension)'
      - '    # or a shell script (with sh extension).'
      - '    # See https://princeton-nlp.github.io/SWE-agent/usage/cl_tutorial#environment-setup'
      - '    environment_setup: str | None = None'
      - '    # Only used when running on single issue. Path to local repository or
        github repository.'
      - '    repo_path: str = ""'
      - ''
      - '    def __post_init__(self):'
      - '        if self.timeout is not None:'
      - '            default_logger.warning("The ''timeout'' argument is deprecated
        and has no effect.")'
      - '        if self.cache_task_images and self.container_name:'
      - '            msg = ('
      - '                "Not allowed to use persistent container with caching task
        images "'
      - '                "(probably doesn''t make sense and takes excessive space)."'
      - '            )'
      - '            raise ValueError(msg)'
      - '        if self.container_name is not None and self.container_name.strip()
        == "":'
      - '            msg = "Set container_name to None if you don''t want to use a
        persistent container."'
      - '            raise ValueError(msg)'
      - ''
      - ''
      - 'class EnvHook:'
      - '    """Hook to be used in `SWEEnv`.'
      - ''
      - '    Subclass this class, add functionality and add it with `SWEEEnv.add_hook(hook)`.'
      - '    This allows to inject custom functionality at different stages of the
        environment'
      - '    lifecycle, in particular to connect SWE-agent to a new interface (like
        a GUI).'
      - '    """'
      - ''
      - '    def on_init(self) -> None:'
      - '        """Gets called when the hook is added"""'
      - ''
      - '    def on_copy_repo_started(self, *, repo_type: str, repo_path: str) ->
        None:'
      - '        """Gets called when the repository is being cloned to the container'
      - ''
      - '        Args:'
      - '            repo_type: Type of repository. Either ''local'' or ''github'''
      - '            repo_path: Path to the repository'
      - '        """'
      - ''
      - '    def on_install_env_started(self) -> None:'
      - '        """Called when we start installing the environment"""'
      - ''
      - '    def on_close(self):'
      - '        """Called when the environment is closed"""'
      - ''
      - ''
      - 'class SWEEnv(gym.Env):'
      - '    """Gym environment for SWE-bench. This class should handle all communication
        with the docker container."""'
      - ''
      - '    name = "swe_main"'
      - '    # This prefix will be prepended to the image name when caching task images'
      - '    cached_image_prefix = "swe-agent-task-env-"'
      - ''
      - '    def __init__(self, args: EnvironmentArguments):'
      - '        super().__init__()'
      - '        t0 = time.perf_counter()'
      - '        self.args = args'
      - '        self.base_commit: str | None = None'
      - '        self.communicate_output: str | None = None'
      - '        self.container_name: str | None = args.container_name'
      - '        self.install_environment = args.install_environment'
      - '        self.logger = get_logger("SWEEnv")'
      - '        self.persistent = args.container_name is not None'
      - '        self.returncode: None | int = None'
      - '        if not self.args.verbose:'
      - '            # fixme: This creates problems if we have multiple instances
        of this class'
      - '            self.logger.disabled = True'
      - ''
      - '        #: The commit hash of the swe-agent repository'
      - '        self.commit_sha = None'
      - '        try:'
      - '            repo = Repo(REPO_ROOT, search_parent_directories=True)'
      - '            self.commit_sha = repo.head.object.hexsha'
      - '        except KeyboardInterrupt:'
      - '            raise'
      - '        except Exception as e:'
      - '            self.logger.exception("Failed to get commit hash for this repo:
        %s", str(e))'
      - ''
      - '        self._github_token: str = keys_config.get("GITHUB_TOKEN", "")  #
        type: ignore'
      - ''
      - '        # Load Task Instances'
      - '        self.data_path = self.args.data_path'
      - '        self.data = get_instances('
      - '            self.data_path,'
      - '            self.args.base_commit,'
      - '            self.args.split,'
      - '            token=self._github_token,'
      - '            repo_path=self.args.repo_path,'
      - '        )'
      - '        #: Instance we''re currently processing. Gets set in self.reset.'
      - '        self.record: dict[str, Any] | None = None'
      - "        self.logger.info(f\"\U0001F4BD Loaded dataset from {self.data_path}\"\
        )"
      - ''
      - '        # Establish connection with execution container'
      - '        self.image_name = args.image_name'
      - '        self.container_obj: docker.models.containers.Container | None = None'
      - '        self.container: subprocess.Popen | None = None'
      - '        self._reset_container()'
      - ''
      - '        self.idx = 0'
      - '        self.clean_multi_line_functions = lambda x: x'
      - '        self.hooks: list[EnvHook] = []'
      - ''
      - '        self.logger.debug("Environment initialization took %.2f seconds",
        time.perf_counter() - t0)'
      - ''
      - '    def _get_cached_task_image_name(self) -> str:'
      - '        assert self.record is not None'
      - '        inputs: list[str] = ['
      - '            self.record["repo"],'
      - '            self.record["base_commit"],'
      - '            self.args.environment_setup or "no_setup",'
      - '        ]'
      - '        tag = hashlib.sha256("".join(inputs).encode()).hexdigest()[:50]'
      - '        return f"{self.cached_image_prefix}{tag}"'
      - ''
      - '    def add_hook(self, hook: EnvHook):'
      - '        """Add `EnvHook` to the environment.'
      - ''
      - '        This allows to inject custom functionality at different stages of
        the environment'
      - '        lifecycle, in particular to connect SWE-agent to a new interface
        (like a GUI).'
      - '        """'
      - '        hook.on_init()'
      - '        self.hooks.append(hook)'
      - ''
      - '    @property'
      - '    def _repo_name(self) -> str:'
      - '        """Name of the local copy of the repository"""'
      - '        assert self.record is not None'
      - '        return self.record["repo"].replace("/", "__")'
      - ''
      - '    def _copy_repo(self) -> str:'
      - '        """Clone/copy repository/codebase in container'
      - ''
      - '        Returns:'
      - '            folder name of clone'
      - '        """'
      - '        assert self.container_obj is not None'
      - '        assert self.record is not None  # mypy'
      - '        for hook in self.hooks:'
      - '            hook.on_copy_repo_started(repo_type=self.record["repo_type"],
        repo_path=self.record["repo"])'
      - '        if self.record["repo_type"] == "local":'
      - '            copy_anything_to_container('
      - '                self.container_obj,'
      - '                self.record["repo"].removeprefix("local://"),'
      - '                "/" + self._repo_name,'
      - '            )'
      - '            self.communicate_with_handling('
      - '                input=f"chown -R root:root {self._repo_name}",'
      - '                error_msg="Failed to change permissions on copied repository",'
      - '            )'
      - '            return self._repo_name'
      - '        assert self.record["repo_type"] == "github"'
      - '        token_prefix = ""'
      - '        if self._github_token:'
      - '            token_prefix = f"{self._github_token}@"'
      - '        # fixme: This if statement is brittle and should probably be replaced
        with better logic'
      - '        if not self.args.no_mirror and self.record["problem_statement_source"]
        == "swe-bench":'
      - '            self.logger.info(f"{self._repo_name} not found in container,
        cloning...")'
      - '            clone_url = f"https://{token_prefix}github.com/swe-bench/{self._repo_name}.git"'
      - '        else:'
      - '            self.logger.info("Trying to clone from non-mirror...")'
      - '            clone_url = f"https://{token_prefix}github.com/{self.record[''repo'']}.git"'
      - '        clone_method = keys_config.get("SWE_AGENT_CLONE_METHOD", default="shallow",
        choices=["shallow", "full"])'
      - '        if len(self.data) > 1 or self.persistent:'
      - '            msg = "Falling back to full cloning method due to multiple instances
        or persistent container"'
      - '            clone_method = "full"'
      - '            self.logger.debug(msg)'
      - '        if clone_method == "full":'
      - '            self.communicate_with_handling('
      - '                input=f"git clone {clone_url} {self._repo_name}",'
      - '                error_msg="Failed to clone repository from conservative method",'
      - '                timeout_duration=LONG_TIMEOUT,'
      - '            )'
      - '        else:'
      - '            base_commit = self.record["base_commit"]'
      - '            self.communicate_with_handling('
      - '                input="&&".join('
      - '                    ('
      - '                        f"mkdir {self._repo_name}",'
      - '                        f"cd {self._repo_name}",'
      - '                        "git init",'
      - '                        f"git remote add origin {clone_url}",'
      - '                        f"git fetch --depth 1 origin {base_commit}",'
      - '                        "git checkout FETCH_HEAD",'
      - '                        "cd ..",'
      - '                    )'
      - '                ),'
      - '                error_msg="Failed to clone repository with fast method",'
      - '                timeout_duration=LONG_TIMEOUT,'
      - '            )'
      - '        return self._repo_name'
      - ''
      - '    def reset(self, index: int | None = None, apply_test_patch: bool = False)
        -> tuple[str | None, dict]:'
      - '        """'
      - '        Function to reset container between each task instance.'
      - ''
      - '        * Clones instance''s repository'
      - '        * Cleans repository of prior modifications'
      - '        * Resets environment variables'
      - '        * Check out base commit'
      - ''
      - '        Args:'
      - '            index: index of task instance to reset to'
      - ''
      - '        Returns:'
      - '            observation: output from container'
      - '            info: additional information (e.g. debugging information)'
      - '        """'
      - '        info = {}'
      - '        info["commit_sha"] = self.commit_sha'
      - ''
      - '        # Get task instance'
      - '        self.idx = index if index is not None else self.idx'
      - '        self.record = self.data[self.idx]'
      - '        self.idx += 1'
      - ''
      - '        # Set query, gold command'
      - '        self.base_commit = self.record["base_commit"]'
      - '        self.query = self.record["problem_statement"]'
      - '        self.reward = None'
      - ''
      - '        ### Reset Container ###'
      - ''
      - '        if self.args.cache_task_images:'
      - '            cached_image = self._get_cached_task_image_name()'
      - '            if image_exists(cached_image):'
      - '                self.logger.info(f"Restore environment from cached image
        {cached_image}")'
      - '                self.close()  # stop current container'
      - '                self._init_container(cached_image=cached_image)'
      - '                self.communicate("export $(xargs </.env)")'
      - '                envs = self.communicate("env")'
      - '                self.logger.debug(f"Environment variables restored from the
        image:\n{envs}\n")'
      - '                if apply_test_patch:'
      - '                    self._apply_test_patch()'
      - '                return None, info'
      - '            else:'
      - '                self.logger.info(f"Cached image {cached_image} not found,
        rebuilding task environment...")'
      - ''
      - '        # Clone repository if not already cloned'
      - '        self.communicate(input="cd /")'
      - '        folders = self.communicate(input="ls").split("\n")'
      - '        if self._repo_name not in folders:'
      - '            self._copy_repo()'
      - ''
      - '        # Clean repository of any modifications + Checkout base commit'
      - '        for cmd in ['
      - '            "echo -n > /root/files_to_edit.txt",'
      - '            f"cd {self._repo_name}",'
      - '            "export ROOT=$(pwd -P)",'
      - '            "git status",'
      - '            "git restore .",'
      - '            f"git reset --hard {self.base_commit}",'
      - '            "git clean -fdxq",'
      - '        ]:'
      - '            self.communicate_with_handling('
      - '                input=cmd,'
      - '                error_msg="Failed to clean repository",'
      - '            )'
      - ''
      - '        # Reset environment variables'
      - '        for cmd in ['
      - '            ''export CURRENT_FILE=""'','
      - '            "export CURRENT_LINE=0",'
      - '            "export SEARCH_RESULTS=()",'
      - '            "export SEARCH_FILES=()",'
      - '            "export SEARCH_INDEX=0",'
      - '        ]:'
      - '            self.communicate_with_handling('
      - '                input=cmd,'
      - '                error_msg="Failed to reset environment variables",'
      - '            )'
      - ''
      - '        # Set up environment'
      - '        self.communicate_with_handling('
      - '            "source /root/miniconda3/etc/profile.d/conda.sh",'
      - '            error_msg="Failed to source conda",'
      - '        )'
      - ''
      - '        system = self.communicate("uname -s").strip().lower()'
      - '        arch = self.communicate("uname -m").strip().lower()'
      - '        if system == "linux" and arch == "x86_64":'
      - '            self.communicate_with_handling('
      - '                "apt update; apt install build-essential -y",'
      - '                error_msg="Failed to install build-essential",'
      - '                timeout_duration=LONG_TIMEOUT,'
      - '            )'
      - ''
      - '        # Call install environment helper function if specified'
      - '        if self.install_environment:'
      - '            self.install_env()'
      - '        # Install mypy for linting purposes'
      - '        self.communicate_with_handling("pip install flake8", error_msg="Failed
        to install flake8 (lint library)")'
      - ''
      - '        if self.args.cache_task_images:'
      - '            envs = self.communicate("env")'
      - '            self.logger.debug(f"Environment variables to save:\n{envs}\n")'
      - '            self.communicate("env >> /.env")'
      - '            assert self.container_obj is not None  # mypy'
      - '            self.container_obj.commit(cached_image)'
      - '            self.logger.info(f"Container with environment {self.container_obj.id}
        cached as image {cached_image}")'
      - ''
      - '        if apply_test_patch:'
      - '            self._apply_test_patch()'
      - '        # Write any metadata to info if necessary'
      - '        return None, info'
      - ''
      - '    def _apply_test_patch(self):'
      - '        """'
      - '        Apply test patch for oracle setting'
      - '        """'
      - '        assert self.record is not None'
      - '        path_to_patch = "test.patch"'
      - '        with open(path_to_patch, "w") as f:'
      - '            f.write(self.record["test_patch"])'
      - '        subprocess.run('
      - '            f"docker cp {path_to_patch} {self.container_name}:/root/test.patch",'
      - '            shell=True,'
      - '            check=False,'
      - '        )'
      - '        self.communicate_with_handling('
      - '            input="git apply /root/test.patch",'
      - '            error_msg="Failed to apply test patch correctly",'
      - '        )'
      - '        os.remove(path_to_patch)'
      - ''
      - '    def step(self, action: str) -> tuple[str | None, int, bool, dict]:'
      - '        """'
      - '        Runs an action proposed by the agent in the environment and returns
        the corresponding output.'
      - ''
      - '        Args:'
      - '            action: command to run in bash shell'
      - ''
      - '        Returns:'
      - '            observation:  output from container'
      - '            reward: value between 0 and 1 quantifying correctness of output
        + environment state'
      - '            done: whether task is over'
      - '            info: additional information (e.g. debugging information)'
      - '        """'
      - '        info = {}'
      - ''
      - '        observation = ""'
      - '        # Handle special actions'
      - '        if action.strip() == "skip":'
      - '            observation = "Skipped"'
      - '            info["exit_status"] = "skipped"'
      - '            return observation, 0, True, info'
      - '        if action in {"exit_context", "exit_cost", "exit_error", "exit_format",
        "exit_api"}:'
      - '            try:'
      - '                observation = self.communicate(input="submit")'
      - '                submission = self.get_submission(observation)'
      - '                assert submission is not None and submission.strip() != "",
        AssertionError("No submission found.")'
      - '                self.logger.info(f"Found submission: {submission}")'
      - '                info["exit_status"] = f"submitted ({action})"'
      - '                info["submission"] = submission'
      - '                observation = "Exited (autosubmitted)"'
      - '                self.logger.info("Exiting with autosubmission")'
      - '                return observation, 0, True, info'
      - '            except KeyboardInterrupt:'
      - '                raise'
      - '            except:'
      - '                observation = "Exited"'
      - '                info["exit_status"] = action'
      - '                return observation, 0, True, info'
      - ''
      - '        # Attempt to run action in container'
      - '        observation = ""'
      - '        try:'
      - '            observation = self.communicate(input=action, timeout_duration=AGENT_ACTION_TIMEOUT,
        set_last_action=True)'
      - '        except TimeoutError:'
      - '            try:'
      - '                self.interrupt()'
      - '                observation += "\nEXECUTION TIMED OUT"'
      - '            except RuntimeError as e:'
      - '                observation += "\nEXECUTION TIMED OUT AND INTERRUPT FAILED.
        RESTARTING PROCESS."'
      - '                info["exit_status"] = "early_exit"'
      - '                self.logger.warning(f"Failed to interrupt container: {e}\nRESTARTING
        PROCESS.")'
      - '                self.reset_container()'
      - '                return observation, 0, True, info'
      - '        except RuntimeError as e:'
      - '            observation += "\nCOMMAND FAILED TO EXECUTE. RESTARTING PROCESS."'
      - '            info["exit_status"] = "early_exit"'
      - '            self.logger.warning(f"Failed to execute command: {e}\nRESTARTING
        PROCESS.")'
      - '            self.reset_container()'
      - '            return observation, 0, True, info'
      - '        except BrokenPipeError as e:'
      - '            observation += "\nBROKEN PIPE ERROR. RESTARTING PROCESS."'
      - '            info["exit_status"] = "early_exit"'
      - '            self.logger.error(f"Broken pipe error: {e}\nRESTARTING PROCESS.")'
      - '            self.reset_container()'
      - '            return observation, 0, True, info'
      - '        except Exception:'
      - '            observation += "\nEXECUTION FAILED OR COMMAND MALFORMED"'
      - '            self.logger.exception("Unknown exception")'
      - ''
      - '        # Record submission and end episode if `submit` keyword found'
      - '        submission = self.get_submission(observation)'
      - '        if submission is not None:'
      - '            self.logger.info(f"Found submission: {submission}")'
      - '            info["exit_status"] = "submitted"'
      - '            info["submission"] = submission if submission.strip() != "" else
        None'
      - '            observation = submission if submission.strip() != "" else None'
      - '            return observation, 0, True, info'
      - '        return observation, 0, False, info'
      - ''
      - '    def close(self) -> None:'
      - '        """'
      - '        Handle environment shutdown'
      - '        """'
      - '        self.logger.info("Beginning environment shutdown...")'
      - '        try:'
      - '            self.communicate(input="exit")'
      - '        except KeyboardInterrupt:'
      - '            raise'
      - '        except:'
      - '            self.logger.warning("Errors when exiting container", exc_info=True)'
      - '        assert self.container is not None  # mypy'
      - '        self.container.terminate()'
      - '        if self.container_obj is None:'
      - '            pass'
      - '        elif self.persistent:'
      - '            # stopping is Podman specific, but doesn''t hurt to include'
      - '            # https://stackoverflow.com/a/32428199/'
      - '            # Want to avoid https://github.com/princeton-nlp/SWE-agent/issues/496'
      - '            # Note that container_obj.status might not be updated throughout
        the container'
      - '            # lifecycle, so let''s get the container_obj again'
      - '            assert self.container_name'
      - '            try:'
      - '                self.container_obj = docker.from_env().containers.get(self.container_name)'
      - '            except Exception as e:'
      - '                self.logger.warning(f"Failed to get fresh container object:
        {e}", exc_info=True)'
      - '            if self.container_obj.status not in {"paused", "exited", "dead",
        "stopping"}:'
      - '                try:'
      - '                    self.container_obj.pause()'
      - '                except Exception:'
      - '                    self.logger.warning("Failed to pause container.", exc_info=True)'
      - '                except KeyboardInterrupt:'
      - '                    raise'
      - '                else:'
      - '                    self.logger.info("Agent container paused")'
      - '            else:'
      - '                self.logger.info(f"Agent container status: {self.container_obj.status}")'
      - '        else:'
      - '            try:'
      - '                self.container_obj.remove(force=True)'
      - '            except KeyboardInterrupt:'
      - '                raise'
      - '            except docker.errors.NotFound:'
      - '                # We already tried to exit the container, so it''s actually
        good if'
      - '                # it''s not found'
      - '                pass'
      - '            except Exception:'
      - '                self.logger.warning("Failed to remove container", exc_info=True)'
      - '            else:'
      - '                self.logger.info("Agent container stopped")'
      - '        for hook in self.hooks:'
      - '            hook.on_close()'
      - ''
      - '    # MARK: Helper functions #'
      - ''
      - '    def _reset_container(self) -> None:'
      - '        if self.container is not None:'
      - '            try:'
      - '                self.container.terminate()'
      - '            except KeyboardInterrupt:'
      - '                raise'
      - '            except:'
      - '                self.logger.warning("Failed to terminate container", exc_info=True)'
      - '            else:'
      - '                self.logger.debug("Terminated container")'
      - '        self._init_container()'
      - '        self._init_scripts()'
      - ''
      - '    def reset_container(self) -> None:'
      - '        self.close()'
      - '        self.container = None'
      - '        self.container_obj = None'
      - '        self._reset_container()'
      - ''
      - '    @staticmethod'
      - '    def _get_container_name(image_name: str) -> str:'
      - '        """Return name of container"""'
      - '        process_id = str(os.getpid())'
      - '        current_time = str(datetime.datetime.now())'
      - '        unique_string = current_time + process_id'
      - '        hash_object = hashlib.sha256(unique_string.encode())'
      - '        image_name_sanitized = image_name.replace("/", "-")'
      - '        image_name_sanitized = image_name_sanitized.replace(":", "-")'
      - '        return f"{image_name_sanitized}-{hash_object.hexdigest()[:10]}"'
      - ''
      - '    def _init_container(self, cached_image: str | None = None) -> None:'
      - '        """'
      - '        Handles container initialization. Defines container name and creates
        it.'
      - '        If cached_image is provided, it will use that image name instead
        of the default.'
      - '        """'
      - '        image_name = self.image_name'
      - '        if cached_image is not None:'
      - '            image_name = cached_image'
      - '            self.logger.info(f"Using cached image: {image_name}")'
      - '        if self.persistent:'
      - '            assert self.container_name is not None'
      - '        else:'
      - '            # Make sure that we get a new container name just in case removing
        didn''t work.'
      - '            # Might be a fix for https://github.com/princeton-nlp/SWE-agent/issues/451'
      - '            self.container_name = self._get_container_name(image_name)'
      - '        self.container, self.parent_pids = get_container(self.container_name,
        image_name, persistent=self.persistent)'
      - '        try:'
      - '            client = docker.from_env(timeout=600)'
      - '        except docker.errors.DockerException as e:'
      - '            if "Error while fetching server API version" in str(e):'
      - '                msg = "Docker is not running. Please start Docker and try
        again."'
      - '            else:'
      - '                msg = "Unknown docker exception occurred. Are you sure docker
        is running?"'
      - '            raise RuntimeError(msg) from e'
      - '        t0 = time.time()'
      - '        self.container_obj = None'
      - '        while time.time() - t0 < 60:'
      - '            try:'
      - '                self.container_obj = client.containers.get(self.container_name)'
      - '            except docker.errors.NotFound:'
      - '                self.logger.debug("Couldn''t find container. Let''s wait
        and retry.")'
      - '                time.sleep(1)'
      - '            else:'
      - '                break'
      - '        else:'
      - '            print(f"{self.persistent=}")'
      - '            available_containers = client.containers.list(all=True)'
      - '            available_containers_info = json.dumps([str(c.attrs) for c in
        available_containers], indent=2)'
      - '            print(available_containers_info)'
      - '            msg = "Failed to get container object."'
      - '            raise RuntimeError(msg)'
      - "        self.logger.info(\"\U0001F331 Environment Initialized\")"
      - ''
      - '    def _init_scripts(self):'
      - '        """'
      - '        Initialize custom commands within container'
      - '        """'
      - '        self.communicate_with_handling('
      - '            "source /root/.bashrc",'
      - '            error_msg="Failed to source .bashrc",'
      - '        )'
      - '        self.communicate_with_handling('
      - '            "mkdir -p /root/commands",'
      - '            error_msg="Failed to create commands directory",'
      - '        )'
      - '        self.communicate_with_handling('
      - '            "touch /root/commands/__init__.py",'
      - '            error_msg="Failed to create __init__.py",'
      - '        )'
      - '        self.communicate_with_handling('
      - '            "export PATH=$PATH:/root/commands",'
      - '            error_msg="Failed to add commands directory to PATH",'
      - '        )'
      - ''
      - '    def _communicate_experimental('
      - '        self,'
      - '        input: str,'
      - '        timeout_duration: int | float = 25,'
      - '    ) -> str:'
      - '        """Experimental version of `_communicate`"""'
      - '        assert self.container is not None'
      - '        # Sleep to ensure that the exit code is in the last line'
      - '        # See https://github.com/princeton-nlp/SWE-agent/issues/595'
      - '        command_suffix = ('
      - '            f''EXITSTATUS="$?"; sleep 0.01; echo {PROCESS_DONE_MARKER_START}$EXITSTATUS{PROCESS_DONE_MARKER_END}\n'''
      - '        )'
      - '        try:'
      - '            self.returncode = None'
      - '            cmd = input if input.endswith("\n") else input + "\n"'
      - '            cmd += command_suffix'
      - '            os.write(self.container.stdin.fileno(), cmd.encode())'
      - '            time.sleep(0.03)'
      - '            self.container.stdin.flush()'
      - '        except BrokenPipeError:'
      - '            traceback.print_exc()'
      - '            self.logger.error("Failed to communicate with container. Check
        docker logs for more information.")'
      - '            msg = "Failed to communicate with container"'
      - '            raise RuntimeError(msg)'
      - ''
      - '        try:'
      - '            buffer, exit_code = read_with_timeout_experimental(self.container,
        timeout_duration)'
      - '        except Exception:'
      - '            msg = f"Read with timeout failed on input:\n---\n{input}\n---"'
      - '            self.logger.error(msg)'
      - '            raise'
      - '        if exit_code == "$EXITSTATUS":'
      - '            # this sometimes happens if the command badly fails'
      - '            # for example if you just try to run python with no arguments'
      - '            # in this case, the error message is usually also garbage, so
        let''s set'
      - '            # something new.'
      - '            # See https://github.com/princeton-nlp/SWE-agent/issues/630'
      - '            buffer = ('
      - '                "Unkknown error occurred when running the command. Please
        double check syntax "'
      - '                "and that you''re not running an interactive command."'
      - '            )'
      - '            self.logger.warning("Couldn''t get real exit code. Setting it
        to 999")'
      - '            exit_code = 999'
      - '        elif not exit_code.isdigit():'
      - '            msg = f"Failed to get exit code. Output:\n---\n{buffer}\n---"'
      - '            raise RuntimeError(msg)'
      - '        self.returncode = int(exit_code)'
      - '        return buffer'
      - ''
      - '    def _communicate('
      - '        self,'
      - '        input: str,'
      - '        timeout_duration: int | float = 25,'
      - '    ) -> str:'
      - '        """Runs command in container and returns output'
      - ''
      - '        Args:'
      - '            input: command to run in container'
      - '            timeout_duration: duration to wait for output'
      - '        """'
      - '        assert self.container is not None'
      - '        communicate_method = keys_config.get('
      - '            "SWE_AGENT_COMMUNICATE_METHOD", default="end-marker", choices=["end-marker",
        "processes"]'
      - '        )'
      - '        if communicate_method == "end-marker":'
      - '            return self._communicate_experimental(input, timeout_duration)'
      - '        try:'
      - '            self.returncode = None'
      - '            cmd = input if input.endswith("\n") else input + "\n"'
      - '            os.write(self.container.stdin.fileno(), cmd.encode())'
      - '            time.sleep(0.1)'
      - '            self.container.stdin.flush()'
      - '        except BrokenPipeError:'
      - '            traceback.print_exc()'
      - '            self.logger.error("Failed to communicate with container. Check
        docker logs for more information.")'
      - '            msg = "Failed to communicate with container"'
      - '            raise RuntimeError(msg)'
      - '        try:'
      - '            buffer = read_with_timeout(self.container, self.get_pids, timeout_duration)'
      - '            self.container.stdin.write("echo $?\n")'
      - '            time.sleep(0.1)'
      - '            self.container.stdin.flush()'
      - '            exit_code = read_with_timeout(self.container, self.get_pids,
        5).strip()'
      - '        except Exception as e:'
      - '            self.logger.error(f"Read with timeout failed on input:\n---\n{input}\n---")'
      - '            raise e'
      - '        if not exit_code.isdigit():'
      - '            msg = f"Failed to get exit code. Output:\n---\n{buffer}\n---"'
      - '            raise RuntimeError(msg)'
      - '        self.returncode = int(exit_code)'
      - '        return buffer'
      - ''
      - '    def _check_syntax(self, input: str) -> tuple[str, bool]:'
      - '        """'
      - '        Check syntax of command.'
      - ''
      - '        Returns:'
      - '            output: Output of the command'
      - '            success: whether the exit code was 0'
      - '        """'
      - '        output = self._communicate(f"/bin/bash -n <<''EOF''\n{input}\nEOF\n")'
      - '        return output, self.returncode == 0'
      - ''
      - '    def communicate(self, input: str, timeout_duration: int | float = 25,
        *, set_last_action: bool = False) -> str:'
      - '        """'
      - '        Sends input to container and returns output'
      - ''
      - '        Args:'
      - '            input: input to send to container'
      - '            timeout_duration: duration to wait for output'
      - '            set_last_action: whether to set the LAST_ACTION environment variable'
      - ''
      - '        Returns:'
      - '            output: output from container'
      - '        """'
      - '        if input.strip() != "exit":'
      - '            self.logger.log(logging.TRACE, "Input:\n%s", input)  # type:
        ignore'
      - '            output, valid = self._check_syntax(input)'
      - '            if not valid:'
      - '                return output  # shows syntax errors'
      - '            output = self._communicate('
      - '                input,'
      - '                timeout_duration=timeout_duration,'
      - '            )'
      - '            self.logger.log(logging.TRACE, "Output:\n%s", output)  # type:
        ignore'
      - '            self.communicate_output = output'
      - '            if set_last_action:'
      - '                # Cannot merge this with last command, because of multiline
        command'
      - '                # handling.'
      - '                last_action_string = shlex.quote(input.strip())'
      - '                input = f"export LAST_ACTION={last_action_string}"'
      - '                self._communicate(input, timeout_duration=5)'
      - '            return output'
      - '        else:'
      - '            self.container.terminate()'
      - '            self.returncode = 0'
      - '            self.communicate_output = ""'
      - '            return ""'
      - ''
      - '    def communicate_with_handling(self, input: str, error_msg: str, timeout_duration:
        int | float = 25) -> str:'
      - '        """'
      - '        Wrapper for communicate function that raises error if return code
        is non-zero'
      - ''
      - '        Args:'
      - '            input: input to send to container'
      - '            error_msg: error message to raise if return code is non-zero'
      - '            timeout_duration: duration to wait for output'
      - ''
      - '        Returns:'
      - '            output: output from container'
      - '        """'
      - '        logs = self.communicate(input, timeout_duration=timeout_duration)'
      - '        if self.returncode != 0:'
      - '            self.logger.error(f"{error_msg}: {logs}")'
      - '            self.close()'
      - '            msg = f"{error_msg}: {logs}"'
      - '            raise RuntimeError(msg)'
      - '        return logs'
      - ''
      - '    def get_available_actions(self) -> list[str]:'
      - '        """'
      - '        Returns list of available actions in current environment state'
      - ''
      - '        Currently not in use.'
      - '        """'
      - '        return []'
      - ''
      - '    def get_pids(self, all_pids: bool = False) -> list[str]:'
      - '        """'
      - '        Gets list of processes running inside docker container'
      - ''
      - '        Args:'
      - '            all_pids: whether to return all pids, or whether to exclude ps'
      - '                and parent PIDs'
      - ''
      - '        Returns:'
      - '            list of PIDs'
      - '        """'
      - '        pids = self.container_obj.exec_run("ps -eo pid,comm --no-headers").output.decode().split("\n")'
      - '        pids = [x.split() for x in pids if x]'
      - '        if not all_pids:'
      - '            pids = [x for x in pids if x[1] != "ps" and x[0] not in self.parent_pids]'
      - '        return pids'
      - ''
      - '    def get_submission(self, output: str) -> str | None:'
      - '        """'
      - '        Function for extracting diff patch submission at the end of an episode.'
      - ''
      - '        Args:'
      - '            output: `submit` observation'
      - ''
      - '        Returns:'
      - '            submission: diff patch submission'
      - '        """'
      - '        pattern = r"\<\<SUBMISSION\|\|(.*)\|\|SUBMISSION\>\>"'
      - '        match = re.search(pattern, output, re.DOTALL)'
      - '        if match is None:'
      - '            return None'
      - '        return match.group(1)'
      - ''
      - '    def run_shell_script(self, script_path: Path, *, location: str) -> None:'
      - '        """Run custom script supplied by user at `script_path`'
      - ''
      - '        Args:'
      - '            script_path: path to script file'
      - '            location: location of script file ''host'' or ''container'''
      - '        """'
      - '        if location == "host":'
      - '            return self._run_shell_script_host(script_path)'
      - '        elif location == "container":'
      - '            raise NotImplementedError'
      - '        msg = f"Invalid ''location'': {location}"'
      - '        raise ValueError(msg)'
      - ''
      - '    def _run_shell_script_host(self, script_path: Path) -> None:'
      - '        """Run shell script file (located on host) in container"""'
      - '        if not script_path.is_file():'
      - '            msg = f"Script not found at {script_path}"'
      - '            raise FileNotFoundError(msg)'
      - '        shell_commands = Path(script_path).read_text().splitlines(keepends=True)'
      - '        for i, cmd in enumerate(shell_commands):'
      - '            self.communicate_with_handling('
      - '                cmd,'
      - '                error_msg=f"Failed to execute line {i}.",'
      - '                timeout_duration=LONG_TIMEOUT,'
      - '            )'
      - ''
      - '    def _get_install_configs(self) -> dict | None:'
      - '        """Return config for environment setup"""'
      - '        assert self.record is not None  # mypy'
      - '        if ('
      - '            self.record["problem_statement_source"] != "swe-bench" or self.record["repo_type"]
        == "local"'
      - '        ) and self.args.environment_setup is None:'
      - '            self.logger.warning('
      - '                "install_environment is set to True, but the data path is
        a GitHub URL "'
      - '                "without an environment config file (environment_config key/flag).
        "'
      - '                "Skipping conda environment installation.",'
      - '            )'
      - '            return None'
      - '        if self.args.environment_setup is not None:'
      - '            assert isinstance(self.args.environment_setup, (str, os.PathLike))'
      - '            if Path(self.args.environment_setup).suffix in [".yml", ".yaml"]:'
      - '                try:'
      - '                    return yaml.safe_load(Path(self.args.environment_setup).read_text())'
      - '                except Exception as e:'
      - '                    msg = "Environment config file needs to be a yaml file"'
      - '                    raise ValueError(msg) from e'
      - '            elif Path(self.args.environment_setup).suffix == ".sh":'
      - '                return {'
      - '                    "shell_script_path": self.args.environment_setup,'
      - '                }'
      - '            else:'
      - '                msg = "Environment config file needs to be a yaml file or
        shell script"'
      - '                raise ValueError(msg)'
      - '        else:'
      - '            try:'
      - '                return MAP_REPO_VERSION_TO_SPECS[self.record["repo"]][str(self.record["version"])]'
      - '            except KeyError as e:'
      - '                msg = ('
      - '                    "Tried to look up install configs in swe-bench, but failed.
        "'
      - '                    "You can set a custom environment config with the environment_config
        key/flag."'
      - '                )'
      - '                raise ValueError(msg) from e'
      - ''
      - '    def _conda_environment_exists(self, env_name: str) -> bool:'
      - '        env_check = self.communicate(f"conda env list | grep {env_name}",
        timeout_duration=LONG_TIMEOUT)'
      - '        return env_check.strip() != ""'
      - ''
      - '    def install_env(self) -> None:'
      - '        """'
      - '        Creates conda environment and installs third party dependencies to
        allow code execution'
      - '        """'
      - '        t0 = time.perf_counter()'
      - '        for hook in self.hooks:'
      - '            hook.on_install_env_started()'
      - '        install_configs = self._get_install_configs()'
      - '        if not install_configs:'
      - '            return'
      - '        if "shell_script_path" in install_configs:'
      - '            assert len(install_configs) == 1'
      - '            self.run_shell_script(Path(install_configs["shell_script_path"]),
        location="host")'
      - '            return'
      - '        assert self.record is not None  # mypy'
      - '        # Create environment if does not exist yet'
      - '        env_name = f"{self._repo_name}__{self.record[''version'']}"'
      - '        if not self._conda_environment_exists(env_name):'
      - '            self.logger.info(f"{env_name} conda env not found, creating...")'
      - '            packages = install_configs.get("packages", "")'
      - '            if packages == "requirements.txt":'
      - '                # Create conda environment'
      - '                self.communicate_with_handling('
      - '                    f"conda create -n {env_name} python={install_configs[''python'']}
        -y",'
      - '                    error_msg="Failed to create conda environment",'
      - '                    timeout_duration=LONG_TIMEOUT,'
      - '                )'
      - '                self.logger.debug("Created conda environment")'
      - '                # Write reqs to requirements.txt in docker container'
      - '                content_reqs = get_requirements(self.record)'
      - '                copy_file_to_container(self.container_obj, content_reqs,
        PATH_TO_REQS)'
      - '                # Create conda environment + install reqs'
      - '                self.communicate_with_handling('
      - '                    f"conda activate {env_name}",'
      - '                    error_msg="Failed to activate conda environment",'
      - '                )'
      - '                self.communicate_with_handling('
      - '                    f"pip install -r {PATH_TO_REQS}",'
      - '                    error_msg="Failed to install requirements.txt",'
      - '                    timeout_duration=LONG_TIMEOUT,'
      - '                )'
      - '                self.logger.debug("Installed requirements from requirements.txt")'
      - '                self.communicate(f"rm {PATH_TO_REQS}")'
      - '            elif packages == "environment.yml":'
      - '                # Write environment.yml to file'
      - '                content_env_yml = get_environment_yml(self.record, env_name)'
      - '                # Hotfix for'
      - '                if not install_configs.get("no_use_env"):'
      - '                    content_env_yml += f''\n  - python={install_configs["python"]}\n'''
      - '                copy_file_to_container(self.container_obj, content_env_yml,
        PATH_TO_ENV_YML)'
      - '                if install_configs.get("no_use_env"):'
      - '                    # Create conda environment'
      - '                    self.communicate_with_handling('
      - '                        f"conda create -c conda-forge -n {env_name} python={install_configs[''python'']}
        -y",'
      - '                        error_msg="Failed to create conda environment",'
      - '                        timeout_duration=LONG_TIMEOUT,'
      - '                    )'
      - '                    self.logger.debug("Created conda environment")'
      - '                    # Install packages'
      - '                    self.communicate_with_handling('
      - '                        f"conda env update -f {PATH_TO_ENV_YML}",'
      - '                        error_msg="Failed to install environment.yml",'
      - '                        timeout_duration=LONG_TIMEOUT,'
      - '                    )'
      - '                    self.logger.debug("Installed packages from environment.yml")'
      - '                else:'
      - '                    # Create environment + install packages'
      - '                    self.communicate_with_handling('
      - '                        f"conda env create --file {PATH_TO_ENV_YML}",'
      - '                        error_msg="Failed to create conda environment with
        environment.yml",'
      - '                        timeout_duration=LONG_TIMEOUT,'
      - '                    )'
      - '                    self.logger.debug("Created conda environment with environment.yml")'
      - '                self.communicate(f"rm {PATH_TO_ENV_YML}")'
      - '            else:'
      - '                python_env = f"python{install_configs[''python'']}"'
      - '                if self._conda_environment_exists(python_env):'
      - '                    self.communicate_with_handling('
      - '                        f"conda create --name {env_name} --clone {python_env}",'
      - '                        error_msg="Failed to clone conda environment",'
      - '                        timeout_duration=LONG_TIMEOUT,'
      - '                    )'
      - '                    self.logger.debug("Cloned python conda environment")'
      - '                else:'
      - '                    self.logger.debug(f"Could not find {python_env}, creating
        new environment")'
      - '                    self.communicate_with_handling('
      - '                        f"conda create -n {env_name} python={install_configs[''python'']}
        -y",'
      - '                        error_msg="Failed to create conda environment",'
      - '                        timeout_duration=LONG_TIMEOUT,'
      - '                    )'
      - '                self.communicate_with_handling('
      - '                    f"conda activate {env_name}",'
      - '                    error_msg="Failed to activate conda environment",'
      - '                )'
      - '                if packages.strip():'
      - '                    self.communicate_with_handling('
      - '                        f"conda install {packages} -y",'
      - '                        error_msg="Failed to install packages",'
      - '                        timeout_duration=LONG_TIMEOUT,'
      - '                    )'
      - '                    self.logger.debug("Installed conda packages")'
      - '            # Install extra pip packages if specified'
      - '            if install_configs.get("pip_packages"):'
      - '                self.communicate_with_handling('
      - '                    f"source activate {env_name} && pip install {'' ''.join(install_configs[''pip_packages''])}",'
      - '                    error_msg="Failed to install pip packages",'
      - '                    timeout_duration=LONG_TIMEOUT,'
      - '                )'
      - '                self.logger.debug("Installed extra pip dependencies")'
      - ''
      - '        # Activate environment'
      - '        self.communicate_with_handling(f"conda activate {env_name}", error_msg="Failed
        to activate conda environment")'
      - ''
      - '        # Install repo at base commit'
      - '        if install_configs.get("pre_install"):'
      - '            self.logger.info("Running pre-install commands...")'
      - '            for pre_install_cmd in install_configs["pre_install"]:'
      - '                self.communicate_with_handling('
      - '                    pre_install_cmd,'
      - '                    error_msg="Pre-install commands failed to execute successfully",'
      - '                    timeout_duration=LONG_TIMEOUT,'
      - '                )'
      - '            self.logger.debug("Ran pre-install commands")'
      - '        self.logger.info(f"Installing {self._repo_name} at base commit...")'
      - '        if install_configs.get("install"):'
      - '            install_cmd = install_configs["install"]'
      - '            self.communicate_with_handling('
      - '                install_cmd,'
      - '                error_msg="Install command failed to execute successfully",'
      - '                timeout_duration=LONG_TIMEOUT,'
      - '            )'
      - '            self.logger.debug("Ran install command")'
      - '        if install_configs.get("post_install"):'
      - '            self.logger.info("Running post-install commands...")'
      - '            for post_install_cmd in install_configs["post_install"]:'
      - '                self.communicate_with_handling('
      - '                    post_install_cmd,'
      - '                    error_msg="Post-install commands failed to execute successfully",'
      - '                )'
      - '            self.logger.debug("Ran post-install commands")'
      - ''
      - '        self.logger.info("Installation step took %.2f seconds", time.perf_counter()
        - t0)'
      - ''
      - '    def add_commands(self, commands: list[dict]) -> None:'
      - '        """'
      - '        Adds custom commands to container'
      - '        """'
      - '        for command in commands:'
      - '            name = command["name"]'
      - '            contents = command["contents"]'
      - '            copy_file_to_container(self.container_obj, contents, f"/root/commands/{name}")'
      - '            if command["type"] == "source_file":'
      - '                self.communicate_with_handling('
      - '                    f"source /root/commands/{name}",'
      - '                    error_msg=('
      - '                        f"Failed to source {name}. If you meant to make a
        script,"'
      - '                        " start the file with a shebang (e.g. #!/usr/bin/env
        python)."'
      - '                    ),'
      - '                )'
      - '            elif command["type"] == "script":'
      - '                self.communicate_with_handling('
      - '                    f"chmod +x /root/commands/{name}",'
      - '                    error_msg=f"Failed to chmod {name}",'
      - '                )'
      - '            elif command["type"] == "utility":'
      - '                # nothing to do for utility scripts'
      - '                pass'
      - '            else:'
      - '                msg = f"Invalid command type: {command[''type'']}"'
      - '                raise ValueError(msg)'
      - ''
      - '    def interrupt(self) -> None:'
      - '        """'
      - '        Send interrupt signal to container and exhaust stdout buffer with
        a communicate call'
      - '        """'
      - '        assert self.container is not None'
      - '        assert self.container_obj is not None'
      - '        pids = self.get_pids()'
      - '        for pid, cmd in pids:'
      - '            if pid not in self.parent_pids and cmd != "ps":'
      - '                self.container_obj.exec_run(f"kill -9 {pid}")'
      - '        try:'
      - '            _ = read_with_timeout(self.container, self.get_pids, 20)'
      - '        except TimeoutError:'
      - '            pass'
      - '        try:'
      - '            output = self.communicate(input="echo ''interrupted''", timeout_duration=5)'
      - '            assert output.strip().endswith("interrupted"), "container health
        check failed"'
      - '        except TimeoutError:'
      - '            msg = "Failed to interrupt container"'
      - '            raise RuntimeError(msg)'
      - ''
      - '    def open_pr(self, *, trajectory, _dry_run: bool = False) -> None:'
      - '        """Create PR to repository'
      - ''
      - '        Args:'
      - '            trajectory: Trajectory of actions taken by the agent'
      - '            _dry_run: Whether to actually push anything or just simulate
        it'
      - '        """'
      - '        self.logger.info("Opening PR")'
      - '        # TODO: have better way of handling this'
      - '        # Adding random string suffix to avoid name conflicts if we had a
        previously failed run'
      - '        issue_url = self.args.data_path'
      - '        try:'
      - '            issue = get_gh_issue_data(issue_url, token=self._github_token)'
      - '        except InvalidGithubURL as e:'
      - '            msg = "Data path must be a github issue URL if --open_pr is set."'
      - '            raise ValueError(msg) from e'
      - '        branch_name = f"swe-agent-fix-#{issue.number}-" + str(random.random())[2:10]'
      - ''
      - '        self.communicate_with_handling('
      - '            input="rm -f model.patch",'
      - '            error_msg="Failed to remove model patch",'
      - '            timeout_duration=10,'
      - '        )'
      - '        self.communicate_with_handling('
      - '            input=f"git checkout -b {branch_name}",'
      - '            error_msg="Failed to switch to new branch",'
      - '            timeout_duration=10,'
      - '        )'
      - '        self.communicate_with_handling('
      - '            input="git add .",'
      - '            error_msg="Failed to add commits",'
      - '            timeout_duration=10,'
      - '        )'
      - '        dry_run_flag = "--allow-empty" if _dry_run else ""'
      - '        commit_msg = ['
      - '            shlex.quote("Fix: {issue.title}"),'
      - '            shlex.quote("Closes #{issue.number}"),'
      - '        ]'
      - '        self.communicate_with_handling('
      - '            input=f"git commit -m {commit_msg[0]} -m  {commit_msg[1]} {dry_run_flag}",'
      - '            error_msg="Failed to commit changes",'
      - '            timeout_duration=10,'
      - '        )'
      - ''
      - '        owner, repo, _ = parse_gh_issue_url(issue_url)'
      - '        # If `--repo_path` was specified with a different github URL, then
        the record will contain'
      - '        # the forking user'
      - '        assert self.record is not None'
      - '        if self.record["repo_type"] != "github":'
      - '            # We already validated that `--data_path` is a github issue URL'
      - '            # so this is the only case where we can reach here'
      - '            msg = "--repo_path must point to a github URL if --open_pr is
        set"'
      - '            raise ValueError(msg)'
      - '        forker, _ = self.record["repo"].split("/")'
      - '        head = branch_name'
      - '        remote = "origin"'
      - '        if forker != owner:'
      - '            head = f"{forker}:{branch_name}"'
      - '            token_prefix = ""'
      - '            if self._github_token:'
      - '                token_prefix = f"{self._github_token}@"'
      - '            fork_url = f"https://{token_prefix}github.com/{forker}/{repo}.git"'
      - '            self.logger.debug(f"Using fork: {fork_url}")'
      - '            self.communicate_with_handling('
      - '                input=f"git remote add fork {fork_url}",'
      - '                error_msg="Failed to create new git remote",'
      - '                timeout_duration=10,'
      - '            )'
      - '            remote = "fork"'
      - '        dry_run_prefix = "echo " if _dry_run else ""'
      - '        self.communicate_with_handling('
      - '            input=f"{dry_run_prefix} git push {remote} {branch_name}",'
      - '            error_msg=('
      - '                "Failed to push branch to remote. Please check your token
        and permissions. "'
      - '                "You might want to push to a fork with the push_gh_repo_url
        option."'
      - '            ),'
      - '            timeout_duration=10,'
      - '        )'
      - '        body = ('
      - '            f"This is a PR opened by AI tool [SWE Agent](https://github.com/princeton-nlp/SWE-agent/)
        "'
      - '            f"to close [#{issue.number}]({issue_url}) ({issue.title}).\n\nCloses
        #{issue.number}."'
      - '        )'
      - '        body += "\n\n" + format_trajectory_markdown(trajectory)'
      - '        api = GhApi(token=self._github_token)'
      - '        if not _dry_run:'
      - '            pr_info = api.pulls.create('
      - '                owner=owner,'
      - '                repo=repo,'
      - '                title=f"SWE-agent[bot] PR to fix: {issue.title}",'
      - '                head=head,'
      - '                base="main",'
      - '                body=body,'
      - '                draft=True,'
      - '            )'
      - '            self.logger.info('
      - "                f\"\U0001F389 PR created as a draft at {pr_info.html_url}.\
        \ Please review it carefully, push \""
      - '                "any required changes onto the branch and then click "'
      - '                "''Ready for Review'' to bring it to the attention of the
        maintainers.",'
      - '            )'
    utils.py:
      classes:
      - end_line: 458
        methods: []
        name: InvalidGithubURL
        start_line: 458
        text:
        - 'class InvalidGithubURL(ValueError): ...'
      - end_line: 634
        methods:
        - end_line: 526
          name: __init__
          start_line: 518
          text:
          - '    def __init__(self, token: str | None = None):'
          - '        """This helper class is used to build the data for an instance
            object,'
          - '        retrieving problem statements from github issues or local files
            and setting'
          - '        repo paths from github urls or local paths.'
          - '        """'
          - '        # Args that will be passed to the Instance constructor'
          - '        self.args = {}'
          - '        self.token = token'
          - '        self._instance_id_problem_suffix = ""'
        - end_line: 537
          name: set_problem_statement_from_gh_issue
          start_line: 528
          text:
          - '    def set_problem_statement_from_gh_issue(self, issue_url: str):'
          - '        owner, repo, issue_number = parse_gh_issue_url(issue_url)'
          - '        self.args["problem_statement"] = get_problem_statement_from_github_issue('
          - '            owner,'
          - '            repo,'
          - '            issue_number,'
          - '            token=self.token,'
          - '        )'
          - '        self.args["instance_id"] = f"{owner}__{repo}-i{issue_number}"'
          - '        self.args["problem_statement_source"] = "online"'
        - end_line: 540
          name: set_problem_statement_from_file
          start_line: 539
          text:
          - '    def set_problem_statement_from_file(self, file_path: str):'
          - '        self.set_problem_statement_from_text(Path(file_path).read_text())'
        - end_line: 545
          name: set_problem_statement_from_text
          start_line: 542
          text:
          - '    def set_problem_statement_from_text(self, text: str):'
          - '        self.args["problem_statement"] = text'
          - '        self.args["instance_id"] = hashlib.sha256(self.args["problem_statement"].encode()).hexdigest()[:6]'
          - '        self.args["problem_statement_source"] = "local"'
        - end_line: 558
          name: set_problem_statement
          start_line: 547
          text:
          - '    def set_problem_statement(self, data_path: str):'
          - '        """Get problem statement for a single instance from a github
            issue url or a'
          - '        path to a markdown or text file.'
          - '        """'
          - '        if data_path.startswith("text://"):'
          - '            return self.set_problem_statement_from_text(data_path.removeprefix("text://"))'
          - '        if is_github_issue_url(data_path):'
          - '            return self.set_problem_statement_from_gh_issue(data_path)'
          - '        if Path(data_path).is_file():'
          - '            return self.set_problem_statement_from_file(data_path)'
          - '        msg = f"Not sure how to get problem statement from {data_path=}."'
          - '        raise ValueError(msg)'
        - end_line: 569
          name: set_repo_info_from_gh_url
          start_line: 560
          text:
          - '    def set_repo_info_from_gh_url(self, url: str, base_commit: str |
            None = None):'
          - '        owner, repo = parse_gh_repo_url(url)'
          - '        self.args["repo"] = f"{owner}/{repo}"'
          - '        self.args["repo_type"] = "github"'
          - '        # Always get commit hash, because base_commit can also be branch
            or tag'
          - '        api = GhApi(token=self.token)'
          - '        self.args["base_commit"] = get_commit(api, owner, repo, ref=base_commit).sha'
          - '        if base_commit != self.args["base_commit"]:'
          - '            logger.info(f"Base commit reference {base_commit} resolved
            to commit hash {self.args[''base_commit'']}")'
          - '        self.args["version"] = self.args["base_commit"][:7]'
        - end_line: 586
          name: set_repo_info_from_local_path
          start_line: 571
          text:
          - '    def set_repo_info_from_local_path(self, path: str, base_commit: str
            | None = None):'
          - '        self.args["repo"] = str(Path(path).resolve())'
          - '        self.args["repo_type"] = "local"'
          - '        if base_commit:'
          - '            self.args["base_commit"] = base_commit'
          - '        else:'
          - '            try:'
          - '                repo = Repo(path, search_parent_directories=True)'
          - '            except InvalidGitRepositoryError as e:'
          - '                msg = f"Could not find git repository at {path=}."'
          - '                raise ValueError(msg) from e'
          - '            if repo.is_dirty():'
          - '                msg = f"Local git repository {path} is dirty. Please
            commit or stash changes."'
          - '                raise ValueError(msg)'
          - '            self.args["base_commit"] = repo.head.object.hexsha'
          - '        self.args["version"] = self.args["base_commit"][:7]'
        - end_line: 595
          name: set_repo_info
          start_line: 588
          text:
          - '    def set_repo_info(self, repo: str, base_commit: str | None = None):'
          - '        if is_github_repo_url(repo):'
          - '            self.set_repo_info_from_gh_url(repo, base_commit=base_commit)'
          - '        elif Path(repo).is_dir():'
          - '            self.set_repo_info_from_local_path(repo, base_commit=base_commit)'
          - '        else:'
          - '            msg = f"Could not determine repo path from {repo=}."'
          - '            raise ValueError(msg)'
        - end_line: 598
          name: set_from_dict
          start_line: 597
          text:
          - '    def set_from_dict(self, instance_dict: dict[str, Any]):'
          - '        self.args |= instance_dict'
        - end_line: 608
          name: set_missing_fields
          start_line: 600
          text:
          - '    def set_missing_fields(self):'
          - '        # TODO: This field is only needed while swe_env is using some
            questionable logic'
          - '        # to determine whether to clone from a mirror or not. This should
            be removed in the future.'
          - '        # Values: ''swe-bench'' (loaded from json/jsonl for swe-bench
            style inference),'
          - '        # ''online'' (loaded from github issue or similar) or ''local''
            (loaded from local file)'
          - '        if "problem_statement_source" not in self.args:'
          - '            self.args["problem_statement_source"] = "swe-bench"'
          - '        if "repo_type" not in self.args:'
          - '            self.args["repo_type"] = "github"'
        - end_line: 629
          name: validate
          start_line: 610
          text:
          - '    def validate(self):'
          - '        required_fields = ['
          - '            "problem_statement",'
          - '            "instance_id",'
          - '            "repo",'
          - '            "repo_type",'
          - '            "base_commit",'
          - '            "version",'
          - '            "problem_statement_source",'
          - '        ]'
          - '        if not all(x in self.args for x in required_fields):'
          - '            missing = set(required_fields) - set(self.args.keys())'
          - '            msg = f"Missing required fields: {missing=}"'
          - '            raise ValueError(msg)'
          - '        if self.args["repo_type"] not in {"github", "local"}:'
          - '            msg = f"Invalid repo type: {self.args[''repo_type'']=}"'
          - '            raise ValueError(msg)'
          - '        if self.args["repo_type"] == "github" and self.args["repo"].count("/")
            != 1:'
          - '            msg = f"Invalid repo format for {self.args[''repo_type'']=}:
            {self.args[''repo'']=}"'
          - '            raise ValueError(msg)'
        - end_line: 634
          name: build
          start_line: 631
          text:
          - '    def build(self) -> dict[str, Any]:'
          - '        self.set_missing_fields()'
          - '        self.validate()'
          - '        return self.args'
        name: InstanceBuilder
        start_line: 517
        text:
        - 'class InstanceBuilder:'
        - '    def __init__(self, token: str | None = None):'
        - '        """This helper class is used to build the data for an instance
          object,'
        - '        retrieving problem statements from github issues or local files
          and setting'
        - '        repo paths from github urls or local paths.'
        - '        """'
        - '        # Args that will be passed to the Instance constructor'
        - '        self.args = {}'
        - '        self.token = token'
        - '        self._instance_id_problem_suffix = ""'
        - ''
        - '    def set_problem_statement_from_gh_issue(self, issue_url: str):'
        - '        owner, repo, issue_number = parse_gh_issue_url(issue_url)'
        - '        self.args["problem_statement"] = get_problem_statement_from_github_issue('
        - '            owner,'
        - '            repo,'
        - '            issue_number,'
        - '            token=self.token,'
        - '        )'
        - '        self.args["instance_id"] = f"{owner}__{repo}-i{issue_number}"'
        - '        self.args["problem_statement_source"] = "online"'
        - ''
        - '    def set_problem_statement_from_file(self, file_path: str):'
        - '        self.set_problem_statement_from_text(Path(file_path).read_text())'
        - ''
        - '    def set_problem_statement_from_text(self, text: str):'
        - '        self.args["problem_statement"] = text'
        - '        self.args["instance_id"] = hashlib.sha256(self.args["problem_statement"].encode()).hexdigest()[:6]'
        - '        self.args["problem_statement_source"] = "local"'
        - ''
        - '    def set_problem_statement(self, data_path: str):'
        - '        """Get problem statement for a single instance from a github issue
          url or a'
        - '        path to a markdown or text file.'
        - '        """'
        - '        if data_path.startswith("text://"):'
        - '            return self.set_problem_statement_from_text(data_path.removeprefix("text://"))'
        - '        if is_github_issue_url(data_path):'
        - '            return self.set_problem_statement_from_gh_issue(data_path)'
        - '        if Path(data_path).is_file():'
        - '            return self.set_problem_statement_from_file(data_path)'
        - '        msg = f"Not sure how to get problem statement from {data_path=}."'
        - '        raise ValueError(msg)'
        - ''
        - '    def set_repo_info_from_gh_url(self, url: str, base_commit: str | None
          = None):'
        - '        owner, repo = parse_gh_repo_url(url)'
        - '        self.args["repo"] = f"{owner}/{repo}"'
        - '        self.args["repo_type"] = "github"'
        - '        # Always get commit hash, because base_commit can also be branch
          or tag'
        - '        api = GhApi(token=self.token)'
        - '        self.args["base_commit"] = get_commit(api, owner, repo, ref=base_commit).sha'
        - '        if base_commit != self.args["base_commit"]:'
        - '            logger.info(f"Base commit reference {base_commit} resolved
          to commit hash {self.args[''base_commit'']}")'
        - '        self.args["version"] = self.args["base_commit"][:7]'
        - ''
        - '    def set_repo_info_from_local_path(self, path: str, base_commit: str
          | None = None):'
        - '        self.args["repo"] = str(Path(path).resolve())'
        - '        self.args["repo_type"] = "local"'
        - '        if base_commit:'
        - '            self.args["base_commit"] = base_commit'
        - '        else:'
        - '            try:'
        - '                repo = Repo(path, search_parent_directories=True)'
        - '            except InvalidGitRepositoryError as e:'
        - '                msg = f"Could not find git repository at {path=}."'
        - '                raise ValueError(msg) from e'
        - '            if repo.is_dirty():'
        - '                msg = f"Local git repository {path} is dirty. Please commit
          or stash changes."'
        - '                raise ValueError(msg)'
        - '            self.args["base_commit"] = repo.head.object.hexsha'
        - '        self.args["version"] = self.args["base_commit"][:7]'
        - ''
        - '    def set_repo_info(self, repo: str, base_commit: str | None = None):'
        - '        if is_github_repo_url(repo):'
        - '            self.set_repo_info_from_gh_url(repo, base_commit=base_commit)'
        - '        elif Path(repo).is_dir():'
        - '            self.set_repo_info_from_local_path(repo, base_commit=base_commit)'
        - '        else:'
        - '            msg = f"Could not determine repo path from {repo=}."'
        - '            raise ValueError(msg)'
        - ''
        - '    def set_from_dict(self, instance_dict: dict[str, Any]):'
        - '        self.args |= instance_dict'
        - ''
        - '    def set_missing_fields(self):'
        - '        # TODO: This field is only needed while swe_env is using some questionable
          logic'
        - '        # to determine whether to clone from a mirror or not. This should
          be removed in the future.'
        - '        # Values: ''swe-bench'' (loaded from json/jsonl for swe-bench style
          inference),'
        - '        # ''online'' (loaded from github issue or similar) or ''local''
          (loaded from local file)'
        - '        if "problem_statement_source" not in self.args:'
        - '            self.args["problem_statement_source"] = "swe-bench"'
        - '        if "repo_type" not in self.args:'
        - '            self.args["repo_type"] = "github"'
        - ''
        - '    def validate(self):'
        - '        required_fields = ['
        - '            "problem_statement",'
        - '            "instance_id",'
        - '            "repo",'
        - '            "repo_type",'
        - '            "base_commit",'
        - '            "version",'
        - '            "problem_statement_source",'
        - '        ]'
        - '        if not all(x in self.args for x in required_fields):'
        - '            missing = set(required_fields) - set(self.args.keys())'
        - '            msg = f"Missing required fields: {missing=}"'
        - '            raise ValueError(msg)'
        - '        if self.args["repo_type"] not in {"github", "local"}:'
        - '            msg = f"Invalid repo type: {self.args[''repo_type'']=}"'
        - '            raise ValueError(msg)'
        - '        if self.args["repo_type"] == "github" and self.args["repo"].count("/")
          != 1:'
        - '            msg = f"Invalid repo format for {self.args[''repo_type'']=}:
          {self.args[''repo'']=}"'
        - '            raise ValueError(msg)'
        - ''
        - '    def build(self) -> dict[str, Any]:'
        - '        self.set_missing_fields()'
        - '        self.validate()'
        - '        return self.args'
      functions:
      - end_line: 45
        name: get_data_path_name
        start_line: 35
        text:
        - 'def get_data_path_name(data_path: str) -> str:'
        - '    """if data_path is a file, return the file stem'
        - '    elif it''s a github url, return the owner__repo_name'
        - '    """'
        - '    if data_path.startswith("text://"):'
        - '        return hashlib.sha256(data_path.removeprefix("text://").encode()).hexdigest()[:6]'
        - '    match = GITHUB_ISSUE_URL_PATTERN.search(data_path)'
        - '    if match:'
        - '        owner, repo, _ = match.groups()'
        - '        return f"{owner}__{repo}"'
        - '    return Path(data_path).stem'
      - end_line: 50
        name: is_github_issue_url
        start_line: 48
        text:
        - 'def is_github_issue_url(data_path: str) -> bool:'
        - '    """Check if data_path is an URL pointing to a github issue"""'
        - '    return GITHUB_ISSUE_URL_PATTERN.search(data_path) is not None'
      - end_line: 57
        name: is_github_repo_url
        start_line: 53
        text:
        - 'def is_github_repo_url(data_path: str) -> bool:'
        - '    """Check if data_path is an URL pointing to a github repository.'
        - '    Paths to issues or PRs will also match this pattern.'
        - '    """'
        - '    return GITHUB_REPO_URL_PATTERN.search(data_path) is not None'
      - end_line: 103
        name: copy_file_to_container
        start_line: 61
        text:
        - 'def copy_file_to_container(container: Container, contents: str, container_path:
          str) -> None:'
        - '    """'
        - '    Copies a given string into a Docker container at a specified path.'
        - ''
        - '    Args:'
        - '        container: Docker SDK container object.'
        - '        contents: The string to copy into the container.'
        - '        container_path: The path inside the container where the string
          should be copied to.'
        - ''
        - '    Returns:'
        - '        None'
        - '    """'
        - '    temp_file_name = None'
        - ''
        - '    try:'
        - '        # Create a temporary file'
        - '        with tempfile.NamedTemporaryFile(delete=False) as temp_file:'
        - '            temp_file_name = temp_file.name'
        - '            # Write the string to the temporary file and ensure it''s written
          to disk'
        - '            temp_file.write(contents.encode("utf-8"))'
        - '            temp_file.flush()'
        - '            os.fsync(temp_file.fileno())'
        - ''
        - '        # Create a TAR archive in memory containing the temporary file'
        - '        with tempfile.NamedTemporaryFile():'
        - '            with open(temp_file_name, "rb") as temp_file:'
        - '                # Prepare the TAR archive'
        - '                with BytesIO() as tar_stream:'
        - '                    with tarfile.open(fileobj=tar_stream, mode="w") as
          tar:'
        - '                        tar_info = tarfile.TarInfo(name=os.path.basename(container_path))'
        - '                        tar_info.size = os.path.getsize(temp_file_name)'
        - '                        tar.addfile(tarinfo=tar_info, fileobj=temp_file)'
        - '                    tar_stream.seek(0)'
        - '                    # Copy the TAR stream to the container'
        - '                    container.put_archive(path=os.path.dirname(container_path),
          data=tar_stream.read())'
        - ''
        - '    except Exception as e:'
        - '        logger.error(f"An error occurred: {e}")'
        - '        logger.error(traceback.format_exc())'
        - '    finally:'
        - '        # Cleanup: Remove the temporary file if it was created'
        - '        if temp_file_name and os.path.exists(temp_file_name):'
        - '            os.remove(temp_file_name)'
      - end_line: 120
        name: copy_anything_to_container
        start_line: 106
        text:
        - 'def copy_anything_to_container(container: Container, host_path: str, container_path:
          str) -> None:'
        - '    """Copy files or directories from host to container'
        - ''
        - '    Note: Will need to set ownership on the copied files in the container.'
        - '    """'
        - '    if not Path(host_path).exists():'
        - '        msg = f"Path {host_path} does not exist, cannot copy it to container."'
        - '        raise FileNotFoundError(msg)'
        - '    cmd = ["docker", "cp", host_path, f"{container.id}:{container_path}"]'
        - '    logger.debug(f"Copying {host_path} to container at {container_path}
          with command: {shlex.join(cmd)}")'
        - '    try:'
        - '        subprocess.run(cmd, check=True)'
        - '    except subprocess.CalledProcessError as e:'
        - '        msg = f"Error copying {host_path} to container at {container_path}:
          {e}"'
        - '        raise RuntimeError(msg) from e'
      - end_line: 177
        name: read_with_timeout
        start_line: 123
        text:
        - 'def read_with_timeout(container: subprocess.Popen, pid_func: Callable,
          timeout_duration: int | float) -> str:'
        - '    """'
        - '    Read data from a subprocess with a timeout.'
        - '    This function uses a file descriptor to read data from the subprocess
          in a non-blocking way.'
        - ''
        - '    Args:'
        - '        container: The subprocess container.'
        - '        pid_func: A function that returns a list of process IDs (except
          the PID of the main process).'
        - '        timeout_duration: The timeout duration in seconds.'
        - ''
        - '    Returns:'
        - '        output: The data read from the subprocess, stripped of trailing
          newline characters.'
        - ''
        - '    Raises:'
        - '        TimeoutError: If the timeout duration is reached while reading
          from the subprocess.'
        - '    """'
        - '    buffer = b""'
        - '    fd = container.stdout.fileno()'
        - '    end_time = time.time() + timeout_duration'
        - ''
        - '    # Select is not available on windows'
        - '    is_windows = platform.system() == "Windows"'
        - '    if not is_windows:'
        - '        import select'
        - '    else:'
        - '        os.set_blocking(fd, False)'
        - ''
        - '    def ready_to_read(fd) -> bool:'
        - '        if is_windows:'
        - '            # We can''t do the extra check'
        - '            return True'
        - '        return bool(select.select([fd], [], [], 0.01)[0])'
        - ''
        - '    while time.time() < end_time:'
        - '        pids = pid_func()'
        - '        if len(pids) > 0:'
        - '            # There are still PIDs running'
        - '            time.sleep(0.05)'
        - '            continue'
        - '        if ready_to_read(fd):'
        - '            data = os.read(fd, 4096)'
        - '            if data:'
        - '                buffer += data'
        - '        else:'
        - '            # No more data to read'
        - '            break'
        - '        time.sleep(0.05)  # Prevents CPU hogging'
        - ''
        - '    if container.poll() is not None:'
        - '        msg = f"Subprocess exited unexpectedly.\nCurrent buffer: {buffer.decode()}"'
        - '        raise RuntimeError(msg)'
        - '    if time.time() >= end_time:'
        - '        msg = f"Timeout reached while reading from subprocess.\nCurrent
          buffer: {buffer.decode()}\nRunning PIDs: {pids}"'
        - '        raise TimeoutError(msg)'
        - '    return buffer.decode()'
      - end_line: 254
        name: read_with_timeout_experimental
        start_line: 185
        text:
        - 'def read_with_timeout_experimental(container: subprocess.Popen, timeout_duration:
          int | float) -> tuple[str, str]:'
        - '    """'
        - '    Read data from a subprocess with a timeout.'
        - '    This function uses a file descriptor to read data from the subprocess
          in a non-blocking way.'
        - ''
        - '    NOTE: This is an experimental implementation that is faster than `read_with_timeout`,
          but'
        - '    has not been thoroughly tested.'
        - ''
        - '    Args:'
        - '        container: The subprocess container.'
        - '        timeout_duration: The timeout duration in seconds.'
        - ''
        - '    Returns:'
        - '        Output and exit code, both as strings (!)'
        - ''
        - '    Raises:'
        - '        TimeoutError: If the timeout duration is reached while reading
          from the subprocess.'
        - '    """'
        - '    buffer = b""'
        - '    fd = container.stdout.fileno()'
        - '    end_time = time.time() + timeout_duration'
        - ''
        - '    # Select is not available on windows'
        - '    is_windows = platform.system() == "Windows"'
        - '    if not is_windows:'
        - '        import select'
        - '    else:'
        - '        os.set_blocking(fd, False)'
        - ''
        - '    def ready_to_read(fd) -> bool:'
        - '        if is_windows:'
        - '            # We can''t do the extra check'
        - '            return True'
        - '        return bool(select.select([fd], [], [], 0.01)[0])'
        - ''
        - '    n_decode_failures = 0'
        - '    while time.time() < end_time:'
        - '        if ready_to_read(fd):'
        - '            try:'
        - '                data = os.read(fd, 4096)'
        - '            except BlockingIOError:'
        - '                logger.error("BlockingIOError while reading from subprocess.",
          exc_info=True)'
        - '                break'
        - '            if data:'
        - '                buffer += data'
        - '                try:'
        - '                    decoded = buffer.decode()'
        - '                except UnicodeDecodeError:'
        - '                    n_decode_failures += 1'
        - '                    if n_decode_failures > 30:'
        - '                        msg = "Too many decode failures while reading from
          subprocess."'
        - '                        raise RuntimeError(msg)'
        - '                if PROCESS_DONE_MARKER_START in decoded:'
        - '                    break'
        - '        time.sleep(0.01)  # Prevents CPU hogging'
        - ''
        - '    if container.poll() is not None:'
        - '        msg = f"Subprocess exited unexpectedly.\nCurrent buffer: {buffer.decode()}"'
        - '        raise RuntimeError(msg)'
        - '    if time.time() >= end_time:'
        - '        msg = f"Timeout reached while reading from subprocess.\nCurrent
          buffer: {buffer.decode()}"'
        - '        raise TimeoutError(msg)'
        - '    decoded = buffer.decode()'
        - '    body = "\n".join(line for line in decoded.splitlines() if not line.startswith(PROCESS_DONE_MARKER_START))'
        - '    _results = PROCESS_DONE_REGEX.search(decoded)'
        - '    if _results is None:'
        - '        msg = f"Could not find process done marker in last line: {decoded=},
          {body=}"'
        - '        raise ValueError(msg)'
        - '    exit_code = _results.group(1)'
        - '    return body, exit_code'
      - end_line: 263
        name: get_background_pids
        start_line: 257
        text:
        - 'def get_background_pids(container_obj: Container):'
        - '    pids = container_obj.exec_run("ps -eo pid,comm --no-headers").output.decode().split("\n")'
        - '    pids = [x.split() for x in pids if x]'
        - '    pids = [x for x in pids if x[1] not in {"ps"} and x[0] != "1"]'
        - '    bash_pids = [x for x in pids if x[1] == "bash"]'
        - '    other_pids = [x for x in pids if x[1] not in {"bash"}]'
        - '    return bash_pids, other_pids'
      - end_line: 295
        name: _get_non_persistent_container
        start_line: 266
        text:
        - 'def _get_non_persistent_container(ctr_name: str, image_name: str) -> tuple[subprocess.Popen,
          set[str]]:'
        - '    startup_cmd = ['
        - '        "docker",'
        - '        "run",'
        - '        "-i",'
        - '        "--rm",'
        - '        "--name",'
        - '        ctr_name,'
        - '        image_name,'
        - '        "/bin/bash",'
        - '        "-l",'
        - '    ]'
        - '    logger.debug("Starting container with command: %s", shlex.join(startup_cmd))'
        - '    container = subprocess.Popen('
        - '        startup_cmd,'
        - '        stdin=PIPE,'
        - '        stdout=PIPE,'
        - '        stderr=STDOUT,'
        - '        text=True,'
        - '        bufsize=1,  # line buffered'
        - '    )'
        - '    time.sleep(DOCKER_START_UP_DELAY)'
        - '    # try to read output from container setup (usually an error), timeout
          if no output'
        - '    output = read_with_timeout(container, lambda: list(), timeout_duration=2)'
        - '    if output:'
        - '        logger.error(f"Unexpected container setup output: {output}")'
        - '    # bash PID is always 1 for non-persistent containers'
        - '    return container, {'
        - '        "1",'
        - '    }'
      - end_line: 370
        name: _get_persistent_container
        start_line: 298
        text:
        - def _get_persistent_container(
        - '    ctr_name: str, image_name: str, persistent: bool = False'
        - ') -> tuple[subprocess.Popen, set[str]]:'
        - '    client = docker.from_env()'
        - '    containers = client.containers.list(all=True, filters={"name": ctr_name})'
        - '    if ctr_name in [c.name for c in containers]:'
        - '        container_obj = client.containers.get(ctr_name)'
        - '        if container_obj.status in {"created"}:'
        - '            container_obj.start()'
        - '        elif container_obj.status in {"running"}:'
        - '            pass'
        - '        elif container_obj.status in {"exited"}:'
        - '            container_obj.restart()'
        - '        elif container_obj.status in {"paused"}:'
        - '            container_obj.unpause()'
        - '        else:'
        - '            msg = f"Unexpected container status: {container_obj.status}"'
        - '            raise RuntimeError(msg)'
        - '    else:'
        - '        container_obj = client.containers.run('
        - '            image_name,'
        - '            command="/bin/bash -l -m",'
        - '            name=ctr_name,'
        - '            stdin_open=True,'
        - '            tty=True,'
        - '            detach=True,'
        - '            auto_remove=not persistent,'
        - '        )'
        - '        container_obj.start()'
        - '    startup_cmd = ['
        - '        "docker",'
        - '        "exec",'
        - '        "-i",'
        - '        ctr_name,'
        - '        "/bin/bash",'
        - '        "-l",'
        - '    ]'
        - '    logger.debug("Starting container with command: %s", shlex.join(startup_cmd))'
        - '    container = subprocess.Popen('
        - '        startup_cmd,'
        - '        stdin=PIPE,'
        - '        stdout=PIPE,'
        - '        stderr=STDOUT,'
        - '        text=True,'
        - '        bufsize=1,  # line buffered'
        - '    )'
        - '    time.sleep(DOCKER_START_UP_DELAY)'
        - '    # try to read output from container setup (usually an error), timeout
          if no output'
        - '    output = read_with_timeout(container, lambda: list(), timeout_duration=2)'
        - '    if output:'
        - '        logger.error(f"Unexpected container setup output: {output}")'
        - '    # Get the process IDs of the container'
        - '    # There should be at least a head process and possibly one child bash
          process'
        - '    bash_pids, other_pids = get_background_pids(container_obj)'
        - '    total_time_slept = DOCKER_START_UP_DELAY'
        - '    # Let''s wait for a maximum of 5 x DOCKER_START_UP_DELAY seconds'
        - '    # and then check again.'
        - '    while len(bash_pids) > 1 or len(other_pids) > 0:'
        - '        time.sleep(1)'
        - '        total_time_slept += 1'
        - '        bash_pids, other_pids = get_background_pids(container_obj)'
        - '        if total_time_slept > 5 * DOCKER_START_UP_DELAY:'
        - '            break'
        - '    bash_pid = 1'
        - '    if len(bash_pids) == 1:'
        - '        bash_pid = bash_pids[0][0]'
        - '    elif len(bash_pids) > 1 or len(other_pids) > 0:'
        - '        msg = ('
        - '            "Detected alien processes attached or running. Please ensure
          that no other agents "'
        - '            f"are running on this container. PIDs: {bash_pids}, {other_pids}"'
        - '        )'
        - '        raise RuntimeError(msg)'
        - '    return container, {str(bash_pid), "1"}'
      - end_line: 395
        name: get_container
        start_line: 373
        text:
        - 'def get_container(ctr_name: str, image_name: str, persistent: bool = False)
          -> tuple[subprocess.Popen, set]:'
        - '    """'
        - '    Get a container object for a given container name and image name'
        - ''
        - '    Arguments:'
        - '        ctr_name (str): Name of container'
        - '        image_name (str): Name of image'
        - '        persistent (bool): Whether to use a persistent container or not'
        - '    Returns:'
        - '        Container object'
        - '    """'
        - '    if not image_exists(image_name):'
        - '        msg = ('
        - '            f"Image {image_name} not found. Please ensure it is built and
          available. "'
        - '            "Please double-check that you followed all installation/setup
          instructions from the "'
        - '            "readme."'
        - '        )'
        - '        raise RuntimeError(msg)'
        - ''
        - '    if persistent:'
        - '        return _get_persistent_container(ctr_name, image_name)'
        - '    else:'
        - '        return _get_non_persistent_container(ctr_name, image_name)'
      - end_line: 438
        name: image_exists
        start_line: 398
        text:
        - 'def image_exists(image_name: str) -> bool:'
        - '    """'
        - '    Check that the image exists and give some better error messages.'
        - ''
        - '    Arguments:'
        - '        image_name: Name of image'
        - '    Returns:'
        - '        bool: True if image exists'
        - '    """'
        - '    try:'
        - '        client = docker.from_env()'
        - '    except docker.errors.DockerException as e:'
        - '        docker_not_running = any('
        - '            ('
        - '                "connection aborted" in str(e).lower(),'
        - '                "connection refused" in str(e).lower(),'
        - '                "error while fetching server api version" in str(e).lower(),'
        - '            ),'
        - '        )'
        - '        if docker_not_running:'
        - '            msg = ('
        - '                "Probably the Docker daemon is not running. Please start
          the Docker daemon and try again. "'
        - '                "You might need to allow the use of the docker socket "'
        - '                "(https://github.com/princeton-nlp/SWE-agent/issues/159)
          or symlink the socket "'
        - '                "if it''s at a non-standard location "'
        - '                "(https://github.com/princeton-nlp/SWE-agent/issues/20#issuecomment-2047506005)."'
        - '            )'
        - '            raise RuntimeError(msg) from e'
        - '        raise'
        - '    filterred_images = client.images.list(filters={"reference": image_name})'
        - '    if len(filterred_images) == 0:'
        - '        return False'
        - '    elif len(filterred_images) > 1:'
        - '        RuntimeError(f"Multiple images found for {image_name}, that''s
          weird.")'
        - '    attrs = filterred_images[0].attrs'
        - '    if attrs is not None:'
        - '        logger.info('
        - '            f"Found image {image_name} with tags: {attrs[''RepoTags'']},
          created: {attrs[''Created'']} "'
        - '            f"for {attrs[''Os'']} {attrs[''Architecture'']}.",'
        - '        )'
        - '    return True'
      - end_line: 455
        name: get_commit
        start_line: 441
        text:
        - 'def get_commit(api: GhApi, owner: str, repo: str, ref: str | None = None):'
        - '    """Get commit object from github api'
        - ''
        - '    Args:'
        - '        api (GhApi):'
        - '        owner (str): Repo owner, e.g., "princeton-nlp"'
        - '        repo (str): Repo, e.g., "SWE-agent"'
        - '        ref (str, optional): Branch, tag or commit hash'
        - ''
        - '    Returns:'
        - '        _type_: _description_'
        - '    """'
        - '    if ref:'
        - '        return api.repos.get_commit(owner, repo, ref)'
        - '    return api.repos.list_commits(owner, repo)[0]'
      - end_line: 477
        name: parse_gh_issue_url
        start_line: 461
        text:
        - 'def parse_gh_issue_url(issue_url: str) -> tuple[str, str, str]:'
        - '    """'
        - '    Returns:'
        - '        owner: Repo owner'
        - '        repo: Repo name'
        - '        issue number: Issue number as str'
        - ''
        - '    Raises:'
        - '        InvalidGithubURL: If the URL is not a valid github issue URL'
        - '    """'
        - '    match = GITHUB_ISSUE_URL_PATTERN.search(issue_url)'
        - '    if not match:'
        - '        msg = f"Invalid GitHub issue URL: {issue_url}"'
        - '        raise InvalidGithubURL(msg)'
        - '    res = match.groups()'
        - '    assert len(res) == 3'
        - '    return tuple(res)  # type: ignore'
      - end_line: 495
        name: parse_gh_repo_url
        start_line: 480
        text:
        - 'def parse_gh_repo_url(repo_url: str) -> tuple[str, str]:'
        - '    """'
        - '    Returns:'
        - '        owner: Repo owner/org'
        - '        repo: Repo name'
        - ''
        - '    Raises:'
        - '        InvalidGithubURL: If the URL is not a valid github repo URL'
        - '    """'
        - '    match = GITHUB_REPO_URL_PATTERN.search(repo_url)'
        - '    if not match:'
        - '        msg = f"Invalid GitHub issue URL: {repo_url}"'
        - '        raise InvalidGithubURL(msg)'
        - '    res = match.groups()'
        - '    assert len(res) == 2'
        - '    return tuple(res)  # type: ignore'
      - end_line: 505
        name: get_gh_issue_data
        start_line: 498
        text:
        - 'def get_gh_issue_data(issue_url: str, *, token: str = ""):'
        - '    """Returns github issue data in the form of a dictionary.'
        - '    See https://docs.github.com/en/rest/issues/issues?apiVersion=2022-11-28#get-an-issue'
        - '    for return format'
        - '    """'
        - '    owner, repo, issue_number = parse_gh_issue_url(issue_url)'
        - '    api = GhApi(token=token)'
        - '    return api.issues.get(owner, repo, issue_number)'
      - end_line: 514
        name: get_problem_statement_from_github_issue
        start_line: 508
        text:
        - 'def get_problem_statement_from_github_issue(owner: str, repo: str, issue_number:
          str, *, token: str | None = "") -> str:'
        - '    """Return problem statement from github issue"""'
        - '    api = GhApi(token=token)'
        - '    issue = api.issues.get(owner, repo, issue_number)'
        - '    title = issue.title if issue.title else ""'
        - '    body = issue.body if issue.body else ""'
        - '    return f"{title}\n{body}\n"'
      - end_line: 740
        name: get_instances
        start_line: 637
        text:
        - def get_instances(
        - '    file_path: str,'
        - '    base_commit: str | None = None,'
        - '    split: str | None = None,'
        - '    token: str | None = None,'
        - '    *,'
        - '    repo_path: str = "",'
        - ') -> list[dict[str, Any]]:'
        - '    """'
        - '    Getter function for handling json, jsonl files'
        - ''
        - '    Args:'
        - '        file_path (str): Path to file'
        - ''
        - '    Returns:'
        - '        List of instances as dictionaries'
        - '    """'
        - ''
        - '    def instance_from_dict(instances):'
        - '        ib = InstanceBuilder(token=token)'
        - '        ib.set_from_dict(instances)'
        - '        return ib.build()'
        - ''
        - '    def postproc_instance_list(instances):'
        - '        if isinstance(instances, dict):'
        - '            msg = "Expected a list of instances, got a dictionary."'
        - '            raise ValueError(msg)'
        - '        return [instance_from_dict(x) for x in instances]'
        - ''
        - '    # The next if statement is very brittle logic to determine if we''re
          processing a single instance'
        - '    if ('
        - '        file_path.startswith("text://")'
        - '        or (Path(file_path).is_file() and Path(file_path).suffix in [".md",
          ".txt"])'
        - '        or is_github_issue_url(file_path)'
        - '    ):'
        - '        ib = InstanceBuilder(token=token)'
        - '        ib.set_problem_statement(file_path)'
        - '        if repo_path:'
        - '            ib.set_repo_info(repo_path, base_commit=base_commit)'
        - '        elif is_github_repo_url(file_path):'
        - '            ib.set_repo_info_from_gh_url(file_path, base_commit=base_commit)'
        - '        else:'
        - '            msg = f"Could not determine repo path from {file_path=}, {repo_path=}"'
        - '            raise ValueError(msg)'
        - ''
        - '        return [ib.build()]'
        - ''
        - '    if base_commit:'
        - '        msg = "base_commit must be empty if running over multiple problem
          statements"'
        - '        raise ValueError(msg)'
        - ''
        - '    if repo_path:'
        - '        msg = "repo_path must be empty if running over multiple problem
          statements"'
        - '        raise ValueError(msg)'
        - ''
        - '    # If file_path is a directory, attempt load from disk'
        - '    if os.path.isdir(file_path):'
        - '        try:'
        - '            dataset_or_dict = load_from_disk(file_path)'
        - '            if isinstance(dataset_or_dict, dict):'
        - '                return postproc_instance_list(dataset_or_dict[split])'
        - '            return postproc_instance_list(dataset_or_dict)'
        - '        except FileNotFoundError:'
        - '            # Raised by load_from_disk if the directory is not a dataset
          directory'
        - '            pass'
        - ''
        - '    # The next if statement is very brittle logic to determine if we''re
          processing a single instance'
        - '    if ('
        - '        (Path(file_path).is_file() and Path(file_path).suffix in [".md",
          ".txt"])'
        - '        or is_github_issue_url(file_path)'
        - '        or file_path.startswith("text://")'
        - '    ):'
        - '        ib = InstanceBuilder(token=token)'
        - '        ib.set_problem_statement(file_path)'
        - '        if repo_path:'
        - '            ib.set_repo_info(repo_path, base_commit=base_commit)'
        - '        elif is_github_repo_url(file_path):'
        - '            ib.set_repo_info_from_gh_url(file_path)'
        - '        else:'
        - '            msg = f"Could not determine repo path from {file_path=}, {repo_path=}"'
        - '            raise ValueError(msg)'
        - ''
        - '        return [ib.build()]'
        - ''
        - '    if base_commit is not None:'
        - '        msg = "base_commit must be None if data_path is not a github issue
          url"'
        - '        raise ValueError(msg)'
        - ''
        - '    # If file_path is a file, load the file'
        - '    if file_path.endswith(".json"):'
        - '        with open(file_path) as file:'
        - '            return postproc_instance_list(json.load(file))'
        - '    if file_path.endswith(".jsonl"):'
        - '        return postproc_instance_list([json.loads(x) for x in Path(file_path).read_text().splitlines(keepends=True)])'
        - ''
        - '    # Attempt load from HF datasets as a last resort'
        - '    try:'
        - '        return postproc_instance_list(load_dataset(file_path, split=split))'
        - '    except Exception as e:'
        - '        msg = ('
        - '            f"Could not load instances from {file_path}. "'
        - '            "Please ensure --data_path is a GitHub URL, a SWE-bench HuggingFace
          dataset, or a JSON/JSONL file."'
        - '        )'
        - '        raise ValueError(msg) from e'
      - end_line: 759
        name: get_associated_commit_urls
        start_line: 743
        text:
        - 'def get_associated_commit_urls(org: str, repo: str, issue_number: str,
          *, token: str = "") -> list[str]:'
        - '    """Return the URLs of commits that would close an issue."""'
        - '    api = GhApi(token=token)'
        - '    # Strangely the "pull_request" field of api.issues.get is often not
          set'
        - '    # so we have to go through the events to check if there''s a commit'
        - '    events = api.issues.list_events(org, repo, issue_number)'
        - '    commit_urls = []'
        - '    for event in events:'
        - '        if event.event != "referenced":'
        - '            continue'
        - '        if not event.commit_id:'
        - '            continue'
        - '        commit = api.repos.get_commit(org, repo, event.commit_id)'
        - '        message = commit.commit.message'
        - '        if f"fixes #{issue_number}" in message.lower() or f"closes #{issue_number}"
          in message.lower():'
        - '            commit_urls.append(commit.html_url)'
        - '    return commit_urls'
      - end_line: 763
        name: remove_triple_backticks
        start_line: 762
        text:
        - 'def remove_triple_backticks(text: str) -> str:'
        - '    return "\n".join(line.removeprefix("```") for line in text.splitlines())'
      - end_line: 789
        name: format_trajectory_markdown
        start_line: 766
        text:
        - 'def format_trajectory_markdown(trajectory: list[dict[str, str]]):'
        - '    """Format a trajectory as a markdown string for use in gh PR description."""'
        - '    prefix = ['
        - '        "<details>",'
        - '        "<summary>Thought process (''trajectory'') of SWE-agent (click
          to expand)</summary>",'
        - '        "",'
        - '        "",'
        - '    ]'
        - '    steps = []'
        - '    for i, step in enumerate(trajectory):'
        - '        step_strs = ['
        - "            f\"**\U0001F9D1\u200D\U0001F692 Response ({i})**: \","
        - '            f"{step[''response''].strip()}",'
        - "            f\"**\U0001F440\u200D Observation ({i})**:\","
        - '            "```",'
        - '            f"{remove_triple_backticks(step[''observation'']).strip()}",'
        - '            "```",'
        - '        ]'
        - '        steps.append("\n".join(step_strs))'
        - '    suffix = ['
        - '        "",'
        - '        "</details>",'
        - '    ]'
        - '    return "\n".join(prefix) + "\n\n---\n\n".join(steps) + "\n".join(suffix)'
      - end_line: 154
        name: ready_to_read
        start_line: 150
        text:
        - '    def ready_to_read(fd) -> bool:'
        - '        if is_windows:'
        - '            # We can''t do the extra check'
        - '            return True'
        - '        return bool(select.select([fd], [], [], 0.01)[0])'
      - end_line: 218
        name: ready_to_read
        start_line: 214
        text:
        - '    def ready_to_read(fd) -> bool:'
        - '        if is_windows:'
        - '            # We can''t do the extra check'
        - '            return True'
        - '        return bool(select.select([fd], [], [], 0.01)[0])'
      - end_line: 658
        name: instance_from_dict
        start_line: 655
        text:
        - '    def instance_from_dict(instances):'
        - '        ib = InstanceBuilder(token=token)'
        - '        ib.set_from_dict(instances)'
        - '        return ib.build()'
      - end_line: 664
        name: postproc_instance_list
        start_line: 660
        text:
        - '    def postproc_instance_list(instances):'
        - '        if isinstance(instances, dict):'
        - '            msg = "Expected a list of instances, got a dictionary."'
        - '            raise ValueError(msg)'
        - '        return [instance_from_dict(x) for x in instances]'
      text:
      - from __future__ import annotations
      - ''
      - import hashlib
      - import json
      - import os
      - import platform
      - import re
      - import shlex
      - import subprocess
      - import tarfile
      - import tempfile
      - import time
      - import traceback
      - from io import BytesIO
      - from pathlib import Path
      - from subprocess import PIPE, STDOUT
      - from typing import Any, Callable
      - ''
      - from datasets import load_dataset, load_from_disk
      - from ghapi.all import GhApi
      - from git import InvalidGitRepositoryError, Repo
      - ''
      - import docker
      - from docker.models.containers import Container
      - from sweagent.utils.config import keys_config
      - from sweagent.utils.log import get_logger
      - ''
      - DOCKER_START_UP_DELAY = float(keys_config.get("SWE_AGENT_DOCKER_START_UP_DELAY",
        1))
      - GITHUB_ISSUE_URL_PATTERN = re.compile(r"github\.com\/(.*?)\/(.*?)\/issues\/(\d+)")
      - GITHUB_REPO_URL_PATTERN = re.compile(r".*[/@]?github\.com\/([^/]+)\/([^/]+)")
      - ''
      - logger = get_logger("env_utils")
      - ''
      - ''
      - 'def get_data_path_name(data_path: str) -> str:'
      - '    """if data_path is a file, return the file stem'
      - '    elif it''s a github url, return the owner__repo_name'
      - '    """'
      - '    if data_path.startswith("text://"):'
      - '        return hashlib.sha256(data_path.removeprefix("text://").encode()).hexdigest()[:6]'
      - '    match = GITHUB_ISSUE_URL_PATTERN.search(data_path)'
      - '    if match:'
      - '        owner, repo, _ = match.groups()'
      - '        return f"{owner}__{repo}"'
      - '    return Path(data_path).stem'
      - ''
      - ''
      - 'def is_github_issue_url(data_path: str) -> bool:'
      - '    """Check if data_path is an URL pointing to a github issue"""'
      - '    return GITHUB_ISSUE_URL_PATTERN.search(data_path) is not None'
      - ''
      - ''
      - 'def is_github_repo_url(data_path: str) -> bool:'
      - '    """Check if data_path is an URL pointing to a github repository.'
      - '    Paths to issues or PRs will also match this pattern.'
      - '    """'
      - '    return GITHUB_REPO_URL_PATTERN.search(data_path) is not None'
      - ''
      - ''
      - '# TODO: Why not just use copy_anything_to_container?'
      - 'def copy_file_to_container(container: Container, contents: str, container_path:
        str) -> None:'
      - '    """'
      - '    Copies a given string into a Docker container at a specified path.'
      - ''
      - '    Args:'
      - '        container: Docker SDK container object.'
      - '        contents: The string to copy into the container.'
      - '        container_path: The path inside the container where the string should
        be copied to.'
      - ''
      - '    Returns:'
      - '        None'
      - '    """'
      - '    temp_file_name = None'
      - ''
      - '    try:'
      - '        # Create a temporary file'
      - '        with tempfile.NamedTemporaryFile(delete=False) as temp_file:'
      - '            temp_file_name = temp_file.name'
      - '            # Write the string to the temporary file and ensure it''s written
        to disk'
      - '            temp_file.write(contents.encode("utf-8"))'
      - '            temp_file.flush()'
      - '            os.fsync(temp_file.fileno())'
      - ''
      - '        # Create a TAR archive in memory containing the temporary file'
      - '        with tempfile.NamedTemporaryFile():'
      - '            with open(temp_file_name, "rb") as temp_file:'
      - '                # Prepare the TAR archive'
      - '                with BytesIO() as tar_stream:'
      - '                    with tarfile.open(fileobj=tar_stream, mode="w") as tar:'
      - '                        tar_info = tarfile.TarInfo(name=os.path.basename(container_path))'
      - '                        tar_info.size = os.path.getsize(temp_file_name)'
      - '                        tar.addfile(tarinfo=tar_info, fileobj=temp_file)'
      - '                    tar_stream.seek(0)'
      - '                    # Copy the TAR stream to the container'
      - '                    container.put_archive(path=os.path.dirname(container_path),
        data=tar_stream.read())'
      - ''
      - '    except Exception as e:'
      - '        logger.error(f"An error occurred: {e}")'
      - '        logger.error(traceback.format_exc())'
      - '    finally:'
      - '        # Cleanup: Remove the temporary file if it was created'
      - '        if temp_file_name and os.path.exists(temp_file_name):'
      - '            os.remove(temp_file_name)'
      - ''
      - ''
      - 'def copy_anything_to_container(container: Container, host_path: str, container_path:
        str) -> None:'
      - '    """Copy files or directories from host to container'
      - ''
      - '    Note: Will need to set ownership on the copied files in the container.'
      - '    """'
      - '    if not Path(host_path).exists():'
      - '        msg = f"Path {host_path} does not exist, cannot copy it to container."'
      - '        raise FileNotFoundError(msg)'
      - '    cmd = ["docker", "cp", host_path, f"{container.id}:{container_path}"]'
      - '    logger.debug(f"Copying {host_path} to container at {container_path} with
        command: {shlex.join(cmd)}")'
      - '    try:'
      - '        subprocess.run(cmd, check=True)'
      - '    except subprocess.CalledProcessError as e:'
      - '        msg = f"Error copying {host_path} to container at {container_path}:
        {e}"'
      - '        raise RuntimeError(msg) from e'
      - ''
      - ''
      - 'def read_with_timeout(container: subprocess.Popen, pid_func: Callable, timeout_duration:
        int | float) -> str:'
      - '    """'
      - '    Read data from a subprocess with a timeout.'
      - '    This function uses a file descriptor to read data from the subprocess
        in a non-blocking way.'
      - ''
      - '    Args:'
      - '        container: The subprocess container.'
      - '        pid_func: A function that returns a list of process IDs (except the
        PID of the main process).'
      - '        timeout_duration: The timeout duration in seconds.'
      - ''
      - '    Returns:'
      - '        output: The data read from the subprocess, stripped of trailing newline
        characters.'
      - ''
      - '    Raises:'
      - '        TimeoutError: If the timeout duration is reached while reading from
        the subprocess.'
      - '    """'
      - '    buffer = b""'
      - '    fd = container.stdout.fileno()'
      - '    end_time = time.time() + timeout_duration'
      - ''
      - '    # Select is not available on windows'
      - '    is_windows = platform.system() == "Windows"'
      - '    if not is_windows:'
      - '        import select'
      - '    else:'
      - '        os.set_blocking(fd, False)'
      - ''
      - '    def ready_to_read(fd) -> bool:'
      - '        if is_windows:'
      - '            # We can''t do the extra check'
      - '            return True'
      - '        return bool(select.select([fd], [], [], 0.01)[0])'
      - ''
      - '    while time.time() < end_time:'
      - '        pids = pid_func()'
      - '        if len(pids) > 0:'
      - '            # There are still PIDs running'
      - '            time.sleep(0.05)'
      - '            continue'
      - '        if ready_to_read(fd):'
      - '            data = os.read(fd, 4096)'
      - '            if data:'
      - '                buffer += data'
      - '        else:'
      - '            # No more data to read'
      - '            break'
      - '        time.sleep(0.05)  # Prevents CPU hogging'
      - ''
      - '    if container.poll() is not None:'
      - '        msg = f"Subprocess exited unexpectedly.\nCurrent buffer: {buffer.decode()}"'
      - '        raise RuntimeError(msg)'
      - '    if time.time() >= end_time:'
      - '        msg = f"Timeout reached while reading from subprocess.\nCurrent buffer:
        {buffer.decode()}\nRunning PIDs: {pids}"'
      - '        raise TimeoutError(msg)'
      - '    return buffer.decode()'
      - ''
      - ''
      - PROCESS_DONE_MARKER_START = "///PROCESS-DONE:"
      - PROCESS_DONE_MARKER_END = ":PROCESS-DONE///"
      - PROCESS_DONE_REGEX = re.compile(rf"{PROCESS_DONE_MARKER_START}(.+?){PROCESS_DONE_MARKER_END}")
      - ''
      - ''
      - 'def read_with_timeout_experimental(container: subprocess.Popen, timeout_duration:
        int | float) -> tuple[str, str]:'
      - '    """'
      - '    Read data from a subprocess with a timeout.'
      - '    This function uses a file descriptor to read data from the subprocess
        in a non-blocking way.'
      - ''
      - '    NOTE: This is an experimental implementation that is faster than `read_with_timeout`,
        but'
      - '    has not been thoroughly tested.'
      - ''
      - '    Args:'
      - '        container: The subprocess container.'
      - '        timeout_duration: The timeout duration in seconds.'
      - ''
      - '    Returns:'
      - '        Output and exit code, both as strings (!)'
      - ''
      - '    Raises:'
      - '        TimeoutError: If the timeout duration is reached while reading from
        the subprocess.'
      - '    """'
      - '    buffer = b""'
      - '    fd = container.stdout.fileno()'
      - '    end_time = time.time() + timeout_duration'
      - ''
      - '    # Select is not available on windows'
      - '    is_windows = platform.system() == "Windows"'
      - '    if not is_windows:'
      - '        import select'
      - '    else:'
      - '        os.set_blocking(fd, False)'
      - ''
      - '    def ready_to_read(fd) -> bool:'
      - '        if is_windows:'
      - '            # We can''t do the extra check'
      - '            return True'
      - '        return bool(select.select([fd], [], [], 0.01)[0])'
      - ''
      - '    n_decode_failures = 0'
      - '    while time.time() < end_time:'
      - '        if ready_to_read(fd):'
      - '            try:'
      - '                data = os.read(fd, 4096)'
      - '            except BlockingIOError:'
      - '                logger.error("BlockingIOError while reading from subprocess.",
        exc_info=True)'
      - '                break'
      - '            if data:'
      - '                buffer += data'
      - '                try:'
      - '                    decoded = buffer.decode()'
      - '                except UnicodeDecodeError:'
      - '                    n_decode_failures += 1'
      - '                    if n_decode_failures > 30:'
      - '                        msg = "Too many decode failures while reading from
        subprocess."'
      - '                        raise RuntimeError(msg)'
      - '                if PROCESS_DONE_MARKER_START in decoded:'
      - '                    break'
      - '        time.sleep(0.01)  # Prevents CPU hogging'
      - ''
      - '    if container.poll() is not None:'
      - '        msg = f"Subprocess exited unexpectedly.\nCurrent buffer: {buffer.decode()}"'
      - '        raise RuntimeError(msg)'
      - '    if time.time() >= end_time:'
      - '        msg = f"Timeout reached while reading from subprocess.\nCurrent buffer:
        {buffer.decode()}"'
      - '        raise TimeoutError(msg)'
      - '    decoded = buffer.decode()'
      - '    body = "\n".join(line for line in decoded.splitlines() if not line.startswith(PROCESS_DONE_MARKER_START))'
      - '    _results = PROCESS_DONE_REGEX.search(decoded)'
      - '    if _results is None:'
      - '        msg = f"Could not find process done marker in last line: {decoded=},
        {body=}"'
      - '        raise ValueError(msg)'
      - '    exit_code = _results.group(1)'
      - '    return body, exit_code'
      - ''
      - ''
      - 'def get_background_pids(container_obj: Container):'
      - '    pids = container_obj.exec_run("ps -eo pid,comm --no-headers").output.decode().split("\n")'
      - '    pids = [x.split() for x in pids if x]'
      - '    pids = [x for x in pids if x[1] not in {"ps"} and x[0] != "1"]'
      - '    bash_pids = [x for x in pids if x[1] == "bash"]'
      - '    other_pids = [x for x in pids if x[1] not in {"bash"}]'
      - '    return bash_pids, other_pids'
      - ''
      - ''
      - 'def _get_non_persistent_container(ctr_name: str, image_name: str) -> tuple[subprocess.Popen,
        set[str]]:'
      - '    startup_cmd = ['
      - '        "docker",'
      - '        "run",'
      - '        "-i",'
      - '        "--rm",'
      - '        "--name",'
      - '        ctr_name,'
      - '        image_name,'
      - '        "/bin/bash",'
      - '        "-l",'
      - '    ]'
      - '    logger.debug("Starting container with command: %s", shlex.join(startup_cmd))'
      - '    container = subprocess.Popen('
      - '        startup_cmd,'
      - '        stdin=PIPE,'
      - '        stdout=PIPE,'
      - '        stderr=STDOUT,'
      - '        text=True,'
      - '        bufsize=1,  # line buffered'
      - '    )'
      - '    time.sleep(DOCKER_START_UP_DELAY)'
      - '    # try to read output from container setup (usually an error), timeout
        if no output'
      - '    output = read_with_timeout(container, lambda: list(), timeout_duration=2)'
      - '    if output:'
      - '        logger.error(f"Unexpected container setup output: {output}")'
      - '    # bash PID is always 1 for non-persistent containers'
      - '    return container, {'
      - '        "1",'
      - '    }'
      - ''
      - ''
      - def _get_persistent_container(
      - '    ctr_name: str, image_name: str, persistent: bool = False'
      - ') -> tuple[subprocess.Popen, set[str]]:'
      - '    client = docker.from_env()'
      - '    containers = client.containers.list(all=True, filters={"name": ctr_name})'
      - '    if ctr_name in [c.name for c in containers]:'
      - '        container_obj = client.containers.get(ctr_name)'
      - '        if container_obj.status in {"created"}:'
      - '            container_obj.start()'
      - '        elif container_obj.status in {"running"}:'
      - '            pass'
      - '        elif container_obj.status in {"exited"}:'
      - '            container_obj.restart()'
      - '        elif container_obj.status in {"paused"}:'
      - '            container_obj.unpause()'
      - '        else:'
      - '            msg = f"Unexpected container status: {container_obj.status}"'
      - '            raise RuntimeError(msg)'
      - '    else:'
      - '        container_obj = client.containers.run('
      - '            image_name,'
      - '            command="/bin/bash -l -m",'
      - '            name=ctr_name,'
      - '            stdin_open=True,'
      - '            tty=True,'
      - '            detach=True,'
      - '            auto_remove=not persistent,'
      - '        )'
      - '        container_obj.start()'
      - '    startup_cmd = ['
      - '        "docker",'
      - '        "exec",'
      - '        "-i",'
      - '        ctr_name,'
      - '        "/bin/bash",'
      - '        "-l",'
      - '    ]'
      - '    logger.debug("Starting container with command: %s", shlex.join(startup_cmd))'
      - '    container = subprocess.Popen('
      - '        startup_cmd,'
      - '        stdin=PIPE,'
      - '        stdout=PIPE,'
      - '        stderr=STDOUT,'
      - '        text=True,'
      - '        bufsize=1,  # line buffered'
      - '    )'
      - '    time.sleep(DOCKER_START_UP_DELAY)'
      - '    # try to read output from container setup (usually an error), timeout
        if no output'
      - '    output = read_with_timeout(container, lambda: list(), timeout_duration=2)'
      - '    if output:'
      - '        logger.error(f"Unexpected container setup output: {output}")'
      - '    # Get the process IDs of the container'
      - '    # There should be at least a head process and possibly one child bash
        process'
      - '    bash_pids, other_pids = get_background_pids(container_obj)'
      - '    total_time_slept = DOCKER_START_UP_DELAY'
      - '    # Let''s wait for a maximum of 5 x DOCKER_START_UP_DELAY seconds'
      - '    # and then check again.'
      - '    while len(bash_pids) > 1 or len(other_pids) > 0:'
      - '        time.sleep(1)'
      - '        total_time_slept += 1'
      - '        bash_pids, other_pids = get_background_pids(container_obj)'
      - '        if total_time_slept > 5 * DOCKER_START_UP_DELAY:'
      - '            break'
      - '    bash_pid = 1'
      - '    if len(bash_pids) == 1:'
      - '        bash_pid = bash_pids[0][0]'
      - '    elif len(bash_pids) > 1 or len(other_pids) > 0:'
      - '        msg = ('
      - '            "Detected alien processes attached or running. Please ensure
        that no other agents "'
      - '            f"are running on this container. PIDs: {bash_pids}, {other_pids}"'
      - '        )'
      - '        raise RuntimeError(msg)'
      - '    return container, {str(bash_pid), "1"}'
      - ''
      - ''
      - 'def get_container(ctr_name: str, image_name: str, persistent: bool = False)
        -> tuple[subprocess.Popen, set]:'
      - '    """'
      - '    Get a container object for a given container name and image name'
      - ''
      - '    Arguments:'
      - '        ctr_name (str): Name of container'
      - '        image_name (str): Name of image'
      - '        persistent (bool): Whether to use a persistent container or not'
      - '    Returns:'
      - '        Container object'
      - '    """'
      - '    if not image_exists(image_name):'
      - '        msg = ('
      - '            f"Image {image_name} not found. Please ensure it is built and
        available. "'
      - '            "Please double-check that you followed all installation/setup
        instructions from the "'
      - '            "readme."'
      - '        )'
      - '        raise RuntimeError(msg)'
      - ''
      - '    if persistent:'
      - '        return _get_persistent_container(ctr_name, image_name)'
      - '    else:'
      - '        return _get_non_persistent_container(ctr_name, image_name)'
      - ''
      - ''
      - 'def image_exists(image_name: str) -> bool:'
      - '    """'
      - '    Check that the image exists and give some better error messages.'
      - ''
      - '    Arguments:'
      - '        image_name: Name of image'
      - '    Returns:'
      - '        bool: True if image exists'
      - '    """'
      - '    try:'
      - '        client = docker.from_env()'
      - '    except docker.errors.DockerException as e:'
      - '        docker_not_running = any('
      - '            ('
      - '                "connection aborted" in str(e).lower(),'
      - '                "connection refused" in str(e).lower(),'
      - '                "error while fetching server api version" in str(e).lower(),'
      - '            ),'
      - '        )'
      - '        if docker_not_running:'
      - '            msg = ('
      - '                "Probably the Docker daemon is not running. Please start
        the Docker daemon and try again. "'
      - '                "You might need to allow the use of the docker socket "'
      - '                "(https://github.com/princeton-nlp/SWE-agent/issues/159)
        or symlink the socket "'
      - '                "if it''s at a non-standard location "'
      - '                "(https://github.com/princeton-nlp/SWE-agent/issues/20#issuecomment-2047506005)."'
      - '            )'
      - '            raise RuntimeError(msg) from e'
      - '        raise'
      - '    filterred_images = client.images.list(filters={"reference": image_name})'
      - '    if len(filterred_images) == 0:'
      - '        return False'
      - '    elif len(filterred_images) > 1:'
      - '        RuntimeError(f"Multiple images found for {image_name}, that''s weird.")'
      - '    attrs = filterred_images[0].attrs'
      - '    if attrs is not None:'
      - '        logger.info('
      - '            f"Found image {image_name} with tags: {attrs[''RepoTags'']},
        created: {attrs[''Created'']} "'
      - '            f"for {attrs[''Os'']} {attrs[''Architecture'']}.",'
      - '        )'
      - '    return True'
      - ''
      - ''
      - 'def get_commit(api: GhApi, owner: str, repo: str, ref: str | None = None):'
      - '    """Get commit object from github api'
      - ''
      - '    Args:'
      - '        api (GhApi):'
      - '        owner (str): Repo owner, e.g., "princeton-nlp"'
      - '        repo (str): Repo, e.g., "SWE-agent"'
      - '        ref (str, optional): Branch, tag or commit hash'
      - ''
      - '    Returns:'
      - '        _type_: _description_'
      - '    """'
      - '    if ref:'
      - '        return api.repos.get_commit(owner, repo, ref)'
      - '    return api.repos.list_commits(owner, repo)[0]'
      - ''
      - ''
      - 'class InvalidGithubURL(ValueError): ...'
      - ''
      - ''
      - 'def parse_gh_issue_url(issue_url: str) -> tuple[str, str, str]:'
      - '    """'
      - '    Returns:'
      - '        owner: Repo owner'
      - '        repo: Repo name'
      - '        issue number: Issue number as str'
      - ''
      - '    Raises:'
      - '        InvalidGithubURL: If the URL is not a valid github issue URL'
      - '    """'
      - '    match = GITHUB_ISSUE_URL_PATTERN.search(issue_url)'
      - '    if not match:'
      - '        msg = f"Invalid GitHub issue URL: {issue_url}"'
      - '        raise InvalidGithubURL(msg)'
      - '    res = match.groups()'
      - '    assert len(res) == 3'
      - '    return tuple(res)  # type: ignore'
      - ''
      - ''
      - 'def parse_gh_repo_url(repo_url: str) -> tuple[str, str]:'
      - '    """'
      - '    Returns:'
      - '        owner: Repo owner/org'
      - '        repo: Repo name'
      - ''
      - '    Raises:'
      - '        InvalidGithubURL: If the URL is not a valid github repo URL'
      - '    """'
      - '    match = GITHUB_REPO_URL_PATTERN.search(repo_url)'
      - '    if not match:'
      - '        msg = f"Invalid GitHub issue URL: {repo_url}"'
      - '        raise InvalidGithubURL(msg)'
      - '    res = match.groups()'
      - '    assert len(res) == 2'
      - '    return tuple(res)  # type: ignore'
      - ''
      - ''
      - 'def get_gh_issue_data(issue_url: str, *, token: str = ""):'
      - '    """Returns github issue data in the form of a dictionary.'
      - '    See https://docs.github.com/en/rest/issues/issues?apiVersion=2022-11-28#get-an-issue'
      - '    for return format'
      - '    """'
      - '    owner, repo, issue_number = parse_gh_issue_url(issue_url)'
      - '    api = GhApi(token=token)'
      - '    return api.issues.get(owner, repo, issue_number)'
      - ''
      - ''
      - 'def get_problem_statement_from_github_issue(owner: str, repo: str, issue_number:
        str, *, token: str | None = "") -> str:'
      - '    """Return problem statement from github issue"""'
      - '    api = GhApi(token=token)'
      - '    issue = api.issues.get(owner, repo, issue_number)'
      - '    title = issue.title if issue.title else ""'
      - '    body = issue.body if issue.body else ""'
      - '    return f"{title}\n{body}\n"'
      - ''
      - ''
      - 'class InstanceBuilder:'
      - '    def __init__(self, token: str | None = None):'
      - '        """This helper class is used to build the data for an instance object,'
      - '        retrieving problem statements from github issues or local files and
        setting'
      - '        repo paths from github urls or local paths.'
      - '        """'
      - '        # Args that will be passed to the Instance constructor'
      - '        self.args = {}'
      - '        self.token = token'
      - '        self._instance_id_problem_suffix = ""'
      - ''
      - '    def set_problem_statement_from_gh_issue(self, issue_url: str):'
      - '        owner, repo, issue_number = parse_gh_issue_url(issue_url)'
      - '        self.args["problem_statement"] = get_problem_statement_from_github_issue('
      - '            owner,'
      - '            repo,'
      - '            issue_number,'
      - '            token=self.token,'
      - '        )'
      - '        self.args["instance_id"] = f"{owner}__{repo}-i{issue_number}"'
      - '        self.args["problem_statement_source"] = "online"'
      - ''
      - '    def set_problem_statement_from_file(self, file_path: str):'
      - '        self.set_problem_statement_from_text(Path(file_path).read_text())'
      - ''
      - '    def set_problem_statement_from_text(self, text: str):'
      - '        self.args["problem_statement"] = text'
      - '        self.args["instance_id"] = hashlib.sha256(self.args["problem_statement"].encode()).hexdigest()[:6]'
      - '        self.args["problem_statement_source"] = "local"'
      - ''
      - '    def set_problem_statement(self, data_path: str):'
      - '        """Get problem statement for a single instance from a github issue
        url or a'
      - '        path to a markdown or text file.'
      - '        """'
      - '        if data_path.startswith("text://"):'
      - '            return self.set_problem_statement_from_text(data_path.removeprefix("text://"))'
      - '        if is_github_issue_url(data_path):'
      - '            return self.set_problem_statement_from_gh_issue(data_path)'
      - '        if Path(data_path).is_file():'
      - '            return self.set_problem_statement_from_file(data_path)'
      - '        msg = f"Not sure how to get problem statement from {data_path=}."'
      - '        raise ValueError(msg)'
      - ''
      - '    def set_repo_info_from_gh_url(self, url: str, base_commit: str | None
        = None):'
      - '        owner, repo = parse_gh_repo_url(url)'
      - '        self.args["repo"] = f"{owner}/{repo}"'
      - '        self.args["repo_type"] = "github"'
      - '        # Always get commit hash, because base_commit can also be branch
        or tag'
      - '        api = GhApi(token=self.token)'
      - '        self.args["base_commit"] = get_commit(api, owner, repo, ref=base_commit).sha'
      - '        if base_commit != self.args["base_commit"]:'
      - '            logger.info(f"Base commit reference {base_commit} resolved to
        commit hash {self.args[''base_commit'']}")'
      - '        self.args["version"] = self.args["base_commit"][:7]'
      - ''
      - '    def set_repo_info_from_local_path(self, path: str, base_commit: str |
        None = None):'
      - '        self.args["repo"] = str(Path(path).resolve())'
      - '        self.args["repo_type"] = "local"'
      - '        if base_commit:'
      - '            self.args["base_commit"] = base_commit'
      - '        else:'
      - '            try:'
      - '                repo = Repo(path, search_parent_directories=True)'
      - '            except InvalidGitRepositoryError as e:'
      - '                msg = f"Could not find git repository at {path=}."'
      - '                raise ValueError(msg) from e'
      - '            if repo.is_dirty():'
      - '                msg = f"Local git repository {path} is dirty. Please commit
        or stash changes."'
      - '                raise ValueError(msg)'
      - '            self.args["base_commit"] = repo.head.object.hexsha'
      - '        self.args["version"] = self.args["base_commit"][:7]'
      - ''
      - '    def set_repo_info(self, repo: str, base_commit: str | None = None):'
      - '        if is_github_repo_url(repo):'
      - '            self.set_repo_info_from_gh_url(repo, base_commit=base_commit)'
      - '        elif Path(repo).is_dir():'
      - '            self.set_repo_info_from_local_path(repo, base_commit=base_commit)'
      - '        else:'
      - '            msg = f"Could not determine repo path from {repo=}."'
      - '            raise ValueError(msg)'
      - ''
      - '    def set_from_dict(self, instance_dict: dict[str, Any]):'
      - '        self.args |= instance_dict'
      - ''
      - '    def set_missing_fields(self):'
      - '        # TODO: This field is only needed while swe_env is using some questionable
        logic'
      - '        # to determine whether to clone from a mirror or not. This should
        be removed in the future.'
      - '        # Values: ''swe-bench'' (loaded from json/jsonl for swe-bench style
        inference),'
      - '        # ''online'' (loaded from github issue or similar) or ''local'' (loaded
        from local file)'
      - '        if "problem_statement_source" not in self.args:'
      - '            self.args["problem_statement_source"] = "swe-bench"'
      - '        if "repo_type" not in self.args:'
      - '            self.args["repo_type"] = "github"'
      - ''
      - '    def validate(self):'
      - '        required_fields = ['
      - '            "problem_statement",'
      - '            "instance_id",'
      - '            "repo",'
      - '            "repo_type",'
      - '            "base_commit",'
      - '            "version",'
      - '            "problem_statement_source",'
      - '        ]'
      - '        if not all(x in self.args for x in required_fields):'
      - '            missing = set(required_fields) - set(self.args.keys())'
      - '            msg = f"Missing required fields: {missing=}"'
      - '            raise ValueError(msg)'
      - '        if self.args["repo_type"] not in {"github", "local"}:'
      - '            msg = f"Invalid repo type: {self.args[''repo_type'']=}"'
      - '            raise ValueError(msg)'
      - '        if self.args["repo_type"] == "github" and self.args["repo"].count("/")
        != 1:'
      - '            msg = f"Invalid repo format for {self.args[''repo_type'']=}:
        {self.args[''repo'']=}"'
      - '            raise ValueError(msg)'
      - ''
      - '    def build(self) -> dict[str, Any]:'
      - '        self.set_missing_fields()'
      - '        self.validate()'
      - '        return self.args'
      - ''
      - ''
      - def get_instances(
      - '    file_path: str,'
      - '    base_commit: str | None = None,'
      - '    split: str | None = None,'
      - '    token: str | None = None,'
      - '    *,'
      - '    repo_path: str = "",'
      - ') -> list[dict[str, Any]]:'
      - '    """'
      - '    Getter function for handling json, jsonl files'
      - ''
      - '    Args:'
      - '        file_path (str): Path to file'
      - ''
      - '    Returns:'
      - '        List of instances as dictionaries'
      - '    """'
      - ''
      - '    def instance_from_dict(instances):'
      - '        ib = InstanceBuilder(token=token)'
      - '        ib.set_from_dict(instances)'
      - '        return ib.build()'
      - ''
      - '    def postproc_instance_list(instances):'
      - '        if isinstance(instances, dict):'
      - '            msg = "Expected a list of instances, got a dictionary."'
      - '            raise ValueError(msg)'
      - '        return [instance_from_dict(x) for x in instances]'
      - ''
      - '    # The next if statement is very brittle logic to determine if we''re
        processing a single instance'
      - '    if ('
      - '        file_path.startswith("text://")'
      - '        or (Path(file_path).is_file() and Path(file_path).suffix in [".md",
        ".txt"])'
      - '        or is_github_issue_url(file_path)'
      - '    ):'
      - '        ib = InstanceBuilder(token=token)'
      - '        ib.set_problem_statement(file_path)'
      - '        if repo_path:'
      - '            ib.set_repo_info(repo_path, base_commit=base_commit)'
      - '        elif is_github_repo_url(file_path):'
      - '            ib.set_repo_info_from_gh_url(file_path, base_commit=base_commit)'
      - '        else:'
      - '            msg = f"Could not determine repo path from {file_path=}, {repo_path=}"'
      - '            raise ValueError(msg)'
      - ''
      - '        return [ib.build()]'
      - ''
      - '    if base_commit:'
      - '        msg = "base_commit must be empty if running over multiple problem
        statements"'
      - '        raise ValueError(msg)'
      - ''
      - '    if repo_path:'
      - '        msg = "repo_path must be empty if running over multiple problem statements"'
      - '        raise ValueError(msg)'
      - ''
      - '    # If file_path is a directory, attempt load from disk'
      - '    if os.path.isdir(file_path):'
      - '        try:'
      - '            dataset_or_dict = load_from_disk(file_path)'
      - '            if isinstance(dataset_or_dict, dict):'
      - '                return postproc_instance_list(dataset_or_dict[split])'
      - '            return postproc_instance_list(dataset_or_dict)'
      - '        except FileNotFoundError:'
      - '            # Raised by load_from_disk if the directory is not a dataset
        directory'
      - '            pass'
      - ''
      - '    # The next if statement is very brittle logic to determine if we''re
        processing a single instance'
      - '    if ('
      - '        (Path(file_path).is_file() and Path(file_path).suffix in [".md",
        ".txt"])'
      - '        or is_github_issue_url(file_path)'
      - '        or file_path.startswith("text://")'
      - '    ):'
      - '        ib = InstanceBuilder(token=token)'
      - '        ib.set_problem_statement(file_path)'
      - '        if repo_path:'
      - '            ib.set_repo_info(repo_path, base_commit=base_commit)'
      - '        elif is_github_repo_url(file_path):'
      - '            ib.set_repo_info_from_gh_url(file_path)'
      - '        else:'
      - '            msg = f"Could not determine repo path from {file_path=}, {repo_path=}"'
      - '            raise ValueError(msg)'
      - ''
      - '        return [ib.build()]'
      - ''
      - '    if base_commit is not None:'
      - '        msg = "base_commit must be None if data_path is not a github issue
        url"'
      - '        raise ValueError(msg)'
      - ''
      - '    # If file_path is a file, load the file'
      - '    if file_path.endswith(".json"):'
      - '        with open(file_path) as file:'
      - '            return postproc_instance_list(json.load(file))'
      - '    if file_path.endswith(".jsonl"):'
      - '        return postproc_instance_list([json.loads(x) for x in Path(file_path).read_text().splitlines(keepends=True)])'
      - ''
      - '    # Attempt load from HF datasets as a last resort'
      - '    try:'
      - '        return postproc_instance_list(load_dataset(file_path, split=split))'
      - '    except Exception as e:'
      - '        msg = ('
      - '            f"Could not load instances from {file_path}. "'
      - '            "Please ensure --data_path is a GitHub URL, a SWE-bench HuggingFace
        dataset, or a JSON/JSONL file."'
      - '        )'
      - '        raise ValueError(msg) from e'
      - ''
      - ''
      - 'def get_associated_commit_urls(org: str, repo: str, issue_number: str, *,
        token: str = "") -> list[str]:'
      - '    """Return the URLs of commits that would close an issue."""'
      - '    api = GhApi(token=token)'
      - '    # Strangely the "pull_request" field of api.issues.get is often not set'
      - '    # so we have to go through the events to check if there''s a commit'
      - '    events = api.issues.list_events(org, repo, issue_number)'
      - '    commit_urls = []'
      - '    for event in events:'
      - '        if event.event != "referenced":'
      - '            continue'
      - '        if not event.commit_id:'
      - '            continue'
      - '        commit = api.repos.get_commit(org, repo, event.commit_id)'
      - '        message = commit.commit.message'
      - '        if f"fixes #{issue_number}" in message.lower() or f"closes #{issue_number}"
        in message.lower():'
      - '            commit_urls.append(commit.html_url)'
      - '    return commit_urls'
      - ''
      - ''
      - 'def remove_triple_backticks(text: str) -> str:'
      - '    return "\n".join(line.removeprefix("```") for line in text.splitlines())'
      - ''
      - ''
      - 'def format_trajectory_markdown(trajectory: list[dict[str, str]]):'
      - '    """Format a trajectory as a markdown string for use in gh PR description."""'
      - '    prefix = ['
      - '        "<details>",'
      - '        "<summary>Thought process (''trajectory'') of SWE-agent (click to
        expand)</summary>",'
      - '        "",'
      - '        "",'
      - '    ]'
      - '    steps = []'
      - '    for i, step in enumerate(trajectory):'
      - '        step_strs = ['
      - "            f\"**\U0001F9D1\u200D\U0001F692 Response ({i})**: \","
      - '            f"{step[''response''].strip()}",'
      - "            f\"**\U0001F440\u200D Observation ({i})**:\","
      - '            "```",'
      - '            f"{remove_triple_backticks(step[''observation'']).strip()}",'
      - '            "```",'
      - '        ]'
      - '        steps.append("\n".join(step_strs))'
      - '    suffix = ['
      - '        "",'
      - '        "</details>",'
      - '    ]'
      - '    return "\n".join(prefix) + "\n\n---\n\n".join(steps) + "\n".join(suffix)'
  frontend:
    .gitignore: {}
    README.md: {}
    node_modules:
      .bin:
        acorn: {}
        ansi-html: {}
        autoprefixer: {}
        blessed: {}
        browserslist: {}
        css-blank-pseudo: {}
        css-has-pseudo: {}
        css-prefers-color-scheme: {}
        cssesc: {}
        detect: {}
        detect-port: {}
        ejs: {}
        escodegen: {}
        esgenerate: {}
        eslint: {}
        esparse: {}
        esvalidate: {}
        he: {}
        html-minifier-terser: {}
        import-local-fixture: {}
        is-docker: {}
        jake: {}
        jest: {}
        jiti: {}
        js-yaml: {}
        jsesc: {}
        json2yaml: {}
        json5: {}
        loose-envify: {}
        lz-string: {}
        mime: {}
        mkdirp: {}
        multicast-dns: {}
        nanoid: {}
        needle: {}
        node-which: {}
        parser: {}
        pm2: {}
        pm2-dev: {}
        pm2-docker: {}
        pm2-runtime: {}
        react-scripts: {}
        regjsparser: {}
        resolve: {}
        rimraf: {}
        rollup: {}
        semver: {}
        sucrase: {}
        sucrase-node: {}
        svgo: {}
        systeminformation: {}
        tailwind: {}
        tailwindcss: {}
        terser: {}
        tsc: {}
        tsserver: {}
        update-browserslist-db: {}
        uuid: {}
        webpack: {}
        webpack-dev-server: {}
        yaml2json: {}
      .cache:
        .eslintcache: {}
        babel-loader:
          001f7b112d63b4595cdcb6e8ce0ad2bb2d142ce2f9b8ba472969d4dd3da09648.json: {}
          0028229966a085a74166a0bbaad153699c1b61c62dceb5c0137f9967b931c2fc.json: {}
          003bbfae35ff6c5f7b864ad2f656b64344db38e289e363e1dfc952d7df9cddd4.json: {}
          004d826e2880b96d95c946d5f3c1fbf3494508e5802e8da6130a3fa96888c18c.json: {}
          0058b4fd91561ae1033ce3dd69b74e5048b2353df33abc4c721257cd72198cb5.json: {}
          0066b51e1c00a414d254370bd81ae3471da94fb302dca0f35d8c32b8ffc914b9.json: {}
          0067a205acfb9179b3d725371b10fddb921c86e8aaddb0f6f9509cbfaf28a4b1.json: {}
          006ea5aaac0ae2f0df1ce9b25caf4708ddfd77aa19984348ca89d734f7075763.json: {}
          0079145b3e9874d557904ebb4c5484a8d9eaeea0ee3a30b17942c9c938168386.json: {}
          00990151ebf88a74c10e2db2e1fe6a21c725347c96d3dbf9cee0584d1d788200.json: {}
          010768a88917bc3444be64330bd56a06c58938f7d5dc19c6b7a7a65888896719.json: {}
          0109535c3d166140567bc0b8b7a9405780163f1c3e8131f4e84380a360fd56d0.json: {}
          010b2838c7128f9b4891cc10950b51dc87286d983e862adb71150ebcd0f172e0.json: {}
          012d6a5727c4dbd637a9f6e6d5ceb7338dab0b4f6d4e7f6f82aeb116a84360f8.json: {}
          01530fce03f7bcef1ff2baf891f03a12af6c98288ec4ae0d3dc68ed8c9e91a25.json: {}
          01760402127394190e8ce8eff045f4deb1342444dbf3713368baf43def4954f1.json: {}
          019ef480145069f8a618b84b52c04c393b0e09a704331fb6d05fed8c096f493a.json: {}
          01aee647bc5ae90502751cf242e524e3b4ec0867c8aa341f23e72873d63a5563.json: {}
          01bed4cd301199c00fc047f12c0be6a2d251b9ccda59d79c943ec1e9becfc2c9.json: {}
          01ccd5384b262003ed3a09d8eb7f6c23161d2dfc68a8fb9e21af88049ef3d70d.json: {}
          01cd450faee5f7d4e4e1cb5568d297965571b66c0bd7465798a197563b151e2c.json: {}
          01de719ecda22bb4a0a7299277eb3ee6c83b3484f1d5930223e51390641815c0.json: {}
          01ec7e45dd98ccc092b4ddbb3b4b18eea333a68d8501ed3dd410097f20fd525c.json: {}
          020e9ff87a4d83771be829cff25bb776bccb1865179806cf505b3dfd6a3b178d.json: {}
          0240a820608738e045931f846688138b34f74c62b09318eb7dc15c7fa2e7bb8f.json: {}
          026122e9020bdaadcf9ff09a30a24d26cdea6eb9f85eb10f449dcf12be90b1aa.json: {}
          0265152e8e225aa20fe81f7a4f497862b4fc3ca74fb9c5dad57673e26f082011.json: {}
          027b1585c5bd09f228b1b6c630a67eaef19b36c50e8d6221c3e7ec88b1c91da8.json: {}
          02923a41a892df96a4737de92bc7831cdefbbbbd3a7aefe042858920e4664208.json: {}
          029aeedaa3f4ca99e042e06ec9a486a2d1060da29b4a10c5b1209b00933fe6f4.json: {}
          02a7e7116d95bac5d48c2bae7591bae25ba17c2b85b289cb9c502260a8d3b15b.json: {}
          02bae2fd78b78ba1fc4b250dfb52c47c18647a402a5addf4f51e8a6476298899.json: {}
          02bb22ad15554d474b3896618b20025a0c5e95b8fd5bdb5f0ea7dcfad2afdde7.json: {}
          02cc499be419c03e71b79101311e42f67e920e64214a1afb6d1f670fb40c84f6.json: {}
          02cfd16ebe8623e7f0d1b4984e92698e68788ecf90a256287bec5a2fffedee85.json: {}
          02f4492b37711597337f546c23846ddc40ded7d82a3e471b4af1c92b5aac513d.json: {}
          030898e79869e20dd26c00531e7f79ca0ea1b52d5f710378771ff8fa83d1a407.json: {}
          03110fd63bf2bc4fec5acc91d0f1e512549c43ebfe90cfd2789f946490280a80.json: {}
          0319b6595a65a6149573ea7386873661eb71fd5640d34f42fe107a56b590d288.json: {}
          03251257397a6f7fd879ebdf8f3685daae225c47fb0b5012c79ebe426f6da840.json: {}
          032f02ab6e3ac7fd965b57de2107330ac6e8ab7303727bb00aa81f3127104401.json: {}
          03465f587efd8ec69a751337300ebe9e9f2b0900dc55271073d211dc7b951d41.json: {}
          036073a8912ad62d0cdb6e66197934155e2df0589fcca0ef01671a8acf6f4e73.json: {}
          037db8cd72a0608f1e88b8217ce0deeda4fe2dea0f3dde6b160f50226480fb0d.json: {}
          038018331d53c25e22cf7ba269f06c6add78fa8ea667c87ae185c6ae9d7bce62.json: {}
          03a6187dbc649946484be0b659f7f4a158e00cafceab49e378a2677fa8e173bd.json: {}
          03b1d629eaaf48e4b63648afb6b5b9e5e3e9b09ff340281c3526adf1e01dbdde.json: {}
          03c31f58ab5ce2500de765ee207da682a0455840335693c113e7950fe2c947fe.json: {}
          03c626b563c76db4f258f5519bd8d375daf3c04cb3502454c78cf2c841c2a302.json: {}
          03f1d9654efd9471b16b65f87cf4fd466aa0cb319ae7fbbddab1cc6056877237.json: {}
          03f489fdefbdfc0a0e755ddf6299167d5b60f51464fd0c1467c2725668dfe838.json: {}
          03fa1c78f3368b45e2ebf2acab9155aa56ecdf12dbdbb92cafe59353a77a3040.json: {}
          0406d971f10cfed1cfe0d9bfe89b38f3a5dcff4e5f2cd3d6fb644103c3ca3ba5.json: {}
          041089f1c3587fb2ad85f924ad5c76d4189fb192890148cad088d072c636edc7.json: {}
          0415d39a65d8aa41adf22ec393d6bc5ccdc3694bfe6d9e95aa333ce86813c86d.json: {}
          041a40f6ad38638f9dd5970c4a8a60e2a16bdf7b058406acd6e822a4baab2a6b.json: {}
          041af0fcb1507bbf3aae43c80a6baa6ce98bf49bb43d5d24ff3b4a71e8d86124.json: {}
          04398eca4dbd6305ab5aaf72294d214f18a91abedb59168f1897524bdb226181.json: {}
          04441a33254dfbb061df206bb02d7a80e0d3d2ac4baf0647abc5157a09216c7d.json: {}
          04584670d117055d44bd6f6775bc5008154ee3ff281bb39d953d4a11dd6182e7.json: {}
          046edef5be91b0d69ea53d209f99d4ec8fe95c1fa556752c35d1c5db6add02ab.json: {}
          048931728b8dceba5a4783f9187dd23a876bf9c5737f087fe17c2b4f590f7b07.json: {}
          0490bb5f90d3ff52697644893bc4b89dea7ecb705b8aadd0e0942cee274b97a7.json: {}
          049bca1693aeb8e6eb18b2c85e2f9bf213fc76aa29b9c784e365f99d31c0a449.json: {}
          04cd7f3173daae0f7fa38ba89620e9ad9ef655adbb1c143581969c9f6bd22af5.json: {}
          04d374e52dd3a64f68f7c7033a5f78eb25800bf53fc24222c158b5b623abb33c.json: {}
          04f3fe96443c2f6d3de18ef732a280779bea1f10662bd772f535614ea8a41da0.json: {}
          04f52fd6f2f3fab88acec44c46a66d5076aeee6230e20c3d8e00cc596bb9b755.json: {}
          050244cab33306562d3ec28c7f2576d3bba425ed28ff8ccb1a04a2d895f7e982.json: {}
          0503c4b68ef6e9458f751ff5100f7ace577f921e83f209d3ba1fb2dde0e305e0.json: {}
          0510bc0ffb92d013f965da018e9f835ab6b19dba813ab5d9de10236a290e267a.json: {}
          051eb34f821992e0e040858c4ddd7655f04b6fc6a40fdd59b4a22554b602bbbf.json: {}
          055fb6263f20f6dc321c3ba8f3fd515dcdc95f4a11665b44aaf78ed6c0c74a84.json: {}
          0575949d4d501d412fc38e0a131c7c275c5285474595385572ae8b5af2c326bc.json: {}
          05789f7f5466f9931566a55f74b850b9da9f8e8e5b57397d5d2b17353e43af36.json: {}
          057a53eadf36cd14630f19657f6e4ba148cf4013ca4d2ecf984ade6aa6ef3725.json: {}
          0598cff31fd544d14c4f2f20df937738ede9ee4d080e6bf6cf2156b81c6be189.json: {}
          059bd88a4fe6a6f36fb094d6c2fe6057d3fc03f3812a7ac956d73a5582d4596c.json: {}
          059d689a9a00ec8dd659eff44fcc0853ebc9c2d639f02d70ffff4b0e3433124a.json: {}
          05dcff5e54effb649d0635822a997a2bc73f003b72590c2278123907963606c7.json: {}
          05e89ab79831dc2d3bea8df5d2b818ee36a8aac3dbf4567496d8131c2bf7daaa.json: {}
          05fb395b543c25b1c7ef4c07692f73888a46ae26a7ee82e788d82b073a273768.json: {}
          061f3e071bfba904cc16bcd4831700e796c812b2026bf3c2d1ab0fd607605dac.json: {}
          06322d4332640cd30b03ef3bdab910e609d108725bd5ab6775104be13f430bfc.json: {}
          0649c426a00f37b80b2b008f7a854a09bde20fd4b534722a0899cfc396c31eb3.json: {}
          065774181b17db824b893f390af3eaf6ead8b654b304e5f4e33d5e32e00dc69d.json: {}
          06584156934548318ee647cdd294ea589916fff43200514822234608c9f91714.json: {}
          0665d1c6ea131e0ac4ffb85f1f8234f5a27484b4621a7e70bc70615186676d50.json: {}
          06bf5035c391005a03a1fc8411a2495f717e190a43f8f7187e8ec3ca6d5acb3a.json: {}
          06bf76c126be5daa06047b6e28a7dde2072ce6b754954a14e671761c0a0a73fd.json: {}
          06c37ef7fd9a9d92665b451d91c3fdfa4641e4c21deec6ba80b632cb4d782d70.json: {}
          06cf97d9a47bacaf29a3b38df636df4247d1f89eb1d37802a90e2e75ffd0b399.json: {}
          06df3f8c6960b187b5fb05aac5b29fa40c849b4e18b01d046494ebbfc209a050.json: {}
          06e89fe8f08e08e1b2dbd0c118c6c41bc19c7756aeb013a2477cb4b8129c03d3.json: {}
          06edab7fb3e759a1762dd1b0696cc07f22074ed7b840926873c1fe49077f23fc.json: {}
          0705e6b2af4cbf5f2e3e4d9addf4c7b6b4d7fa02d4cace25df22ad7415ed40fd.json: {}
          071fcf28c9db6e6bda1bed45db54d83cda8b6cb39bbdbd6501c3a4eab96b6964.json: {}
          0723c683443066001e6690405d77f3e8e82ac1cc861fdc45f7c41fc21bba088c.json: {}
          073bc2bbf6db87aa0be79572b515096a4e74572d05986734deb4c876dad12fd6.json: {}
          0741b4ce1ea98ae4fecf74ac1dd02c5e58a63a40c13a0de4c3320a6237298072.json: {}
          0764ac06e03a4af61b87c7697a85a87063fcd5fea45139f7b43ddc9e4505a384.json: {}
          0780ba1440ac609a03740fdcf70be72fabd8f06d48d580ff7e40e5e00b54b7b0.json: {}
          079d821d2a917a5df22557d000c4040b846b87ffcc9d852311cf107358710886.json: {}
          079ecb158a5a52a62e055b2b8c293260559cae249c80179cb841b99b7440774c.json: {}
          07bfafa51ec238019822530b3e720874c6e0758ae34013b232c3ee444c69231e.json: {}
          07ece94308b23a8d61149d062777e5473d3feef22ba6b98f05a21a2fd04e3d7e.json: {}
          080062583690cb6a28329a76a9d627e89e428d1768e55e5b2ee09313b0d5454e.json: {}
          08187cabdfaf8ef1ca4d08942bf9d7869a4f4956246c22c834a226014c9814a9.json: {}
          081c5047c040547d957966cb1a702327bb4bcf2682f9dcf7522f04f401ac610b.json: {}
          082f60ad64ef3e0bb82bdd5b361fa5e3152ac1ea246b72a37d23eb755faaa418.json: {}
          0834725f4a2fe62862a2a71d161bfbe9406b637fe494a8e5c7040109d252d6cf.json: {}
          08497351e9b8b06f879a6ad0459eda8746406f444301139b269f89c283a37457.json: {}
          086fb22fc5b6fe1de49394e43ba22436c9c261c29823f222710cc31bd74bfb6c.json: {}
          087650956ae496c9c95ab2008059970762778a45b5d577908ae0cdd2a8d2b8ba.json: {}
          0886ca36871753f3386c8439eda34effa292632faea33c9a3c6fb48352b0f1a1.json: {}
          08969b58cfe3bb146f490105ce0e8bd400f0d50c8776a283942a16f920520e81.json: {}
          08b06b2f05311e1f2201264b674b6dc6d6fb9b7a68ec31d639b793d33363df01.json: {}
          08b5b7a5507ddb69100d0130c189177fbb4113e4e18db9adbaaaf1eda3eba594.json: {}
          08c3b77cd375ba0000e32458d3843059a5d1f7186240290eb3fd86ed6cfe5ca4.json: {}
          08cb32427671752f4714d7bca6799cd9e3f949d10757034200edeeae16102ed8.json: {}
          08dcd3d6982700ff5012f7c36d42dba116c6f5a4d0c05f059f570fb1f25b0673.json: {}
          08df353ccc7397dca12b9a08f75569cbde91301a5b2db9c5adb20bbfeed515f2.json: {}
          092699ad63671ded8b3e99cc26472845dc3ce3372a2fefc31872d3eb1c0a65fc.json: {}
          0932ea5e0baaa3c73adbee3a0f53c6161154b7d1a56fcd4a3d8fb90b9ee21c5f.json: {}
          0940fdfad75278ff91a3dd877f72b01c40b44b8484230576270346d218a93eab.json: {}
          094ff015f85e9cc04911c28ed131c8074ac9b62704aab84a87f50730b7c8c1c4.json: {}
          0972836146da48e1ef1af0e40f9f31dc563dfc6938a2e81706786c9683b5b5a3.json: {}
          097c29cbe1464943838f803697ccd42e6813bfaa5b6c1e930a6e98420b414a2a.json: {}
          09c72ad637859b35604b4ea1b452d1d76a7f755d72bacf0b35a271cfabeb6984.json: {}
          09c81eb8750559350cb817942d0c99d5394b3f28d61b3859023cb51e06f25963.json: {}
          09f6737f8532965ba99fdcc9f252eafa4769efe8198c77b3e47560efeb1571bb.json: {}
          0a0a4cd1135bbdc5770047ccf6070822bfbb7ce712868d7304e5b5331def9e62.json: {}
          0a1df6414fb4171bd6a36b4866fad29e206e10b09cb1689b1faa5bac720609ee.json: {}
          0a4d2a9ace0d1854d662e49a93e808266a5e6ad1f4c989974d0eeba341aee1d0.json: {}
          0a840b2490a7835e9c12eedd2dd8b026324b2137e3c14125df5feef06676a7a4.json: {}
          0a9ac07aeb149392e13520c3f58db323358e19a70a04f4be611dae3f49e69f5c.json: {}
          0ab44830d3bfdbceef1b85211beb9f8964fd1a876fbf03d4fb2ff9da0fe7a97f.json: {}
          0ab58385a5ea8b94316bb59e6b05d5986c27ab96c861dee18c4e6040b1769563.json: {}
          0ac926c48ed1b6ee7a9c96d211804deacede47360028c8228e9ea6f2603b6538.json: {}
          0aed9481a7251474720c70ff332651d7eb9be627fb2278ca876a501f81398e9a.json: {}
          0b2900a34131e4615b7933402623932927f4c22141cd4a2893ca44ded98eedd3.json: {}
          0b37216f2ccce9a05ab13a91f0b1514146eaf57589a00b0f23f53d3bd33f5612.json: {}
          0b562f9061faaa5b6a3e3c386942050582baed8a96ce00bece8041265360c53f.json: {}
          0b5ad24fb0b16ee93af06e3b3d1a59a297e1ffba166a826c52b129925acd5ae3.json: {}
          0b6f56c4456dfcfe6f5c0d211d0125011ec8b70ded6832c0643a158f4f996f83.json: {}
          0b7b514f57e6a21a7b0850e557e9dd210a65dca5f3986134464255996e1a80e6.json: {}
          0b7cca5d5b4e3401401f0653e53bbd089dd52fbe8de29988bfb9a0b21368e1d2.json: {}
          0b7e65b8ea85b20d2287420c4dbc81cc874bab4658760ef0c6f4da9873a5fd84.json: {}
          0b86980aa8b3ce1697428d5716d1935941c45e4e9ff4880ec200ce9e29e9f4b3.json: {}
          0ba72973df7683536ff5f4374037c6f466074c260cce65abc90b6f4342433ec3.json: {}
          0bb77c2892adc0b06267d65d794a70c52c45db5a69b3c47a87fd3022003974b6.json: {}
          0be84816a676304012eb9d146f8dac64ddc22e1388098971d41af97fb6bda446.json: {}
          0bea1066cca1e172813335cfd5866d123376d4a553b7e32a9442038eff04b5be.json: {}
          0bf782ec4d719d927b0f4141c31b835534ca8364a13491c6147370904d46dc07.json: {}
          0c0fe3e022feb4296ba744146c431ce043dfaf4d02858ae642655a8ba4943240.json: {}
          0c1edb5d36b13ef3506f2ff353d611f2991102b9e4e0322d8215242a3cde0fa6.json: {}
          0c21f8650455ccebe9a465a26cde43f171f7984d61ca367e81fdcfd057886236.json: {}
          0c23e59e81fc7b73a718eea40831a3cafa64002013ac5a6f94edced2a23025d6.json: {}
          0c56da0c9e15e6c6a6b072afe8017b6aa41943a99327c51ff925285109cf44a4.json: {}
          0c5a58354a4773818737bfc9e6e906dabe4e5d8a0382d275c103455af017b509.json: {}
          0c83814e54cb7823bc6c2b4beda36adedf8bb6ecafac91d99421dd7aab4a4146.json: {}
          0c8d5ec8d0b34a5b50e94f1dcf6056b1b780627a7b15462f37db394f333761e2.json: {}
          0c8e8aaf682513bd12a71106eaf69723485513d204f9c817c789678491b87062.json: {}
          0c98965310041be873f504d91c0f72a2c6ff467b308bbc4d206cca1eee5c1844.json: {}
          0c98c9bef5b793d746233f1d3d57ed559618f17b11d24c558f87fccc7a6e7098.json: {}
          0c9b7397b640db190e46ff3f0d9e5e46b08c0fbb094d125b6ea70b1ca42b0553.json: {}
          0ca169e7385addaf1fbc6da930aa8d2cb065e85b9430a03baf53789f405324a9.json: {}
          0ca7d323017e06a7d8cdae253ab09bde256136221951ad23d52513d60fa9194f.json: {}
          0cad3211adbd0a1f416d39dd3390e5dc4c8e1d81cf4cf93612a4e95baeffbd2e.json: {}
          0ccc5203e869a8629509db5840de22324a346f9aff6d398210be0f49eedbc531.json: {}
          0cda56f6d6130fd2f5b7b8544d16fe3b6dd48b0e0dd02f253b8e8d29979b1bd4.json: {}
          0cdae99b63e3cfecb6817dec84bc0ff8faee6223fd5658c2689948e990ee3e05.json: {}
          0ce27b935c3a875504b1488ca51449097587ffc2ab12c4e7184b43d15c4ba975.json: {}
          0cf2220412d41e8f26b3a4aa361dd332e1f4ab36ce5f610590068602cf663cf2.json: {}
          0d06938b3ab69ac0764a2f65202729eaee80c58f56b54b9b5047255e57f0d7bb.json: {}
          0d13627cb44c2ade2f862b9908b7095b7a5776b93474963c4e079029ea6a2508.json: {}
          0d5e60f103a503da1bd022a8d39b4102ce57338824787ba4d4d059d7c14d1b37.json: {}
          0d8b9b012b310566863ac4e547886e86c3a21f7528e3b795e40ed0c388cab64d.json: {}
          0dc4fec73c14ecb1786a2533ba7942b82906c63d02e62ee2abc6bccb2b7996d2.json: {}
          0ddc12ef55241552d1bf65cd3f68ac343bcdc83774f0660483982aff1b48131f.json: {}
          0de39f2b83803938f0133611ee96b3f3b381b1ab7b94bf7d9a38763580ab8eb9.json: {}
          0ded8c1311d41457d21518c262adb616672d92fb55007d8e17c3dab2221a7946.json: {}
          0dee6fa2f255a853d71b6506dbaf835ab610587f90518cda571f26652800f74f.json: {}
          0df7a7136483f15b14331fe3004a4279f370b8705056d0686ce3839be597b090.json: {}
          0e0f0a33c1152a0fa2a0fe409da631e7e1a8e78b1c883bf1751d4d6d2db9d2b7.json: {}
          0e28d591d454317beaf622b7dbcd36e3e8828987b9e6c75f6dedaf4e35f13d6f.json: {}
          0e2fe1e08ff986b9fd560109fdbb6cbd82e1824fff9c847d99d326c9c0099176.json: {}
          0e47c177c84ce963de77ada2ed5fb218604ae3ae3119402ad0870c3e9b667377.json: {}
          0e63feefe413594bb6332f3dc5c1615c3c5e0c7d444e6353770db5d0b3398803.json: {}
          0e7d56a66c8e4116d32a563d02ccb8f0823d937a5bc52b46308661d614833fb5.json: {}
          0e879b3c3d51e929047a06e02d3efd25b5289f19d3a16566311f0e977665cfcb.json: {}
          0e899a6f319433d032553bee993a4b58f5539307330106a8f60768cbe5dc4eb9.json: {}
          0e8df96216fd42ae55e271079c72c033591bd5b099ee009bb90e7755cacd1126.json: {}
          0ea1fb6a98ce8efdbd1c1ba0b8ea54b7bff8e2dc4551c27935222c55b9db3c2e.json: {}
          0ea27aca303243e71736f387f259b38525c76e62ac4bdbd5cc79f1111f3d867a.json: {}
          0eb3b4f671cb275ee98f8a693566004ef6f1324557fe63154e5f12e0492efb10.json: {}
          0ec870a5d0a662be5ca6f95d11d5b58311a28f4e75192b7d026615663f259561.json: {}
          0ee5b457c759b3612a9b753a081bd44a78e623ed7752775f4e57404972207a58.json: {}
          0f1f0f235cb715f04a0cfcc3786234e8baef85ce59d4d8e27078b149e15e0466.json: {}
          0f2f9be76bd69cbdaf849ac38576b5d004b035479c3bf6c2bbe283dec068d9c7.json: {}
          0f744f088224d7689a2fe3ffde5eb930c69848ab072bb309ad7008c9595c959b.json: {}
          0f75fc4ca1ac7888e1276047f13ac3608a43ae07c0a74d384e71d73e88d098b1.json: {}
          0f91ce8f76e1594e89273de3c208b9ca36d0419647e2c1eec8553550f228c98a.json: {}
          0fbdbccec07f8bd526c38cfad7ebbe1e645e6c83193e5797acd1be84ea30403f.json: {}
          0fdac14470f1f465a6fafa9f8ae3abcd88df1cda5ce1fd33704164ac1771f636.json: {}
          0fe3440d6b3acc9337ba39c49fd5c0bbc70a06332a5e517aa3b64b81ce433625.json: {}
          0fe9e9004a68b67f75fe22341b8b02ec8559759e19dcd0cc342c0fe5eb7e0957.json: {}
          0fea72202e202f4a607e77a808aae76345e172922ca82c4a4a7a4ea7c55478aa.json: {}
          0fedfe178824406c3e0662384aebacfb53bc9fb4800cdacbb5a1f1dabce8eae0.json: {}
          1014e838bd8a93fbb59a734d2f21e7f755cc7ec96270bceb18129b7a0818e365.json: {}
          103184aa88548d2f2ecc24c935aa66b8cce4b1f3ae98f2921cb00e2f3f46154c.json: {}
          1031870827661d98f918b126caa51466a2cb0ab892903dd919d88042c52beca3.json: {}
          103691c340391cd2db014ac2cd57c1c92be8e00fc290dfe59e12a27d12be19ff.json: {}
          1037c7013b5c92f325854c505c36203ed40e4df483e6b88ec5c09511b7c947fd.json: {}
          1042b84c61f85cbc4c41f6222b4fa96819c639a23a1d812c428a9ac5393908cc.json: {}
          10566ce84a645fcb77916f558b12f2aeb0be1d7e8fe1627446457c8c6e0e1e73.json: {}
          10644dacebbf5c30b506eb8b9eef32d5f822c5b5f0b52db740b39597cfd13c83.json: {}
          10688f312852755336623624d9dadbdff253cb1fb659a9b7f9650e2b37e28c3b.json: {}
          106d546ee4aa9117f1c595eb0dac2c202089d0cfafd66b458558c4051d1dc8b3.json: {}
          108b33e2c9565474e382013e597aaa3f703fe0cb272b22108f9867540ee1c9de.json: {}
          109579b3de12f856f71d7fc09941b0df13603326186b903031704821848f830f.json: {}
          10a192cde2fc436b9cbacd22d18addaf4e88020f9ab535191ce68696a5a6ae83.json: {}
          10afb0969603b30fdc075a0c01d4cd34c7162205e6ad37d439ed57ba26f5982a.json: {}
          10e0008e25f35c1317fbae299b4acefc35e483216b3fcf2e51be0bd0999277c5.json: {}
          1105189ae0b366969574ba5e3240898ee2475286ab15548463decfa62ce99750.json: {}
          110e1c77e44d63c6e15e98e498bc08f6102d9fcd9a97e26639726e1650a5f4e0.json: {}
          110e4d051570229ec94c4286afca5ab744cec90df60e5dc1483c6622333529fb.json: {}
          110eb5367c87624002e91fffdaf6ebf05fe524a02f481041085d8b340e8e639c.json: {}
          116c8744c83a16d7c09a85d3927bdc8e68088aa46aa8a975258c00b19f5b31b5.json: {}
          118d142a646134698b4d05a5dcd159558c653a55d0134bd34e50e93e5f392d8f.json: {}
          119bdf56802de2e8aaeb14c908a1359e1f387599dc925edbac4ebb5a0bdc0cd2.json: {}
          11a6798d05c42d960e89a97b82f026e4c619deb0ed8443e8847350444e3d1ebf.json: {}
          11cd92185355085f372abef40e622ec773c8983d711b77b5913daa8c9115b8fe.json: {}
          11d19919c4d6314bf89147c8bd6aa53ef60738c149a4aa7a89ecb6248f936df8.json: {}
          11eb87402502eb60f82b0d9a345e5e9e9f5316d91ce9c34889f0508d64084e53.json: {}
          11ece0aa37ae18b8db5d4cba1b01d42a569e7a4dfd8f0c7848b26f16f1b1be6b.json: {}
          11ee40b937a7fc0d881b9fb3aa133650093a33fb045a06596daa87107e31b552.json: {}
          12032ad510284d284966ccd9bcaa36beaeb627fa9c14424e0ffca7474f7e3aa4.json: {}
          121e4f6ad290f5ec2758a68e00fd40a9911e9e5dc0efa0c959840f7b462193df.json: {}
          1229743a6971eb3b15f4321f60a985257504edaed99165d7283560f774df6329.json: {}
          1238f490ea2d9300086b51390ab4984193e1a14d2a77c47c8b4378f4cc052f21.json: {}
          129627d01927b3c99fe8108bd2f7ed87cf0d24474eced7a40f8e017141f4bb4f.json: {}
          12a405c9c73d873ecfe3d230937a896b8bec2030a5fcfc4f7e73a01aafc2406b.json: {}
          12a8aafb1b2c0524c5b605b4cf9cde05bb2e0466d052c1ce068458352ba82b26.json: {}
          12af2318fcb0cdb36736b3aecdc1fd4dec6df04ca2ed2891f4f3192c1f80d30a.json: {}
          12bd4ed7b31a5ec72a189c26bd04ff6d84bc8b153581284a0a670acdffa95575.json: {}
          12cf836bd1c1912022355700dae38eb40fdf30859c9813c4959580748fb11701.json: {}
          12d0052850a74f791c244e8aacd1104655d38dd631afaff4cf8aee2b1f586149.json: {}
          12f173c7c728403a1af94dc7c89b8db8d2882dd0d159b0c3c16713e344368d3e.json: {}
          13114710f9c07beb9922c44e07bbda463380fbb7f70214e635708bd76be0a335.json: {}
          1339029f967ee4f30d0179cda8063e833c5d534a6137befbdc9fa835286a0c19.json: {}
          13447be02d11cecef3a8984f51223ae55ca414168eee133834e6b1ce9f499cea.json: {}
          1346f3239cc4b622d304d70adf34048288d9ef95776231f7d7e0d9db32c2ef04.json: {}
          134b1de74eea7e859a1a772810d211b2adc10ca33db03e06e54cc565350479d0.json: {}
          137342ad11e3b113740c1133e8406eb7eb55c92808cc3cfa0bcc4e901ffc6bb0.json: {}
          138fc9adea32303c202d73541007c6d396c1404fd4d3cd002b8116a46487e10e.json: {}
          1391668be5ab314fe35e5f74b9a42778a529fca5952608cf55dd360c08304cdf.json: {}
          1391e320255987decd83ba9aba07bb25c57be24b21ff6d5fd09b940a1ddd2274.json: {}
          1398e9b15823a554f9bdf7e6fdfc9854a13c250045e0541de91aefbbe09a62a0.json: {}
          13b9c1b8efe769c71ea36320b79f3dc2e64b53f19b6bab92a23cd53c640ff6c5.json: {}
          13bd5a60e92aa3e83fd79db55154370300d3fcf6f4864858ed4264a553d4e058.json: {}
          13c4249d93996289483c9130dd96753f1eca891bcc5b1553d523e1cf9ce045a2.json: {}
          13c4ff13b4b1ab43018c913f2d2a831b2cddc26893f2c77fbd6bb2a3f9537337.json: {}
          1403a3c09be2c63a3fa3d6a5e2317c442f759c52e5df74b18ae603e9f954bee6.json: {}
          142bb3b8d1659b232ac7502722727447212d393ca48ca2543167536ed0cfb25b.json: {}
          1440657e6f6347ac745544d88b61f7eb2249aad42c28ff11d9fd8581a39a0374.json: {}
          148fbbfde814cde1c129a477f39c524bbac1d58354b6ec39df21973d0a519132.json: {}
          149c3dbc76b8fa116c547e97920602742c0cb39903b491f6a16114a6ba5f207e.json: {}
          14a0e0e1dd081696ec0083136bf313df5918e2ed3864315faa32238f14789299.json: {}
          14b58b2c4029d98c2ed74105d890852eb9815dca4bd0ef272491b7ae80bc75ef.json: {}
          14b9afc388a1e497948f45ed9da3a35cde8da04b7592d32c9d240367168392d3.json: {}
          14e8d76ebcf59579bdcd5d27015d1e4851caea4b038c1d537c7894326d4f1e74.json: {}
          1500b47bcb5bd6919a100e90fa017f7d8ee6c4bc14ade5b1e0d6d36bf24bfe67.json: {}
          151c9f782bc4c3b7b7bbf78a5bff610fff1d514fb15b0163e0be105442d51257.json: {}
          15233b19c148f66612468316888c64d67cd9b399ba66b78de7affe09e48ec91a.json: {}
          154441b45fba3f75e161c716fe0ac026c791b85045d87fe75b5cba317d9333af.json: {}
          155df8a49a3c5c1a56e62b594ad30cf66325ab02e8f5bcf551b15ffc9f50be0d.json: {}
          158956f94b6d0d54aa6b1b047e1828cbd72dab8e95509a085b07919b576843f9.json: {}
          1589a082d16b7d4529c11f52dc6412b83c024fe5a28e006ed2ff1881095cf758.json: {}
          158b04677c8101f7f5fce76bce5670000ae6a6acb79dd2b4479ed77ee28c2378.json: {}
          1591f07eec6b0d44dfb576e608b22f2c3e0c6da6a3ebef7ad58cd028ae08f1af.json: {}
          15b1051c013e47c3bfd8ad4fc50fc02a00cbed3d6f621c22cee009a0322824cb.json: {}
          15d50bb0bb77e6a7a29a70fb29f42ffafbb77c526a276b2f49666f382ccf0b3c.json: {}
          15deda07c58eb821cf69923f0ba28b9c4bef44235d81423b5053870d823778d4.json: {}
          15ebb7918997473f21ff33119dd4cfee5e34f9a30e64eb9dea1c684324e8ae12.json: {}
          16380a73356d0d6a766e003ff6a97d3ac0d24790445b14f138bed89ad39ed6f9.json: {}
          163c6ddc5095406b4534973ee4b56dcdde7494f31d1e766117945689922e9ed8.json: {}
          1655059d6778570e57f60b65d8e3c5d7353fed5d6cc67857997224d170d18acd.json: {}
          165fb78e72d1478686bd598b56c425bfa1d1f351a88d28157454299be8097f7a.json: {}
          16637fdffc6bb943fe1532b68fb2002605c3b71ba06adab5845e48c5bdadce4c.json: {}
          166f5feac563a141eaf711c93ec554833093f16ad1ebbd9bd77566a6fb843b01.json: {}
          1672d7694b198ce7f2a38ec4643fb65ae6a6624ed83ff0f7096c5b82527bcf16.json: {}
          1674360d8a6f3f0ba33d0d7b4515b3c9ab62799bdcdf29ea459d9fb67ba956dd.json: {}
          169a54fda22d7c7a970dcbd369ed53063292279a5660174b810eec3de207d3ef.json: {}
          169b049da1cedb35ee1c139d66afd51f7e2b0f356829bc712e6c39817c71da3f.json: {}
          169b3cc6ae24f0e04fda7b0ef387a2be9334a2960b6d05fb871a87774edccde6.json: {}
          169d11d86f656a9aba123f7d78f7edbb1aeed185af9b272e21bbc0482bd26a86.json: {}
          169d19b0cf936f3b5056adbb9b890dc1908cafeea9691efb2dbdd797c1ef8847.json: {}
          169d603f18a11d74029a9e78c16e8821f5463c0cb8dba9f9f1c3c094a6c88e8e.json: {}
          16a33f3116c78308cfa43d5e4770da53b243e2b58b93e19f8a858a3f0c4c575a.json: {}
          16b4f934154fcac3f3b84c71fe9bdc8b41090baf0fd33371e18aefe6827d98df.json: {}
          16c080f80eb3ad32f21c14a76fe49ed85a4b9b7cffedbe4797602fdc53b9a6ea.json: {}
          16cd1027c5d1985567dc2399045d050affba2325d5a852470e5aa792c65804e2.json: {}
          1700cb683158d9c7cd8d58af939447be3280376159e96765825131d2dacb18d1.json: {}
          1708fdbdb48ab49483dcbc03a64c0f0caa461d393e215cdf0cc5fab8a54908b5.json: {}
          172889c9f3bd43bf7a68ff35a69514a27d48c836ba8c8fda4f1e1af8aa0c21dc.json: {}
          174e8032eb0b36da707b588633bf1a95c158968b3538f9a044592fa0ab4731c4.json: {}
          177621e4f3b3e07f162c23d68f1b15f4e69cbe0b1d817db9a4d5db5d496540f7.json: {}
          177a717cbca8d1e49b1c99b67e54a9162e1954510d0a61dfa20e0b5a16f0d406.json: {}
          1796e5fa630003a75d86f9961d21e6383d867b0cb0b1b718172b126f4fc2413b.json: {}
          17975903321b94cdbfee53d506b05f59fe6ff6d28a933dc2b89884059fa77ee4.json: {}
          17c9f4418d1edaa565139a61f1d9901ab323a101d56b59894731c3bce9d24594.json: {}
          17d8ff5164ab771937dc1cdba220f941eca77b4aa13438a94672feca6d6790fb.json: {}
          17dccb8a76f3b2103832c0982066f7021061b6dabe849976e47587bd8d84286e.json: {}
          17f79ef5709db875e91c5566bf3b55ff761b3e01ae0e1ce71591618d39cd64df.json: {}
          17fd162b28e77c2ba7994f1c8af31fe5d10aa7479fe4ebeae482764a145802bb.json: {}
          180206f63e656b7bfa0f904f4d5b4e04d84b166a0f883fdf48c1004edd8eaa47.json: {}
          1829124af7d58dfcf6f212722b8c1eb99960abc22cfd06340f5c748b735e7bc7.json: {}
          18304e2c8e912ec16182428288af42f3a581b1c6764486ff5a5a1a4bfa7f2704.json: {}
          184459ce5fac40493d3f2b07fde5d2dda22ce899b23a38be47ed78154d59e6ee.json: {}
          186c5c8e3e7a96e90d4f1c69d163e6ad215549c8b8d2337ce3876d2200529c62.json: {}
          1879ac51bc901a4e21f694180d49331225cbe1ab6eade014fec6c76bc3be62e7.json: {}
          188cb9e7ddb55bd2cb0775f2d92481c1238790fecc2394c475cd1ec99eca4dfd.json: {}
          188e18654762309ad2235056a4c64d27d51b467b5b5cd0f8fed07d35cd2275ad.json: {}
          18974d69359540276ccbc2c6a393377f432d2103cd9d7e6d24e311b68d3224d7.json: {}
          18adb49d8ab7d16110cbd9acff165dc1f1f14d8b9444865a9fda72f0518949bd.json: {}
          18cb6fbb24099e51fa23862063a7922f38ba22e984252b44643da142b46aada2.json: {}
          18d6be8b6cc3a1a8a8d42a1d4d3139b4af8e22b391a31c42171956b341bd9ec3.json: {}
          18ef45e55375ae7f84415a94f75c66f0fc9f8189dcf12b736f9fd60898f89c2b.json: {}
          18f135700a7c07087872e57b8191cfea6a824271d9d2faa6625b96237feb9641.json: {}
          19218fcde8c48250fd0155c39c140b8abe75c3b154340f853bc2f81fb282ca3c.json: {}
          19318366ccc1845dfd5ee1da7906399765dfe01022a1118417cadffe02247292.json: {}
          1935ccbfcc658792186be5a25a0ed8f7f1bdeaad525238bd22ce07d9c8b0027c.json: {}
          1937fc4c7a8da4461f491faa1c9392b4158162d74a4e4a407f0205da41527935.json: {}
          193ff13174d63d39f9d30863b810ea3659989d30bb10d1d4435d9ff8f4499645.json: {}
          1967fa52b1d5dff8a40d2666f01c99697f16049d03ea9cd993ce5fa47cf8ba2a.json: {}
          198891c78fc991ace83886e535fb1c6c028ef97bac6e3e720b2822396bb6cea5.json: {}
          19bdc7b3cab17f77ea7d4943ad9aa80921a3c9a681f3c88fb9a5569098bd166a.json: {}
          19c9a08510e70785826d6fcd6945ead5e25c0f3db33a5c732a1b0db4f0546461.json: {}
          19f0c1ff0734065e887b22189fc95ee6ed766b6778e39496745c83cf70f767dc.json: {}
          19fbd1f5275f2b174c312f3510f9162bff7486b1f49f891cc17bb28d99fa9065.json: {}
          1a198bda9455dc6ff917c759780eb6e355d0574c9d18b538bc5274cf412b897c.json: {}
          1a1ca14395ece107071697a783d209a9d474763edc08f323d36ffaf464014005.json: {}
          1a29775e1d9096e74b0e10ee3d17f72de067522388c49c5f2732c74b70a881c7.json: {}
          1a59ddd87da6bda019fb08601929488cfcf80ab759ab05e15e926c95d0926e18.json: {}
          1a999bfccef865030922eea2b8772058c9325e61f43a9b6475ba14a4b8d53dce.json: {}
          1aa4585d49c0b662f992ccebedc652b3ec4d4ace96a5d35309318237da131be9.json: {}
          1ad008f75f3db27cab052e6849338eb72b053061482bd371c0779a99f0f834dd.json: {}
          1ae305d4c4bd0d42587c78957f14b6270abdd77e8d519668f1425a2c95d01516.json: {}
          1b1982acd5692377c3c697f045d8c7c38daefbee8f7977bd26784c4a260c09a4.json: {}
          1b2310547f0dcea97efa54c51a56ec097d3fc54ceadebf8f3f0f976301d3b7aa.json: {}
          1b3434d3fc8b33288e26c1f56e882e9a0893e0b65692c8f00e3619f6c1c60f11.json: {}
          1b36c201048c3a4a2e4733e40562f3a83af3351344b56d1a01647d9ad6dbdb4a.json: {}
          1b77e1d583d7f545d1c110ee63e0410770739ba5dab4bb147507357c40fb699b.json: {}
          1bbc202ba95fdb1b28d6af0f419d24fc2abfe119700de6de2ce99f5a2e543a96.json: {}
          1bbc6ceed29f3fadad8b0f9b4eb182030d279d4551eb4f65cca9b656a1242d17.json: {}
          1bdab461bcc7f9e0393e78061bcf0e17a1dfba7ebe0aaeead11acf4eb23854a2.json: {}
          1bdb681c9a6c86dfcc84ad2d21e5f2c8324dad7a5f4e9b39f99680b322a62bca.json: {}
          1be2a9ffc3497e58e4f88eb4ee2d41fbdec36d85143dcba95beed36b652a861c.json: {}
          1be3550d871f11591efc7771e4f36fd2c2ca0c2fd4dfc1d8010e9615cedad7fc.json: {}
          1bfca8a0f8372ee002c08556431e3f65ce9aaceb8dfd6fd813c0c11c04d55e8b.json: {}
          1c10bdb6bcf02d224f53217e3e3572a0f26800f96af2d849a707f69769af45ac.json: {}
          1c305ed08f372222cdc58b19424d11d39dfa8d742d2227668a99b08eb07e52b6.json: {}
          1c375d5e1ce913148ffb07d181020ee432d1ab98283fc990c40c209bfbf78f31.json: {}
          1c5ab65b7527d875caadd5d83981dd672ad2542660fc129b3181c3da8935ac29.json: {}
          1c63a3298308ab22bc9d3dc2eb8f40d433683e86378b563165fa8b6360dced4c.json: {}
          1cc3d7e2d2bf0385389824c22e10ce69955783389926412bb6efe095667ff73a.json: {}
          1ccd4c79e886d2dad8c14a8e20ebe2d4dfb276d2f85ec99de0993376bd708a64.json: {}
          1cf013c33caafbaf6edcdc12e39c3244e2aaa2b783b03a128cd275fb4694d2c2.json: {}
          1cf1e613666d412c3d07748780c78f67c07c6837cfb702406329f3f7d0f1e199.json: {}
          1cfed51d80e58c23178c8f5d49d40a167aeae824e9d4e58614a9bdeedc1c3955.json: {}
          1d0838d3f765dee27d77fe4fd8d3d6210bc6ec5191d76d16a7bd88b3ee5d129d.json: {}
          1d22050ca8e548d3d925a9e16e1f80c9df615eaa130e7bc8e5b9f71297eb7cea.json: {}
          1d33ea620b32a45b5c92d3bd893877168feb947e4fef69971853daf33ca8278a.json: {}
          1d60e5396bafd2fec3c6a1ec08db00820335fa90b3d3ce5d169ca0de16e9c407.json: {}
          1d61485456abe834b3effc65922fa5e545811d25cc32329e258503e13ce3b620.json: {}
          1d690197b68bffe82bbc9035f007b117e0c7c9a080e155bb5aef9dd63b07ffb9.json: {}
          1d730a80de76beb16204d50d22bfd866406521f502c10b9ec34d20480f685412.json: {}
          1d798b0c0c82d0344a97457a1fa127df1005b290f74c73f377294f8e3373f50b.json: {}
          1dac33880abc61959557eecc73666dc465df5cf6024d5610ceb21fc7fe4cc169.json: {}
          1db1281204a48f4241e908c7308ae9550fa2f1a0237460ae48a1c72ad4d2b5e5.json: {}
          1dcaf4d372bcac4cd95a96f57e5ad7fa8f0a34f86d69e725a7c0597442749255.json: {}
          1def80898ccee5852ef7a79915c387b86ffc83622a3a522218d0576d28b5b6b0.json: {}
          1df251c4de800ee40e17663ce3c5c5ec234472aad2a6c4ee0cdfa91efcfa39f4.json: {}
          1dfec084217a6d3bd1d701636684be9e1eb9936083779cdf10cbf43fbb8d409c.json: {}
          1e094bf5727fee4697387adf4b83deb7ef1a264558eeb43d5811e3d235ff2808.json: {}
          1e442ad425aa1854e93dd0a929c6653d8462f1fb92493ec10bb3da084d0ff699.json: {}
          1e449403361abc211931e1cde933bf5574680b90bf0194c7c819e0caebec8edc.json: {}
          1e45a5565a28d1372850dec45adf6be7cb6db5276cb6dae6f843bb8c6da8ac8b.json: {}
          1e60c2acfb82783dffd42e5ff3e08c1d2ea7fa1e842ca3048395246605eb4fcb.json: {}
          1e6900806a715e0e132fabae56f7da99ee429737f880025845b46d8cf8c0cb42.json: {}
          1e76d62329ae3abfa9ad8b48cd9da358b1667be2b0965578068f1479b7e81446.json: {}
          1e8fd128618c8bd1830085d3f5c319488b7aedb9880dd6787e23db697841162d.json: {}
          1e90e8212006791c2e4835c304042cd87d7c643064ca9775ede23a4989c3fed7.json: {}
          1eb36acfc3a981014e3fa7baa22829f7960899453b7d18946ddff66104021b3a.json: {}
          1ec0654c80a02f38d3482e95817dddbf95710de8a8dc870c64286e6f940869bb.json: {}
          1ec6f88bba8b1b310ced68b88fd1d74de4b5ccbfa779c296cc40271287a2dcad.json: {}
          1ec89c2ee36de0cfcf339359ab70f5ad1e2a3448d953ece1b16fa12613cb7bcd.json: {}
          1edef651588203b06541afea067c95ed4200893dd940247cae16aefd49d6dfb6.json: {}
          1f1f349d06dc77185c486b367fa7cf477c1713998e65780af1bfe831950d8e9d.json: {}
          1f498bb2c2c1297949b61534d20eea747341a2fb99228299a19aac4a130a93c7.json: {}
          1f527eb3a7197f2cb264ec65ddf78f24e093d65e166d3f831a219da30f85dd19.json: {}
          1f5dddee4c125dae0d6f7126ce35e2fb5f07f34f4131bb5ad1b0380718776a8f.json: {}
          1f616406181237c45ac941d6f7f0a987ec9665905815ded94c8ad3027d4b0346.json: {}
          1f82cf5bfc2d980092279d573fe51c99456379ac10724e8ce79b702260544e5c.json: {}
          1f9cc11026f55662aa1b7e98a36c66cc47c341bdf41ba96cb4d4f6d6e689aa0e.json: {}
          1fa50b15fe9debc7910cf904391c0ff225ef6e7380c52187b5bee79abc09fca4.json: {}
          1fd53dd480416259f77b2ac48defefb63e80f07dcc3e90fca2e9fae7ed9530d8.json: {}
          1fe511866c437c831ff9f9788ad75eb7d31c6f701f875d18bc7f3bbe69535a96.json: {}
          1fe8e323eb8bb20f99c713ad5c811b9658bf0fc6c517eb98cc85849140018bd6.json: {}
          1ff82cdd9aa7baf26de5ea5a7c71bebc98d242711dce1f539b14bd009399bd55.json: {}
          200cae298f5bcae9685d83c1a59070385bc463ad9459803e7efae4268d5bc4ab.json: {}
          20161420ff9ef38760df5c6a8b8170b6165890baf5ae65acf92cc11701289920.json: {}
          201dfd5256f5dea803e9ceded47a33333a733fd9453114720a5c6b5d9d8daac2.json: {}
          203d1600ae711ab9f9be8c25ce1313349c661f1c7ab82a80a2324e6f4b6b250e.json: {}
          208cac01a26a7ca2ab4da9f387d78aea3a5eaeb447ec378e37ead52e3c463ff0.json: {}
          20992b93de14e5314d6b2462f7ce0a5e8bbcb877f99e786d1693828fa61e8256.json: {}
          20a02e8b7bd43e7dfb20db12bd332706796bb6de35410fad309834910a2db8d0.json: {}
          20b09e738bf510c5633b7e3d13bf57e6c7cfb127942285170e9fe2db078bd1df.json: {}
          20c841cf5dc21ffbd92368fac5e3e312c9ad5e216f4c1bd573359dc9a7ee150e.json: {}
          20e051b596cbe837b5745b0d3948e0fafd7ce7dac28e2d6a08edd405b46a497c.json: {}
          20ec061958b3736cb53208aaa11fe13d3e398ca60bc93ae5ebb5c6be084ce9a7.json: {}
          20fd4978f3aa743dd1bb492b2e05cf5bd989d494ac833974640ac9e3e14e6756.json: {}
          20ff7b867225045abda9b16598f5bd10c480e19fd06e1a5e1fd5b9c90b028e00.json: {}
          2103e14e78ac05886a349b44ceeb443734051e914a85f68f3b0f88bba979b50e.json: {}
          2137ea9afb9161488bc2c5642cc2499b1cc86c2ef52f8d2cc9dbf778714ed616.json: {}
          215fdaddfb8318c19c7c55d0c37cfe81c6ca91aec95f292a6a7616c5fb218d28.json: {}
          21759dbceba030964b3d8fafbf114732229945f22cd7e2bde6090e2bb761848e.json: {}
          2183e8193ad4225c65f0073125f6abc6f70630d7d84710772be3fd835d535593.json: {}
          21a68953e3c9b32436c821c0fedc94186d6e9eafb23df79dad9d86c024fd0db0.json: {}
          21a7e680c50fb4254c305f6e852f61371fae18e534bfbc49e2b8be6c27bef674.json: {}
          21aeccdbe0a58fc0a5343f5a7b04414e3288a4ac98c911a805fbb7c7bb9d702a.json: {}
          21beb6f8422170c9cd2def69f956c06c112b309d5db39d5665eda4c2b54760cc.json: {}
          21c47f54892c9a3b98da616a22ea628f85416636b3c43298920df5884957d3dd.json: {}
          21d347186c1e3ec9f4e6848c63a76e313398cc7d9e5109948301c4379b84d0be.json: {}
          22069117f03c56c473442b352da990f314093f4bb6afb1cf2755e8bf62857783.json: {}
          2230d243e8edcdfc0729f69cc6ec0689c999739803643d014dc1715feb26622d.json: {}
          22321999b9ddb6a836e98761a8d47e1c88f47b2c435f02702a1967ec83eb7c48.json: {}
          2244de066a0acf16fecd94565e00647da1863d58b16faf8dd4e3cf7d30034b99.json: {}
          22731a3c127cb6ed1812ac8dfcdb0a56ef42568c537ebae3f5e0124d82fde90f.json: {}
          227a89f9874cd8ceee1faa862d65fc5c4d86b25ae2442f9cd650344e532c9929.json: {}
          229531e4a72149ef1328b3057cf14a11aa022133ffbfd9bfc34a35a0bc872b4b.json: {}
          229f4a618edcaf67d7c592356bd8fb8af703724c5876256f8ab48c4d8ac42ee6.json: {}
          22a519a97aca2f6129860872d9ed51ea31bfdb5a59f6a77487f7f804fc012f81.json: {}
          22b1d9b19b4e4b6c99cde7a59aa262d16c36f19f91f36e47fb25a50650a7debc.json: {}
          22bddfcbc172117cb66b3d7f6974532f193ccbf21f17c856ee5df5c60753690f.json: {}
          22c0b1d5675300ffd6c92bc219287fa20e2f1b20b1f2077587c9b104530cee95.json: {}
          22c90348d748161070be63e392d5c9004e24d31b097ac6ca50719efcb3c18f93.json: {}
          22cafed0c6c3c652ed5a5b9204e9f5954a61d6979b7ce4373f039d01c8b25a1b.json: {}
          22d53760530cb1391ee4ac5207d6a2aa9791386a9ac992b28c8830cc25ff2ba9.json: {}
          22ed8d8e7d9cd2ab7f70c08b9190c202154868260634450ca0acaa26682fc014.json: {}
          22f964e7b69370abf3c0ef8938b13f48d0ee361221e80a8410d9d359c4575e7e.json: {}
          22fd2fb51e63696db433ddc0d191e721ecbc0609b44c4168717c234843ebca8d.json: {}
          22ffe796190e94150f78ce60c60e1a22cf238eb46c42a66508a388202231e4b4.json: {}
          230b58507988b54d0cdb8e0b0745c1daf6c542374968ad91d497cef7ea2c4c2d.json: {}
          2341937d0fd9e30ab144dda57037d79026d8a8396cbe411e29fda438d71c9218.json: {}
          2352dd9052d594f370f611d7039764bead86dc9d49255ecba2361ad4162deea6.json: {}
          235e7c9022acdcbaf87c1c6c747faba252d1615deadd1a9474e813348c248e39.json: {}
          2366d70c27bf1de9a2abc1cbd66bf2086faaecc1e3e4929b6f4dd93ae801adf1.json: {}
          236cb7902dd7b7f37dbd43d6cd4edd47b8d0e75c1c75ca3bb1f30ab1ed3fd9ba.json: {}
          2382a0b9b4761ede0c86909a010bc46cf64a0e05c9d40cb8236e87c95dd9f0b4.json: {}
          239b3768b300cfd913c2844dbc50328f117a8015d171f12dace73419cc14d151.json: {}
          23aa274f35fbff18c729978f2f6a6897627fb4e67aed97ad07d07871b4183705.json: {}
          23b3edcdab260582a36e95463f381461e8d81ed37ee16fc2a29e7f3faeeb57b2.json: {}
          23b681dc1d3089dc5837b9946a729fff1f8fbe02c52ef2ce5036b860ca5a1c9c.json: {}
          23bdc6745d909370bc44bec84cb93869ece8f06c8cc700f04697361a449bf3ae.json: {}
          23c94a2b4cab225a83d5f3512e830d563f5c3ccd27a5142ad0c91156d7801e6e.json: {}
          23d4d88a4d4ef24f8665d50baebf150d25d2e4da62ef2a069a10e672d7f4c470.json: {}
          23d509cf3f439cfde9fc737de6929a1d1a94e15f78fabdf320fdf3d83c7247bf.json: {}
          23ee14281092dfbeafc19c6487b5ee42cf26e57f63a66f07e25dd3b625480d7b.json: {}
          2406916eac0ae30268fcdd68e2ab24e2861c49a265534acb364e5452b0b891c8.json: {}
          2409d0b25d60b6e40e96b44cc2643e81894d7f90cbe12b425f51459779d6f0ea.json: {}
          2417bfb082032cb880d232876cbf8c533eb047c5d56fa095c14af7061357f6e4.json: {}
          24181e866e446c5645d124d8fa81effa504abc3d27df26faba55be73fd4ee0f6.json: {}
          241f71abc8517fb4982a4c81ad51ac2d46d9f01df595f0187596086d1e7cb858.json: {}
          243c576d996c1972a08cb36e4c4a43ed4bce77ca7e70cfd7087e468123f91bd3.json: {}
          24422c45fdf459a0644ce3ebcb3541d0e69d8ba6a7e7c1e02cd0634dcb7a1946.json: {}
          244d0ce34709327d774556840d3c6caad7cdabe64669db1ff2fc200654269da4.json: {}
          246975b73fb53bd9624bc1885d94ebe134431e1a0a6be04fdea35dd31a30452f.json: {}
          24932de3deaedca1c49a0d66611c86c16db2a06ee332d09aca3dbb47f573771d.json: {}
          24adc8d6696ae7ada3b084fe6e12eef19b90097323d88787bc75d3a601506fd8.json: {}
          24b6f85691003a8f3d2cb56f7578186c48b591d3a1b5e2af3f057e6fca1ed9d3.json: {}
          24c5d513f2ee6acd46784530412ce2fd40b7d1f7425c35d48ad3aee3c1743eae.json: {}
          24fdd0b8bff943cc3de7a8b3a2d93f880df636665cd96063e3b3b130e5f4e9e0.json: {}
          24ff3eded9ff0ba08edd704cc2fe5c21551ca741f87916602ff576e35fc68360.json: {}
          2511e05362f60ad2436374dd0ee93f213d8dfa1f169eac380b95738d395c60ab.json: {}
          251beecfe4406cbde7fa0505b7dbfc1379519d37be7cd0dad06291af1bc27b0e.json: {}
          251cd63ba945f67862eda281641211de9e853163d68739b5a5072b190bf7324d.json: {}
          2520dfd8094c35fecb03afd524fa9b8186e5016d5bbff749f49034da359900c3.json: {}
          2528e1054ca967a0ce230ec407bc08501dac1ea8fe8f0ab442965a24f813189a.json: {}
          256127ecc98a44f67af2e0d4143ba727f9287f7022acf57f7a928f50ae5a07ec.json: {}
          256253b7fde86ae5a1467090d52270f815b75026d4f6132b2d8cf2d4d98fb3aa.json: {}
          256ae9e8bfb87ba5651912c9c3f5ac675784f0af69df4a96231baa4f00e4359c.json: {}
          2572135f22dff8a5596374aa37c130bf521faf09daa15e0f7e035640c5c8483e.json: {}
          25737177536cea24e01f0d7545a7edd72ebed96d47b9c837c5cfab4fe5e02047.json: {}
          257b5ea63276aa8b440f4151baaf99f50545228706c3a5a7e588ee10644daa70.json: {}
          259e09f2e44b0b7e0bd711f1ac399230917d1dccc684efd8e24d2f8f71f9f564.json: {}
          25ca71f22be093f892bd11bba1621adfd353cf2879a8ad69c93d22e2c2255785.json: {}
          25eae54db717d7ae497e7b441308b3faf2d62711f9604728df5ff210234b0ea8.json: {}
          2683a2034e06e8a4c96ac276db23c66a8878c14b1b427bbdf635a59683415192.json: {}
          26a3e73f01fe63d211e2b928689dc16cbb72a6064f1847f571095d0c803c79fa.json: {}
          26d088af4a488599d966041cde01cf434bf02f7ff726765f7ee9a4775e4739e1.json: {}
          26d76673e2e68ed749f505fac5ed6503b4844100f5cb692037d0212f1cc594a2.json: {}
          26d79079e1d241dee7a432b09fcced1e37666f6d54eab96fed9100e4641b250b.json: {}
          2708a77c1b297826df486f954590ae3815f48563269593a17f6f14feb10e63af.json: {}
          270f085d374fd7a0c785e72ecc02ea236b308ad757ff38bbd3310a48c1079912.json: {}
          276622af416d6ea350ace4aaa9f3bbd31049cf2787ef75e6210fdfd4a1c197bf.json: {}
          276c59919915502da8cc3d601f3f15f7aea7f2c21793ec0e11498e6c1f09c643.json: {}
          276ef2aa5d032f3f88ce200f9bc4c4ef89f164ddf9e7b99e16a60051f9032d97.json: {}
          2772df34717a6f47843b6d46747cd0d0bb68c7aa84bfc062f53c456903925a60.json: {}
          27788fe25e519f15caf93c3e8596e2cf619c5ad6d5f8f1e2549155ae70a5ea9b.json: {}
          2787c5afb29091a449ae0cb2fb8817c223f64a2a5047ef685c4e1a27846c79ed.json: {}
          27d1a7e748aa57ddbf3505b79cc73f3f436a72c51f493b1b729cbf80af02e220.json: {}
          27eea14ee722d7091fbe20a287c6091d60a33bd34a17ad7fae52f9054a43ce70.json: {}
          281b5a40b4c6f6420078856edc94be32c2617cb589e5aaf239a6b5a04763e973.json: {}
          282c74d1eab0318c1332141dd1d48b8796c90fed494ca350a5edc1189905abc0.json: {}
          283bc9724dc194d8de657de3aa7cfcbb6b9b6154380f6ac96467b84ed54a6a69.json: {}
          284345840dc29c185d871db9233ec4e51b62d4935f364078c0696458efacac37.json: {}
          2850304077d13cddd04b93f4fe378f99cbd96413f263ca4327ba6133c490a38e.json: {}
          285064e3d295fe24a28aad64bb12338ffca073ab5d0bd97db749f72ac7f3f09a.json: {}
          28758d2347a843a903d7cdae1c729fa0fb761a2d393abfe5da189cbb8fe3bdd7.json: {}
          2891ba3e2e8551e0dade1ec21fc6254fa4058a00d1aeb2a95f2bd7e55fb88d89.json: {}
          28a5731fcd5053404831944e393ffe738a01a7e49f60541896dab9e4212d4491.json: {}
          28b262b5e0b9bc5c269fad3486f2bd8b013e0f4351b31c2873f0496f1a919297.json: {}
          28bddb11e137bd0b2ea052b71641d290c85521c1099f00d5e01c3d3379390f2a.json: {}
          28be8c6aad5302149b1e2f9f115c3580005e528122f6d4f27381df9b7e1fbe2b.json: {}
          28c1311f1f9795c2a68be218e85f20f0e968bdb521c8a44b0c0b6c351a54fd1f.json: {}
          28d52459de46b5348af3f2e3c72f0c8519e78bebc8a899365d7b4923ab9c37f5.json: {}
          28decf6263c5b6b37a6184dfc152e32e52ad0d39c635368e0cbdbc5d9ac2f654.json: {}
          28f31e02ed09b82171bfe64744f75c65c3c72a114f9e61b25b91daadb5118f51.json: {}
          28fbd0f1a97b80e66b5d70293e411bf5d39c7c3bafd42ae7766a3edb7010efe0.json: {}
          290a6e97f81d2bce4af8afb79e5c2fb892e9e0e06d7ea63b0e5ffdb4b9cd5bfa.json: {}
          292239f8a24ea88fb18bd6128543866bffffe9cca3391af8242498890e41070e.json: {}
          292ce36bd9ab5c12db6e4ed698d7d98d6b5a459f5d9ff350121c17ca810a1447.json: {}
          29367a9e5db64d743b5acf82fcfa1a1b48bd2176d0cb69db3c83f21d41651ce8.json: {}
          295b85ca9d823e0267ab625d7ddd06cd9a49d893cca310bef4519322cc3a8fd1.json: {}
          297dd5e53a0ae257f92188fe655a46ba2ba4065e23a39cd0a97aafd6d8d86d95.json: {}
          29c34aa0829b12479eab8bc610082deb1b4f45b35acdf9babe636cfa460f6591.json: {}
          29e06317d941713c90b84367c4ec1e3db504371601cdf4305da90c752551ef0f.json: {}
          29ef3e67e8a50131d332dd2af9f245a24646e0d6d96fe8b904740ff527d41021.json: {}
          2a14ecb736a0e8b6019a742c5cd8154683606feed51bab9ec20e1df1b974deb8.json: {}
          2a3d6207a0fe128db33f72639d113da67041ebd9f1c7180eecb6e11e0f01db74.json: {}
          2a3e58921b21875aa57040f665a4669f2e291087f70b321f31fd88df05e2224d.json: {}
          2a426f0e8a7e95f4b47acd9863e2f7c3106e2ac5441d56be3d86ecc52b5519df.json: {}
          2a5dc0aa3fb3e6f38d7cfa852f3da48cfb1aa2f96e7b42b93d151ead42b9cd2a.json: {}
          2a701b69bacf7e35af9d55cb6e8c1c42942de6d4ca8a9316de71e80610178b6f.json: {}
          2a9e426dae5233d09a467de941a8e46b698d06a13779fa205e7ea6dc3a871947.json: {}
          2ab066d0f5de2261ca1cee69ae3f2affcf31fe52be5cae089ae82ea92c928785.json: {}
          2abee0e48c86e34426a0d1b1e20fbacca4bb40f4437ace3c88d3dbafec1f97fc.json: {}
          2acd75e0298d6ce930e6f5e2f7399b2f8bfda72c56ae561cc8da3e9a4a9a058a.json: {}
          2ad29439a7e272d359aad2423439ee070d9d8a5311c86f699f62f1a81834a810.json: {}
          2ad919e3c3bf291b25799cdb12acc0e7de340d8c1d0f0408443a872b97f6cdba.json: {}
          2ae55afc312f4068813fd5194b89abb0f47bd025c6b0c4136cc946ce0acee956.json: {}
          2aeb6cba2880b02c821f9f3180d94bdabcdf5fe5e5c6eec08b51d6ecdef0f47f.json: {}
          2aef86e75b00e6e10c584b0ec2391771227de265de44cb992c6e3ebd7dbcf8f1.json: {}
          2b26537eacd7f75496ba3efdfac2a5423a032f9b78d4bbfa6c388fb567d1e859.json: {}
          2b4b0810a9a471be603155171e0da45eaac8d4795c0d891283539b4c29df87f7.json: {}
          2b63de0fef4f6a37bca411bc128099ecf6f2166f4db503ab6d79dd133918d715.json: {}
          2bae075a3dfa8371b90322ae9937d816c597d8bc491b9ffd214539a734d5f369.json: {}
          2bb111fc3cdc6f2a68c889c6984b8626225a800789d1270e81ff5d2086ee6b47.json: {}
          2bb8deb1280a454007823f094a83df5d8b49907bd2dcaabf64d7e9e96f978a9a.json: {}
          2bef1dab3852d76affef972d9cc5a9c9b38e7dd3629ecadaedf9c9cefc9afc9d.json: {}
          2c252fa76d830e1d7ffb7b683913b0ad9c1434d0108dc89e77f741f26fe8ffcf.json: {}
          2c2f178d2075879c70191ac4f00f40f1b5fcc24c6cd8e0cfeeb8b4f882b1bc38.json: {}
          2c54ad513ad05c6722d64a0126f880ed62c9a11088f497c21f78910593ae498c.json: {}
          2c5da7c5f0bd6f5528237cf3a6a0222098f8a4c9dbef9a7ad4f56c286064277c.json: {}
          2c6291975502848a525cf14ac84cb93c9b9587ee7e5f12b4bad27853e0d2e3a9.json: {}
          2c6c6f00e51a2a5d5905b0c0bae01b0322447514d100a331c0bbc877334bb595.json: {}
          2c6e4c556d81bdcae05b4055126c5e1fca878d7b23e11be99dbb398ded84d784.json: {}
          2c7254ac1808e5352506a6c3b93f81ed12585609a0d1840e8494a23d76423230.json: {}
          2c85bf0c2d45360323ed58e543de3f3081f9c2ec6d8fb5a140339718538f47df.json: {}
          2cb0a9445190e2709f6c1ea44f8c0847d2d14c8d75f8c9ff60a11704c34dd08f.json: {}
          2ce54738cf36f1cfbcfc5a4f405a696a61d81903e15e778381da791e861219ce.json: {}
          2ce566917cc273ed844194eedb8d7b5fcec53114651b4e9141052c7190d22cef.json: {}
          2d2943628869f813ad449d8c2bc661cac7a9e7ec486dd838f10d3de4b8115132.json: {}
          2d33ac768851999b8c63296b5f89f31d0827460815da0685b9985b8b05c69d68.json: {}
          2d50ba59488b966ffa894eedbcc39a2898af40436bd13f53c37408c7cbd042aa.json: {}
          2d5318a8e57bc1e478f4bf84712fe9fd83b784106ad4f661aeb3cae48da6973e.json: {}
          2d59e704de258436c920f35c8a6a74b86715c3c463c8cd0bd3cb0957520e24a3.json: {}
          2d5fe1d6f43207992ec8ffe8762d6e4efc9902f5665ef50a87d4c94e3aac5ec9.json: {}
          2d6537cbbdf82b4ca82564686cc29f49f1875db1926d2c9a46091392fcea00f2.json: {}
          2d8b536f550d97125917e971e8e1a8df0249395f4fc5325fabf9d3acafb51c94.json: {}
          2d8bf0ba8b7966178fa50d096013d1d0d28ed136a4ae9bd1203f1bc012b4b365.json: {}
          2d942f176d2b008c2d89896b34a9ae130e7b877f1c12f31d2fb634bbf9dfec1c.json: {}
          2da232b6016c7b7d2b7700c2272abeb95c8f25b68b2a5c920ca19f7d787a2983.json: {}
          2da6d4f131e489baf3d2074158c362fd4142fc2d7a8efcf219a7fb8a4dd0bc39.json: {}
          2da7ac40828a9e29fa5af20bec63a53cfbbd8ec30f1486316a2cb64d12c0ece8.json: {}
          2dab1e77a692810c5bf8d2de9e97a41cbf3b64b71e14efb9adacde6a9dd1892b.json: {}
          2db539af76df3ee2ddffc0816a3c1a225262295ea7751e9da22d4ecae7f9d718.json: {}
          2db5fc657f604c2c0225d339ab9283506bcaed24c91924a98e93ef0f4611812b.json: {}
          2dc11fe58f3ce2bc627a5a8b5cb011d08c630c4184407a60bbbe2f977bb72c99.json: {}
          2ddfd66ca7d8cebddf6d81e5de4cdf8b643d71f0450a1ae21f6560f2dc399153.json: {}
          2de4f55b48426a5832d652cdf3981105e47d7b569c09c06f7326c2e74b4a0aed.json: {}
          2de6bdf1a7b3e56d657e31228b007dcf47daf7ddcced14a2b5f60669be34e6a9.json: {}
          2df385619e9b5215a2e79fd50424bf30a58b9e036a54366655712df5f06d20f4.json: {}
          2df727a68a0d1ee64cc6d94d740426b7fcfa24a6a0a9c06c51d99b2bc0dffb5c.json: {}
          2e09d34894f5d5b872a56b96e5a3ece42636e8274bcfe3b47ff39fc820de2c36.json: {}
          2e0d8e4cf49bd720c35db27b5a00c2fa6ab4860a1e181f6c5507cde9cddcf508.json: {}
          2e1713ec36b0ebaf454182979af5375c7e7f04cff367a9fa4c858a2160143f83.json: {}
          2e1c93c61e5c4118542e3c9045b6e0e53669e42897afa96742a3561c459d76b1.json: {}
          2e4e153818438538700a14f8116fceedc49075b71d31b813a6f46bc962d22e25.json: {}
          2e9adc19dd007a8de679f0e897a2a553b4ae6f395ae568c8a373873d8926c193.json: {}
          2ec666a2ae393ed78d32566c408e0ebb1fa2362d0617c8f3d1fdfb6cad01102c.json: {}
          2ec885e40293f49a970179cf213ab986d7385032dd22cdb4ba40fdf6e67771de.json: {}
          2ed9c115aa10cd2f7e8bef9f3d6eb5979b091fd5f32f1d924e4e8efd89760b00.json: {}
          2ef3028ea7c48f52c13af5f2e0d2dd9f4cbb02cdff4d60e176c5afb017b5ff0d.json: {}
          2f05cd9989067dfb4842cab609bf27ed399b9e0811bf66d45800015485742415.json: {}
          2f1798cfd271019029aac461547099b5c9c9835280d98379a17b422b16b0b0fe.json: {}
          2f22770c74460cfcbe8a6266edde7bc3e3e12723d5035866140a50ccc954604d.json: {}
          2f2dd1082b7d72a3493d13b89e45122dda0ed2f97af636af3d070401483e77ef.json: {}
          2f31f198e5ab8defffe676ffbc6d7c932710a8158fbd8b1e8d30019da2817348.json: {}
          2f3573023b7fda90ec10654b4f81740466d55d62beea8a54cdc22a60fab8d2a4.json: {}
          2f677779ea919a6721cff1b99d6b659ceff2cceea1872054fe1f3e950eef02f0.json: {}
          2f7a81645943c891630bb2293b312330ee2d465f8677606195f34831d6a25788.json: {}
          2f9d5cdca7356e6dae8f79386f3d440bb1f969865f0cb4d4e71621e379579b22.json: {}
          2fc9545927225de6c794273074d07306fb14d79e8ed139ce7db306938d757d4a.json: {}
          2fd715b574cd7693647ea58d905112f982a886d3e30cd7b7956b3cf7f7d60e58.json: {}
          2fd85b30e83fc3f9ffa48e7d234a344e21d6cc257e6a55b344993f060833b215.json: {}
          2ff4519f08c0f8f22a5917149ca0f1947f1ce0f95300f8c19a23e582a73cca5e.json: {}
          2ff4d4fc6caf39f130e5c99e2f25c1914117c7a04217c14d262c93e14fefdc15.json: {}
          2ffc00929b0d32e29eb6a480c3f6b63f404d463e2afe7c3f86796ba901b934b1.json: {}
          301ad523817cc05ce74082da473018c086fc4073108aa8570957d0263f4600bc.json: {}
          304362a1f31fcfe459edf9f840b99d5173d414f468989b436ae3f05cbad63897.json: {}
          3049d8de0f8bb8d993e2a5bde7e254bf6349557129915fb465d60bb25219976f.json: {}
          3061d65e9e6749f312803eadd72246b088b18e3c9392c3710c11324a676bd8ce.json: {}
          3065cdd51882964d099b6ae8a963551ce23c49590144d08547f014e03bf0ad81.json: {}
          30833422e33ebbb98e6c669c48e01b8408940573ffcf0100e474a67ad672352a.json: {}
          308825d8f16db437ffd973e9cbd4b9e297c2dd19743e83814f5e9287bf4fecc9.json: {}
          30892c938cd079bc97011147fa67079c11605bae6f2dbd3a8efc50ccbd769639.json: {}
          309005215aab1137d3bbb519a8985bc75ee9ba86207ec9215c48a92c4e1b8d2c.json: {}
          30932f2a487d93afe2b71607d413d62e3c6578c94b87b67928fdf7215ee85200.json: {}
          309ce8b4d6cd915dd5ef3bbd88913cbda44cee62ef7c2b6f6d0b7bb77dec9095.json: {}
          30d205914a3da87fffb77e524a7f1ffce0c427e75a189afc3bfb5d2d22a5f94c.json: {}
          30e338b3862b0340759b14675c13b99b10ae6ac0520e493dd838ed0f5331b08e.json: {}
          30e8988ac6bb1595203155ed37f1bae5b4a426b46e76567ab55004948ae26de5.json: {}
          30f9a54e180cdad5d207e4d6c5d3a048a6cdc7707ea991849fd1c2f142db211c.json: {}
          310858241fbdcd688e136a7ef7d39245e75c40cc4c99bcb08d9ef28147b37629.json: {}
          3108f202290a90aab0d631ce3c6b2ee283c116a568c5403591315db4dc2405d6.json: {}
          310eecde223c4837b95a5583f8f0072e6130f33f91142eec1c14fdeb365ef227.json: {}
          3126e63dde7091dcaa8c10709249dbc7e67e18bc7634290c12c654cd58ab7eef.json: {}
          314fd4806d714662578911fa10da5f61ede4c59606b2fbad7c36ad43ba0e458a.json: {}
          316463dd931e37eed701eee0e978821137cadd5e664e3c7b7bfb565af7703fd0.json: {}
          318cea001208fc96d8d61613543183b82665c8e58c80ac38c47bf409c866bbe6.json: {}
          31983fb4c963c11ecd1b449beb1035d58072b8a509d4ace1c783d3a8794d7f9e.json: {}
          31ba81853e000a2df032a3f591f234b58ecfb4d6afc5cdef866e6d8420894fe4.json: {}
          31d6c44eb24a16127e123dacf5950b5644493eb3c5c18628109704960a8282dd.json: {}
          31ffa934bb3dc6e76933d7e348d949e89150e746e913d7401eec712cb437de4d.json: {}
          3203275df6c33dfd8862574e6a0c86a6b3317b40c4cd3c3027b4ee3d7ec3c273.json: {}
          3203df4d1196759a969af21abb5200c0db5202cfa92369c9615c4d29c857d776.json: {}
          320fdbb4363930f5705af44a25e08df66a64af6dc292436e6c2611736fb0fb74.json: {}
          321c8d45d81d748e5710f0842315dca991eed3e9d7212031e3cefe4de849a24c.json: {}
          32258890324473bd2fd9a402a8cdc994a7fb644da6dc1004f87894414e95ffe5.json: {}
          3238be86d2a45f73069868566604112e3413bee0b8b0f2b97d394dcae0e6362f.json: {}
          32623bac7f2aa4eda92eb173135c3f3a941b785b8c0ccc1a35f31b2a4a3b69f8.json: {}
          327b792bfa62d7d084dc936dfb2b946491fdaba487c1b126a9cd2a5a625e05ce.json: {}
          329b73eac96e85fdd8d7887ffb39df16d11f387579ce7dd93c5bf7d606e2c864.json: {}
          32cc910eb52711ed43e3462c0d8c129efd2a9b99895b09def7bbd50bf4345218.json: {}
          32edee4f122efa320ddbc6cbb69478bc3ebb624be8a76ebf5c896711a878c31b.json: {}
          33168f0260504a6272d42d497029e35044be517bd46a29fb694c9e2ae8b5fce4.json: {}
          33296ba700ba23b05140391209836e397ad04490b5026916620c96570cabaa7f.json: {}
          3340e12faca42f0fbc533388c887f3f2acb7807a65517d8e2ca6afa07776e5db.json: {}
          33439c67cab6fd61594d65bf5902bedd48691b71d3ad1079c52baee9918be5a8.json: {}
          335bdf422c1a017dc356cf4ff763cc2bb5d99f566f60624b2828ec65b6d15979.json: {}
          33658dba1c6318bbffc67b22807a5902957a86168da48d53716af3c9d306019a.json: {}
          3373a6499aa7aeb42cad9e8f76324083b6fc5cbd025153f12836702fe17c770c.json: {}
          337b1a9d5edcd380ee1054a2f9d3f6c6c553c7076cfadc297e626dd606fd153c.json: {}
          337ee029bfc069c5f976d8030fd7407cc38b5dc5755cbfc60ee9e9aa034fbed2.json: {}
          3380e765bb93ed5173e7dc9530b0d5e3022fd16df5a2ec616abb21e7c4cb3b6c.json: {}
          3390a0e646d0c8908625c97a3ca28bccf61ae98ab71d4233c0ce55182e31558a.json: {}
          33a96e8faa10c1950c97303333d9d20ca4829617ad585ae7a54bdad7356bdb49.json: {}
          33b121241793be5cda566e2aa49333c4c8570157d438865a46ed38a228ce6469.json: {}
          33b553316627547e6b22857883e477113d5a2215044e997352404675ce992932.json: {}
          33bc3268d42dfc9d90255b7aeea39ffe6efb9ad623d6ce88a1b0dcb27c0efe0e.json: {}
          33c30de7a636f30fec09af236aaf9a970389c3d2d252f75c8556494c7eec99ea.json: {}
          33d908f3f7253361ed166b2174665e2ce314d231a7d00d4cf398c7aecb5a855b.json: {}
          33e22b2e93a8df0e2cd1ba1eefb00fb27004d36fee4c8c5424ad417d1a10a33f.json: {}
          33e87378bc86ff765c62ebe2180e748ad5918a8ac7deec4095f48a1295ce3e23.json: {}
          33ed34b1023d975a727caeafc0da69a1bc4622b53e53f961970f1ee19edb8e13.json: {}
          33f5e2ebf59761ce2cf39a35a1ba71a5db6e883e84040caf752358ac9221ac8f.json: {}
          3400f762f3b1d1a6563030a51fb801be894267d3f8f2964631182176058a4048.json: {}
          3402f432c57bd813ca617592a653d15235704b86cf58fdf7e0742a5ea37e2072.json: {}
          3408bf4d1bed3e350a05674b0214c774bb26a2242f3a984885a7971ba7b33183.json: {}
          34325c07ddf918574a3df77c58576718a31225293311898020ad6ee19f7c4c6c.json: {}
          343b84ef4562c9e6113d27b93abbbbbe52f6bde1dabb40f8da145e1a132160b9.json: {}
          344c3bd6ad9200ad5233c4fa9bddf75dcb0e31dc9240a3e9ed7101c3aed3ab7c.json: {}
          345b9644935dc748bed387d7786cf049998a267c006c4508fb7bfb5990361c9d.json: {}
          34618443c135b957246b6dfebc2f8ccdc1781987ae4a7210175193281e34355e.json: {}
          34784bd0517b4e7ac2e2424a24f1ec53980eb033e70bd46e75e945b61aa0f7af.json: {}
          3496efa35e04f9f8a4feace016298eaa21c9a13439203af139bf6baaae370305.json: {}
          34cd9c30092b18d1dd1db8043fcf3036b6dec46959aab727655525315cd65bb9.json: {}
          34dd81cf38ea00c5ed52f01f2ea031b095c46626823e67e8602bd7091b22b290.json: {}
          34f37e8389dd963d703d93a4ae6a9ca5d2e3732538da5e2f773206b8d8a26dbe.json: {}
          3517a73ffa1ca4d93aa36322613117fb3dabcd1d076c607470f5143a2271119e.json: {}
          351e3e0edba6d8d3c04e438171971396e43b9b9b43ec6df9badef0084d2b062a.json: {}
          351f8c33b40d49c2b4f4410bef1a6eb6a33bbab22f1dfd969b3555f1cc1d74d8.json: {}
          3550155314fee3d348d0c9d5a8444fe75db80e1b4353556ecbc7315c265b97f2.json: {}
          3551f8160278a69bb44c4d7b9c523e7177b8a06914b3b9fb9fb0a78f68c133d9.json: {}
          355f0e716bad4233d14b70558f8b5775bdf462b49f0c9117e8ecce26fa05d168.json: {}
          3597c9b4e11bcddbb209e61d13893f178027206d3dededf02d01f4d799093560.json: {}
          35a584758729b0dd4566e032c60fc6dcf4b2494a35e34bc71bb872ae2d448ca0.json: {}
          35daa832ccbf79b8816f848c9d80fd283cfc483f5be7a6c33521b502e3b92d60.json: {}
          35e0b28ebafe35e75c743d4e9222b3eacd37a1410c532a4223440557f263202e.json: {}
          361378d3620b279a46e93a0fad0ee950f5e2c0a2c71aadc1773c59f40f33114f.json: {}
          361816b65cb76403cbd532a1d60ae58d2c6a2a8de9348703864eadac0acaaa28.json: {}
          36214ebacf0696e3506520e3db62c5d2165bae40e002d0c2a21db631759db463.json: {}
          3634dc8f3f43bbe442dffc3c0752cc2d68d7bc1f3c858a838c84fe7225c91f92.json: {}
          36413935f1a64017f499db9e7ad40737104c231dad23ccc1bd130c8a3cdb4021.json: {}
          3642060f8dec6f5f1dcf10bc3c559a840ca29ca8b4cee86fdd6aece72cda9476.json: {}
          364b2de94b4640a0d525897fafb383aaf3367074fd8fdec1a6aeb4a8cb4a7ecc.json: {}
          364ee0f5d5425329209c9348b63dfb0ab3f4511c4fbe8b9e789591dbaf810547.json: {}
          367b9c9a15f3aa205d0ed770245b271abbff1e765e643b1d155783226ae4198f.json: {}
          3689946225011b5d967eaa40489f59746b41fc54d7e31bdda29b96dd10603c4d.json: {}
          368dec468ac65ce9bb3bdfc0ccbc068617975b62cdb3de99d1dc2e0735ecf3e2.json: {}
          36a12233dbeb259871ec7fcded86e432787604d1ce3d75dd2de1bfc2551cf6cc.json: {}
          36f5dd2da4632af54bd9f392e6da8b17962c65376871161148f0cccb1313efc0.json: {}
          37181101fc4b3d8684984ab0d8c93cf6bfd03682d15599bed31198d4f5040683.json: {}
          375aa27b05e6c75bde0e4d36e68f3f19bb6c280e2fb72ef3fa0bd07b3bc98be3.json: {}
          375daf4d5e5bcca62d130224fbd13897c1fd733ca31854df0f8daa13bda31dd9.json: {}
          3760cb9075338e2bd152f7c1d49cc0437766d7f0c4eeed86fe7ae7a26e24aca5.json: {}
          37840cb8605736f2aac8374f9c43405b280afb8bb5b11e34e402eb5bc817dbb9.json: {}
          379bb78ca38011615c60e5246d6902849c8d381bca20e493d49cd33ce583ceb9.json: {}
          37afe42a2517cbc8773deeffb788ef99ab3ea16b4e4e8770085da39f9c8830c9.json: {}
          37bcadffd6132a0b5ad38c803c318aaac0d2ebe39acd2f61777d5ca18e81a6e4.json: {}
          37c34fd94ab0cad24bd4d1b9693c60b1f958e6f1dbca677c677fd6054e02af7f.json: {}
          37c69b31e6a7f5b1b3b3c2dbcc0e91e4ec858b692eb322554a809f52713c01d3.json: {}
          37c97ce15fcded600829ab31e496faae989c42348d08f4a6f8d10be302818f99.json: {}
          37d33e7b8cbcd627e7ef848cafbf4af1d2ffed2f6e61ee5595e9f78915a850aa.json: {}
          37ec4bc9ddc6b67b637e537a2a4a128820ba947a5bd115739b5b06f84f3930ef.json: {}
          37f5455835ffd53f412c71244b7cd1812193c5b05ca959de75ff4354c5660674.json: {}
          37ffeee5ae98b507da70064ee52c83e93ab0fbda6bb4eaeecc5a5f6e072aa4ab.json: {}
          38059bf070b250560557f761619185d1f6de66f51625409327a7f8c190b02c4c.json: {}
          38225a5d7230cde935bdbb9cb3d8c9728cce662aca151ad658313c3ed5ffa089.json: {}
          3823b7882897774b8cd034b324c2c961d76262e5815cab0794a7c7c48b3df227.json: {}
          3841b3dbc83f84f99e6b2821c9a437914f4450ab0a319ab2fe5b3616812d8150.json: {}
          386637571b6f2a4c7e12e6fc3f67dc0ba76db7cb564f0de740f1927e0fc9f5af.json: {}
          38bb5faf7d480d45c907b0e6448291b0bda64083966420ab62174afcd77eb372.json: {}
          38fbd8195f15d96b6ae2c4f67a46b6eac0a5bcad84e71b808dd6cb5c8f8acf94.json: {}
          3907fcc64bd2133a29aef96a3076c2394476cc1f70019f218ee37b0dedabc54b.json: {}
          391197b377c75c4267d2313af4d35d81b5e10420d6e1c92c2c2a3bb43a758476.json: {}
          391ef965e43c7d2943e8290e3681b74ed84b984109c759edf67278ca2608a6da.json: {}
          392bcc1ccf348180e32ef22ba95846b53e62e2b759ad095538f0e5f23a2ea433.json: {}
          394725febe7dfc1009343c8e0a811bfda5f39eefbce55bcbb9e0bd3de9e0b05b.json: {}
          399dbeef0d5d09b78f26dd057845db860528a183af01240148c4875e6cca2dfe.json: {}
          39ba4c4eee359d7b94ee228befc82f44eebb20f6c47377d15795db96d9d91528.json: {}
          39ce93a1f8373a680c2e47308a99539c8b2575b8e8a0f5bd2f5ca591cfde2665.json: {}
          39f13ffd906ec86f035e277f556f8581d2e3873bb3b1ed8539f6cd909247e035.json: {}
          3a05c4e8164ff936b94c9d3433d4cc62098fbf3a3a3b3564488be9327c4ee014.json: {}
          3a0d3aba8f90243d8d7551f1aa0c32e897d4813c98e19ef290858a46eb8bb7d8.json: {}
          3a278bb2f672444cbf354981c70988bae3248f189a4ae0633114aa62889bf6e9.json: {}
          3a29eef4a7aaedd26b7fc9df9fec811a5de935481fb520b9ddff2f221a13ebb2.json: {}
          3a3523b10c7e31856001effd17500d6ba672a4035ba6dd897ddd6c9fafa823ad.json: {}
          3a4142539004a6676a0ea6ea6c2d79b0edbe94db484b0a5bcbec835c8365e27d.json: {}
          3a5aee4d79dd70a7413ef54648b5556323fb98230015197d868eccb7f876f04c.json: {}
          3a78fac3b7251ad820997b12365140aaf7107dff1259457942d0c3e2ff6afb68.json: {}
          3a8227113afe69b6031d98f6ef24be6592609336a2d622f1a580bb8fea9e5859.json: {}
          3a96089cd48880ee6474c1297c85bdc31a34dc35bc2084872c6aa4270e872ae8.json: {}
          3a97ccec69db13f6076f43d69dc01c2b7eb2f05313c3e3b859540c2bf892fb67.json: {}
          3aa166d4add8e4c1867ee7bb1024c3517b206cb40dc3452678e5628c6b113a65.json: {}
          3aa882f3290334a3cf517aeb4809bdfdaa55e24b429f2366231c612c638f32f4.json: {}
          3ad4abb04518251c69757adf5f991db636e45d9fc144c752c0acbe29a34c40fd.json: {}
          3ad7a41cc82c26fe044ffd2a5fbdbe37f021f980a8540ac9b61db624117fa477.json: {}
          3ad890c34a05244e1fae7bcd1cb56cd9fd6d113471f7427cd68135e8a282a1b9.json: {}
          3adb7bb40486363ca6cb645fca3d43668fdfb14f8c9376204abf365f70597b44.json: {}
          3ae54f9a56c79ec4e3e55b2a1f11aea09d38130457935dde9bddc85e93adbd89.json: {}
          3afd37ed572fa48c795e1bc1913fe6b98455e604859e141f797ac34d557e3ad9.json: {}
          3b31bdd995c7fd3fbe63c09ab5e5b69ae48d9a9ffcee9b51d5930a624146ca0a.json: {}
          3b33acd0fa1b5effbb7d5b9e63c495020167042162cddbd45f17dc177826ec4d.json: {}
          3b46bf7e92f0c6ec1a6b9d62a0fe046844a813bdd9ab997a80032e3622074e20.json: {}
          3b58d7020a8a36be9296c0da5985ba55937cc813ea6fe859b70a32306ad3f116.json: {}
          3b6b5bcf898d630a8590f160e80543c8edefdfa7d9107d1476858b13f5192a5a.json: {}
          3b738c258aa97dfb63d493001e6593bf6753281add63766d8bbfe7345d27a467.json: {}
          3b7a0a8f5d5f68f0152cccdc3956a591377d413ce0ce0143421ed408c658960e.json: {}
          3b80a7eea579c2be9ea9985b0cce18912db0f9f731189e0d35879ec023018f86.json: {}
          3b896a4d7c5cac106b6b97052353b0c9241c974496ee56b8f128e466d0902d85.json: {}
          3b97013f4b22b88cab6466573dd092e68c68d7705aa7650c10d661a29072ba92.json: {}
          3b973635304a95563a454831715dbe7d8d7e179a869dbe1e5bc3f51e876bd286.json: {}
          3bd7ca324f54f7c07a3ca3af6ee20fbedd79a2bcd464c9b027bb84c1123da2e5.json: {}
          3bdfe2366f097c1eacf0406dd2594d4fd940a534f481a7b77396a06446558752.json: {}
          3bf39079bdfa1fa6fa40a170b4104c6c0feccbc4a2cbdf9ac10841d408efffb1.json: {}
          3bfcb820ddb428f1e084a6b4fb2e2ec17013f59421d347a22cb75ca9c5aa960d.json: {}
          3c1999c29d56988987488108e9a6d0cae1c9bcd1466437d5449609c5258c9c3f.json: {}
          3c31b5ecee870078426122859e64e59b4aff2658093a0748846abceacc45d679.json: {}
          3c6a6c4a44350829023911f35ddf58df7821b961ec0b44b17e4b8d18bc5b280b.json: {}
          3c7df3e5a46e9d3d0d235d0bfb468ed1f927ce861fd27cee60874d51ac589643.json: {}
          3c81b085245f0af3fe7f3b69a1b551c5a0c8dadc9fb3839164f894722e963d56.json: {}
          3c87543fd055a9e846e5fc4fff6e32763827d47a55867b034c31543406f53043.json: {}
          3c8dc6f281b0207d802079ad18fca72f061b5ea2ce47000f54e46a761a8838cb.json: {}
          3c97cd19ee54899a7956847e44274914788dd3d3e6a462ac251b5205cf58ab51.json: {}
          3ca110b2e90e7b355389ec75246323f8f49014a59a4ed695bcb8a28ec81f7333.json: {}
          3ca8d0f76bd29fd993a72a30fdebc97a9a9a18f771f35c1acf7cd267d2896709.json: {}
          3cba0af998480a216dbd8f08ee5b399fe564ff99c6a37982fc746f1c449e41b1.json: {}
          3cc96a0e75c2eb5787b6b62ad964f2e76074cc4a0f195f91d7e9f8df5658547a.json: {}
          3cde10cb2c6b6c50e01dd829bfcace7de4496860f6885c602762a4f9fae4bf4d.json: {}
          3cde72ef57eed728f170ee3aa765ccdbf36e5d3fbfb5bcc606b70b008dbc600f.json: {}
          3cfdf7a6d9d534eb7730f68c88e3dfb2b95447647ca00597692824e99f71f23c.json: {}
          3d06d8c2f67557c0e15e0d42f4c1e80c7d7ae9ddc9bbb1e0ecca1aaffb36a3a9.json: {}
          3d209e652d4ee9ecebf03c7cbe96b5d54e289500008fe5121fd7c0195f99e700.json: {}
          3d330994303c420efe6305d4a275d5d318e9a9810e924c5a234dd0077a5b6e56.json: {}
          3d33ca4cda85d3e75fe900987640c115aaa8fa0e4b790c76b1caa8b7806b0443.json: {}
          3d4adb125cfcc922f10fe6b90bd6684790a94d3c7e1faa150a1d12f32f65a278.json: {}
          3d4ffdd4854de46f54f8ed8391eee244d8afa37c6986f139d61bd7a96547b39d.json: {}
          3dd3cbbfde997a6c2b51ccf7b7d86fd62fd701484fc06ca5e1d34763bf6621ac.json: {}
          3de893f4e51908603bdc50e721e4251c4a28c07a59e9725eef208ef951794488.json: {}
          3de9ffda9c6aa15d8c18599e221b95e6ceac744cea7724951e013969039de046.json: {}
          3def79f4323103173db67893675555149cc2a1733efffa91d41207dd9a231e79.json: {}
          3e213abd7fd7e4df8c916b2d06afea2cc8c5362af72dcf1e78791fe85bcf78ed.json: {}
          3e23c049ae1f3af8d7b48045c1c73118ca25a2f1c49eade8fa39ff98f6e15a6c.json: {}
          3e32517c9711f4aed6e6f0c40435d591251206f5315c07f94f479d27aa6aec38.json: {}
          3e8a860d3fa85747b69283a6534c30cbf65f3697fa99e5b745f3ffe7a90d8df6.json: {}
          3e8bfa4b41f4b2c629d68ed86fbc718705f4a86b0f9f766e8de61c51f42968f8.json: {}
          3e8c8771f167ee1cab878bc41d4daea4e2497385ae651d7948bc01f214a853b5.json: {}
          3eb8fed235518ad802d599725f930bd2730549dbb806aba7bb8a7e2f09007052.json: {}
          3ed0877f5f6ef789870f0401db2931f0164e3e00a1225752571d3f1afce20df9.json: {}
          3edc31e97574f1cb144a5dac219640b3de117e4d80ef9ed14a7ba2b763b333ff.json: {}
          3ef237309fa2c0b779107918d2bb332bc019f9fea132168e614092152a7c7f6b.json: {}
          3f0bc2afcf2f7ddf94e973b2178661ff51ef418f5fb4777196e0169cf9a147a8.json: {}
          3f0f61f3e72b65fac8f36c5019c9180dca95a95c35a8a99ee8b311791da5c5a5.json: {}
          3f1471ae81f38e4a4839223c3e834c16b58124323ec1c2f586a12060416249af.json: {}
          3f1cf41cd221baaf250869c52d6b0b1e7b5eff786b78ec1780e15209757cebb7.json: {}
          3f203ffa832f870a72f332fe0bee4a7677f8495b9e2a09fb1a83926493b46a27.json: {}
          3f78f6de3eb97dd5ddedec640f339d315bae58d8a2b0537a91350cc5f7b2b81b.json: {}
          3f85c38ff6fc12dd1276fa9c884c5e9cd494d823ca94efec3e45231069826e17.json: {}
          3f9c758bb7d04d2eeef5dd714bff82694fe3e12cef72a931ab138d28f4aa6df2.json: {}
          3fa630b1115475470d293d4c3d722e1c519eeaac3b047330d5bb85e3e31e6f3a.json: {}
          3fae7ed4cf85ae8e4769b20a333fb4c06012a75ec239aef903ea4b9f350b65f9.json: {}
          3fb6576f558e8431e325f6230143fba658f43eabb4d3f70ec874896f6e5b1224.json: {}
          3fd4cc202e03443f1347a884693bd46aa21b53f13d9e279f571554b5b3642470.json: {}
          3fdb863228e6ac8848af295dd04b99e8fa904815e9f3f18f9a2530b955904b96.json: {}
          3fe76d08285f6538822426e484b6c4a490898ff9c5ec2e194a9a52e955670870.json: {}
          3ff4d07c063a45478b112328a6c69a112ddb38be117f0d7ffed65817d4b138ae.json: {}
          40056a30eab4e9c51aaedc54587b2c737bb1818f9337c7003bffba9cbdd10fda.json: {}
          4017a06cd664139df67f0e26dadb4f403863b9de538ca1b1ecb0f98c459d89dd.json: {}
          403036254e739d4e1ec8664b7eacca3983d678e7ee7458a71a5076ad40c34128.json: {}
          403886f39709917b28afa5de8beea843e897d6489ecb22126dc44e4dd47fd7f0.json: {}
          404ffcb09cebc2e22fea4b399a6341187fb808045b1d6b35f7dbe3c2cb0d6401.json: {}
          406001c8bb20d131d8ccd7c704e184a8d2b97e242d86fd1d5484a0a3c888f331.json: {}
          4069d001a33d2e162485eee207a4735b60b39e3a4d145cb527ced90358a7f860.json: {}
          4070b0b66da64302b517012e6916e6d70fc698c66e4baeb5b47130ec7cbd518c.json: {}
          407d7dbbef2aa4bcc23438e193fc9d3d05bc821b884bc8b6947d1a8bfc938c41.json: {}
          4088e7c2b67c15d0f5e27878c026dad5433610572edadf2e0ec110ae1412f964.json: {}
          409fa4ff0ec150981514a32e6b02e52b811a8b2e087a763232ac1058ba94dc11.json: {}
          409fa7b1e7a541573695a483a78ca51cafb4b81e254014a5b153ff34fd5389f4.json: {}
          40b8a882c0848ae6f21563fdf2e313242106df658fe8cb7e7b422541d97f99c7.json: {}
          40eb56193dda1e91b9f681597c56e045cda347c14b6fe35d732b15723d16435c.json: {}
          40eb8fe5c2d096c867b2745e70e2d5ce2e25bad28f70cfac2a2295ba72dc3d4b.json: {}
          41127919e3e966b3139852a41441ef551f898ce3a817e81bd740d5a711141655.json: {}
          4130c5579bc6598d2fe3fe9d7875282028b712de45cd29159e55b7299057c62a.json: {}
          414e093f211ab04ec4970423e6d5b79dd8956c15149a9ee2e5b259ac39127cda.json: {}
          41534aa030fd8a099b57ba52805ed5814c38c93ea10cb558920e59bcc42e3b06.json: {}
          415a74ffbda9f3ca1ee4716c0795c1d8cb03a05ba8d82e7a7a8630548299eb7f.json: {}
          41634b53c9e13d03331bb4bddd08c3423c36b8684554b0cbd41c776b2a65dd82.json: {}
          416fc290c41690369d5b37c5fe2c13d0f33fdd33ae61c168c527fb947c3b885d.json: {}
          4185aa5350e8344b506f3e51206106e6a1ea73caa0e6163f21bd8c018f053999.json: {}
          418a152ef09f9de206cb53f7835d2649917aec5b2dacb75a4220b03d20468611.json: {}
          41b75f4ab4aba4d705193fc61bd0302878daa0c31ebde3fdda3ae90bcaf21192.json: {}
          41ca9f5bb22680fd5a95c3975f4e6c711557fa77f937dbc345206161d312f880.json: {}
          41e49d0631ee6936c4a008b9aab9b7fa741a9943f7c7a83c0c64bcfffd2eb044.json: {}
          420e560c40bf1438de34b7fc396617c7d046397d1d0465b21dd405fdd9b69b9d.json: {}
          4225ff746e50a6345e8c53d252103de90736f5d45fa3cfe2b3a07ba014acce51.json: {}
          42419ac6fddbbd88f97b7fdc87be906e6de0ed7acb414203d493d5789dc59265.json: {}
          4249e9ed0bb30cb439028d3086367bec92ecfc1663b75ecb366c72dd0e2608e4.json: {}
          425a98dd600c14bf70460be3f38ce886c0626f4368f683156d5e163fe012d99b.json: {}
          425c8393d6daa0d558e7f62699f1d8782eeffe9a6db1b3cf47b9852e72f2d72d.json: {}
          4268979073b33cff685a62265ff19e3c61f68f5165761dad95974c3eb37ade54.json: {}
          426dbf8f300c40187475317ea0532b8852a45f281ad6d33832b903fc5cec84d3.json: {}
          427b4f04ce4cdc73e6d670721ef23c80bfffac53bd76023b3c9f5294f7669910.json: {}
          42c94c1b0b8f530a1777a9130d150df1a8853f6583fc1ebc869fac38bb3448d7.json: {}
          42e39bf2a3a770207f9eb522adce9c85e3afda12222bc0b40f5aec4182f99c2f.json: {}
          42ed9785b3af3b548d5d09d0aa186d1cfe991a7d1706bfdf2320bc8e0787396a.json: {}
          43041f7f8ecd151a0a58fb5c454f1da1a2fcee022a4d79365d1fde3764041806.json: {}
          431ccc989b28e62d6a71630f9937cb5da1f8085bce8f0e025cc4c6830ff7ad96.json: {}
          43245b28c6d34dad5d6e2d2ab0ac8e28cad5dcc01226ad3747fcd46b8a0d2af2.json: {}
          4330b6e944fbfad9c7a7bb56a2d8c11496cf73fb1f9da8373360bc5e7424e01c.json: {}
          4337ee97267490f148076371f1b5dff1ce9ac906fd412b86e60a24f7560c386c.json: {}
          434067ed8f0b9322efbeca251b325b5f8b7990e0feb090624591082b53959135.json: {}
          4357318ebd6bf07833aef4631283d1f1d5095bf18c24347f1b7aad9ea2c17d85.json: {}
          435b80582d5eab425e24c74fe8a2cd4f7faf4ad4784f1c5795a96036e7d6916d.json: {}
          435f663bb270c1747e5da8fd95071f650437684cb7d1a50eb6237b7ec4e6893b.json: {}
          4376586300dcf7542a7bc255a16cf06b7fab67e3157fbf9423f0a2c2088e655d.json: {}
          437916e056dff500aa68dc3292986df30899b3ef89122887ec4317829dde6473.json: {}
          437d8c4e09a2ad9cb53ea8d72452df3cab19b10ee67905958f0aea637bfc4211.json: {}
          4398d625a96a3eabfd54d52198dbc84fd3237b335e5c2a1d97df80eb7934094f.json: {}
          43bbee4d083fb8f52f0a3a41539e9b87e1091b0376a6bd67cdbbbcbc418cdf45.json: {}
          43cb76716cb432f06c608c824b962a99e7605743d8f5f887eadba560186a3f1f.json: {}
          43fa2052847f1cdca44afdf58b15a3a98393c8c17793050372238a5b592a317a.json: {}
          440f9d3b61b0dcb3d40209daaa2cb0688fb1d3e4524159687fa330d82ea86c8c.json: {}
          4429219066bb7417e78f07de28cd9a9e213c02ea72af48e9a4b63a8e9ab3d262.json: {}
          4448c609b89a420ffc743d16d31a55af165509d00fa338c43e89d13a2a8e75d4.json: {}
          44499d588aedd686a3812687fb79c5090df62fcd683eed0d7e87eb673e760b80.json: {}
          447aa161a013d5a3e6255190fa2c6ec282b35423f146a72bd865891e401553b5.json: {}
          447ef573069f9f82640b1440382797d466617aa950b96748ee9c7c6665e83455.json: {}
          447f155aeeab6730163033311ac654a772861b62ea39c8ec06748b27bce5b4fa.json: {}
          448c837ba7348a568bff9e5cebd2a292830dab699119dbc8eaf5b20dff4975d1.json: {}
          44b31f791bf7ed8d2cab1c2837a10d841aab80ed0634b90c122dc5f496851477.json: {}
          44ba4f3685846519bd60a042baa8c99062ad20a08e657b0cf06688f1149046f6.json: {}
          44bff917924fa1fb8e998f25d09e956ab1fe9056c0c46b36efdbdae908af1ce4.json: {}
          44d61aa7bdf87fcc3adee08265c77f60eff03a497ee4cfaa9c753e86c6568cb8.json: {}
          44fafd41e1dd48ebdf5c9d2af930fd325f06b96bfa3a29467c528c7e8cd74cfe.json: {}
          4505d43e850bf61639de55c947fdda264799e17a3993053e6273013a4a7494c0.json: {}
          45102b263a86404d64245639d087f3656cd132495fdf1e140d2a1f73e4108749.json: {}
          4511d82c23968db3e6591ae8c47f100c2b5fe1f887951470ba407ecb79d17d67.json: {}
          457b5dea1f6c5835005c468b1ba1417d1c778bcf17b8ecc5c2c8a1d235099d2a.json: {}
          4588a992798e4d5154a4a78a6e7e0b2d951316334f036ef962fc45d2247adc2d.json: {}
          45a76deadc6d0ce6dd87fb12b4d53de602aea7b2fc37358bb732c2c74cbe6539.json: {}
          45b4ec9c35adcb613aa12dc25323181133bfa1ed0cef90e209112bf6b444dc55.json: {}
          45b892b2f19ad585831910efd156863c9fb1bb034c3a0e1862248f33c732373c.json: {}
          45d5b99292780b1a34f2993764b1c84e27d260da9122e2d4c8f32775509adc46.json: {}
          45e8a77f94e8f3b0d8165dae5df6a3d40c63961d1d36d44423f638d9db04fe86.json: {}
          4629ad254b686bbd00f44992c73fbd81928a5a23281eceec759b5641f98d34ab.json: {}
          464b957ff6ad5c2b37ecff175eeef7ce33ae35bc8990f6783a1c56b0422884b7.json: {}
          46543ecd71d0a0c740dafe4795fb4daa1982a98073b207c715165d7a9b5c8e18.json: {}
          465b842ef0ea43d9d70aee7d6ce2028db4e3888b809d501164f50c4c0b0f7cf4.json: {}
          4673f386153d7a82401ea78d0a63c047688c7d3977027295419fadb2bb84a20b.json: {}
          46a6dce0848f7f55662ff406ff5c6765d0c0978f738045ff4dbb8dfae6f59742.json: {}
          46e97185742bb9ee96cc45dfb233084936a43c662ca7c4bc78d3dc423b3a3cd4.json: {}
          46f3bdbfa586c9ba47e061d61e607955ed9e8025fa3e3c9dc2ea62a62697c646.json: {}
          4701db6d22c75e4045e738f9ba00422cedc926ad2bfac0bb187a4596405caae3.json: {}
          472cda10b2afb995335b000656f2d65df14d8384d8f7d3d455f7cfc2b951f34a.json: {}
          473760d863618a8e409ca53a5ffc0e3e8d0c5b88be1076f363c69089f6eb4bc7.json: {}
          478c119dd0becb3c5d24968a4e9e1e2c5764672df092e756a9e5299f92c30f8f.json: {}
          478e8fad78bd2c19ef2924d74f4f517161c954f6763f36b9497da742fa83f670.json: {}
          479502d6126846e3f3b843e6a9c4a73116eb2b7eb2923dd2c4c5acdfd679f1b1.json: {}
          4796d8163cae3b946351d4b5fb7a6b37aea0d7ca0143a2e8990b00b2924c1799.json: {}
          479d3d3975c780690aec485c0ed751c98dc557bccf25240453a3902b241074fe.json: {}
          47a2b56ea83f9fd25196d2e6bbcc26c150be55ec9a279b93cd34f5c923af0da6.json: {}
          47acdb0313adaebd4eb7c9673c58bf8154a5c0a4968b8b9a70cf15f51623c0ae.json: {}
          47b6ac9f934da515813f74101fe08bb826328ca5a25db9603e95434962d491e0.json: {}
          47f81885ea1ef1e1fa250c40ab64e87fc39b971146b2af40485731ffc0e2c335.json: {}
          480adfa62d9f080ed46f8390b4449444d50f1424f17aaa56af0fc242aeb7b7d5.json: {}
          482179acc37ad8908453941a39a48f3d3d02f6d3e4a57aba0e557d2718815da9.json: {}
          485911d81545c18f11e20bdb00a45a5ed521cbb42b4623f6b96e60d6f9ef4b89.json: {}
          486203702790c9a63362acb57027042dcda763fdd848363b10246afcf24da36c.json: {}
          486ccce157831d3eea9e826e99090757d8f207b4fbcbecaa37456274b3cceec7.json: {}
          487937148596524fee4ac8778fd24b34cfd2d0542195bb4fbb4fad02c0fcd12e.json: {}
          489c00dd47703cff9c8c111064f09dad141cb7f055ad97d176470a63369ce0e5.json: {}
          489d8daccc9575719ac8d7285507ba6b44acdba5a1e7f51cc7638c195037a1ab.json: {}
          48bffa6c1fd56498b9e1385d8f617fac041d2fbefa44be47fc2e846d2d84e57a.json: {}
          48cb94573da0f392d9c69492f147ef572fa18113c7a5c45df5557f586763f890.json: {}
          48dfdd765430863270c5ccc39fd98add36caf4bbac904b7c918cf01e4ea2cd77.json: {}
          48f2b90980257a9cbfe4263f14b7488cb6c5d3e60ba6ea91d3a4f42cf309f2bb.json: {}
          48fb79b018e6fba4a3e622bbc9d68ace7a2f07404ab2cc1e1bc71372dfea4cbd.json: {}
          490040031b15316471124b48d06d1d8a371d3614b78a9c691a49008be48ef408.json: {}
          49349d74160ca9a0dfbc723e6459e83e7932b9bf8567e7bbc6b402bd0a3ea183.json: {}
          494ac6bd572e90d7ff8d8dbb3757164e0b8ebaf4f2f293c5609581fecc6ca434.json: {}
          49547338047fadce895b9e9a6076c210e3e2a076b4f90f6ef43a04ebdb030fc1.json: {}
          496edac57a0af0f03a0ee2f0eee30a692ec45c01851ccdd0932d6a135a77f0dc.json: {}
          49721e6a55698faa249056dd99344d9a463e2639d53699240446e643dc6420f2.json: {}
          4974bc85d83a0333a68b864992a0b1b5dbc7082580458123587a96a1fdb79edc.json: {}
          4987545d248bb976cb30005f4dbac1c871570182c10a5bc04634b8cc28aacd3d.json: {}
          49aecf8c2e65e7eacb45a73a90d386dc00f3b2a7d59dbc28e791d1db8ebd847c.json: {}
          49b431e01ae2b64d9dd52fb38f597bbabd85d7752002ac885b5966c52a238cea.json: {}
          49b44d2f5a2a7254d2d8f77c210f0ff03dfbd943513b88bb049e6c227ad8f3a6.json: {}
          49c07163c0673fda9ac14f05d4b7114f48b9768b0a157257a67b53ad1ba4cb59.json: {}
          49da17b8df6e21183fe926a4dc99a08e00cf371d353096275459c8829215ba84.json: {}
          49e2943a639ad212552e1b4f8d1f051536c5c7e63068d157c47a0475b5591e7e.json: {}
          4a0621c0ff1b44d11b1e76232e8618ee63b5fa38fd9db85de40735a247c1c56b.json: {}
          4a1232b9dae88fde7d2c02a252e4a9c68fd0b7f1341aec39ac1943390ce8b210.json: {}
          4a17aabd65d1864c2eb22ba672777333d0fc8f35e5040c181383e5d11b19cc26.json: {}
          4a1ef5b0cf35e184df7983a82c26e1e75e9e85ace717285b6c1d0a89dc928e0c.json: {}
          4a21c7997db707b7dc5fe594403c29c5cf986018a18cc75da84aa81926778139.json: {}
          4a39896417fd8c3f4eab7a0d9700b25c1d7e92c994e0dab7536e19fd3a77a802.json: {}
          4a4e6e76e79b2bbe6433c9b22fb187798cc99a5fba074f00fe39281f298868a1.json: {}
          4a67a5ad4b8f31069d23a73a881db493281c76899154f7e331a925042fa178c9.json: {}
          4a7d531439dfbb66f0ae5f9b6d919eb480e10d3707fc6b8669e018713b5e59b9.json: {}
          4a85fed10e71e545ed3a393bdc826c17692270d249ccbdf32d0dcb4f258bca40.json: {}
          4a96018249887fb0bf981b37f85606c35e84442c8d7c6bbeb75d171ebc8d67e9.json: {}
          4ac0f3e1dd33dc13a72a0f159febcd5265e8d9281fb4068c35ec49e8221f19aa.json: {}
          4acfa6da8c8cc6e280ab1644530a2fa9200474999ecb918c1ae963a8ca857669.json: {}
          4af4d321352afc66a6ff34b1151b761ef6495aacd68b05e669d0112dd5449f81.json: {}
          4af876d799b75735f60010529db8761bd3535885340a303225bca96227ccfe3d.json: {}
          4b052ca5e10617ccaac27a5848b8cbb9d5e7fe42e6332b1802704aeb79414c03.json: {}
          4b09bcd9f428108ee9af3ed4fde2a939de135bb54025f89b638c3da9ad556bfe.json: {}
          4b0c24ba8abb6f0d926013aa61b864a2b62a53d7c0f46d55099a928926eb3b7f.json: {}
          4b1b31eb2d52c25b4e1267e5d15586e7e892c589b0eec25c930e6957829892ca.json: {}
          4b7b03da5983d45f1e130c44e075a2cba2b056141b02b2a77c0ad85738c860f6.json: {}
          4b871a8bc8e87116650f37327e39b028a50d34bbe8afb3deada7b7235ee4f428.json: {}
          4b8bff87714b3296e3f3c2c667f9164f5d072558d236912037135f7ea5f2cea1.json: {}
          4b94be887f881ea7b2fea20753172344439fa32cf5fedfff486b52ef58da0502.json: {}
          4b96b8e4d6fa29986c5d14e98cbbde2699c4e488b9cd24159d99754f2e41cbc9.json: {}
          4bb99e1000cb1a6348d1655c1b34b1c9a8248de5073baaebb92ebee7bece3189.json: {}
          4bd622228ebfc436eef6ed2f6d10a8f17b436c41831072066790d196218f9693.json: {}
          4bd8b2b6de94e824c536bc13a85ee8d34ad7ec597ee2b2b42879354525c99616.json: {}
          4bfe43236d751c7731c055c00bbd07df26c087cf4e893010a1bb739369e4290b.json: {}
          4c22128d26760ba0e1ee02ef34aeb76416aefec011595c56a4bd01159ffb071a.json: {}
          4c3404917f352c5a53de5067d29fe73ad9f899dd178d89352a007225b6b88bf6.json: {}
          4c4f20cd6302557920db66423456fa61a7c5b01eaaca185bd4c2c8ddcc1c2a40.json: {}
          4c8a5d02d8bc9edf3ad8a2bbbfdc337e8206ca38df8577df0ae726a96fd4c871.json: {}
          4ca203d9ab52bd8b883ae5ab14c162d877295a9add608a38669629eaa2b1e04b.json: {}
          4cb2e5ab631b25ebab5cf7816f56f2e5fdf8375355dcb6edd1ac918351969bf9.json: {}
          4ce5e1ed0effacb212f7247b30063c21a061ee1e7a89b93ccbec695963cc07cf.json: {}
          4cff19f208c4d433b7e7b3831ecbbbb398cf645d2f4f8b8a82a4cea422b6702d.json: {}
          4d0f211319483909790574f2943e4cf139ec917c99ae5d3c5ca328dddd3c5733.json: {}
          4d1abd54ba5c35b7e5c83e3696fd7ca35f0889ff311830fcb3165e994fdb9c17.json: {}
          4d215a2bb5baa5c81872fbd3b40b8e6675cec130fb96ed11752db822efea5a7a.json: {}
          4d24f9741d909fea53a63ef01aac03fc3fdaae6c9ef12428425039c65e51e198.json: {}
          4d2e56c41e046178b1cfcad59e8c43e6a3f7804b42919854dfcbfee1ef77b30b.json: {}
          4d3f5e1e827353260f910ecbfd3754170c231ea255904bf359828d86ab603789.json: {}
          4d500c5ce6de45e330757a499a6a96591453382e934ef38a8b70341b596410ca.json: {}
          4d95c8261a4c1f2ed7b57ae52a3ae88aaf63e2a0e1e811abaa09cd6dc1f9e188.json: {}
          4dab69f196e421cee60b39fa0faa898075715ee0401cdd8a1726e1ba598c4f46.json: {}
          4db010c4cf9dfb2c85485e1ad8a34719f5e4744b4276759028fcc294b99ed7a0.json: {}
          4db248758cdacd08e91b2bd373a49c4dbd3f8cd2ab33467a18ccdde170a00d4f.json: {}
          4dcdbd363f2f4e9c21253e8e123a3e211da2df9ffe76d04bf319b35deed03c86.json: {}
          4de20c09c2064b2a239463673395642eb66664e9961aac01ca36820971b570ac.json: {}
          4dea4a63fe3b69ad398836a4b5dcbe60a41c5067ca18b3412b36247d17cf838c.json: {}
          4df6e7d4a4241b0b2928f54809e6e0e428fdcbe028a8410403673d706778f365.json: {}
          4e0524684a495260642b3799740d85b8536f16c68b82247babbb885130015b54.json: {}
          4e15fe9e17559cd554af6a5fff96eacedd30d08536e087af8858996bb3a3f4b8.json: {}
          4e3dc3101f5d21d3771b6f7d4045a2d129ab50da27d54f09a0bab5f2728357be.json: {}
          4e5b2d49c9bfc385335a3f365cf100b552e4b105a5ec4d5bcbbc5c5c3c93d3f9.json: {}
          4e5dafb31b166b33eceda979e6c07a3e128e8717ecfbafa5b6e3fdb31676345f.json: {}
          4e696671da2b9ea77567e96e58e20d213262b276961957003f9a819866b8cbca.json: {}
          4e72f0454c0c231de6f1fb8d96639c59832483a09af7927b58cf4ed6f95ad34a.json: {}
          4e767110dcc473643767157b33c23c11c53abca3754da7be7ad6ba1681a83b6f.json: {}
          4e80ac7346d60e32c4a789a6b9e6aa273c60693d82976ca6c446a422e98d4fe1.json: {}
          4ea297b4bce6d316c898aa109234556ed3a93af443a547d9b8b01b6b039decc0.json: {}
          4ebed698ec5a030e41f5e338e0d9d4a3167093bd77b71121b26c2aad15cb8c85.json: {}
          4ebff049aa68fba53cd8bc6e7b56db5825b134600ab440d1f29940209c1b0cfe.json: {}
          4ec053453687bd9f1d9f37b2dca3a9da017044cdd076bac5a312098f36a7b98f.json: {}
          4edf2153d429e7ce07c0fbb7166c81412ecc3584b5e1b794e81127f36fa329d4.json: {}
          4ef180b24060d08a7af9c762da5212c82bbcd3f07013de8f7555f216f3cc8991.json: {}
          4ef81e051c669191e7093384a2ba4e9a82075319a888803a99443fc38d2567f2.json: {}
          4efb8a16ec158bab0c903cd8d7413bb9c389ad9968d3195d9941d5b76b76adaf.json: {}
          4f427267c2979b0e6c9c9aed366b93fa4205ef77844ad0f1c4fe70da37b84d7f.json: {}
          4f7cf2ae6659722687fc70cf9a48faf5779bb8c29289efbe37732415ca265e53.json: {}
          4f92385bb41c7bdb9184fd8a56d9af3adec79779b4eca52b358d726951bb8bff.json: {}
          4fb754f564029e730f330a1292e15f044ad063f9ef580147b5f82dcb6d994770.json: {}
          4fc09210587e7d75cb0a22de4b8b801b45f053804bad8bf14beec124550698d3.json: {}
          4fef9924bd0220e9655fefaa4f8b1bb9f5a39a75d18fd00930b1f9095bf0afcf.json: {}
          4ff1ef401c2dcf392094cd74fca2105b9db71a23c57b59f86cb9d95c1d22db74.json: {}
          4ff3520e435a3c248b84a917591d32e30f1ed01b0c4227009b0fb3896d473d56.json: {}
          50014569caead2a407e706ee82958b3a094581567a69bbebbecd8633908efc97.json: {}
          501c5d9f843dbb6bdb33a01e42ed560d2a2a8cf294ea4395aca309e89302826a.json: {}
          503e680589bee1c05db2cfe7b9dbf5e59678e2fc9b107a363bc03969f2bbbcd5.json: {}
          50594aec550026132b260f3fdbe1b5168fdf6a72345515b14668cda105c41129.json: {}
          5098391bda974b9e46fe5ef9ffd441d7ba7940face9e530857866d4da0b006cd.json: {}
          50985f48521c3624fd9363e1c3693736d2b70c01d975cd3ae4d08107764f8b46.json: {}
          50ab8d79023f9964bed39305a6d3d9894aa2e222c3b2b77e3e097daf46de5e4e.json: {}
          50ac25cfab0be61cb6fc19f98eca4d8f85c4ec5c9547127714ba409beb862b7c.json: {}
          50b2392b83ea8d2fc78d869f7fdcbc91dc25814921197cbed2d1de3c27e00ee6.json: {}
          50dd4ca1e622c36239bad4d63fe504a86db325b09026bad4c0ca1bb1008264a4.json: {}
          50dd8cf7c4b6318acf716943b9493155b412d521dc765c9944c90dbb59ff783c.json: {}
          5104352c3ca33bc878d212b529ee1591cd649145b6926418b53ca44725c11f5f.json: {}
          511e53b8bbdc5994fe43e6b496230c0ac90c61bea711db6bc5e7f0a77e5aa25a.json: {}
          5120b294703e30330f0943dee79ef6c726ce23a0279bb2a42c038f4510589251.json: {}
          5135b32eddb21aa1b3f9f5d1e5dc9f8134b3c7913bfc51bd59d534b9d58e773a.json: {}
          51798328fa3229fb82438c0d06e6b08bec3a7f534226fa2030fbc9fd54440c39.json: {}
          5184ee6da53965080fd0e9955ec647246ff883e1aed7d51690db94215a1063e3.json: {}
          51879ded0026a04ead7bd021847f2cba5df8a0de69f134d7e9dfa41079dd65b8.json: {}
          5196e9de71ac225a766474cc407ecbc01d570395c3655582f34c856edae4c3a3.json: {}
          51c21b8b28869abb6cd7f156a3f2c295b1dca912ef6f9a16abb332b82d87fee1.json: {}
          51ca9fe33af2840f7dbfc2ab228689d3f776ccaa3c4fcc6746bd5bed585bd1ef.json: {}
          51ec36c288b32eb460e78aa6165f1336851a4ec5b97271431f7ef36023cec24e.json: {}
          520142889804b496921c4313d05b16588ff0b099211d3e8d7485d930d08b62ef.json: {}
          5216106bb66dd00a0cb27acf618087b13b2b91d08c7aef67da0e399b5fa2b2a3.json: {}
          521a77f7a533e99e65f853bf5f69e5d952fe7f2db9a7619347ea8ea6dab8d7f1.json: {}
          521e37a433126863fd1ddda0583998a65b484919c6ad338b0fc5d3ccf361e187.json: {}
          5223daf4d3abc6df6f0680d838c1c2e61128b18fb8ba8dae818d26031191a115.json: {}
          523e1d4d8596e181e90c2f1b6e9d7a947bb3b0037471b3552234e670b9f4bb7e.json: {}
          5253cf6a918cbc595c33781b98ba37432a3b64c546e16b95bac43738fcacf162.json: {}
          526d314ddc4db155382d96c8dd4d17562e0e7c38b8d1e76c293d3715a65e076f.json: {}
          5274e40b405822e502eb948362182c0577e859ab9efaa907695409bded7bf331.json: {}
          5299e00305c763984a1a9de8c1ab4bad7cafd19ebc2f36199feb5447f93648dc.json: {}
          52b0ffc07fd49331ba05d580e3488a262f8b7e1fed23cde2ddd3578e347250ba.json: {}
          52e21b4ea9270bc9973b1f79fa81ca8c10dfb6bc510b3d8c4af8d390861464cc.json: {}
          52f0c3d90f8028d1c7cb98c3c6dca8f20fde3fe6a49f0453bea7f0e4a3c98485.json: {}
          530d53d9e4a9a6a1adda1849f110af9a17dc6b6871683dd1a9ef86058aabd2d5.json: {}
          532483b28e3662f7516dea68500fddee86c7831c5571d5fb39cf327c2ddf0643.json: {}
          535d1907b378682a70a912accbb856f14ae79657a50163b439fe4b69737e089e.json: {}
          5367356eb7ff0d8d26ee97abc0a4ce41c536f37697db1d237885fb0189fdfac9.json: {}
          536ed388e7190036d50d4a13660a29b200760756297d61657478174e6c4de4e2.json: {}
          5373e7d2bccc8c3d19bb866c47e743dcd7a854d7037d3450aaaee5eee65eed1b.json: {}
          53a5b93a89f34fe668e1f2c4929d41e66d8d66a81327c075469d749407bd5268.json: {}
          53e00a2912814f1f89a1a6028b768ec666b2a8c2da1b814ff86462061af11ded.json: {}
          5413f9f8f897ca68e8acd3a45358e3b9ea440eb9ae151e01263af9404fd6e288.json: {}
          541c87e0c96beb0977062996bdec504925600bffb4978ac126fd3c364cdb5033.json: {}
          543f76bac4d234d373629c3db0eb18bae8c4a273714e2515a15b25bb876f8d89.json: {}
          54677bcbe1aa7c65adbc25772bc84df4543efc108b7c25a055f353f194220e23.json: {}
          546ad05ad0dd5b7017c9353a3ee1aee8e599039633937a4af03194c1c84b84fe.json: {}
          547905f872df534aeed626555bfb287f324858d6743096ca02243b1f960b47fd.json: {}
          549c012c4dc0513eae1083c9a62c6e7e7a2ab8d132d896cf114f3a23ce113456.json: {}
          54b6defd8a3b0b75f29613b199d3e0f794759c3577ef6a647d96233d5d87b46a.json: {}
          54c340689db12e7e718b0dc20d37fbb6786239b88bc2a0f1c728b1f3f9393b23.json: {}
          54e73d2c9dc7be2e06336a57d6f51503348a8053ad64ac9e4c2f76f3fd39ac4f.json: {}
          553438a391c6b63f661491b97b95a917eb3543616d469b4afe5f845cdae8e03a.json: {}
          5548c3828d1a3c74a0ba903094dd9332a4e8820ae2b1a3fccbf90d9e8dcf6be7.json: {}
          554b4287e8b3071e6cd2569a591133da48ac193ee03c3633f075b3dba277df56.json: {}
          554f0c13312a9b735cd595f816d990be48e6554185f2446bbf782de329a001c2.json: {}
          55688e94aff49ec72d83aabe6100c2b2301d761d79d35a5dd28420d3605a4f50.json: {}
          5571c0b0a64f7cad895f933ef211604658005ed8f9e5ce6520eda6cd6834f454.json: {}
          557361486d3f2aea96c930466531588e2cd194860331538c805211ce95d873a4.json: {}
          558ed8ebca4c59fda8c3d529ed6e52e1c8d29797a44c890a112b521ddcdd1907.json: {}
          559724ad9651643de83fc768606f96929317812f393d7c833509edcdb0704a7d.json: {}
          55aa51d4faca039190420a47434c2aca12b1603a8e9f76de35ea16ca3ad6c595.json: {}
          55b452c76d250ad425d694c448beb6894c5c9a6f2fa8dfb7655e8b44596bcef7.json: {}
          55ccbb6b2ea62f7268a93f0e2b1dd42cd60ad8b12f2b0ef314b8112bec34c184.json: {}
          55d14caff4f89ecb992bdf14fd52c3549d2b984504cc4cdf25fb2f768aff7bf5.json: {}
          55e3c921f7be84fdf81df0acfb935d350698577850f9cf814f930a0c72cf2338.json: {}
          55ece41bcfb782f68e0138fef30432e47b6ccb42ca409180e9e094c8f27f9f5f.json: {}
          55f58ddd31a53a3caca66342c027336750487edb1aaee59e1b544b850b06574e.json: {}
          55f8c1dee5ef09349114543aefc4e44a89d31cbf75f16653b54a1cda1eb65c81.json: {}
          55faad9a231852c2add435a0cfaf8682f49b116b802ee16ce188d1f78b77d1df.json: {}
          55fdfddede4233f7b20c4c9d13e027531ef2243f09a3c255bf4241492df4f852.json: {}
          560db63eeff78a9702e5389134f5753a457b1c397acb726df499fae1901a359f.json: {}
          561aa4f285c933006011c7870b89975cf708e9002c126b3331619fbbf7371b06.json: {}
          5655113baf354b5ec4375654d4c6d36fd07ec303e1b53c84a51f80339d6cb684.json: {}
          56562e430e72808630c72055af9ed6fc9cd58bb5e8399660fb53477ad95b4301.json: {}
          5656b0c56410317ee54c07ad0c633dff9a71532d22975b305f1f373c15783275.json: {}
          56816629e5ebe42b89347aa17fe9c5f9d94e049ccf90e100349d4b1be7fb78ac.json: {}
          569159cc3722614ed7294d2d2c896c4e0539695fd894ac853d00b969017cec4e.json: {}
          56995a66361bc1bdc44c108be2ed69af88bbe33cf7ba3660cef6deb6ce38a1aa.json: {}
          56c9c5f130e74ab4ae53c5173e5c9f0f4ecf4a1423ac0075d3c014ee3959c3a5.json: {}
          56d003099fcf18c8190f0fae5c7653334db4a39ce300e02a1eb3ea5553316773.json: {}
          570cc521c37bbc236890d3e7103b7917c5e419c57be429ced78ea02f0f94eaf0.json: {}
          57173c465ed692c380ea04ba65c6d614d652e725404b99aa471ed724ea21010d.json: {}
          5751746a3d74f60522a9c2d71547cb2bf0543c5623a9a21f788568fbd0f40c56.json: {}
          577a9988fa2c051d122a4e39a70519e1fdcdf77af2cb7d25c29da868c506949f.json: {}
          577f61343949707f9b0a99b2d9a83adb708dc1cafec66ec5910676151c374150.json: {}
          57a6514f1ef35598934105b798ac6ae6cf1e7552d1ed3c698b62ed00d057fe1f.json: {}
          57a9e3a68cdddd3f48348299f86989c94d5ce9a2cd6600cf07bf722e749c5256.json: {}
          57c5dcc437649d87ba077f0b4a9955290124d4273a3471c394f612e639553cb7.json: {}
          57c668e40fc9837bc66e91d009515d41ea1711fe7be3d700337b2c3695cde011.json: {}
          57d12fd6bae93d79d0302703964da3051462b414ce9375a347c8a8665f60b0ad.json: {}
          57d79d6e28cc8cd9ad06b4393b449d4875ef6aa14ec6601497a89790699c9e35.json: {}
          5807f454994e2d309f5678da5187dfcceab24227c02a24b67bc2a696f8914754.json: {}
          5839edb30c19e613029fe6167a1c536620476f9a554fb65460de320555f77ac4.json: {}
          586c0ef3b5cfedb3755876f84fd349502c09d89fa621940bccdbc357a146e262.json: {}
          586c3399c705092e6c2de3826ad2cbb15e92119473e1eb41ef0761270be92537.json: {}
          589b71d56ef62b733da7bf0805328f4a1ea4f8f3d322a7e98cfe2fccdb8ac05b.json: {}
          58cf4da1593ba56982d7de47275f12ef1cb92456cc21035967821f550c3685b4.json: {}
          58e88153b71e7e0e5ed270f16132c0a66bb32fb570fc81d180ef63677bc14ba5.json: {}
          590a19655521fbb487f1be0378762b64c3f685393e51e85d3c5d2668422f3c4d.json: {}
          5919ec1cc8d39f08122c4f51ab967c4c72e9b7a5049b02dfba6863ab28e8e578.json: {}
          591ae075ae93fc68802d89dac79c0e13ee0616562318fd0413b04ae960aa211e.json: {}
          593a0d2825adcc55df79970a9850c314fb4a7a3e05257fc3cd190da4f30d8816.json: {}
          595482024bfbd4626870db6d1020311afed76e2b5a50bd9d9f147d0d9275057e.json: {}
          595b51098e3f9bcc65a8c970355ae954d95997ff64b2e235b911e130c14f5219.json: {}
          59625a545f181f58041fcf9d81ceaf4b7350b9e1bbcabefbac4b9743fb2f1e74.json: {}
          59899d639cb54407a51a2af051985157054e11a681f950d477ad9e5c64cf8ed0.json: {}
          599300e7075198b55fa0277f025b40910b7e62cce54a2e6771dfd0ac0bac5132.json: {}
          599c34fd1912c764b7a199ec54024dce768d80c6cd74a433b8d09ca36d8976c0.json: {}
          59b359abda818e07cc9ea8bbd72bf4cec16f9842ce5a065673450901b665ed3a.json: {}
          59c8b027907dca632edbaf5635ddcddd5884141fb7fdd61cfe6e92f656545520.json: {}
          59d26ef1021d535768f59eff6953b57834482d83a23b95f2f6cd3d56254835d1.json: {}
          59e41c7806bcd4d4db451c460fd96962144d6e6496dc340cba7a9940b97bd163.json: {}
          5a2e435d6803d945e3a7d379325695e3b3139bad476e5a04c1cb570796553671.json: {}
          5a331223bf14ce77d10caa56d6b1193f0636c9d28a70316d402c6cdcf4a30357.json: {}
          5a405089cad505f671c43cda6e266c8db2cfa2f668f0fbbcf650de15934e021e.json: {}
          5a67bc1e9187c8a06dcbc473ccd4e406cb632c758b663b3dff8d2720b4fbfe83.json: {}
          5a9f6fc42875a176730a09bab07ec63f3b5caf6cb3aa6734529d284489c130a1.json: {}
          5ab84bffc2abb13f663d1e90b4806cda5ba1ef335bb0b18cee93887d6d3c27a3.json: {}
          5ab918ab2a18aeb1785faea2dfae88243bdcf68107c4a0460b35670e89a5aa78.json: {}
          5ac60f724da154cd8857b63225b402847b1f3c75e0f045625c66f8cdca64a14a.json: {}
          5ac63837a3de126cb7f2de025a2baeeb5f5859fc7f7a04b3b64f0639ae9f475d.json: {}
          5aff0f641f2c7b93edfec3fe3ceacce7a456ab22c892a7386d38ac112b0e40c5.json: {}
          5b0d592cb3c5da00aa2d7e2b1e9fea8c2622e5adfd06cc3bda7cb89f0a356c6a.json: {}
          5b1ecb834ac567d07ca9954b4e261dbab91cb27316cb1e33fb8e2ddbcc90d362.json: {}
          5b3aa897b2282d5d890da4b3c5e4856d288c3f86e26688882d77784479feec63.json: {}
          5b4f3ba4131a4c0800186b785681772e19f09c640c71c6542ce679015a877668.json: {}
          5b569f5190d3e2ce25831bb31b98faafeb48df955d727026b19afab74882e5cd.json: {}
          5b6829a634a528e50969c171c2c583f3cbd6c92e406af5d6f1bd5fc9642ef3be.json: {}
          5b69ae917501a615bc50db02e702ac4751a54487d49ec78e224f1a3cf3e4ad53.json: {}
          5b811f4091f7ca90f8bc88c19e44d4f78fca77fc95e40b852250b4258af83ff0.json: {}
          5b87a79a6d62c01fa3ca6c73ba1aba20d872f692495af52657196a2ef2bd3927.json: {}
          5b8e63682ab2f183ea08f880190d319d28a50c26d6a84792c3492e078ffca03a.json: {}
          5b92d941adb9b1f1b302f9aa63128d0dae8f6480cef65d38d0b6aa57b014afcf.json: {}
          5b92e6f5936b25ea7a2a1d63739b5be89a80998a6719df834ecb75dc1e88224c.json: {}
          5b9b4156820a719584aaa0e134c1646ce9d8d03b901afe436bf9498a748b2942.json: {}
          5bb146aa224cfeceb82408a72c728399773fe859f987b25321feb07bce9bd763.json: {}
          5bc050d8b35aabffd1150081f98e3ee3b3558f6435ab546b5bfec38b20eaf0f3.json: {}
          5bdf0cdb75eca896380bc7d5105396bf512e029acd7a9752ab9e1c213f2f0bb5.json: {}
          5c0548803cab5d89b2322fd7d8a338f0cf2df200c9de8dcc5b9516f1bc54042c.json: {}
          5c10b62a4973d54afe5c932ef5ec6ca5fe392521daa5e3c74b62629132bfaa40.json: {}
          5c2ac126ec00cc01b34e3655ec5af6b4d45829fed73ca15413c81153dcb95d87.json: {}
          5c343b6bb42eacc72eb6d7d41687ca158640a01998021b64bee923bee3ddb3cd.json: {}
          5c386fb8d3c6ab51692c5332a6bd5dc0da8c47caf4a1eb9d58caa128c5502e67.json: {}
          5c7ec15671d262033ace998125f4947a7ad9bf1589950b07c487716f0d26581c.json: {}
          5c837ba917d1f91db6c90ede35036f417a20b374547c762e092e20133a499adf.json: {}
          5c8975c8897161a12362559fb1ec83c34499916233ca719c5c51f398107fda98.json: {}
          5ca597874594206242c7dc8225c5122e46c44dbcaf43bcaec7a0ddbbf23981ca.json: {}
          5cad9ff1ea5efaa3b7594f4b147c0002f933c8a01198a619f5a044e839403d25.json: {}
          5cb1fca142acc957cda880d263875a913263284a75bfdea5a4c6cc7159758322.json: {}
          5cb87621d2e93b98ec571e44836ef3b591e617a4e209166d0dc9373f76c45290.json: {}
          5cc418040b50ea7f66934895b7e6e97d893cec41284417ab6a61895bfafa8878.json: {}
          5cce62a74e273c443a99456a0d3041fdac8201f86bfc8247896cd437babfa647.json: {}
          5ce765a0bc1dd94edae9fb90fb7c28285898fd6e28a1c906911e9638f39d9d5a.json: {}
          5ce8f1765c8fccfcddbb204590ded7308a02985c1c39c4ee89c2917689f25c88.json: {}
          5cf80eb083830211767a66a691b1722726389652fb9bd7e95b9b2783c2a104c1.json: {}
          5d050893095b1bebb199c2b5f120dee074d7b0dcc27c808dcb42ff42782446de.json: {}
          5d0fb00b64771110ce620fdcff2c0b78e7771cc232b9a184fb47f338339a5d8a.json: {}
          5d1c033f31dbaf4160ac044aab34e33f1449acdecae9a76ea7440bb6f779aae7.json: {}
          5d3a0ecd66407084fae1438f7b802502983437c6c4bc59f825b13424fac0a73a.json: {}
          5d3b4e5ec8e03f11988231f1ffc4a83ad1e4dc8ee90120b31796fa69de70c9b8.json: {}
          5d3fecd17c437dce2376e30da4e26ef90d713d3eaf8ae1e5412325a32c76fec1.json: {}
          5d572c4ce49d4d473c95feef6198aef0d66bb5c0ee0a1c33ae382ceafb774c43.json: {}
          5d5d10b7d4ac36c0404f4c1cb870d960e6ed32e6f808ba07ab0057e006dd3550.json: {}
          5d6445266dccc17a4d689cea00f97e47a11a4e49532ace9b63705eead9c6f49b.json: {}
          5d6ba4f3546fd9047b3448186632263cbe26f7a16fd678f05c08b4d4370fc774.json: {}
          5d98f899572cc01ee3bc607915f856fafe9988eb70b7d1cc9be4c47daa7929c6.json: {}
          5db5197c163f1459a06273f1dc289a83fc779d4c106baa63a825c8a1df7efc1e.json: {}
          5db65a104c7f6a509b9de0ce3ca6687647854ed7d501ea9118b1bea95fc5e3a9.json: {}
          5dbf7fc0945734079d2415c3bfd133e8344b3d25852bac6076f33f607b4e5ddf.json: {}
          5dc335cbc8677cce07925cc284ed641a3be3678083e7b5b6fe0304f029e9be30.json: {}
          5dc75b81aad5ad358d9997e997595dc363f47c91f79744ecbf6468121d915147.json: {}
          5dd5ac01d570d3d1f2f62916409d934e91dcaf273027e9322f7049d624607fd4.json: {}
          5de7dd47d10190ba640ff5d844078235ae4b196b7846832b3d46f577d9ef5012.json: {}
          5e00be3f0d762dbfa8bc8dd658fcd8958de1e39684acc3700609e796f9997248.json: {}
          5e098accfb648cb67070e8d27d7872e6422ac17c17da322c69dbdc90412dbe22.json: {}
          5e2b5ddf7ee55ebdfa2f3268e0a24542a45fae14f219888f10104a922328ceb0.json: {}
          5e3081cd33e02177df8f6a3915d9dba5064bec961957a6307483f46becca1d39.json: {}
          5e36b0f5778bad14070fab12007afd2f35a8311be6891490e6e06ee92b469253.json: {}
          5e38d20679d4e5fbede3061a1f743d4f63c7d7ac8ace56df556e0f14a0454d8a.json: {}
          5e4534bf349e219dc010e504661dcfca83f20ee9a555bcf95ecc0b388e2c9c03.json: {}
          5e4a66cc65f522c94cb8f096951ee24d54cb2ce04f7119fbe28d48c598b9f206.json: {}
          5e4ab11f6a1699d811a378c85faa80a334091db308b8fd96dfa8de837ecf2b7c.json: {}
          5e526bb538eb9208d67a88afcce96748962ea67f04935e10f8ea2aa7b5a6fe62.json: {}
          5e7afaa1c2e86bd811725199b55ee54a8579164c86778820a77d3cc91bfa7074.json: {}
          5e8d853f69a2fe14872228248a9f1d51ac334883c26f6426692a28830a220015.json: {}
          5e9609cdeb17231bf777e35c037804d81f129367b5c3dd049b583f39a055201c.json: {}
          5ea8745060ec6d334ea86f3e6a5d7429453350b8d7cbb2420470ee1d8d689709.json: {}
          5ed16240e4b459def63d52862b101557df2486af0d917a3effb5e073b5dc0cb4.json: {}
          5ed7af23fb209c789a1e6e0dca02a920e0f53ff70e51c5c6574f60735602e001.json: {}
          5ee9f75480f7a3d9aceee9491384988a93c9b39e7b5da3ca212aebef6ac61200.json: {}
          5f0426bbe467a407d90fc2c323d83e7f6d0b899bb7eaad45e1271ba40c00082b.json: {}
          5f0908306d37592e3d53081bef5bba7029e4c6d61b00b32fb984839bcafb5217.json: {}
          5f1f0fde89771fa23c6f15decd83750e2288a99ab3dea4c5eaafaf9fc5276d4d.json: {}
          5f349ccd9378eb62c643d280146c53b87053511586b62ab93037cb3569ee72b0.json: {}
          5f3b75d08c7e9aac7a60191f791d3c51a8fd8dc73936d9a169db4a9a299f6d2d.json: {}
          5f4e2ac24a376c27be2b07c9a1448be7614edb5b6d64189d7faba6b97514e503.json: {}
          5f552fefd90a6d9271290961cc35f6166d277ba21781297f8a327fa023f31ea3.json: {}
          5f80d209997cb7f96a19e676c386441e7f97aa88a68abd861d89dc73d4f895ad.json: {}
          5f9c13ce4100336f92d19fbcfd8b50402b6d181d84cf7be5845fd4c91eaff8de.json: {}
          5fc0bfe679bafa2e8fd9285f5cf35e2a8059b97a246d359b4d76e0a855ca0cc2.json: {}
          5fd997be76f6829cb17857fd4322f3f4f476bdcbb6557dbd6c812a057e3fad96.json: {}
          602e72cb32c514befe909ff429dd6ad3c9db0c77b3135a1662b89dcbfdd0b186.json: {}
          605d11492d22235fdc771358ff543e1964d3f857695dc56e6b2991cbea7c8689.json: {}
          608b5d83a73e856557059961836b66b95846202c19fd40529134ebc96692e4b8.json: {}
          60fc060b23ccad6467c86127d31455f0ca517c989ad0a548a6d1d1b36808bbac.json: {}
          60fda2041017df86b0bbec678bbc75f9cfb6b7ddfbfede5af8aa04ca3634b58b.json: {}
          6102d30f78278b94fe8141fcc5d9dc52dff1b2ff5833a9eab898b41d6c7ebbb4.json: {}
          61048feea5f1ffefba32259c8d07ad978711ce8df5882ae8959c9c67847778fd.json: {}
          610ecef12b2b5073c71c3aebd44c03cb2c7460ab1879255c26342f263f0eb053.json: {}
          610f4f5e9bc9c148ba7c634ed55ead6e011536f3c7763930963888d7a0d305df.json: {}
          612e5803fbebaba2429d249d48c17e2a644ae2a10e48ec2788263b34f9b06e52.json: {}
          6135abf3d0f05a27121f22c0e51bdf83afb47aba3b7bdb0800430427d913eb7d.json: {}
          6152a75bff6bc1b74ac484e3e6aaa47ec76b72ae7a3714c0be1ca1ead724bdc9.json: {}
          615eb7568a272cb41be1266f27f0b31e997ffba96432fa8b1e62871f12c5eda1.json: {}
          618cf2acbcf258b0a81c5fe33d93fa0926eaa26b50009e6e142320cbb1ba7ea9.json: {}
          619d4973b5ac1e8ef8c103d15757a0f51463753ed496644f3fe38376f838e5ae.json: {}
          61af500e948e824e58aedebe542cff07f355d85b1e8122e271cd03f4d7f2b58b.json: {}
          61b9303090bc512f5ab140759ae78d7341d6094e6d0ba3e4a29c762e522925c7.json: {}
          61e2c336e070050d0a097ba39712c59e166617a7d360092848408cc1f39763d3.json: {}
          61e9d771a12868b14975cdcf5bf0c5c07885d520aeede211159f31ebde1981d4.json: {}
          62100b9fdcb2b2a7b354c1004c6cf3ed6854b56e7f02e551aee540bf8853caca.json: {}
          622d1d5834ba80365d642603bcf5df179f08f6862b5a8b3606091199dc3b4058.json: {}
          625d0b7210d234f492b1290355e8bccc001217ce6656cad037cf6d4f1eea730e.json: {}
          627524812069d3c86f98d41a27cae087f4ca4538e16578331335f2f31f45c28c.json: {}
          62850c7835db677aecf7d5c7c81d395d8a582c61c2d9ec8077b481811120b17d.json: {}
          629b8776c49706bea2661c553a2ea757a0e067b47f57d656fe4258707701fbd3.json: {}
          62a0e914dccaf79f8db6d189c2c29d263863d1576d61897714ebcddcd7fac8eb.json: {}
          62cae787b4150e50635cc4374015c329cea899c9695a660689faa0975a5070e9.json: {}
          62d674f32dfa55235bbf4bac1941b3fdcedceaad28f3f54ebe360d56326dda24.json: {}
          62ddf967eaa3d230ada854c9cbbc1f81541f2800c1cb0bf0f0911c54998b6ccd.json: {}
          62f0624b74f36e92375c8aba422ab634fc321ccedbdb5f01cbff3b6ebb84e94d.json: {}
          62f9f168d01936754f19dcac901a5f8ccbf542478be0214a3409e876c5992ed1.json: {}
          63062a4c2bac2401c136b4abef97a3079543fa79d499360c931940cad5ccf0f0.json: {}
          6320259a3c0b752672628db0fdd8d6524065115d2fc2795492db6c3b50a1c5ec.json: {}
          63511abcd9d7b4c03496adc66d89cc6562eaef8b0a285479d695b14592ba5ab0.json: {}
          635acd8ba70331bc57617b39a7b708e16bebf8fd08f919c1d61b20bc0dada761.json: {}
          63b26b7c6b21967754b48583ffbbed16a651ccf3dc59be638cb74b57d31f4545.json: {}
          63bda9cad58fa54a5f2e748be7399692c6b2cf9b1bdb7a2af1cfdf3f8a299bca.json: {}
          63c5a2cede882501f74e600008217083b5aa28a8dc8fad7e24eb809b172759c0.json: {}
          63ce991d9421091278bb8a091f1b996f4590aa9a55b48f756348c855847c4747.json: {}
          63e6e155ef3f5cd85370a9460e462aeed4974d3a075aa9413e7890655c62bc6e.json: {}
          63fca0914a51f15fdc72025c5f098fe5f44ec1f37ee4f6d79299c9883d2bb11b.json: {}
          640c295abe5f70933ef22d74036c0df6fa67f8c5a01846119266ebe9e022cf1d.json: {}
          640d182160b5d71141c4d7c720e7ce384d465fe6655a7a8221de8fd74f26a9d1.json: {}
          64494e67b6564d809fd55a87e1ebe8a0f0089e2e19eedc453f47bea2e05080d5.json: {}
          6449d1924028b9109c88dc0db92f0b7193b92f32da730b93a90f4909e82fb368.json: {}
          6457b6228608ca1d32ec3d77d0489938efeb86a87c73c3c795637a457c9d9b37.json: {}
          647078467270d333d121dcae7ae918f32bd0e1b3d17787ceaa7dd9da087659e9.json: {}
          647ce77c5eb19440c9ebbae8d4a30f0561814fc7ac4b7288038b1388267e2131.json: {}
          647e80128c914850768fdbe95b34dce3ffe9f2eae7ea5331374427dc0a11043e.json: {}
          6485a71564d57cf3352743395dd941b90b1748d567517112d2fcabfd19533488.json: {}
          64985ebc028de2f2649aa449caec927c69f7f8ea800acb40d7644b1c3597f7e1.json: {}
          64bf7e41be6477d220aaa0efbc2853bfaf6c6624b8e31b0e563102e5aff16e67.json: {}
          64c1eef294852ccc9d5b6f92fd5bd62972dd4fccb9c2f8d3e8da95900dfd8773.json: {}
          64d715a7b52662bd8a34751ea3f5165a252093a47bf62d562474d16391a69b8c.json: {}
          64f218c8734425565afb69f07fdb3e666fecd5979be748353b09fd69432f6a64.json: {}
          65090a9fb6b87552156ab892209407e315f329d86cfbcf4096478af35684acb1.json: {}
          650bd287f3c2ced594c3d64866c34cb78f33b91d699c88be17896222fa8e2e41.json: {}
          65123920ae00a590fc1c86f5dc44062a53d6c30755615bf40d20e9b9229c0421.json: {}
          65369f44d86847b1f1b326f57b1960b43d39d809c176a707b561a41b4ccf2ac1.json: {}
          65958e62cb4521233d76bd57b0309dc0b261b4311f065b0cb335e8ca657624da.json: {}
          65b2e4df500fd464a970042c6827380624581725e1984c10b9c80c04a793cdbe.json: {}
          65d1a0232a304e678eed29f6dc5792aed9613c49a348e95463b59753938c52fa.json: {}
          65d2cc19ca6ffd096a83e2e554b2b24d3b67efbd8b370ed75a521693d79a1a14.json: {}
          65d9811c743b2bea00bbb0dffb06c2a2d56f592d8bf521af3bad0c494e0b389f.json: {}
          660228c364188f2e0139d71e45d194be488ea2d06fd9e0a2326091ac1ee40017.json: {}
          66109ca1e14068efda0b099e7052cf2465fe9b018449d5fb70d04f842f9b2628.json: {}
          6646aa1897be01e6be9a481e1b26bbadfbdba9c5769844800db93d4dae9e79bd.json: {}
          66a511e446604bad281cae0429f3a005aae9ba1579aeaef58d96cb1c1d6b4b02.json: {}
          66c548c9a076fdea06024b12d3cc8b59a6e22936165ed1402fed93212bcac428.json: {}
          66d54d7f7fbb6e245b7087631044c135c7adece3a03006d9b6bd00dc0bafb508.json: {}
          66e208fd74219ace81ac332ac71eca52857e1240acc7f6a1fa7de689a7627388.json: {}
          66e3a023ef8a939faddf38cd5b3fdadebc938496fa1078621f41093504ff373a.json: {}
          6704c7ab91b5d4afd7a51f7bc129c9541177eb2c7460f788ad950fb2e0c99708.json: {}
          67180d5f6b948f252377ffdfe3a6de3837dadbd8fb15eccdcc3892e3fd5fd171.json: {}
          67226bf28c8bf0f2589d5f0b6ed77a1995f8bdefd63d94b5e6260154fc00bc23.json: {}
          67321c230ddd91de6dd603b1bbf2f36413a72b81c5f4f1b61fe58d455d4b48bf.json: {}
          673eccc784eb2a81cfb7c1f0a80fb47cae9f1b8f5189c4498c7d0177dc01dbf8.json: {}
          6751088af4a5203f23a0ccb3a905cfac23d2515a6253ec2d82e49c0c0c9acd37.json: {}
          675cf17535d9ac4b129d818c347b68d85ed2a48772cda112cce91c23468537e6.json: {}
          67a67d77c31bd51c7ee998e6e08d74ca3286b6c1c064279220123fd2618dc680.json: {}
          67aa34fcaec228c2f769b9db09279c1b6b40c0161b8dc7c16b9e80d2eab96faa.json: {}
          67cc66f81d81d7a17ad9d2a36d834b1f8e582e6947114649faab2456ceab2171.json: {}
          67d961ada7863a388282736b42fcd4e7fb175e46dfa89ef92eb8b737221e551e.json: {}
          67dd7a28a44ae9fa28b0afb593726b59614a8d4e09ab60223966a0d6653b7576.json: {}
          67e4df6ab3511bd172e4dfdf72db05dc92bffd128ef902ec50a0d2a0546b9b2f.json: {}
          67ffd2f29e69079a247c5b7ef1bf3a81bc9558a96f391ee5ce422c817fd9443e.json: {}
          680e4a60c48598a1f149cb726b00e6bc9e263ac107af5907742236983305accd.json: {}
          6847baae9507f49398e999db9dbad97d8fee914715d396e38c7ba66362a944c4.json: {}
          684be6c3832e01de8689a463697968028a9a8d856565130378d33f84d6f0206d.json: {}
          685fc46d0fae679fcd32830d023d48752bac85f3d21ee2df1289d63aebb1a480.json: {}
          686b3f8e6dfc04b2efe8388af4a0cdc679b5e1e7655b330dbc0a8afb6d667956.json: {}
          6874261c6a42ea95d7008b6fdf66dfa7e33721c7040b695250f8f71e40d31eff.json: {}
          6883bc7718dfd9b08b1e31303e0c36ffada1afc35130614cc8ea9f121a02a858.json: {}
          68a441495d8136accee285d5ca168ff49d4ea773fd3c41fb3710f5226dd7c2a7.json: {}
          68ab612f91c6f0882f2ce6328f196e5705e12a385d1587325c02f72f0c468dee.json: {}
          68c525e12e7a906d67a22e29498116df93e2172a44d467c9d5c28eb2973b20a7.json: {}
          68c5cb4cb4fdc17fcb4948bbfed7e1913912d51af0ddb48e7148489103bf00c7.json: {}
          68cd03c3e6b3db34686c97f5ea744d5c6beed1dc7031b09ff7e01173ff744a9a.json: {}
          68dcf46ead791e29d3988937154ecc58898c92e5d91466d67eaa5ca41374aedf.json: {}
          68fe825e1c60ef6e601ac0bad4e7b2af7283760b5a6b2ec4d0f6a85d85fe13a1.json: {}
          6904f86b6d994f57fd404ad52c0461b0cb8a8a0641a06998cd332a0bb14c5928.json: {}
          691e86abdf04f611942bf9101dfcbc68018f5e7414fc46b27c95994a5ae4fb21.json: {}
          691f05cb0fa9f16c70f266158c0ac9304e1b0902cdde348803467c4a0fea4727.json: {}
          69482f1539c35ac85008c40043ae848678901fe94ca568b9834fae29b259ed7c.json: {}
          694fa8e0a9c62896f5f8e69fa5f2f35bddae4c9bf868e3b56b1eed18fc613e0e.json: {}
          696f5ec67eea5d42b2b4f1f0b879eeabba924cc76b3dedc025d685fc4f8e4d06.json: {}
          69a1fca48fd54f249af13e3329b452787f9ba14f277dbe7fc3a54ed75b2d712b.json: {}
          69ab980126f3af2b81fef20f8d41153213269e3b642b8537ed27f983a31e8b88.json: {}
          69bc32b79eb440355dc55cbc05b4781711a8d861b54da2300d3f265178a8d7e8.json: {}
          69cded6ce00b475d1621d54b9da72473c204c45121590ce6144f540ae6ccfcbb.json: {}
          69efe6bf55a9a156733572abbcdecb9f7ca0769369765c4fe9739662948bc531.json: {}
          6a19e36512fc9f020343d42c1cbb868513854828808ff26c529c3637636cf9ac.json: {}
          6a2225bce066093f86eb061ac2d9961899c884f4a4f7d3968f58ec6d9b4a54db.json: {}
          6a23c8673ec086a640f3febe0ff9631b83844b44091b14ecbd1583567e5fc159.json: {}
          6a2d0901519299014b2198fc1c25e8dfb800299b5f1e3eb0e56db964ff738592.json: {}
          6a31b48aeb329317726a614f70b46dbede7c146ebd7ee3f54e060ac192107f61.json: {}
          6a367d9359a3fc869fe82801c7577be03c2c226af66cbe8af6cfeeb42e1c4666.json: {}
          6a4d9a7ca6dc97e6723c93dcc176cbcacd84d354d4cff97b93c8e3f4b105b4fb.json: {}
          6a54567cc2dfb21c03d9a255e9f84109788b626111990a79a7c00e1a15ce9110.json: {}
          6a5e5d58148c3689f3fcae16877b77f4c6b1fa0dd1e641d7bf11f22255eaf2d5.json: {}
          6a68e233dc18538e685990e5e0c2ef9e4fabfc7e3d0e5b3d5251a0eda7723119.json: {}
          6a7a2f97b30129d92a5b77539ea2d6bff10837dd3c8bb7fc0dfc086ce2f29114.json: {}
          6a7a8a2751e74ded86bb3064293fd7ffbced33bc62a678bb429ad296a84083d4.json: {}
          6a83248c5d9db79a9fc0dcb948078701a12d35a30cef3bfcb2c8cf99b8305e71.json: {}
          6a88bccb6802f6749aba7fbdc4fcdee5fee174c7b19582d6ab1692bf33b31416.json: {}
          6a993411e439b48923feed0dcffaa835bc37acc53801e2c7798fd19912620d18.json: {}
          6a9deb12af0e25e133da622092bfda78dded42a38a9b3edff56b52490282a0f1.json: {}
          6aa741b0094c6a806af9f0968124fc95cca0fe3ad46944fb27d113f8692b5834.json: {}
          6ab3fbb43c4b6ce37a2af97d85b0ccada7c11754f7846b9a771470f9f9d0b33e.json: {}
          6ab8cb0e796cc03cd5323d82c4a54df4829b60cf48fdb3cccc47c7cce42a29a4.json: {}
          6ac2b5494d368ec6194322f4383777b5c5b0112a223e6adf391dcf456697bdb3.json: {}
          6ae439669727dc10c93ffc5187360eb4c133797c126d3313befc864e11727b1a.json: {}
          6ae67e06a4d377cd8adb00bee40a2f20f72db9cc68ffac93897803f64bb92613.json: {}
          6afbb22555b348eb95d849400c7fc653c7b716667bc2e406fcfd8e6045995c52.json: {}
          6afc818d5b6a8761ef3f5a62df8181a5918b9e889f8f2a4fb59456b0155d4fca.json: {}
          6b08f6df27aeb3f210de626dfe2fd141d60c72699b5a2261ba25bb33a44c8785.json: {}
          6b28d97d99822dbbb4b92eecdc9bfe94a73066ae52823df778640962739f4f2a.json: {}
          6b2a2d0d62546286a3809c8539e65c23ef054741c6335e89e0d6a94c236fb45e.json: {}
          6b35df905a65dc6b2cf6a771422aa995e85ef21801ebcdab5b6f6a6b40e50783.json: {}
          6b376aa7a18e6c58d13624c11dc87ee1eb8e696d44de8acbebf969c91bded626.json: {}
          6b54942b3df404963b7998804835074354500f44dfa828c32f0538cdfa3df6fc.json: {}
          6b5b0aa14c9d64ba85d8698bca85a293ae914de219828e600fc35ad672260b55.json: {}
          6b788cc76265a9f8b900ce7734d0efd3c2a663b0cae7161dac22862dd6cac98a.json: {}
          6ba6d2d157948f8aaca0406f485cc536cff83c70c69ffd02022dfe75e9bef374.json: {}
          6bc5f0bcbccbd2f30c15a2f20c12a7314616ad44f2c72894092563aa1278be2b.json: {}
          6bd889390b440cf9aaa3394b6ff65a674e579c7d229f71a7f8cf6cba07956655.json: {}
          6beea05317719095fd6e93e5ad36e5b68199e0ca2005b473251d73836f0a1339.json: {}
          6beec7c0eea9daae3a52d4e2f39bcdfe823546fe861ce1440b6c106c1f8567b2.json: {}
          6bfe944da356b0232f85c38adb796f332e6314ba457717bc2286dc5145393177.json: {}
          6c6c33abf51a5590a3c3c6f5526eb605157c98f521819651f8ae3934df6eef20.json: {}
          6c70a40c5f07f1164a43a48c8bf1c13d7daad2314d3111c1d95e8b895b0c86fe.json: {}
          6c7407a6789ad011944db0a082afa164f5ca34e6120ec170bf273266d079dd36.json: {}
          6c7a81862aad81acf776daa295ed5099d6a6f5f5cdd119e9cbe50e80721c8132.json: {}
          6c90e0b8ab9c07f462de48bb6309301eb319d0bb99fdbcd7dcc4e7f1f3d20e45.json: {}
          6c9571fff1bf22e65d9d2acbccaaa681f408c09799ef009e2d9be87022ba4330.json: {}
          6ca2d0ac2072963502c0b578c04272b8f373b7c51a2f63096884988ea7fdcd19.json: {}
          6cb3fd1d5f557f90491193b24bc213e71f1c20d960388a41269504b7c64e2670.json: {}
          6cba6a32ec0c8b41de94696dafdc99ed80b6e6cabff35933b7c428690308cc65.json: {}
          6cbd166c29fc23f696ecd33f89477bba88ba5c1e4313c530f3df1c65a45454ec.json: {}
          6cbe94ad9715c9fdfab279bd1e6a5f05c5eac6bf86b1c3fbd8939c9b175aecd7.json: {}
          6cc3a8bcc336c1ec2b5286c4e3103c305e79d7e6d081acfa9cecb2087282a419.json: {}
          6cc9b5e89748117e0674309e8523b6ff9a39c28c2b6fb99fcc4ee4a7073ab89d.json: {}
          6d057f9fa0985e7f0352a7661afe85b55c14cb8c507c14fe03f56dabbae06940.json: {}
          6d3662db89dcfcaf46299d28ca3521f52e51d4628e99a8f8c0242ccadad0a7aa.json: {}
          6d8a35eb39681b12206ab742f54db414594d65e0de83e799829873306e5deae8.json: {}
          6d8a743eefca83abd409298a9d596d469dc7370e9af8351d60616528f3708a84.json: {}
          6db143eca8c8da44943c57b8cfbadfe68cd0c279f56926efdb1491a6f20a1b29.json: {}
          6db47f07e9082f6991c03fb65a464118fc9aff696146d86a49dc4e1803130fea.json: {}
          6dcc67b126798f6cb8a80312e0e9d7ccc1dddb4351e6540e17dc415e5c196d93.json: {}
          6dee3ae97707dc5e775e3d7f47aa6a1622fb6401eea519ba87a1d47d39195d71.json: {}
          6deeeddd0a455e51e3f494a6788ef84434b050de68acdeeb4d0155b123ba72d7.json: {}
          6df3fc9ec4c3732d95f7507f25512e39d45bbf87975b0b0f51118cd42c75b7bf.json: {}
          6e323564e78b73f1ddc73624e11bad31144fd502672205d030dfc05e76951c61.json: {}
          6e3950408a3fd60ad3751d882adb4dbbcc90e1391e1d24b056a53880731c0480.json: {}
          6e39b6b9cc2d4ad63c3ced8e5f09cb49bec6c75f0f824b7758a5798427cd5352.json: {}
          6e45af312cf06112ed1424672200fe3dad82621e985cbad452dd390e7b18c73e.json: {}
          6e7223a40594df3df2a0da67f3f0ce445f3e925ecf2636a70de019c43e075205.json: {}
          6e7c96e7455027fb828bd077ef8ccebc31a88af394b2b14c8788253c9abf00f9.json: {}
          6ea0438c7f8bcc31cc75afebcd5babd75f985662b2899ae48b6bc790002adfa5.json: {}
          6ea2ae2bf0f8604fe76381b8b18af8ceafede6f88094051f5d32f994d55713fe.json: {}
          6ed2c7798e6b4e3fbff9ed66dacfdd3529c42dd3530dd6a3c03b7d37d7e0b590.json: {}
          6f27fb1730b3d1db61902dc5c2fdadaf0aa2313f4c5fcd7b735c6c590188e812.json: {}
          6f379c04507e49e1e2f2c8d7319632623159e3a8745b37e39d5226a1226703fc.json: {}
          6f5f5700a89f068e26173d9f54982a1d611dff9ab0791c1e85b1c64665263804.json: {}
          6f60dc2b91bcdfc74ad07ae91ba146471df65ffe0fc75e5535a68b5def10c119.json: {}
          6f6fea05f6de8a667867a78f936e0db73353117dd2c68648b9942d55aa2df949.json: {}
          6f79908a9afa4b7201a60dd4d5ddb48e2db3059415a5f7c2c267174dbf56b1b5.json: {}
          6f8183ed2f39c5301a2ec4dbaf31c54f32c21e316725d83b0a015a429efb9c56.json: {}
          6f91f3377369e7a7c3d9799baaea122bce8cfa0ca1f6631a88d5ab3ce7db127a.json: {}
          6fab224f812bfe136bd8d86785e2f83b8a7a8a27c352ec57dc696c59730e6709.json: {}
          6fb34264e4b402c1e640b72f18a2d684e956f9be41b4e343027f19d6f4359a54.json: {}
          6fe83bacb9fd3479834ba282c89a55987a520289f55b45d36e607c632b3c8068.json: {}
          70210816482504b36bdd6eaff2c195b3e3c57b019c685dea23b7b0f4d4a3f3ff.json: {}
          7026a54cfd09a0cfea51cd22f067a1e4562c20c2bb16c71142175bf1e75bcb60.json: {}
          7038b232d9054d9e44a973401cf2a3a5fe7df029312047df5070e5223391c020.json: {}
          705abce9bca8ad1b3e66b3e6e67ec3e4bea9a0192123af1e2f41f4cfe0cd3719.json: {}
          706e8bbd32763b14dd78c86c910840ade63c0b89501f5b051268e186fa38586f.json: {}
          7087c72b1b73c39041aa8543e0b9d614e5d08e91da5543c21b0db469ca714caf.json: {}
          70a51e75196f179d51cfedea746bee0681fd3b60452985aef8119f11296fe4d9.json: {}
          70b8c4b83b70f956f06207170a87e044d7dab7674d482bb400cfcf334876f0c0.json: {}
          70ec433302122e69771dab354bdc7a435bc2349738e6e81723928578acf25dc2.json: {}
          70fb7a0f26380186d3f4da77dc73e7ab45958eec355a4457e8a5847f885566b5.json: {}
          710243e6d72a175ba6e2c64f2b1c144af2525acfd050200b4cdafa959ebdc19f.json: {}
          71257cdf8f74ab16502ae48a3d7403ca24a0ed67eaf6bdb6d17a2d4a085a0d10.json: {}
          712668215f680446e79911213eb8a9d047fa928483e4e643727dd2446cfe21dd.json: {}
          713ab755f00f5a252fd4453d9739b58d51051d9c05c0bb4baefefd607dd0a193.json: {}
          713b3d3ec0c204207bdc7141bcdd5e69249b913ed516b52a7eb2664efb367042.json: {}
          714e95269eb8f733526d9cc7f70851fefbe13e6b4e9bd045a0edb5cad4c6f8d4.json: {}
          7156a28d5ce2124e5ca6de26af1ac7908fadc2c90b422e0025953fc7005c42f2.json: {}
          717c6f8d53ee07bc5c986f5cae01ce550c429c46d489ea038706eb496b33dafe.json: {}
          718f3514211fe83f0b71083e64e301ce5add1c3e127e121a2ebb86458721e334.json: {}
          71bfd17846f4c6a19dae3c87dddd99ada2837959fb274a7bbd807298ab8620ec.json: {}
          71c6fa8b320edd37d8bbe3bdb73e04918386912936332d02bc84d6a2d8f8810a.json: {}
          71dc1addedfcbec64235023f5ea85941adc78209fb951549b9053d156bf70e0a.json: {}
          71e36e186b37d08842ef5d2debb5a69a90c98c79b489ffbd3f73ad4b4dbe4cb1.json: {}
          71eedd5191a51ef8bdd7a14b54d965b08654662dcad078eb24961d3fa1709366.json: {}
          71f7286cb80a8e8cf8a58c30db87c2448d0255a26348b6eaef3106574c260528.json: {}
          71f8c84805b6fe2357162ff8e534f1dc6ee4ee34aead7778206b86a12e24f6a3.json: {}
          71fefa57e0547ef75513e8335c160f1a62e96e3414dffd18e996daa0159c32de.json: {}
          7240d5da7fdea5a7da89455acd1421d9b662b2668750e24c7a76b8c762444c60.json: {}
          724fe6b798d798d118964c156a28c1fe209487cb5c957a25ff023feac2112024.json: {}
          726eb3c5c511f896f7853780adb0f8480b8d6fc8bcb384231195b4a45eb8d5d8.json: {}
          728b7e28548548cde8cb155076e3a0c1f90d6c0f80dfa575dc20d68d531bb996.json: {}
          7294c392f73b3db5e82c7b5b8d99ec546c4eba93563e72dcd4a0c169935ddd87.json: {}
          72c32541e8c6f71864f5d4a903b8289eeb883543d50c891c98637c0ff5db0915.json: {}
          72d35e9be293dd38851168b742d5804d036a91537bc6a40b1209975454ec36ef.json: {}
          72e3036afb902e8b7ab0ba01f02ed79b8b57bbfa0fa3cd5dde553f23a74c2576.json: {}
          72efe0db6e8aec4142fc56a09b8d7caaa0ad735e3ab487cb38f70388416f953a.json: {}
          72fe0aa897fabbc7289425b55be7bdfb4bda0bf59231acbe98bc0820d40fa3d1.json: {}
          731ae45cd486a46a1630c98762ac1a7abaedebcbad635496961156c58c6dffa0.json: {}
          732a7d5fdca55f8da779833fefe992bf59cfbe2dd51b3fc10690b9ac5effc9d7.json: {}
          732aa728fa939b3e342b9c0fbed80087dfa3ee0ed3dcf361552c7a794ef7bd76.json: {}
          7334a0fd1b1e2245928ba48f93a383a9a17a7238949a5d2448ff6f2c81efe581.json: {}
          733a5b8bf62a166abdee3b873a4c74093edf5d1f91d3a9f3133bc755a6939fcf.json: {}
          7342cc1a84248d5abb20f194c24cb4f1ddd43ec70156565d0b725a7f65ef8427.json: {}
          7349a9cca9a5841c191b0b7bff202aefeb502913bc44b5d2afc8dd2c691711b0.json: {}
          73567c33f7a0a9710dbe6520a5719015baa879d2062e1734cc524843bee3ce7d.json: {}
          73594aef615cf1db96cec0d53e49984824ca5819c3f586646716eda6a51faa2f.json: {}
          7372fb8e69cad4f531593ff73891317b52b5538fbb5bff28d90cc21c2751421b.json: {}
          73771a3437cb11846a29e112e53585fb718ed0a883529804109388675b601fbb.json: {}
          737c2dcd599c01426676ec4e5c39e463309c06f9ca34b95847f904fadc4eb26a.json: {}
          738a21c1431d1c8dfa153421277d7f5939249bc5eb2dc6fab576cab69727ac78.json: {}
          7399afb3db5af6f13f7ef619808c0eba73e8a15ff4214b4640f5f41597feed40.json: {}
          73d624338061d0e120fb1893244847d31d1bd2da93f2b3db952af96a6092d6ea.json: {}
          73d8ae59e3109c477c7668d98cdc8dee804d6fc2646862c2ed960b1a847959b3.json: {}
          73e7460be7d4aed1ee2b05cafb562006d31741211019f189a271d166bd65cc0c.json: {}
          73f6e9f602c44daf6e4fe7158763ddd7c54a1838d6de46e04de2520ac0733e45.json: {}
          73fe589cccc8ba3d58078b9c370ed189571eeb8e2a776bfd48d0dab266dab99c.json: {}
          740933cead4a199f4c2eed24499172ee50f4977e5882be9f3c0071d95b160799.json: {}
          7409f226b82c9314f8176a4eb7d296ebe71428b005536545ee03bdbfed7b64df.json: {}
          7409f6a595c9925ba2c8848610af73b9cb4b76e33e7c67f58922d31c7d8175fc.json: {}
          740bd10a1ecd4a11a9e3ced30171dbcfa499681bcaff12048a7b20f4300306b5.json: {}
          742af9e74fcdabc156d8e5124e40154779c443a4ed3f256a471383b1abc4a470.json: {}
          744640d6826996ff525cc432a4d9bd556b292688326281af86a8c45c7885840c.json: {}
          744b0d2cfa35883cbbb791164f0bcce592c392713d537605f772bbda8bcfe33e.json: {}
          747bf503b552667d56f9351452dd583ae549e7e1807c866550f054e624836adb.json: {}
          747ce892f929780f2ddad2210fddb4a30e405f6d34a627c711d8b5f9737d1fcc.json: {}
          748ddeba86f834b9e5d26889d173494de08801ca81b18663b036a2f4e01c4244.json: {}
          74b6d93f70370f2b999670f7b16b9a0092dacf0a6549818d776e09994078c3cf.json: {}
          74c36d8c6e7e4280d50052be1e1c00801168161d7808fd6c445d6ac55c69f63e.json: {}
          74c7e1a0014579c1de145f1290d1e207fecde7bd46df85baa5b2e2b5b75e66a7.json: {}
          74ec6600b1fee4ead1fdab87e7527a1a23da8c21fc294888947d21cd53d780bc.json: {}
          74f8af2d6f6f845a72a3b208e0bc605830d09f8fa1f3456e4309e64e6f99a1e0.json: {}
          74fd6d5430b9476112b151e7f7221fcbef941b4ee0b6feb59257d86b79b3a728.json: {}
          750474385a0dd51a930261b00853d87143e1f35983637156fdcbe943c310b860.json: {}
          7527ee20dae6a1d0d6523f4b447f0f79ba544a85502bc6ab7bbe0d55633897d4.json: {}
          752ee0e85253e0bf4cab2c8cd45a9c0ca6ef977a393fe07c874008c17b9dd0af.json: {}
          7535ff80134ce7fe3a9805001472fe8765e9f9c5fa7604370498f5b430cfef77.json: {}
          755199b56543f30e624c146674cc4eb5b8b6c1791e559a315e242623f2272f50.json: {}
          75623971c3f8aa90a2014d771764a324108b12ebc02e278cb04ff3a076cb26e7.json: {}
          757c3bd1f7528e4c71e4f93a4512ae01e0c52ab639df3dc5f08b409256af9fc8.json: {}
          758f33380feeffb6b10df6187432bb612ad4ba6dc43a6dc7e8c66c903e8a2a7a.json: {}
          7597b46745e1eafe4329b31e3349a684c61820be34c967f7a920a1bf97f17a63.json: {}
          75b93b4ffe70d04aac6c0acd8c7c11acce82d7235a3340c28d74c12242eadfd3.json: {}
          75c4a680d7032820abfe821ffe50f23e05badd01b85456717798e5ee5ed60258.json: {}
          75dc2f5e65db0ef47f1aaf864ca681d93e09cad5fb8651dbd2eec15f7512c61f.json: {}
          75dd4779f4827324a599831660e3dbd649a7b70047d1eae6fd731f1ff5f379b8.json: {}
          75e7784abfba9aa42f6c7ec2e18b23f43fce5fdfafd3f827b01529f974e710a8.json: {}
          76237c79ffae6206b53fbb3e208942e1b2c91cc66a196dab255accb5763ccf6b.json: {}
          762c0ab31b092c9983cba2e18609dba546617c72cfdafef14a4954f5caf53ffb.json: {}
          766364f8ef1c46455d9f6cafdd87a292129c8482de32880df44f0063701141d5.json: {}
          76717f41b43cb271a170e43e46cfe9908b385c4b17185b1d102a0e1a10256086.json: {}
          767d9432f70769acf74765ddf6a2d586c6e3cacd88c3dd7d5046db18f5c66dde.json: {}
          768a96900f3ed1dd03edad5a3565e44e404b18016c18e97be20c15488f3e864f.json: {}
          76b5f661cd96392c68a3a85b1d4fd90862f97b8925c56f1d00cf1fabce9e7a20.json: {}
          76e38d316c5ffbd5270feab24a02dbcca8e984bec02774315f98ec0c3d464f5e.json: {}
          76f526c9b81a16cc2d46c0d04b08376ad98811dc5e98a35163b49b950e6a9fbc.json: {}
          7707ba92b580101b2302f518c9a80c443bfb34b0bc5223ef71100cde8da12974.json: {}
          771fe658307de867922b3f257f31263a1c59865b1811ee9dac7040ddce497c9d.json: {}
          77264e28be7ddda7fcb987f53d5cb54d9bcc8949c7a70a3b9a732162913fd39d.json: {}
          7740b80aaf7110e118a3a7d5cf9b73aaa138841bfd95bb5892611ed14d90f34e.json: {}
          7764a971bc4c806805b61641753c507204f5c9631977787347384e46ca648f05.json: {}
          776c40066b7e9ee6dbefe11b6b978f9559d84f12cfa921fa34390d2bf0b7bf9c.json: {}
          777859e61f65979e6bddf917226a85bd81a55da302caa9792ce02a282709f448.json: {}
          778deb93b95c362a3c8471633252cdf42daa95486754132d3ede34803983adf7.json: {}
          77974b32edc156fd94279c4b561a137e73ca66f21f8684b231a235cc59212d8b.json: {}
          77d6c3b91267ad769f7bd4cc7a8cd1712012511a5557543c278935060330597a.json: {}
          77ddd6488dc913a2d18c44f859c8ce6d7e9f8c111e043bd2febf69c4c0cfeb20.json: {}
          77e43db1f1486b8c5f3fcf3e101857f8287d5cdc452e55e2214a1534d47232e9.json: {}
          77fdb8bef58702455fac984ae3469dd941fb0b808d71471d96b417162b205218.json: {}
          7800f6d67e0a49affaae01499c50191164cb805306b67af04ef2a2db2aade6d8.json: {}
          78147b2abaefdc78f5c0b34e6d3d8bb14163ea8d2883b2949baa6d9596d7a369.json: {}
          78322b6944d9daa573d0d430cc1335009b1946ff1afe0cbd4ff17ba249f9d0f6.json: {}
          783f516a3a04b739151f3cb1fffd1ef33a8b0b61d12625fd82edec5aa3ad3432.json: {}
          784f690d4b88af156210bc10b985eab182a633a62872017a1ac12d6adcc76ebc.json: {}
          78542081430791cee06cf4641f6eaf6a6217f7db4f305e94ce0a73d1ec65c229.json: {}
          78619f8d776a9b6120d2bf21766178977b62d2455cd08beda121a1bd33d06680.json: {}
          78625c0421578e1550298ede6eccc1ad9d19b32541f41b8a85937457226280dd.json: {}
          7869fda011b9aa2d0cb814288ed7432136d6dc97ce77a8ed25fa02ab3e30b284.json: {}
          786eb03e31f074c93222884f9198a919d40cb3c278b13d74897148016a0e1f90.json: {}
          786fbbfb0296dbc2a9bc0e748581a57c39482ca5802d69c35797f05b10b35769.json: {}
          7876458df1ec47a20124d377c240b340753efff7b0afcaf4d9ad731a430d9685.json: {}
          787caba81bb283cd79be6feff8a61f04f18e329baa548ee54865dc07d6490c2d.json: {}
          787f3d267b046733cb217cdac94296bf600458b23128c788759b5577be391f74.json: {}
          788d1b3b2eed2ea84f1aded2bf935f5160d04d8cf9fab12112e8873658693eb5.json: {}
          7925247e3b394a75926c6cf30f4978e5df5363bc0029d492e0bd3c881bdcb29a.json: {}
          79302ccc28dde7cdd1c95244a4c8fb2497fc107d6420592d4b41716639cb19f8.json: {}
          7930a1ec8ef9d5931a199ff6c621ed87467e38548975312c84de8c3e9ddf54fd.json: {}
          79343ee6c712ef3cdcd5bfb249625ae89dda81f00c7ae55cf30d20b80a772361.json: {}
          7942b785e60f5020f1a6c4b461a93dce565da2b958a0bdb16b2c9e9cf7ef7124.json: {}
          7971cc0aaa4128509cf10b4b739ee94ea965db8bffc67a7e1b3217c3b9df18ce.json: {}
          797c74b071e9a18cb6f6ec6f350f999b5d50483153cb86bd392c65d411ca1575.json: {}
          7998ec613fab20ce46ebcc8e0f5d2af17aff1ebde193463dc40ab4fea2cc1811.json: {}
          79ab8507431514e0b22a88265f57dce90c61db23269d99b40929d37c7f691884.json: {}
          79e040cd7629c127643ac35a7dce4baa422ed13a3a564be5cca56eb6589674aa.json: {}
          79f283c64e7607a88e2339868464dc5dd501fe13a0dbcf49f065d29dd4e8ada0.json: {}
          79fb1fa45b783c5e15cc9c80c18863a16a0defb9841d43f41be5bbcaa3b53844.json: {}
          7a09d46ec00bd9c87e7f2738371e7dd8d9c6f77376cb312158a8ff3ff0f2d718.json: {}
          7a2301e4a7a85f60a3c0e5fd4cbbb00802cb94b9368f6ca4b9034e1736c8d8fe.json: {}
          7a25d6ae80749c3a41a7309c72c674081ba0794cb4753e25e44298341846fbbb.json: {}
          7a6347a8a69fa0c1a046dd8b18535a3d4af78df9bb5bb9c42540f93e66443eea.json: {}
          7a7688e6913642a5ba256df84a9ba12adce51f4ab68f4425f8368e2b73439e58.json: {}
          7a8de604fb62906d8aea5d6a297002356e3b6ebd3c4b8376eb77b8053341b8b7.json: {}
          7a96f567274481dddb92779f2c00d74599eaef6713d2febb8f92079a0d7ba037.json: {}
          7ac52eb4916a4ed78fddf0cd1c5b536b61fdf3af9466bb00142c73dc817efe78.json: {}
          7ac837889d2567079e4e9f0437074059ccb9b4073ad915de10d22631cbc2ada3.json: {}
          7af103e6829a862c11630e502efd645f9c5140846c0d23e879e0c9098572e67b.json: {}
          7b01eb28a96ee8e690d2b3d4da4c3dd32566502e59e5561dbcd74d5f02cdded9.json: {}
          7b2c93cdc9db726e2992f86b24badabecb6f957357f9fea219c2ab1d2e8944c5.json: {}
          7b493abf2c7f9e2feaf223f34a8e47eb3aa4c0658ad72db73114abc46b1c4dd0.json: {}
          7b77af8a775d5c56edea70b9f86dd547d9323b7a1b5cb573c35c2454ee6135c3.json: {}
          7bb2296b3d58a6dc4c67b749595811b56e01ec5aca2f1862b10b8c797b5d264f.json: {}
          7bd2af2d254c6513761dc372bc03a32e3d58567249b5705266bbd3caa7215fa5.json: {}
          7c003f0a363ef24ba83012053d4f75e13f8e6d923bad9209dee4dc3b79422003.json: {}
          7c0852f248606b678ed8518fc27711eb662a0e3f4dc282124398104b02bcad15.json: {}
          7c1e6e11cfbb5a8027fa3e22c58585c8fa57108923c04b29345ec02b4b34493d.json: {}
          7c1f4a71573d91ab159a791a71c93cf51d9b759cc1b6d332141406c2b90c5674.json: {}
          7c230e782bb9d2b2bec56bd589df4bb80c9695a04484135e365a99c8836c8977.json: {}
          7c36092651d429b7ab0ed72c2ec318cba38bec69d5a824aea222cc9d30bc6c63.json: {}
          7c83b529724915bdc953811b0695bc5891c50f570fb0ae79e025bce2af397b3d.json: {}
          7cd5dc275e18d64e832dd83e84ba3cc7279ba22402e4fe7f4f03991a82a680cb.json: {}
          7cdc78aee41cd8fd60d56bf1b3a23ac770db37aca8015322c08f70099b0246f2.json: {}
          7d0f0c942b2ad61e5a87c78b9c930805855e8f718dbc45c42b07c56d855725de.json: {}
          7d118c06ae00da774d350f4bc4d5ec98040f65a4a9f643ef18e940726c1028bf.json: {}
          7d1e92b3e019d221ef82b812c15c60678f0cca9fc56f5ca52ad2649213ee62b4.json: {}
          7d3e2db8372d82abbe1ae1e56dc2a914b575b867aba0f921e961928537617bc8.json: {}
          7d4677c220d27f257a8b80b0761f3e2613bac8c7406502c0589f83959a073459.json: {}
          7d5a5809342b75552a4a8a674c9b756dce09abcdd9ac3b0018e22e142048d5bd.json: {}
          7d70ca0de5b911196cb512f1cf4e9d2429a8d3113799a9afb7c4ec4c8eb16b36.json: {}
          7d78dcd656e5adcc2456f63e653115afcb8a35cce7cc500a1a4069befa2762d6.json: {}
          7da4bb446948103c6d3cfc2bbbcea2864b01279dd89551f2c86f7c40f0919de6.json: {}
          7dac465c4d7b346db53f02aa7981de8001175957ace7a1b7aa93fc1c23b8a18b.json: {}
          7daf96d71460d3fcf9de504ee845f57e1f994193314e501323221cb29b26cea0.json: {}
          7dbfdd48907899b6db5f793de91c6701be27a1f00223a883a34e8f04faa95c32.json: {}
          7dc00f6d23d8ecef893f619c7829f695aae49130b344eb80efe8950f3b9c2b3b.json: {}
          7dc18d49b019555110e299e5a07ed0723272a456c2c7b3b3a8c08799f552891c.json: {}
          7dc90b3f61021135a8ab9270356db079ef0074cff162ffcc463aa6c6863b1c44.json: {}
          7df2f07a80e4831541a8c291be8cc5601efeac10fe6881a948239fc79e5d8bbe.json: {}
          7dfc220da214362040736e1f00695ef51b699a94ad97ee98a3c3e6486617f67a.json: {}
          7e27e3112b8e7f473e4e5ac9485083992b258da9dd346ddcae5f4f9651e90cdf.json: {}
          7e36dc0ff767884ff554d0f76d65cd157edc859db891fb6fa82f1b60c6abc320.json: {}
          7e55c8236ea01a9e07e52eca71ad38b9caf9c2f0b5629da9f405bcde1f4e2582.json: {}
          7e6ffd40d2854ec944580c0eb06f459e1cbf9a28461dce3f8d9f95e7cf6a7510.json: {}
          7e7225722d5fad0c8ccb386ac78a6ae9a26b1bfe4981325304a2a6ef0193527f.json: {}
          7e73347a251f89780bbe30700edab477049f94d3e4b5de271c56df35a5f3c2b9.json: {}
          7e75c93f591e852ee5d4efc3d0d1102ace94d76d331d229c65b822c7f3b44d5c.json: {}
          7e7d7d604c2ed43882ced35426e520458c032e3eeadf85e6d82432e5d0abc26d.json: {}
          7e8e321bf93c3aadda20598c72bea75d838f15272862b89f1dca511b7e512ac8.json: {}
          7ea139f6074a06b62add231ff892bfeac7e8a1adedf13997a9614aa3041f82d3.json: {}
          7ea591098daf56661edbf866ab908ca6f65a389ad4cbdefc60587b95f0af41d7.json: {}
          7ebea002fe532eb7008a255c0457fda7d57a565c0bd320c4de0dea4de1047ab6.json: {}
          7ecb8d9551a1f4027f9de4e3bcbedf16a13610e907cdfef46199c2ce44441d6d.json: {}
          7ecd3574098865f41e94b7f65083e03acec72cdf76d6f7a9a495a37cd18e63d5.json: {}
          7ef92aeb278962e2e49893b01f8dc1a156fb4a9e36a31a6645ca69c24c2d993d.json: {}
          7f0845005beee3b4bff7958b73b215d06ca9ab11944b2030d0f57dfc17c46185.json: {}
          7f1148c4a290243cd8108dcec89ce6ccf600619114d1fac52222f48b1b32d6b5.json: {}
          7f1a67f707ec2850c026d90a40d8f3dd22dd4d79828efbabf19d93abefe64265.json: {}
          7f1c51430def8f17d1dba5869d13d2896d9cda7f1957ac2f4efcd0a7b90b6a65.json: {}
          7f1cb535e6820e145d6ac55586c9e147a90cfdef097a1826567096ea0a2b98fe.json: {}
          7f33959a6bf3512f9a9f4d4d28686fbf9799564a0dd1a4cbb0cf75199b6e335a.json: {}
          7f34ce854a6305a1902a5a357233d7fd7f686451af75823101dfdad12c877e76.json: {}
          7f5ab1c254568d8d3b239ddecf46b3c1284f9318d6362cbc2793f3bf372195f7.json: {}
          7f5c84da16f57d645cf20a09ba715424ba0891ac542419d817e921b1999f58d3.json: {}
          7f640b299b6fdd4fc44b873cf48791eb096ec8637fe31b6afe65650df6b12330.json: {}
          7f7cde221600c08e1e80e6bbb8a88776b60b5e969e4732935a4685f63c774af0.json: {}
          7f92fffa60f85e603c7d329ec8cc1dd86864940ab1006eb58c6017142c082b43.json: {}
          7f9a1ef46945368d75998378662081a94e39fd132df5806b3100b9aa0e9dc7e7.json: {}
          7f9dfdded77effb96a79bc19a898b1904a4a50e52a2ff84c9e95051e29a1f6b4.json: {}
          7fa2698497225633e473fda5cf0e3e2fefd3c849cfa12c6a57c2626a2c614013.json: {}
          7fd79115a251e844180e45ef0b796d5a51251b12ea9cf579ee1632fce7d09f21.json: {}
          7fdaa9542f032ac6fd75bfbdc1f1aa01c3a6523ebf9ab3d1a0c1250af36d9efa.json: {}
          7ffd00dbadb53ff904ba023eb507b040b784e6d079608873f211a6703b69ad9a.json: {}
          8008f940ae9dd6faa3164f9aeb44f965c0c2116b62cdd024831acbeae3792e2b.json: {}
          800deafecde9bda975521113cb071fbe2874cbbdea777bce799e24325f73ab9c.json: {}
          802199403d904fb1d3cabdbf68a2430a0bffb3a99437b06ee90285917857ed8b.json: {}
          80320e3b3192d6919074a71c1f43bc90c347a4538370abc1f84c133a8ce7a2f3.json: {}
          8046e0c54dc5229b65fb904dea7a53723b7a59ae635fdcf1cb1f159661fc9fe0.json: {}
          8049ea8099bb4ea60d743ebd50fae30cafe80d36af99891f404f96ca6ee5d630.json: {}
          80589feef486c30a68f4eb3486b9138980649dac2bed29d2183ef52c7d5a2912.json: {}
          80747473af1361074ba7d13583f92f92b465322b513952b73d2fd63f9cc6503b.json: {}
          808b8eeac7b5121259ca17d67377e26290162f881779673b8f36bdb43ada3377.json: {}
          8094a07cc35ae18b28c4c26a52ab9180d70d9c0f092312eeb7b0ad10a344d157.json: {}
          80a60c36ab38180cb8f29528cb0a090b10fae3a8227d92ff8027a2351c4eb371.json: {}
          80c5f5dc57c40be93b17f1c115d8a50063e2cc4f03ab6f2b47ecee3cddbe06b2.json: {}
          80d025ac344cb18e5aef12e9ad3b792844b6158ab9f3ff35ca2d10a457a29a39.json: {}
          810166ec256da16aeb2358bda20207ec7f36e0241e570a35183a9fa2a2767b71.json: {}
          8104d930490a00c8ba793fb97fe9e98fe3e988d4c7475b3ed192fb7f4a5cad88.json: {}
          8123d0f0eaa745675f9578af5987c4cda769f7ab2f8342c4a0da20ad9e9ae80f.json: {}
          8158179130f0f2335c1d705713811ce750ccdb37ef52bbcd20cfeb1a5a68bf98.json: {}
          8159e455a81056f2ce5cea6e2c8432dca4e4e4a042e46dd5ab95685d73e6a2ee.json: {}
          8186a526166bb456e7a132de99b82531272b3de24fcff8888dc35c45b4176d89.json: {}
          81ce815c4a0296ed9cd69bb5120b6ab65f5c1823eec05a1387854f5fe45b8f25.json: {}
          81f239622bf48b1d3d50b8c7d8b4a955bbf8cfb8787209de545e1eb4751a3bf9.json: {}
          820606d7700aa5c7af316f4a09e94a626e6342768ed07c7a48fa11fd62bef348.json: {}
          821d29331adcb02708d0113309925cbbf28aa181a318cf1a0086e205ebffa841.json: {}
          824ea9a5a598f4cb3974e2fc5f00590779cd8f5198fee1efc7c1cf7b465085fa.json: {}
          824ed34b39df5264b08fe795a3820ef23a9e2c83656d25bb5592aee689a062c2.json: {}
          825cc0a6561b051df39d4ffa3b4487eb2e8cd8363523d262060d91427a65ddaa.json: {}
          826a20ed46ad95e60b2e37c2dbf8b80b30b542ec16ea4d6d902b97775ad9fd71.json: {}
          8278d7680202e63f6884aa0b44601981b19570de49ae1498906489e5d3fb57ca.json: {}
          827cad08b5dfad9ae7470622884ca8cab76a1813628b3e2113c6222a5e247fde.json: {}
          82821c85c8ba6cb18118ff52ee3c8651e27b0edd60da6eb73ce1ae2d4044642e.json: {}
          828506a9527420fc33aa3b9a840b707237e8720ddd780157f8d1ddad41cb4ceb.json: {}
          82ab35dc2a6d7a83c548eb374dc283fe6608cd9e606539212f8bcfbd69f5026c.json: {}
          82ca3f103da7ef738e091d9b2198a7629a13338552531c1f536186b51da5fa34.json: {}
          82ce6364273cfbb392a610beb69fdb9c348b031a6b50f2ad9c290f26089f0867.json: {}
          82cfd5c064d85d6ddf52f412367a24c44f1d5875b60cbb0e562988e2bb351657.json: {}
          82d2e5120284911c92463f958560f7d6d9a7ca8989f489765ea54ad14de04d0b.json: {}
          82ec7841134d7229d719cccb1fcdb953dc433d53582b09992839c2cd44366464.json: {}
          83092a85135c91f3500e001182d99a13a750fbfd1ab055206bba9240f21d57b8.json: {}
          831e5e884c5e91221c9a8002b32bc39049ec91150404e44756f683cd8d7b4208.json: {}
          835d89ba73279ca6b64444a7252084c82ca01962662b12c369b53af2304f0ad8.json: {}
          836f63df44f027d307274687859c17aaa30054cb21f055c72c51b5a1429433ad.json: {}
          8378caa76c049a58c45e2251637cc3a1700e0f955fd0598da97f63fa90bcbd16.json: {}
          8383fb88b8f9b430829a8dc4e9c8dea652187b875a71187b972f698b69943eb3.json: {}
          8398126be770b95eb6a899141801683d3e7406cbf6731b1ea5f52391d8b1fc28.json: {}
          83d247760688133c0e3d5ed6378d1a1ad1a975be6105f889711d3c6ac9d739cd.json: {}
          83da0393dcf02761aac52ab511fd92bb503a268f571ba66a7cca57d1840aedca.json: {}
          8401fd20624bf8423df0dd7b1a386f6ca81d2f7f30ed3f04037b26bb486f10a1.json: {}
          8402cc47da03eb665592a89a175882601ae640732c97b51eef431a1ce82e447d.json: {}
          8406a7c5f4dfe17b8cb12215f56c8f4125d1680cb7e39a420f49b3cf658a39e4.json: {}
          84188a84d3d3aacea2e4fe8b084fc1021cb0a87537efb45b2361725801bf5f15.json: {}
          841a3ab4453869c99feec5db2f569354f2a6a4122c04a14631bef697e24c1774.json: {}
          842584917f461d2a85c8e85308ec684f7352469a23c1aae68067391909056894.json: {}
          84397845f32cf0e376b718740f160f823937bf5af4b93f3e011911a93c52e50d.json: {}
          84405492c3f9074a085327c74b7e73c209499658910a547469a18d7fdb9c1812.json: {}
          84614d1dcefd96aa005aea1c882219f973c47f5bf7aee3b9069eeafdcd808fc6.json: {}
          8464fa4f8b9398479b90034b501f0505391855a7c83c56960eedba0e08666812.json: {}
          847fee6972fe5d0ab0a3a2d4209227ab16f5baae88369ba2000d4625abb48b2e.json: {}
          849754c5cf5db7d49d40335dcaf2b37c9579169675f7ea0da446c376d1e46a3d.json: {}
          84a0d4ef4d77ac1077e31b4dd175c5de110da6f23c0485946a87133004c846af.json: {}
          84a6dcdf015a0ed5cdffa5ada34c99bc3528b6cdbb7fa0a1df7520c8836f2f6e.json: {}
          84bc3ec5f1995c3ee414133cc3b9747985030a975f01e3aca4c24b1ca76e2069.json: {}
          84c589d5dd28aad7e096059c9d1824e6d4f79339cb82f82af26b3a4e88fc90f8.json: {}
          84e4cc1172ae1486a35cf143c6df383c2bd91ee2a931dded9fad5b81de93b8df.json: {}
          84eae13c486c154429fd325b5f0b529271451fd55321037361f409283f97d270.json: {}
          85164aa8e8a705554c09dd62325fc1c4ce73c7b382044e3d80c78a16b16619cf.json: {}
          8546e85cf8e0a5bc9d85a34ef56fe8e1c70d8ecaf5771fbdd1a8178c1919a737.json: {}
          854e2128928be7ccccb311b263a06d9f1bd6b8516637b6ce6c1364e3e8c17c3e.json: {}
          855dc9f70dc73dd7ec4c7047bedadf8ab4fed9a9741bcc0a243845c5b14dad04.json: {}
          856a53c57d158c07b73d16c2215ed40256d1e7218e8a996071c713b5395ba8de.json: {}
          8574ffdeb023db54a6a7b00fab39427e9d4eb6b0506daad16f1743c990464bed.json: {}
          8585679b6ec86c774c7b250b5dd32ee679e86d3111bbb2beb2507c47847183a5.json: {}
          85994208364fe8701bfce8bc5af7279b9f1a079226ba3abdb06f7949d376da2f.json: {}
          85acf6638bdc1dc715a39f60feae84ea2917996098273cff4cbfbcdcc9c2e52d.json: {}
          85b5ba0260dee20e0bca811728879055638007b693002ac4441c9ff4573c74cc.json: {}
          85d058c3df359befdaac173cb889931378074d45eff9494f7226a4298df04ec7.json: {}
          862ac59a9f35b43d0bba563a5b6de918f0d4ac2824bbea9b682cd84bf9f5d55b.json: {}
          866285f63e30e2598694f99b3f9e4045c0f9ff364032f6d40f3e503898f8daf3.json: {}
          86696b56a133b8ca376b30ca7bc5cd3d9117ed46acbb88d23023de66f1bd6c3f.json: {}
          867219021202d110f16df5afd28b366b141a4c3e60b42644be856a57595d7b16.json: {}
          86959e3d8f540e33dd0f712c05f1bb0c34ff9fc52b46c486a229050813b3d5eb.json: {}
          8699345d0183e8d5619ade7a17a4d2f3668b9f5201c7cfb830c3ba504b0382d2.json: {}
          869d03d2898629fa53cd2ea7d6388a8d8fefa9d134a2d1e02193ae4e469cf7e0.json: {}
          86ab87284849ad232c1485530bf5ad2410f69c4499da46cdb7ea27a6a89e05b9.json: {}
          86b5c379a995cd57fa610e69d2c1282c1290244ce238317cf2043a56756bd98b.json: {}
          86d4d5080f774a6ecae499af4e0185111361ea7122cd099f5ae43957ad83e8b5.json: {}
          86e7ba3aa2b685883e3a66b1b424f8d29993ea6a09f5f1434f2e532bb0180624.json: {}
          86ed870192a9f8d6e893b5cd0666426052e0b3ec6a3f653e3e15f1588d975433.json: {}
          86fe980b05259cfe9de384f15cafe4b4c6c0483db67bfb64ab2037e0018eae0f.json: {}
          87138072cc6adeb2394d507670d0c31e0d20deb79ce19ca44cd91ea993905198.json: {}
          871cc64aaaa1262ce9b6adfafa5f4a7b6043095102e1e02e15b0236c93196a58.json: {}
          871ea070584fcebe538b7a177b3aefd15ffd5f223403430ba49e9a596e877039.json: {}
          87321101bfa1989b9d3fba03e1334917699084fd1d858a61569a8f0d82570bde.json: {}
          8735593819061dc3cce3cf9bbf59db309538e008f042943d9ff12c09164edf07.json: {}
          873ad1f234c92d951fb9b03fc96134486f33cfcc5b7dc00a6c60fb1b6ab56110.json: {}
          873f1b1e5fb779c205d4067c484892668553eb7cbeb02b86da3f429578474390.json: {}
          8746ff8bd3db014bc049ad5994d245c61e361924bb282f4c797dea6d3e834f75.json: {}
          8780747e16b8cf2dbfde70dbfe9c016032df1505451986bc442eab8bd372a731.json: {}
          878470ba4559853fe320a1ee7853e7c7460456c66d9fa608c08414e8cbf286dc.json: {}
          87a70ad766cff542ee015f929a5169bb0dc563f8d4d18268added3590f0ab954.json: {}
          87faa274b4db4b6d0fdd6af9ebab496924983662a39c4d84828db74e69619c14.json: {}
          88222920c051625fd556a0c6e460e3cb73c6434d17e3f9a954a915d899d964ee.json: {}
          882ed0bd7b664a1366731ea72d8d81ac90454372b2af4e761409e1221572d188.json: {}
          8835417026b10be2466cc855d1f28133f283a1d016401825d90b522f7ac9b9c0.json: {}
          8843689cf31daa85ddbfdaa40987b5273597ed67d02104cbfb6ed87a292897f4.json: {}
          8848f6b99f81b0a410596bb82e49ae0c748dab72052526885ebd11f8291af203.json: {}
          8868f6996072a8426f42999fe8ad00269aa07b337515cba3d8b6ff3d1c0b4b77.json: {}
          886f45ffd6fc02a02af82a1488974470281c7797c013c261fe649b6effa5cf1d.json: {}
          8887b2f16c3155758e6015f7745bb8c4150384048bf54fc1eb55e282eabf517a.json: {}
          888a22212cbdd2cb983223079ac3ef79d46f869bd6dd22e2e71cdd786a23949c.json: {}
          889ad236cef4462c448f206cec34255774d467c0f6c1f23bc05e85abb6fc4824.json: {}
          889d209a944c5a45c066513a685ee14d5bed4ca902de46935f255b2167043e98.json: {}
          88af1ea15a93a2db336c1acd7e48be192b28fbbdbb9423bdd5b2fa7872fe374b.json: {}
          88b0ba7d0ac345c41dd4ad28dc1fa8a4805131ccc4e17b92f88900afbd485437.json: {}
          88b1bfa89b9a2b21b8f64c10a62cdd236ab729f60a8fa78b0fb3a54d8daf56b0.json: {}
          88e707986e30aba580b581e94dbd081c0fd1d0116912e39c69325521ac793ab7.json: {}
          895e11ad06df0d75a5f0744e91fbdd7c0203661824ea081b78952a4c9b4b7efb.json: {}
          896421fecdeff46399c934d59783a904971fd4b85eae87670678d2e4bcfdad00.json: {}
          89740f87ff3074eda893d452c37a0f37c9f064537edd2866394d022ed557292b.json: {}
          897a3600fffee9fb543e2df53ebe8cae898241e5091f82ed816a1bed8865ee1e.json: {}
          89acda59da5c59c7bd95047556a0ea9af786f3d04fef927e9da98f7c7beb6c96.json: {}
          89c60ab25fb80196be551bfabaee371482fd2d7ecb958b6a98306e5823eec4a7.json: {}
          89d8e54d60b4c68d9f5450520092382abee69430ea9e215b43899af241204978.json: {}
          89e93a9a31f6685fe0baaa5bae177663e6168cea876547eae4cdffac15d9f92a.json: {}
          8a02154729cff7b5ce52bc26c1ffde09521633e0c2816ddd24410f160492d6b7.json: {}
          8a1a45a446c23784b27eff61a2468d2be02faec41191f6bbf6fecb7f1efb30d1.json: {}
          8a234d5302f51ea47fc40223b9d122dd4d021157c2b7bd343a0ba07879c38642.json: {}
          8a362f62cf76139818e9d5d939f7b29750450c478f6bdc74c8bae7e2a0a2842d.json: {}
          8a3b4eb8c7d75d541cd8da2376ce2acc7b79d38feee2c662d629a3c2d255f4f5.json: {}
          8a55face4cfcf898131d979ea7da6eeda31f0adb729db9a47bbdd543f496215e.json: {}
          8a5e333065ff45047903cb4d0cd013d50da9609bf724391c16d4cfcbbb84ec4f.json: {}
          8a6a80929903361213f958abd1e4567e2674ff1168b483f690d29655a81f0a0e.json: {}
          8a8f9f4e948ff0ffa08df078e6085c9a4db4f2eb68e1626d45c079351452d7c0.json: {}
          8a91b65fc930b59273be2e7c985fe5a59d6ce28eed86873c3c448addcbb3a1c7.json: {}
          8a95a2b393624f625e60ca5df13a985748ea141aaacf1e6fa8882bdf2fe8c288.json: {}
          8a9ba45078b9890bb2d0a5c7f24a47f311cd4c767136d6d3dcdac472640f2f6c.json: {}
          8aaa00161adb51ce40975d616bf0c992bcecb7b3aa981993c9aee2ec01d183df.json: {}
          8ac7c88e2a006413976a242f1b64936a8d4ce944dda606674cbcd388a32cb09c.json: {}
          8ad283829649a1f59e4d3f012135d4bf5ab5efac285f2cf9cd6f6338ff1d59d6.json: {}
          8ad954560df01744950ed41fcd77e9b54902f409489c4cdefb226d8c9885f43c.json: {}
          8b06318a74007460c4b70261f768c728e7a257d35d0a793daf680464b78b4b6e.json: {}
          8b06ce34b1474bbc2f8a781ea8f69f0d64398bf782651636ad594064a47cc813.json: {}
          8b0cafbc34a2a806e67a579764e570b577febe6fcb67b9f58e12937e3957e427.json: {}
          8b217690cee52b8b19953e9cfdc4d09232d094792eca01080d1d402cbbd5a5f6.json: {}
          8b23825d342bce46e4366198b81886c17fb5667b4dd2019f14bef447952dff71.json: {}
          8b238c2883d7cd2ffc989e6d720ecbcc16b58907033cd372d3d917ae3c93d3cd.json: {}
          8b38c2c93c57058e2f8079d1490871040eeef147ab7031073171fad7611afb8a.json: {}
          8b4c2b06b4ad2d8ab889807b0452109d2848caed7834476ec1c93fcf745fd82a.json: {}
          8b4f46695d3412d4961e0274e12f587bdef0083e66d57f2f9cea8c5b73fa8f16.json: {}
          8b6807a0ad7d9425447ca9fbcfab9be619ceabbc2d5a5da0234c9aeb1e11d687.json: {}
          8b6d35c8ae8135d1b212449c8666d66721aee94c866120189385b5b295b1e508.json: {}
          8b7cd4990a8c78b837c266da643f7b4bb4e84c9938db4b685e324c2ee85d4d13.json: {}
          8b90fcd7c79212b5efde63dd3c886594c16f853aeda64d8c275913a2a6ea1ae6.json: {}
          8ba50373402d9f3496ea751d67298d4e9ad1a90eea5a8ad3d4bf98eaece6d3fe.json: {}
          8bab59f79ad1c25de29391f7776aa6a189352cbe15adcb20974bfd1bd2a3ec96.json: {}
          8bada35d6a16e0c992d85de90d0ea6b8b98c17518925c206311cdfca6f572836.json: {}
          8bc294187413aaa0e2287278c6c44621f42859d5816fc5787055bae72369edfe.json: {}
          8bdf8e1a94afa7f25fee4cef5d7c24de05569027c3a7323db0a58cb79f81e441.json: {}
          8bf5048a89edbca98d5772ba2758184f8f19d30295da9fdbbfb1abfacb5b6946.json: {}
          8c1f728ae796f125eef5f05a4d746bd724bc0d6096d17dec35f14f082f00916d.json: {}
          8c30c41a46c099337d06684d9f4f28654d87500e114be08cd572d3aa7ed50678.json: {}
          8c392fd1280631a5722cff5ad961e82564b586107845175272a54b88ffd60d9e.json: {}
          8c491adf42d6b8cbf04daa09d25dc168276de1b07b2983c62dcb20ad7e165788.json: {}
          8c4f8f3ea7f4ef28ead0dd80b5ec6a4471eb84a44392bbabb583459a37ef6f06.json: {}
          8c5688c0c28bb81d781250feecd84f0dbe569cbb7f291e9e9b13e6861673c109.json: {}
          8c5720dbc55a5ab0c5841e5705b4244a7d459e052f9906fb48785ac32be2d676.json: {}
          8c787c091d76d3d9eba75ff7b4ee227a01fcae0e83f99ed3945529e46fa3c58f.json: {}
          8c87049e384f195866b3faacad5b15a04bcb125724569885ae54eab326bb512c.json: {}
          8c8e04688b739cb2c51fda8a3561881884fe6a5617e2348b341612e5c09dcd40.json: {}
          8cb537a61f1c07811c53ad5e7c50ba4ffd8fd7d673da7f41c632164c6644b569.json: {}
          8ce665711009a147f70ddec2224a33d13730fd4f09667be37d155c6ec95eb3b5.json: {}
          8d01ed11a85ec9b7abe6b23b5661b53bec02dc6e3b899b75a510ac9dbe730b80.json: {}
          8d056b950636df83be17b1e4ef64bd06b7c3c19bb0724aaa69dc7b225d079bec.json: {}
          8d59dd04cce44287025de60268827bf1bbd3e6be802da2b44033a7a05e56a9f6.json: {}
          8d804f01fe60012768d9c4b279b14347ce20d6683d2d7357e3a09b0f497c1cbb.json: {}
          8d832ef80333f73212be7ae39949551fe6e5cb00bcf65443411e3b60fad03009.json: {}
          8d94adc3a3558a0793697c0d1073895f2306ce6211686299cbcdcb8d04a6d8c7.json: {}
          8da93a7f16334895ea62827d5863b715c6cb3b4b728c5962b8dca21977e9539a.json: {}
          8daad342f89199146785ecbd12c8b6c6abcb228cedade5b723dab89d68042fc6.json: {}
          8dbae73d443520b6ac2642b686ea9bc8cca149422524b4a63f75483fac4dff98.json: {}
          8dc91ce6de3f59e4e61a3071efac2c2ef3b534c7db495a6cbe765ef9232b0e91.json: {}
          8dd8fe2b834dfcef80557da5221c1176322e2cfe1e15b6c131566b4ea869c255.json: {}
          8dfbda0fbc1fc5a88fdb8dc6f8d67e51e63186e22fadb3b231c9d6821d21ba9a.json: {}
          8e1f81e6ee0b292f52a645cb8ce861e0914576914dceeef24a4265467988d10f.json: {}
          8e23c1d027cb6e64cf80b6d88ae42a7d6330d0ac572d48056cee2fa89a09d6a0.json: {}
          8e278a4742fefa75ed8ac43b947626509a08e61b0384660d39cfe36f3583cabb.json: {}
          8e2dc354fee3b0b6776ab1e6068fb4a8c179c72ddc4cf60b9e74b94f54cfb40b.json: {}
          8e3279ad11e04fff3685070f6da8bd899c9cd968fd9467f3390b27c44ddf3e08.json: {}
          8e5380cf6a9edae6070a0a892bf863d97eaccaff1b60b12053bebe51629efb54.json: {}
          8e5606d769d25c3ca2b6996c458daa2cf475a6794eb4935e1468bc78f15673ed.json: {}
          8e6622c6fe3c359d167cfb7f5be209aff84882e2e6d138801ec90c6645ce4d88.json: {}
          8e6cd36ad0366403fd6a03accdf5a1dc7f21d9eaa3d9ae36b997b872c0fb6d4d.json: {}
          8e96c7824d865ef93a8e9d64935b989242151c794cbda0e3d0bb22944133eac9.json: {}
          8e9768b65fda5b4d2444ceef56f0b5d445245989b53a3ff109d20a1d8f96b9bd.json: {}
          8e9d6ae4ec03e2f60e5e0d5c182207d375d943a645e07beb3eac802226e72a90.json: {}
          8eb8d03dfd039adbc4cba985e05f342fb2b5d2588a2d7b601d26097f62b5a4b5.json: {}
          8ed12d62f5daa8b2c66bc9b96879e011ab2455fca9d0ff0851273c0c96fbab04.json: {}
          8ef41a1a04c0b589aaf2a4a11fe5820648bf91b447567acaf123f930afeacd32.json: {}
          8f09b7a8fc88a1e52efd07f2a7b793ab11c43db9650c7e476fb6a4719e59109e.json: {}
          8f3edce20fe0c26459e052e9a23e08eaca518c3b41d26107bceefdf0a266d6a1.json: {}
          8f652bc6621174d406944376b8181d9c0dfd9fd3099ec7ecb891584c4acc6495.json: {}
          8f66a9e23bf690b34e5a7293c70e59c152312ee28adaf06676d578bef865ec82.json: {}
          8f81dc6e3d26661d20faa225b0df789e2628496d4585c255ce66dd4a2307f058.json: {}
          8f891aeea205bad663a1bc874e323da53affe9b3e5e3d06a821ad5390d06736f.json: {}
          8f9562bb5d10df4150df695949e5453fb75985b4f8756d7588635d74c6366ed3.json: {}
          8f95966e6b4734d01294d5c43021c8687e4548d43c6dea26390447842f050cd8.json: {}
          8fac9eff0df49d0dd0ea3939591983d30dd2bcbec5e33fb61481c0ba3c41c5dd.json: {}
          8fb580425d23f638388544a7294f32e29416d044a1818e62b2a564762053a6bc.json: {}
          8fc22edd5b41900ed78553efd42ffe994bc5e51bfc38076fc50240b0bd75d077.json: {}
          8fc8c5b0cb02923c269d4c4dc0a5bbbf57208053390a2f6fac70a7cb08a90519.json: {}
          8fe82786407f194d4a0c7d03861bbf479e1c0b01a94768f1ee4d0a84030610f2.json: {}
          8ff03eb719b5770d96f0ea959ce68ed3e3f3fb5375c18f513d7570648fc9b092.json: {}
          8ffc61542394dc45b4eba79c87d45e3bd24211fc1c6b70ff13e3445e80874b08.json: {}
          9004e93450c043690a96948d7ce048cb8cd203d0a19173af9fbae1d64a070cdf.json: {}
          901046c88b0ce4216cdc59e0d98cbe319a8bacb527be1536ae455fedd76380f0.json: {}
          901e667a703ec06c3c576292196b40f71e6ebb431e0639e9d772055a93d521ae.json: {}
          9027ed17d27170e3c050cb584e320cd2c53c0f7a8e9d10a2411efef315072962.json: {}
          903d8d99c15dadc127bc2f1a543a8fc83e673631492ea25b1e7ec51be8e77272.json: {}
          9042a339d76ac7682b3408e669e451efd17d553e5f0324eeab4dee4e322d9801.json: {}
          906a557e6ea4735ac0ef40fbeddafea097c19891f38158b868d9cbfe179eef29.json: {}
          907959e89929551ff747ca4b0fb39157ae13588316b13baf50a9f43ccf46dd3e.json: {}
          908dbb795065eaf4bf5fbb0fa0e3792262d22adcbbe8f95856e30dd8e246ce6b.json: {}
          90987e7001d006e8d838edcc6d5daa2df929aad11bf11ada339267d00ba3ff62.json: {}
          90a028459c40d8c6e3ef896d014f90920fd64597ca32bd860cae924609b66328.json: {}
          90c172995a9a5426f91237219ec544f1a7ea44a5160d15412ccc52ab4411c1a7.json: {}
          90c638303cc1e05a5ac68f72b59f8425e80e65219a542d355951ef051883da1b.json: {}
          90c6f53d4490e090ae710c69f46fc9d5ff43535e99ebc31bf3491dd244d22516.json: {}
          90d78c968a804aeca3d6e209fd219d6836c756a238b5babef709017698b2c5d2.json: {}
          90d97bdf46478128bb9e78b9c5f0db8f96ab2b247df35490a65009671f04b704.json: {}
          90e453758318f8c6ca1a2f0123ecb7b98375ca218764c69713bfe237185bade5.json: {}
          9132bbaadb17e6365c249965576eb6c95d40203dd485d13df9f0093c0660d64d.json: {}
          91578f12f61d6649c124343c4b893f7849938266b575f53dc4f5d65ee22a93a1.json: {}
          91791c584c852520410d84c779b0bcc3f6845c319cc56f0d03c316e1a1e7fd80.json: {}
          9188cf3081cc23fc51616c8029a8ad445f20d016e16798d7ea4e517b673e5429.json: {}
          91ede7025018829944f5bb8c8c80c9c42e7a1193038ff08442b0c10043dfac0e.json: {}
          920bca6bc06bfccdf7b9ad6b53cace48a14bba36515734d3e3d361a6b5d9a026.json: {}
          92164b5205101b3ea063a908e01d513e5154946e6010572753f1c92932e45f10.json: {}
          9230d5e1c57736e1f8a2004b592a6be4a998de4e02269098bd1021af597432ec.json: {}
          923221b8520f34fc85ed3150cf4802c4bb4f4fb664cba7c5a04d01a3145550a4.json: {}
          9235a37fbeb7a01ee44f4ff204d628b1835208da076853d94741ecf1551d427b.json: {}
          9271654822f1a18eaa5d25957676049bc7ca1d15df470794c95ac14cfdabd8f9.json: {}
          927a26f2438e8b7e8b05e882394410cfbb39f91248294b4bc3509823330c014f.json: {}
          9284a8ff6096940389d5cde6a5a94ca44e8a44a2ae961f90eb5997146f0ee245.json: {}
          92914fc0e3379cec0166b4d6336641c91726a16c671b554528e5a6815c0923a2.json: {}
          92abe4f73ef86f0ec785c9e5c7f60659191187eb0f469ab78a43ee3ad903f37e.json: {}
          92fd17bffd2cd47554c571ef811d508f9293b07c808c321de195f395eb4f13a5.json: {}
          92fd36dfd9681b802f40ef4dc655ba1d571cd19e49873611b0a40c8316db14db.json: {}
          932f0eda809b60cd1d0300c33e33d451d406a669470c5d2e636cb7e1bcbff4e0.json: {}
          93562300ac9f327719a620b5b3adffdf3668993938c6db1f8eed3089f3cbd757.json: {}
          935f60edeb62b4e5d31e7f7156b764bd338e6de5568f42487198ac210938673b.json: {}
          936659dcd13768b31a86acefc35aa7921a4769209dacc34c1b9e75648fe85dd5.json: {}
          9383324b4e52e4ed8ef385bc89781b120eb902f96869d60de6bed1ff0efe2ac5.json: {}
          93afc19bf8daf739f5624fca9b9ea7421398e3f62b4b7ab5ef1abf19b32856d6.json: {}
          93cab869120ec620cf02bc7b4868b71426ca1f60a1f32b2169a6b7ee97209a18.json: {}
          93e0f8390d8e00e5e00d88367727bf489e3d34d09012e7dabb1f8964e83f374f.json: {}
          93ef4daaddf4527c00acd3bc7b78f0a03c990ffb0984c730ad0e199e41ad0b7e.json: {}
          940794dc590225cf2a44df31c99a93666d43288484fd81b2d86600b12b1a745d.json: {}
          94287019eac5a4792a6d809da201e0924e8c6a00611c949794805398a5a81c02.json: {}
          943418df3a422b01409e257b67b46415e41d593446f483024326edeca4b1cd8e.json: {}
          9436e958465de579ff89c3a49b26b02d35469b81e6eadec90f4f89af8914365d.json: {}
          943be13035605bdc09759972090a9f3a182d537f1567edeae5fef83d99f5ecef.json: {}
          9451c063edb2eccec4da110179fce59f5bf99e2865d85f886d8d2fe9e909f229.json: {}
          946a09598ae135df824964d5ba45b004b80d3087e76bcd234e9d5533061b1bf1.json: {}
          947b37ff6ab0b126f2963edf9036c50296ffb1acbb7f179e2bc62f6180d6528d.json: {}
          9496bb06a0222f97d1404efae963757051693fe7e9772dbeca687c7cd5cdaffa.json: {}
          94a6fd2b4b645a8ab1da2bcbcf2ec081a851a732484ce2b0781066d74d8a94c6.json: {}
          94b5674dcd365a44ce1e9b40777b5d594887c768ee5fb6c9247187ca1229dc27.json: {}
          94e00d9ea7feab2ada0ef7f744956c0a13f5dc4ccf457063d3d05886f74d8444.json: {}
          952efeecf19aaa2210a762a0da447cdd423e0c854c2b79477e9bbdfcfaa126dc.json: {}
          955c4bf9dbad053437b74de23fb887775492b173d9d50cb76aa51183920645e6.json: {}
          956e5a5bc37de25e5119ba59223dd843476d0c96a8fd07344c3f6672ea307c08.json: {}
          956f4930e125c96e521549c59063edfbbb8898cfc8cbd61ffda06989a3dc878b.json: {}
          957b0e605ca591ff35125a4061a66a4b9813c8d9a0c1921b8a2f2dea547939e5.json: {}
          957eff40001af88a4cad2bf7fa50a40120e543832fc258ee2541de32a0599d98.json: {}
          95915152388cacf922cddc1a8e82009e03e824e81027de012d1f2c0d4eb33b30.json: {}
          959308b3566ecc892ddbf6af4fb3337883a3495f71ec3f03e2e8767732c75b6a.json: {}
          95adea15e4558256ec7468ba8e08f93df55b99b72cebcf4d8aef577a79b1909f.json: {}
          95b87c7740c28feff4544e8a069288185b91e760349ddb44a435db1fe1ea3484.json: {}
          95fee25c081a37fc198d2d7731f1530d26481ce40219b1917b57945f5997515f.json: {}
          9612b469e7c7a3b83bc9382c3fef0ea3b2e7ed8573356f04e597675cd1bba7e2.json: {}
          9621cb6abae8dc07436f4d0b505d78eac4caad4caac273642684e3900517b2d8.json: {}
          962602813e47788094138cb34aa8433af923294e695c72425c3c623360fe6833.json: {}
          9639e7bd597de6b8b4457480a2d0fee53fa9c9165689e5fe9f39d81884862872.json: {}
          9659458d9f0237cae74b9ebf29be3e9110fc2dbed8283e9d83e56344525882cf.json: {}
          96664e65f6590121272ce2479c83b6255a0ef912212344e2ad325386d1ff4567.json: {}
          969e278f4248dfc20b54d7d0816b64a60341d88382d36c10d54f5fde5b2a866c.json: {}
          96a3b10abe2ac552a3a4145cc9a4871bb10f8e8e21503cacaa24443fadc0d489.json: {}
          96b75f7cd49e1e9d4fdaa9799faf51fa991878100093e577de235f3d98734b6c.json: {}
          96b94d4760d71e4148ac917e8b2fecf3ab9ba97030eba2ec0079d8fb15cc4a94.json: {}
          96de71a25f4d9cff7d067df36353e694909e1eabc661bfb11c61673366fd2adc.json: {}
          971057e26982d5ead27f0b968a9d6d2f7fcfac9113d678635f3d4125bb815c53.json: {}
          974a268b584afc052e40aa6e51d24588b638e41a5679d24d529258b6cd5ce8c0.json: {}
          976055f4d8606681ad6cb0c1fe46d0cd4dabbc56ae93a9925a683a03b85d412e.json: {}
          97838c740ff9d8aab12504772d683320f24f13b1f16177dbfd0d64cd835c1841.json: {}
          978663cb1f3b1936a894e24e6a83423d200ba7c946560106fa39b6a498a1426a.json: {}
          978fecdd2125d671f2e475f865c9bdc76229148a8656a0db1bade35d57aada2a.json: {}
          97a217a320d9844d76606b94ea21046f791acf90851dde5197a50d7983c59c0c.json: {}
          97a7c6c77c6273aeb95cce9c81fe885aae770607769e10134a20f070d2b68552.json: {}
          97dd48dce72e32c30859576335c7d525f00d77acd7748780d15097b3c970b656.json: {}
          97de86c228504f28e0edc5e60110ac24f007f93e6c406997008dd7fb9c35fe0b.json: {}
          97f8008d766f96dd4100ba6c053a37433b28e3bc3783337ed423a2a7f3ca580a.json: {}
          97fdba60d522ef2e2e00022e03345d41ac616ac80fa4c20f4ab072c78786c120.json: {}
          98258d62ee6794376355848690d3d8fbb553efe1283e196643bb203b08c82a54.json: {}
          98328b5161771f428042802523d8c48819f720753f449001d52a9aed98ef8a3f.json: {}
          983cc8ade0e6c5e14965c5ba20f8929d48da4d41cd845f3e320e66d26ba4fb78.json: {}
          983e2cb638a3bdca54f88a814cb399a630aa15ab6fb7bc5b3efe0e5915308543.json: {}
          985f9d5a870a0245b92fdc333fe0b57920353f57429a383f3a58d741f38bb7a7.json: {}
          98631be8cc58d3d1fb6bf35fd2d17901a19e7da3787a0f6e0aa40254403bf537.json: {}
          9866a912b100d7c624b63557454f48500b39716d3366003a39d9e47858708996.json: {}
          98819bd362eccbfced9c02b568f9b4b5d72aedc7ff3f7559fef5d65d3a2dac75.json: {}
          9889a14adb8f8872c8a47ada2aaf1301935755c739447031a6f9cf11c8722397.json: {}
          988c77ae98d2ad39e1b1aa02cacce7b8297bc9aa22bc490ea913162c48fe66bb.json: {}
          98ab2b2f4b0d6f8ab2683bee2801092da54f9781ed7de07bbe65fb3d1e0a6287.json: {}
          98b12c236fd0e4289d2913c55cf635391a20bc108449eed340c4f8db13fe1206.json: {}
          98b62c929d2d7864ca43aa811baf055487942b1b06fb7a6a055bbd6cb8bd4a6e.json: {}
          98b82f0da95af4e4598c1ff5c812ba714ed966ef9bbfcd0023a547fccace6bfc.json: {}
          98bc0ae9eacb5e2b62fae9941e9d3d5177514f65653aa00a27d2d39c4aa2bfee.json: {}
          98c02d579fcf092723c702810982ed87844b01c2eca5072fe72a60e265a6584c.json: {}
          98d4e417a61af718764234eb68d226604d6f9c0ef309f99429fc0ba66e184242.json: {}
          98d9f55bf06be998561d4b4283d6a2c99da6e107ebdf21ca783a5bfc7d5c6951.json: {}
          98e38175726b651a0e229ab8cf6c202194611fc502255bd1b18f1324387581e6.json: {}
          98e6f4e93575ecbe6d453071c48b4d9c36d424d4fe0303d344cadf891e1a71a4.json: {}
          98e82cb45391b08eb1f8b483b8a5da960572e7d017f34bade13f1f0a3aa4926d.json: {}
          993246c982c1a845c63216783ab2ff0b147d12e59b39308450b3613b9b7f4fef.json: {}
          993b81c82f347f3e2ebdee73ae143affcc7b2c7029d0dde7a37738deb0b68101.json: {}
          9969f1f5da888318502af556b0aa916bf87d01c0634a17dc81815441a9cf67af.json: {}
          997c9c4c5e538ca23568f9c01b5c0a718662b7ce67849984f6ec489c86ff31f6.json: {}
          997f3bececb829a298a880756d8b4522522b74563d53911262f51e7be37594d1.json: {}
          99b2f4eeb7eeb7e621c3bd111a1619a9c43aa39e6bcaca22ef152f8789e9394c.json: {}
          99c2833e3bec7b0cfa054c8f94624498e9c3b789e5d8e85889fbd230e9a659ec.json: {}
          99d504e76fdf4f02ff8c0836b6c521ac9560c7051a5c137a70437d82e9c8c7e7.json: {}
          99d5a383af64f46b67327591f7acde6a200acef51c4a77afffcddbb31a155ec8.json: {}
          99d5aba3a10e6590f71e0e81ce756e86b04e2cae407b6d8e7ba5cbba36c69c9a.json: {}
          99d986d22810a03bea6b9e1d86154fee146c7f5d1d8d3daf2c5b1d07b915656f.json: {}
          99e6167704a470021a4ba6a9e8537a332b084c1633af4f9d3cebcc9242780c88.json: {}
          99ebd21596dc2ea22b22a72e51b1db03610abcfb3e0e0dc35e5481cea8665acb.json: {}
          99f60a00b1741054f7eb8a155dc9ffe0307f6717347aeebeacbaf5c5412fa1cc.json: {}
          9a1b8136a44e12cb7b7cfe0b1b437d16309b2730c1ba95319e8f3a94cff1296d.json: {}
          9a1ede294cabed409b658362db5d4daa6a5bd938ac868e2b1800ebf2dba03af7.json: {}
          9a4c2d181f9964c767c363d22b328d2e6b384aa53b80cb61fe9e692c0969a002.json: {}
          9a8b4b397b0308b7f8370a8c0e7c8516c6d503be32ba5f23e90b8565fad02276.json: {}
          9ab49056b67b06cc25f74dc8ec1be37791f1e4f95e5c8dd8890265522184f9d4.json: {}
          9ab7da10435c950ee8919783b059209e31724fb38835f7e430fd6bfd50b32343.json: {}
          9ace8562b492f48dc4939d7ba4b6e99dc1fc140650eb03838043fc604f84c45c.json: {}
          9afb5de48cbe6909c525ab1c5237a180c325c3df92dabfd1d0c8753a7f2d174c.json: {}
          9b12995e222d1574562149ce856f63bbd4900dd24d7e544ef363635b73a8fd31.json: {}
          9b1660f7014bce4a8821644b0a319816e4fb1a7a5aa3214a4cda3152adc3d8d9.json: {}
          9b17d96efe00a1b1736ff83a664a878a0a1fef64c521fae602bc5fd4ce2ddd43.json: {}
          9b24022923502a58d2848a598f8cdbb286448fc67542dc9b8f4e0972582f094c.json: {}
          9b5fba06669114007b484ac78ce9400ba257f093ec7a58dfe3f7a6529e391e81.json: {}
          9b740d2025b061aadaf29c8ba690c87d2852a3d1bd5dc9636fd98f3fd5cf46c5.json: {}
          9b7867bfe0f4fa5a1b6f58e714fedb978ce37fc257e41d66d9d7ae7589141ba7.json: {}
          9b8eaba8f8af7a29e41dc1fec141fe71fab04ea8c5065a3678700561c41502fc.json: {}
          9bbf7a45531a76dbfa6ddad1a9b6c08cc0e85d7819a427bf48945d152dabaf80.json: {}
          9bcc4906753f01612e9af5306bd72c877c4326a88963f5a96377896ecf82caf5.json: {}
          9bde346a2c4314ac55105d457d914c55f2679cc49aa8b00ba5ac5537abf4274c.json: {}
          9be692ce2897f597ab393ca60c8252438f275e79b7a6345a37f41f00c9145c86.json: {}
          9be73aa802015f79868d0a355625d1bef13e31d0edd0d4b09bd9df82cbdc1880.json: {}
          9bf2837d1f96a66d384d18160147296dbc30a1c377803ef5fa537382f761bb96.json: {}
          9c0e0f5277fcbf8f24c1429d58eccfb3c1ceb527351b59ca2eeeb7964f0b93d9.json: {}
          9c18607a0cf057f999515d5db5e5db4f124b6c775b4eea506918a5528a99fa50.json: {}
          9c1a383d1dd7d083876c7e4ec39c07c179713b242c8241af2cf972b0c6d8341e.json: {}
          9c4b12911009d5fb73eaf01e9166a5a7a1170b319add6e059ea30ad689c4b015.json: {}
          9c4bbb99870b91c2ac4f198af278f6a5b7e066d7cca6abf8f63556e502879c94.json: {}
          9c5cb015ea2c160473403a1e59e6eb9d00f26222e8c1576bf340d5e90aefba82.json: {}
          9c82b6f1068be42ef3a236f67ec789a6d97777e315e001971ea74f0f1a14e54b.json: {}
          9c9e97ccd54e8c01122082fbdc09ba678b832a88b9f4741d6790dc2a4eb5f679.json: {}
          9cb62e1680b5027b08651d9d3f44d398d8d2346c38dc1b6a4110b90c899e94c2.json: {}
          9ccb0549b5e0955ca598d98891cf6f60f4c6c652ee3652bada2aa661c18310e3.json: {}
          9ccc2149f656b39366a59109089f37ce497c1a7c9e6948f47909eab8b50d1268.json: {}
          9cdbcf828aba3df9c5a2c2b863b661b88ea95d2aa11828d7f03de77bddf371f4.json: {}
          9cfa0e217b251d4c4a0b6978b2d860d8769617670e15e17e6329d4f2664da54e.json: {}
          9cfa7a18322f095043804eff4db319dee7fa073be514f6da9b6648bec9aba04b.json: {}
          9d0e63b29daedfb66ebafab42ab514a9603db8d423d6d72ebfc63cf97722159c.json: {}
          9d1693c91163a04d5f8e3162e4f99c7a664adcea69a55c01e9e50928d82528a0.json: {}
          9d19c531c1f3b9374df90bd931201b1a41e81ecd04c5ce2b5d1389b32dfa85d4.json: {}
          9d201884c4e714cc703849291926754afdaed5daf15b0fa2084862aacacbe2c6.json: {}
          9d658bf388f78b9ae0efb500235941ff5cf4f31529ec9694e7801aa1178b5c7a.json: {}
          9d8075e04995b65aa1229a0cbe19e44e5c3bf542a2fd6114651e2a847b68edbb.json: {}
          9d94bcae87a0e5bb300e094e94d7f0ce083a7c7e9211542a385aee4fa7035652.json: {}
          9d95cbd2a9fc73d2181ae439c75383bc64327d5bd358781fd6dbeace7bea8250.json: {}
          9d981a91f4fb3559dfb207c77843982fc97a0e8e014183af6a6d56ccf05d065f.json: {}
          9da7c1bd4335ca391dbe3febea7742b1a14bbe0127b44759b16f8d10db5d2788.json: {}
          9dabaf690cac0ecb40d2f8f84b25d3d351b52a148b226ee25a64a9b83bacb391.json: {}
          9dbc8ebbd4ce47ab6c8c6b35866d3a0fb03c5b32e17e7539e7f79cafc7bee9cc.json: {}
          9dcccb62f9a54e25b57d95cda4536be2b2037190ab232f8c294b63422d79247e.json: {}
          9dce50e1e64f4a27f3606765b0ed9741979bff0223265e6725f07ee82f7d6736.json: {}
          9dd49d32d5c47379e1c0d57720beccf7a467663b2d879277902ce5c87edb4397.json: {}
          9ddf637c7b819e973b986ef2483752cff01ea571593dce15d0cedf2f74f6dcbb.json: {}
          9e026c83abca1962817ab51d6e309b42f01af20fcd8c940de123a0e8cd3d6637.json: {}
          9e0cbf22a80e52eb562004557e15eb1dd4accde60ba968f636c1c1264c7c99b3.json: {}
          9e4009cabe6c522bda6475255890c37f0f3f864b21cc585a4c509b2cf31fe417.json: {}
          9e400ba68be6bb03c3f63b8a6c505259291b9f5cefcb07781d86cf3d4ab150d7.json: {}
          9e8313bfd6e11b0957e7340ff10a9dfbfb3c04da43a440a707fa4d4dcdbeeb63.json: {}
          9e87e1306b43dff74f55edc87bc989efbf442ef3a0bcaf431dbada45ea37acc5.json: {}
          9e996f6c66cfe20fc20a93e32ba8a79a38e5779b45f77b9bc5dbb27d5ed999b5.json: {}
          9eaafa02fa403a21fd80de7b8848e42f32bba680d04124bdaab7255a35489950.json: {}
          9ece2d6b7b1ccc391b2b91e7830a6f81b69155be8bf093419aabed727718e07f.json: {}
          9f74f304e1c252c9481e983c515f0054cad9b13d3f1ddcc46089bcb34c2ccf0f.json: {}
          9f7568e3f9dcb978f0e88762edd1e2d4298275d1676d7c650b13203cd19bc2ab.json: {}
          9f84e5397909a11d520df450f0d3bef7a5669f2d84f0f3866a273b14cb7016e6.json: {}
          9f8dcc9d3f37713bfaaf6f12ec2b6636841cc797580b972e54cd30b3fabd819e.json: {}
          9fd36e0bf44756cd1003ba88f7ae6c18db9fba0955203f97ffd6ad243f848daa.json: {}
          9ffa6a668e0cb60daf87df19d7a54fac2fe4e24f7e0a648eff0d7a5fcd4ee714.json: {}
          9fff6599e68a2582b9a3f35fd0cd905956ea0cff3aad844cc286b263fccd0686.json: {}
          a036ef43316505dd68173ff6eb3a3fef10eaa21ab5e18aabbfb5c4bc99a55df8.json: {}
          a03ffd478ea06bc67744c8cd5aecaa8758015169100a48991c3d0ca33e69f233.json: {}
          a0631b0de7c1d81e78e4c6594b2d9066c45722fd1b66f1f9df58d67a8af9e626.json: {}
          a0902eb0719e2ea44b7df6a5ad2c4a14ac7427397fcdbff9ec5839ed0c5549c0.json: {}
          a09b321af7e6251ece2ee74ef71abb408732072e3523b5c9c26f788122d2a619.json: {}
          a0ac87704c5724ee283478b56a3a51562e9ee42de369539468b6c607f098adbd.json: {}
          a0ad21d0d779514d28461520570ba0712a084a0f4e12730c30dc8e3876adfc4f.json: {}
          a0b0ad6278de298c8b45c4205d3f8b76993b1e4c22d046e48b106de8feba094d.json: {}
          a0baac42c9210a755b8ade09c04a6b19131ad2f947cfe9dbbb29e885ed25b636.json: {}
          a0bdd632a781d430b1360c5d36e50d61aeacbf9d2a4be45f1dc2c1e1ce23e48e.json: {}
          a0c021d6a5698c1e7e9f4f9a3a4d9d4ff5166e8162e13309799f0b3269006900.json: {}
          a0c6c6a306c227a256db0b445142530b89d3ba9721ef3989ab96271da7b18285.json: {}
          a0d7e0eee3a06c247c381a3a2ebe10f59cf88d2e2d4011fe9708affb6d29c265.json: {}
          a0dd886f6e941e850b891448ead8a9666f43af489222e68aa6292185f6e63b88.json: {}
          a0e0a8e9c868a0cff8cd04ce09f5aeaee5f5c8fa8f12043cd34dd6cef62db581.json: {}
          a112e820a587823ed56fa4cb8fc4caedfcefe31453b0f28f18d972830615e4a3.json: {}
          a12751202a491e1a7989558b1e7793e6880b2da22cd02075ebbc26eeb2687aba.json: {}
          a166458bcc0f5bde908177cea610850ddce74b13eee383728f63ea3eb5755028.json: {}
          a17462a4d0bfbb931c6d521e2b4f1e00756dad28322575742ed1a6ef95c4f8af.json: {}
          a17620f08a21004dc989c69919296c5120547cc88e23bdb77365bbf680f63672.json: {}
          a180e4e586e964c147675a6e1dd997f0b9a41bd4ce017fe08af02882d30bf1d8.json: {}
          a1beb3f2c97cc490aadd31351c4771b87aee7b9908f82bb37b54ab704d1fe54a.json: {}
          a1c85aaf503a7f853b4c4494540f0f18a7090060a8a7f8d52edef373c3ee9557.json: {}
          a1cc431aa9dfdaa501772c4be773bdf7088b1870fac4092bd75521c41243070f.json: {}
          a1f44710ac9492ca5fba821b3d1a322acaa84c64c3908239aab074a324848487.json: {}
          a20a4224db0c523f68b4969ad262f6b6f0fd69036c71d7060a41fab732d437ef.json: {}
          a21aa484a8c5c4fa02f64a4c9b3e3526b287831ef1218b5ddc00048fb06ba7cc.json: {}
          a21b4e17e857fa283ac0064e44462abd0fb4e3dfb636f001bdc8a5f1f152fbb3.json: {}
          a2213fdadda7ca8d1b9b58b5fa28a664d9886b79f51fcb183b18f1a7abe907f1.json: {}
          a2398ff908cfd7e7f09791c5bc5a09acea22f1360c4df566d18cecf1b7ea4939.json: {}
          a257cb105ae8c0b2c2f3fdcea9a5b805fac6c95cbc010b4573847494e3b1fa66.json: {}
          a2648d0b7917542356e5a079242d42276b7a32f276308d9448d06cb2a42c26a6.json: {}
          a27cb95c81d1f94e3bce4aa532a174a774a3b2bb4378698bf4aa6d46345a843b.json: {}
          a286661168c5f6ea2931b84d465e91e3503d859b1a67a1d50366007755763b28.json: {}
          a28c1b393b000c259bb9c055403979dee01af9b6e3f21439fbadd9ef92f4fef0.json: {}
          a29a512799f644f64932963934a86985a415f513f499783b0895e1e5dc10b4eb.json: {}
          a2b4b91c73e0d779e57f0dcfd9e769175697157e960d57dd1e2edbfb3b93372a.json: {}
          a2d20c4ab934175986b460d8e7657833d393a1b9c2deaa15d9578e48f3afedac.json: {}
          a2e2fc58c604684d6cba4ffa76343f90b33bfa3cdc4070b7f8bbf36dd9928700.json: {}
          a2e8a569a09acf99a74a3a4cfc7596a2bde02f558168efc9d745002fffc7aeae.json: {}
          a332d04705abd8ea337d46d3e96f88b924d5cec82f74a92c82fe57ec0cdbeb39.json: {}
          a33346573691061fb81206d073507bd630a22c420f8702260198d808dbaa5e82.json: {}
          a35c1ee316ec0b6a24e9d8ab887135931c1542c8651ff4dd8946be908d0a6df4.json: {}
          a36844b116a53a33ca4b444559283b6b716b002e1977ce59108a434295a85057.json: {}
          a38cca3c0c0fe6aa6f9cad3a925777028e3e749ae6acb19503e3e56ad8f25c8c.json: {}
          a39119127f5bce659de13f571344cf7c9a414b6be91b6dc493063bad147d67da.json: {}
          a3c2f9c177e51fe803e426513d8659855bb2e64f8a8ce91ff6d4342f83395b8a.json: {}
          a3cde2a066f0424012fc9242fdb96b51a5afc1a8e956cee81f3912add80dd43c.json: {}
          a3cfe2a22f821b9aa0f08fa32d9b83fe519cdf92832cc2792814b691fddb3ff3.json: {}
          a3d2956c6a7b9b2c2d848a8a687584d070eeaf83f9f8595cca3193455c4a4b62.json: {}
          a420f9a97b3fe670796ad21e535a678b0e0eefb00591b979ece767a58d7ce941.json: {}
          a43722b34ddd70f935450686118a27555b379721602bb891a5c3059cdfc9ebbd.json: {}
          a43bc73b53ead1b2ee2e611fb1d7426d6247675e12fe8a76c3060b502b03ec22.json: {}
          a44c19d3aafb77744e98f7775e757d64489a73937a131c8a4e9fa8cb6e970fd7.json: {}
          a454920efc53d8633966e876af66d55f333b577e1be1ce6f515433f59ae0e38e.json: {}
          a45efaaf2953166ab717afe19130a935c698232331b1db2d2806e5a5161c5cac.json: {}
          a4715a0da2ed795261704e2dc154bedecfc027e9c0992a53b74cf55a4db97698.json: {}
          a4755747124e5c36365345aa0cc9bb1538f0a4892ac277e9600d029d37bbee37.json: {}
          a49132cfd2019ec384ad396741c0ea2254fe0f132497a52e7e806756ed141e9a.json: {}
          a49a1428fc88237f31e3e5d57f918e58fdb05a8d91eed31b4614c80a7515052b.json: {}
          a4b36ebbd2e3bbfd449b36435162cfb534b5cd29fa25b27c9157afbed0d17ea3.json: {}
          a4b3fe520d5945c9255524340911a437e99182e9c8b213b21b413e3273153949.json: {}
          a4b5cbacc7c448d78caea20d20daf6ffd970122885549c5d4b04a2000330d068.json: {}
          a4c7bc9509ae8616713158696a578ae5f948017ea8347a3c501e51ddf7de5f3a.json: {}
          a4ce0b89785023d90211c8baa817d518c717aa09224c8cafc38dc52987733ccf.json: {}
          a4dfa419389579b52a91ee586d6e7fb2e856f50161a9df84f82b94fbaf21c6c2.json: {}
          a50b345c6c31d33cb36222c15f5d1c4d6e69115eeacd90e576962a39a7b0b32a.json: {}
          a50cf4b3a9f8b1a7d4bf88ce94af7bde634ddb38adfb0bf862e50c005993336c.json: {}
          a51d5a41c16900c09b8dd2e5be7d0e15c638b101088b935a777de51435bb87bf.json: {}
          a5237634a964ea4b5e482a017f4f260b0ad0af11ca93a53d7ecfbd1ef69e5c65.json: {}
          a52ee4b7d09676b2d24b663560a7445e488ba0a379bdd2261466f71cc9fc7756.json: {}
          a5327fa4baf074cff97e0a9427d8d0de3090dbc4891b6be0e1dc7a4e23450563.json: {}
          a542b23fecc0b135fbb7d85dd51dd53d6fcacceaaa05d692ac01cf330c29776e.json: {}
          a576a97c9bdc2bf710540674ca3d2e268acbc76258be4c84aecc77c5fccf9eaf.json: {}
          a5a34f9f33064cbd53f0cf6265d9f73167ecfddb8ea6c053cb91b1c726ce5fa0.json: {}
          a5b16dc0db391ac2ee83c21fc41d385be2bf45f158a1d15b14fcaf18dda56ed4.json: {}
          a5b97253d9687bcbd7a85bd77dd4eae9464dd89e4c479c8019c1af4b2c6edd7b.json: {}
          a60e0fc9ebb8c87e0377065892a5f350edf4464d3e3b869b6780713732751f21.json: {}
          a62550519fe0c520668d32dec5fa9f02668ab1a7998a7a1de95ee22625488cc9.json: {}
          a633fa368d15d8918b84697f9ff01aba55215fe8d4cba4962aa0b216611013a4.json: {}
          a6371bfedc7200376f43420b27ce69f2fb0e25f8b5f268445cd660536e1d5910.json: {}
          a65671a4eae32f0803f7718661d57b85ecc207a12591ffab0fc4a1acaae54bdb.json: {}
          a6850806e38699055539f6ee388f2abd608bff86c75249eb927a52560c1fdbae.json: {}
          a687a03a30622a73dbfd1b404ab686267f8e45d5d844c898acb3d4b5a7592737.json: {}
          a6ccd18aa9987c9d7b24105ae24c1f7925d09bbb45388ce449b35939f773a11c.json: {}
          a6ef1d14e5da945a3d8270545c0b9646de2eb4abc92d02d4bc34560860798e7c.json: {}
          a6f28a4b6743b28a488405ce5b29814f7c67ced74e2b874978ccbe5623fae800.json: {}
          a7116157252128a977ab2f491331aad42f2e7155e50570c35bc13d58f5c90026.json: {}
          a712c5fe6b828cac83645cc10a715d4e2e339025d1d9b53885268990a84c79d5.json: {}
          a7155de9647f508a5450d2b1a9b91ee71c059ff7dcd0345918a518f7e118d738.json: {}
          a7422019a636d4196cf97c547a61c7309573e3069af4a0aabd74850066d11b6f.json: {}
          a76d12f5cb02e75467a8cb84f46265067fff57955f75f9bb0f8708ab423bc6ca.json: {}
          a7a00a8b993efc1f3b926af8e509e1623c5ceebf382430c061370be52cd903c9.json: {}
          a7d312bf02bd993a5b6135abf924e634c9be56a494bce03f933a51bcd7240c6c.json: {}
          a7eb66c2f6e2cb711c273bd21221a7c7bd290ddaf2eadd021defb474c9447614.json: {}
          a7fb440a44a2172e68d2719944f03512ba92b74fe1dd0c8d99176c9c0678ebf6.json: {}
          a808e58a9f88299f603c07ffd82c1b63a91190b8b31aa9925185fa4d0e9e54c1.json: {}
          a80a2f4ff6540a70c248914961d42bb5a2eddd4696d8d8b3cdcda34b840f3384.json: {}
          a8102aa5f4d8df1c9616fa17dc1145b8a3fa2df4184df06ff6fbe3e2b0149550.json: {}
          a8245f17d4a83f9d666af426f944cbc622f21bc4fb75fe596efef80bff3b6d94.json: {}
          a8382aeff9cf46b6ac0c8732d1b7fa7cf4a53410c7eb17e39f2776d992f00ff2.json: {}
          a8398b0736157e83ad598d8c30770f075488b27287e40747231bb5a543088119.json: {}
          a86bd41b93b6dc87d6c23336caec62855039a7ecf7b86c817bed00c6a4da3872.json: {}
          a875ec62045b586d4baf1c2a9965529ebabfeb517e3e167fa036f7020228cd01.json: {}
          a87b14b59ec40e7247bef2b0729923f75ef5c7dd533ca3e8e97a7cdfe8497e7f.json: {}
          a89729ad9f07f4a9b69c88b6f020fe7ea52ff5370bbb7e92fa6c24047d10b5ae.json: {}
          a8acd541931b9562a8ac465f9a27028516cf159fc5548a8a8e5cebdd90f37b31.json: {}
          a8b38ef73386d1b18d9b521edfa67ef44600a48f93e9487c192de28d2969aebe.json: {}
          a8b7ac538d84840273e102565715e3a4d575337e173f2077a3bd11129bd34825.json: {}
          a8ceee81832b455efab144328e7a18caad65953e07600e9a9b2426c842e5887d.json: {}
          a8d24f7e87a7c1cc0e5d9cc6622fbcdb8f85b0377ba3217bd02968c0588c8695.json: {}
          a8df36896d8f19538bb8601f3db8242a268abaf08bf328c4f2dd947a25cfe4e3.json: {}
          a8f158f6d6e05a3bc55a9b1892b64de294364920eea5468410af24037b2ebaca.json: {}
          a8fdb3f0e7f30133bacb88f977d68eaaa6e35a17da1d18cec71edf3fafe996c4.json: {}
          a943506db8de88f7fa2c861fac0ec9ab567a708448a79989d902311fa7d54926.json: {}
          a970ad4984b6ea22f3be64f53a3d4498ec7ecdec8099baab2363c2f521ab5834.json: {}
          a97414781295e3db4cd974edc53fa76f41985d8a99c583726c0f14de7e57b0f8.json: {}
          a97b96bdc2114ac13d4869422488b369e9a64d132fc660789eb540fbda7d8dd3.json: {}
          a9bdb24134c39e74f16d238a1559398e58b39bd1e8e278726b263ff71ea4d904.json: {}
          a9f94c619cd4b6aaab4cca384d879a6039bf3a7147b0120db16dfeb131ab778a.json: {}
          a9fe4c9eb98977d4858eb0e66ba6c72460cf862f16c084732c7d20a46f00f537.json: {}
          aa031dfc5384acc034e483417b506a49f792d07c0b6e9308a4053c9eb0a30b33.json: {}
          aa06413af201b62a1cdb1ee5a949ff858f513aed13424aee8f695432a89aa32b.json: {}
          aa09204fda3c0ee673adcf818f77ab84d0acf311e54469846953305df3605fde.json: {}
          aa2b651e2f547fbece8751034368534dc99981f68a23b77b94ba6400542ed9f2.json: {}
          aa36d53d420149e30148b389c9d693ab0920591f99c0ae20f94ac20fbe726196.json: {}
          aa5b612021611198e75e7bd0d3f0aee6892ec65d63b6ca8567571d95779333cb.json: {}
          aa760d7f129d5a8f6e45ab398e949cea2a12a38a35fd6b800f02d3c80c0c7819.json: {}
          aa88012398fa05a47c4455e33f96b9c0ba8bcb057f7aafc4ffcb0f6f2eee4053.json: {}
          aab6c378ef90a6096db11652c35333cde03e15593d79bbd3e4006a71aff6bd5c.json: {}
          aac1f0adc888abc66e56fe34d3705ac4da4d52354deb4e2735decce075db556e.json: {}
          aaedb8e3013ca7e67ff2c5b6cfced67b6889e6b04b6bf3e04b8318f93bb1e5fe.json: {}
          aaf8660ba2adf55a736f2fa7ecc835ca5ca94c7d2c3214363a396b645c282a32.json: {}
          ab1aeb51e6139094d8c9897dfda5e7a2efd43a85d0d1aec8bcde33b7ff82097e.json: {}
          ab23a9574ce2475fa060c429f5ce5831cd2ac2fd67c40162ec45f9ab87f96399.json: {}
          ab2f7483aab4d3d15b6f85af5c892a97dc30d20907cb32e3b1d871458cb208fb.json: {}
          ab30dfa35630ecbb3a621204dd9ede9dd98edb051cc4a018e9b03920aa914dba.json: {}
          ab366f3be2e5ab7f6e11dcc06a71252cad28d7a7252c660180276c3abcfe2175.json: {}
          ab46a6a9e3f7303fd467c79bd6432fcd33c1f87b5d8a351b8e9469e70aca7371.json: {}
          ab571eeb7aab60f4c487e10edc658b906916b9bacc84ac0c9a6d611c38371249.json: {}
          ab812cef3dc9bcdb4f09f279e50710fc8d268dac06d57dbc2bdcee7973c34c64.json: {}
          ab934e2337fdd08bf2c120afd7353ef49ecc0f09b094a300402d05d6187985b6.json: {}
          abae45e80cce4e2d92b188cfa91ec8556937a5986771f2c6193f09db161b038c.json: {}
          abb58de4aa75e797381475ed3439e393b14029cf11fc4f1eb7e7276c5838ae7a.json: {}
          abd638e416168fe07cac9c7457f7d740ce89de244696258a94c7aab7df4fc06b.json: {}
          ac068b81d389a2ff0cc6892e7f7facc81c44ca8886c791e8da5aa088bcbe1862.json: {}
          ac1965185b298a24162d86b94afc20fa32fa5c82c2b61572e0b99604b0b52b48.json: {}
          ac35d0e2bf4eabaab3572591b5250550dfca7b419754e98027f00ef1331e6017.json: {}
          ac368cc06337b123e5ea5939ecbc8ca695cc10cbb9c6ecd95745e0440ef22bd0.json: {}
          ac3b1de89155aab295b9524f4404df8de580ed494e060c8214cc575506b36534.json: {}
          ac3c1e90b75ea795dcad08e500dd1fa213c653ae4f101f3fa7192c6585a6069d.json: {}
          ac85aee4058760fb92e579048e39ba3a4d40f439e88a19ae1f3e3e03dd75a307.json: {}
          ac8f3f04aa8616f067a1181460105d3b68a2ec8350925087aef014c5c0b7f857.json: {}
          acb21f5b243175dff178a897954c9c12cdc0fe1e4018ed309a4585bc3049c0b8.json: {}
          acd5c7cdf617fff86d8ac6afb6777222c9afdc895457dba25e48f3ce643e188e.json: {}
          acd7a52a192724b7c41368bf2c7b1721156cb8e9c016d195bd202b1b366272b7.json: {}
          ace8057bfb8d6761e3bdc537bbf03a25fb5b7ad702e491e25171f616cd8146a4.json: {}
          acf0d9711486dabaea25a6a068f963829cd23d172700d737f048dd0480658a4d.json: {}
          acf503674db4a9897317d26ff3c0f84515bdb2f008c0d921786dc2b3bace1ba3.json: {}
          ad13ed62f4c86decd4f88c3f10f1acd9fc7add0af1ddd7a11bbd3a2fd0267f5c.json: {}
          ad1427f298837e3afb60a2d5ab64498f56693ef33f8d88919982fec47cd4a324.json: {}
          ad32af324ef57ece186f232e84c96ffb78dabeb2132527907e3ad53e4bedea4f.json: {}
          ad4e32eaecdb248233d767d6cd7f24844be9f6abe1803dac3b4185aa73b9f33b.json: {}
          ad515368ec7eeb127f1f9c65f97fb84c3edaa25a712093ccc5c5f52abf3e8f32.json: {}
          ad943b95b401d3557789568e4a5304ed6ba3a35f1994c6a25112876ae6e4b0e3.json: {}
          ad955ef4c1c743d8432410d8c3eec8333b3de1df9800eb38143371b741b06bca.json: {}
          ad9dd9f2cd434cb662628114299cdd35b8ccae253cc134dd2f989a119f6c9ec9.json: {}
          adbce151c05a56c1cc2ef464b189f33b7a8c88c9633ed7dd57429c1d7271b85c.json: {}
          add8cf5b0e52a1f72d6a97b98f7ad9dea7fcb300cf7db8668a21ec195cdc5da3.json: {}
          ade7c18301a946a89f343cb57464edad968e207c756a23992cc8f8046bb8688f.json: {}
          ae177e4f7dc24c3c485001a1f181166596fe692359367ebb16bfc1b6a6f83c5e.json: {}
          ae1da81ad262c250dc7b6a8ce7b1a8de3b40c9fd6f8efdb1ae9fff58f4215ead.json: {}
          ae2ecd61a6a90ec36521ac45891e2117ba65953f9da2ff2ddb1752604dfa9ea5.json: {}
          ae3ceb45cf4d59a9c5cd3a340175f1edde2b2a989db1786e6fe1c37c371a777b.json: {}
          ae50acca1de7a2d659a758f322b6560918ef3aa268257135dd29f563ba0fa91c.json: {}
          ae5c974ac9d215a1767ed82a9a0051d300fd706757a8006a157bcb3c98357e94.json: {}
          aea8476756c23a2771651e2603df91ad7e7119d3d349f0d2f1579991e05e327d.json: {}
          aeaaf04b4ae3cdc8c50ce069b83867cc763c41aacee4924817a0a03274bf0359.json: {}
          aeb9b276b062b0cade8a9f3d00b08dc8a101fd7faf40f89b42ea06d1ca04d1c6.json: {}
          aec017c19a6a57c4a184c5d7b38b6ae426e20d37ea549cdfc9a8bf3a2fab8875.json: {}
          aecf4f7dabfc7786bba12333d01a13c61d111501aac38aa9b9a5511cde6cc4fa.json: {}
          aed669615b9e13d2d10ec8241e13da2c8352c9cc06a7868465c958672ca18d1a.json: {}
          aeda1a4334e2a422dcd502382da8ab4b4acce73fbd10c3e12be182dfb63e7d52.json: {}
          aee399c88dff387f1e5e5a4df36c63a1ece7755ddf1e83ef8a22e1c995959c66.json: {}
          aeec7a2c4a7a173e7111dfd282aca3e76ed29e0bc77c1bf81136de16bb1723f3.json: {}
          aef29e195cda4589c74307fd09c569ff038d407c277a62fac3740caa175ffeff.json: {}
          af00e59ca308fd7a7700b93111045e8459b955f594ee95c0db2a4b277c4d1f32.json: {}
          af06e2470b6c7eacee4e48fe1cb42751d7c3ecf005a3fe23c6afeba99d1428ce.json: {}
          af2b23ce7bbdc8cf34c9932e0971c27a6c35bce888e89c4b7db9e249b0863bcd.json: {}
          af32edc62ed5a3b6aca22363ffee88ed4daf66cf84f9f951ead86c2b77d358cf.json: {}
          af38958c5b888520a32b816b8b24f3f058ae4bece6f2e3614e94a0f4786aa801.json: {}
          af5ec59648c12d7a53c6cdbe82e0f2e8c2b756e71cf00a59416a0f30954f8e54.json: {}
          af6313582d7f6b9c01387601fde0e9503013ee6841735106ca28a54581f9a576.json: {}
          af63af8b73dff97539290dc941bcb0cbdab02c2f2065ea62d4cc3805f2fff18a.json: {}
          af752ddcc10281e5217b777a731e010dc726afd9d9f7a3b60ef3a9057d591289.json: {}
          af848551fc270fe93314430a15aef62c7823309fa0f958bd4c7701271a864f18.json: {}
          af89674ff6472278e64a8b1000168085b876783a8782a70e541b75fad69b56d9.json: {}
          af8b5cc00f56be151c1cd794face796e8e4a3db487e2f40a65409932bb47891c.json: {}
          af9e60e1baa29500f0b70280c2a7dfd68a71b55571405f8a210d752afa1fbc8e.json: {}
          afb9be1678b5e9ae6e9ae0682d997e4ffe91994de544e1cde83c79757ba7ba75.json: {}
          afdd20b4efe8d67e55782527277a3c573090197ac5b78c709a14a9929aad964e.json: {}
          afe768f87207992359b001a070c9d51e4461b53128f2f669f20d5474ecd592b5.json: {}
          afeeb77a96a6184c2ca4231a525de0daa8746b84a26e56e1dde00572e636071f.json: {}
          aff6da8c3b77b80d87fb64189b04591b5d4ec7bbaef7693d3cb266738ae11959.json: {}
          b00d74ee09d5276418d698952628397698f0b29fb477e8bec77ff47236443c4b.json: {}
          b014ea012b7ce48eae02180c18ef65ecd3b3485b25b166e942f32159ced6d6f1.json: {}
          b0286fed1aa1539889f6b2856a2be41469626059d7d018db32521fb1307b85a7.json: {}
          b02cafc5150a44a1e5406254b672732fac0fd2b37902c637805e7b8fc33505ac.json: {}
          b02edf85a6828acee7fa76a38081aa02cd79e137073067184c96067af0830177.json: {}
          b03345b6f8c0e65d20f147dd505f29c2029d678948062e3ead62e8c9cd94f4a5.json: {}
          b0461929a22e4134daf20d6aa66f6f61ae431a07d22101bf10d364bdaa9637f7.json: {}
          b0493ba5241e55801a9dd95165f9af561e34cac2cceba028c2edb868cf8c858a.json: {}
          b04998be9acaa8a517d544da1b3204e5b666760009b4a561cbb6819655f5e132.json: {}
          b0660328ec2aa9cafc18d93a354fb9d0f5a75718736161040a1be0f267b5ddff.json: {}
          b06930563d21e7e24e8d8028e937435a0eed5d88d80ed063e8f826fcd07868a3.json: {}
          b08f5596ff1afa9c4c961fd38a542800fd9b08ba0911d6fc16a4bac0e1561f86.json: {}
          b095f7199825fe67e6fac35e5a0da791a4e19f15e117817c173647d9b131a315.json: {}
          b0cda4ec4b3859b05b2da6310cbb7b784d3873f970ee685c1e2ee5104d2f6614.json: {}
          b0ea3fa5f22aa1bcff22965a081cdef5a295b0ec63594188322e88c335c31972.json: {}
          b0f183255365a4b7933d03643de607a0ed67aba52ecc97e9e1bb528841c71bd9.json: {}
          b0f7f2e5b2744381168e5f1b387816819ac222007eed08e41ed4e694a73e7d52.json: {}
          b11b3e0fb15e132b3afb709a103d2454abb08606812574f5d9b41340563a3cf3.json: {}
          b13b5fa5ea95bee842e6798266f3a805595671dec85323a87c66a5d2b7635a4c.json: {}
          b14f73dddfa051e0089ae1c1449593f2a010bd66e36bbea60597ea7fd8ba4b7a.json: {}
          b1754fde5db8e90029cddd21947db377c4a88f0231bd203147d0d1bf03f6955c.json: {}
          b18215440b950b21615cc6421bd3fcc927b69ee10925d622ef48b8a7f69e8fe0.json: {}
          b192ec0d2eb4edb58c31d73618712ef8f1134a3f57d0ec80fede759a9b1cc49b.json: {}
          b19ee4d692a6bc5124b614452a7bda2255f85d62ded817e891337a6ee1816ca3.json: {}
          b19eea0d72cf21ebfeab513ddac86da19e8ee6a8b6daf976860deb4924360988.json: {}
          b1d0b818b15bd18f24425dea926c8a53b123b26946aecde4ffa8974b54a00a1a.json: {}
          b1d8deb342799fd48e3487618c46084264643be8c7572a46f547ed3b675e12ac.json: {}
          b20417ad45780ff388559995edc5c5fac54d15ce1c176d4d818d3c00051cd8ab.json: {}
          b204d8d32016cf359cc6752f06c62ea62f7c33451ec6b6fa3f41f9897a2c5c88.json: {}
          b21436995082130914b6b68d30c74a369476a53ddc8180f959ab9b83b8977ddb.json: {}
          b21dfb841bc77d6e5235960f863611c8c604a758b201975b3b67271e3dacf0de.json: {}
          b23e9b33ec564041e086b8c1a64b5c4cb7e415928858f1e89fba19c672e212e3.json: {}
          b242e21adc1b773074d51da15d88e6909a4cfe4abaf31fea5701fe9c00c7b3a9.json: {}
          b2444763c747010836193191ae932737714b1833f962f53840429d1ca216ed7b.json: {}
          b25f6295a96889d09ee56137fe66afbbbf86091dee6d00a90486670b724dc895.json: {}
          b265f9da392fd64325426a69606fe85d688fb278ef03022fd2dd09842d7f4045.json: {}
          b27c6aa4e2d9c372b785464d3d148f447d738515a8aaf8384c00273159c19e7b.json: {}
          b2807dd16877bc32619540e17ef0134878249d0a6dc19ece63f05adb193628e0.json: {}
          b28e52b90e1d5efcc3f8f3c9612557b23f8c053a9b65c88012c755e8be07ace8.json: {}
          b2b3130dc9f03deb7ed176c3978ed12501324d69b0f19665321de668bc4b5bc5.json: {}
          b2b571cd0022e0c2d1cbdf0546bc2b980281cef2f3c11054413242224c99ee22.json: {}
          b2d8742d093a953579cb64d944fd08ca01c30cee4fd76b74a5f62d6bbd025f6b.json: {}
          b2e0e51ae2376ec18a3d919c19d3e9aac597a8397f77edb59a2be1dcbe560b0c.json: {}
          b306ae40ccb976e624e103b06d50532fccc18b7ef75c8196bbfeb8496dcb9600.json: {}
          b32c3a7f8cd225ef37b83f6f8a68edfd5d1a3a048431d5aad3a2d8e186bee03c.json: {}
          b341301ad2dfee67a1a6d275686ee9ed4daf7e0e8e797920575a7bf4d37a3a95.json: {}
          b346c1e2ea0b12e6802b59c7a7d7b191d3c038847cf28eb586d2298609cd33f9.json: {}
          b36a7d87952e2cfef1ba0321f3425be7cb0373849763afa13399b36c698d60f4.json: {}
          b36e44a4e1bdc5645e3bb2757ed1fea3c32c1fe06f9a8ded50edafddb881aa9c.json: {}
          b37d2c21f969b6fb0f19e27ff894605ccdd3d4018b41ae6e104d51b5bcc89955.json: {}
          b3a60407e984ac01904ea37c4209033c0255d5506c8cf34f54d31a05aaf72796.json: {}
          b48cc0a990042d668a8ad5a9b034fefbb3a2a432aa7d25f6bbdc815b16fd1e75.json: {}
          b495b414cf131afc08144a433c6597b75c3f740dc51c39060258e0162c58f314.json: {}
          b4a23b3415862812f68e65dc238a804433f5655e8082894ed452d3d61b644107.json: {}
          b4c029edeee37a9b3329f8b0cdd14ef70084120134bccb496acf0c804e3b2b6d.json: {}
          b4f5f8f646caaa58cc6510f83ba64107e23cd53bb14f66d07080c13fcb028f16.json: {}
          b53a7b337a9861221b57153b2b556657a6069f69e7707863cc04f62e9b64d6a3.json: {}
          b54259abe5ba694843eafc8709819ffdd6e6183ef444a012b2eac98300f22c77.json: {}
          b54877940532816b0ed6b814152d529d1e59401f1b11cc28513cd80dcf741f20.json: {}
          b5551bb266537fbfb40c05743fe88a2910606085f3444761d3c669765674e685.json: {}
          b55fa994b6399dc2df8a57598f22cffd8a068c130b929eac2200e774af17925b.json: {}
          b5ae2536cfbc4a9d861b8e6ba219d29f677bb5c7f61117c2fa03c2a15b63e839.json: {}
          b5d7d421b4afd10a2616b751b5791d4ae9f52d55dc4e0a2d54e7d7d473908fd6.json: {}
          b5dd8419539c80628fa4621b7ffc787a57516ccff310a8283b29d506ad318a01.json: {}
          b5fc12664fd203634ee12e6380b067e31cb3b14d6deae315622ff91c62e8ea02.json: {}
          b61adee17f2a44d340ac2b0923c596b2ca1f9f3663eb5d9b96bbf84d3897db89.json: {}
          b63c534c84da70504371630f5235e862635ed353d952902d778fbe3af52804b9.json: {}
          b650f5e42d8cccc33f20bd8d980c9af2f11c4f7c6a7e2df00764b9e419777d37.json: {}
          b656777d18f3cd92e3d640f30461b186413edc46b63c51486633e7e4eee1f664.json: {}
          b6754d37bb8e81db76e30fb8cb504ca7657eb65cb14135cf95cbf5e93b113bfa.json: {}
          b69eaaf29ef83dc43ee8758fefdea7e4aa79b18415df834fdd8f49a1b442444a.json: {}
          b6ae09a1d16b041ed437df58ed66a4cd1b60b35ff5a730676de93fc6466cf5f0.json: {}
          b6b76e4139b8c924a30ceb850a0a5c9f94701349bc3c021f82d239676869d3df.json: {}
          b6b9f0e98e4b3405cdb5dd544f7e81d7131c38a4d76dfbad3b0a36f77cd10ca6.json: {}
          b6f883684c5bdd37592510eabf00e7d8bebfe3df0c21b1ea01db3b72d37856c1.json: {}
          b712d0734b82ef92b5a48ddb76f7b54839bdf5ad0b94bd3f9095972de61a3ad1.json: {}
          b7265e581c1c15202bda351578ae88f04f12507dd00087a3f8b8060078d52d7d.json: {}
          b735acab4497512ab32622c79e17fa627f39aa506dbca8c0dae22b5fb91710b4.json: {}
          b73cdc514272426770fbf1e17506d122a31a892d68438e49e963de0b334da287.json: {}
          b74a8566eda58fc91ac7d3ff5ccc3efe02cb963e00ff591feef0b7c29d6f427a.json: {}
          b77025f384c218d1075275a9577c5a48a140a4fb92fb89ea3d30a11deb09468c.json: {}
          b77a600087a3e41a5daa1d0e4484537e1411464b974047ee92fae6d57bb06a20.json: {}
          b790a238147b1287338063bfef6b1218e762eb39972e259c8448718aa6d65f4a.json: {}
          b7ad07129f134cd15db1956941cc8d33b0e2e9b0f93e13248088aaf9a85a35a3.json: {}
          b7c1d3a0a703dca3c49e65bc9e3e6af5b4353a1a9f8e606a8429c3a190932de9.json: {}
          b7d304fcc5e1c11e4bd9a16cf1e731a36d1da4722b0fd0957d404bfaf68da5bd.json: {}
          b7d81c6967ce3ba6710a8b5ef9d9b60483564af448aa10290e7dde8f2493fece.json: {}
          b7f3b91f76bec20ac645af8d73458a11720b37b880aeb8f34ab366f7cc426ede.json: {}
          b82eb09dc679dd204c263d8c56d6f08f6dde74dda7cf5682923b14801f50e4ca.json: {}
          b8465c8fd78c6f65a3c3110ad00dd347bdca8cf35e5553c6cd65cc4f18f4e5ef.json: {}
          b846f0b541a1c3bf936650a2e3c0f228267a867426457a3e5041cf5e2c28cffe.json: {}
          b849dff71153022a06ae5db44e12fe669f8fec58502ea00055bdb91d12c012e8.json: {}
          b84a0b9dd1ebf910c0bcc9ea7184c4c379933a514df18dcf4b11080da58124d9.json: {}
          b84ee21638da7d4bbb77dfa9854faf9ee4f3eb7631d59ffbd04597c3713e2a10.json: {}
          b8568b243545799e65895f4febbd8a5332ae8b13b9914486779c804cdf2f3ff8.json: {}
          b876a59745a13d37f751a1cf21190be70c35ee9cc5aeae0122de8d584b7fa71c.json: {}
          b87c681aeb98f113046053c9b1e35c4dfe60c3b890979a14b5a9d0fc125ca26b.json: {}
          b8b731a0e282a1dd11b69cb664f14f809ab0101d0efec74a2f2539c0baa050fb.json: {}
          b8d6ea8ce03d8c54a54699c44af4709c7fc30cfd1048c9ec841fde62db587110.json: {}
          b8da6ef76a2993b38f75bc61ae6f047cc411b5789ab9349a5d2dbcad9986314c.json: {}
          b8e06108f4a2d7bf8901131aa23e79a121286cd5ebce7a6d39d6924a8ccc056a.json: {}
          b8f89d682b5f77f9c2784a43039a84c364f4546514051ca4c20a956c3aaedc70.json: {}
          b90d9cf280f6b4597d1ab144cda9bd84d18b8f8ef2228e2f84bbef7fa79f8ca7.json: {}
          b91c380744b66a446194a2921d29fdaa218879c1656fe96576a1b6a61408b361.json: {}
          b91e34561a36373bc3f6d4ddc7245c48c397f3493f503c738abe97aa96bf9587.json: {}
          b930dd969e73a91c6e73e16d6bb2d66f734470202e9b57a741bb5c1acc412771.json: {}
          b937f6aee09c3d4b98313d74c44393a667b1a96180f4e8dcad7069d799ced905.json: {}
          b9389a93c7600e4cbd0d6ee1c71eadb79c8231b98614d1b3184131627045ff6a.json: {}
          b9545e84aa3224c510a72974876a9de02c4728dc1c06c595edf83dfe273cf113.json: {}
          b958a6204d78b8a2383d44378b800422e5ba6ffb9a07de3d51f20f706138d3a9.json: {}
          b9619078aac427bd183f5316791bd6d726bfcd6d1c0fcddc185aea5fb0ac6247.json: {}
          b9935fd4a09c80600b1142e86e5b02a31b68b7ef753a5d4ea446f6b631f57063.json: {}
          b9b4dc19e2eb8b1a65b7890a6248e64285c9a61cd49dfd802c7b67b7279d76ad.json: {}
          b9c3d248300cb452c85e58b8d47cb1c46d0bdcd9cc67c27ce0740ff874243a5d.json: {}
          b9cc71356772215cb3ff0799ebf919eeafc373e36c75d8b25500c2f8c03bc13c.json: {}
          ba17920f1f65309cfdf619dccd2869347bf36432c2727e830495cd739cf16e38.json: {}
          ba1e2b0b47d212a5c7e13c0f72954bca234df82ca25ca9be959b65b0f7f65cc9.json: {}
          ba2a490ff4f4db32ffe615c803439ef948818e4293ad3ef4070e352a5c94c479.json: {}
          ba67ee398e4f7f9ae241ea87335744f8ffc337cc24f71d6238724cebd10f6d88.json: {}
          ba716f59177cf6d7a15428a56ec4281f8b09c6e9687cf286d857794e0bf1bd2a.json: {}
          ba7639e762dd46b233a14511e7fdcc9fc0337fb68f6132530644d76c3fe9338a.json: {}
          ba958c523b9e29d11a8585627e193590d7c599980c0ecb36ee65e89009799e3a.json: {}
          baab87acb6aca50a39d5d887dd6b3f776736c28ae54004a5fa2c1939b639dbb9.json: {}
          baaef657a6abe1b969aff8614b59d0005da76bc3aee9073dedff2067a1a719dd.json: {}
          bab62ddaf2e66a6b4abb664919a554d857f8c3add401a4c7e0882749b478dd71.json: {}
          bac4b73bf64e7a1db578b1bdc25c70d473527dfabf62c92f96a3b76fd02010bf.json: {}
          bac72323fb421c212fb31d861c684e10899776a23a6ab46fa1a8d7bb0becd30d.json: {}
          bad3117610272cca38728a95a4f06107f1c4413b9be522cc2ffa657ce6297aad.json: {}
          bb29752ef234565014c7c118444e21580fa1f7dd8fca58ac60d638439223a3fa.json: {}
          bb34e3b8ed7d4c94d614751f3c1514e7eb38a91af0f72153433b26dbc1459fca.json: {}
          bb60d06c44f578e106a253fe271099918a755d9601d5fd69edcac805093f59a5.json: {}
          bb623027b7ded8ab579f2a1d1bafc46f506a556c32a75e49af002c20b4479ab3.json: {}
          bb6433fb98b2b1c92a6778d206df304762dd8770ef46ea83b799047674cdea7d.json: {}
          bb66bf92975b07c364a97bf5450a09e86e44967eb6a09195eaa94661c26bde9b.json: {}
          bb73ab516d6e50b3d5e073ddd9b546cdb29dec49d1a795fdfaa57d44eaeb18d7.json: {}
          bb73fc4b9887bf39cd404bbb074736bd09c086c06e0c755425bb9b87314bdd5f.json: {}
          bb9dddb54e10ece367d2fe1fd2d434447cb9e54673b2359072603f558599de24.json: {}
          bba8c72dd63cfa3355f57e769704940370612b087aa9bb0bd75c37db79345de6.json: {}
          bbae243c141abc0911cc17897107fe1627080fd2705bc2d42ca966435e7596e0.json: {}
          bbd192a8f4b36d67ee94808cd27e86a8482d87dc5365695f531e402213f36b6b.json: {}
          bbd859ec96ed58911a62d8be977991b79a9dbab83a3f46c7cfa898ea0c33a772.json: {}
          bbdfe4c208aca6e8e4ace000207aa22614fe86a6fa3f8203a026e2b93601674f.json: {}
          bc3169180b07c9e2bd55a645fa9dccb9a0e54d34a36c8befa24a4744ab6ddde0.json: {}
          bc3d7c482944e1d3937980ee6c3cbe5e51a0140f08915b79c990d29a0e09d9f1.json: {}
          bc6663ee57937f04af7a81154f84db26ed1ce5fb9928c74f05847e33b9a1cbc9.json: {}
          bc746f5b2e859826f61b888bf8f0848341d4645eac91fbe7750fd54a12bca338.json: {}
          bc81e155fedd012123cf2b9c5585ffdb85ec13d9f19d926d7fb346fac6a12b89.json: {}
          bc8886d9bbf9a8ec8057f8b086d9a43a91d4441d07f4a27952ab27e4106bcda1.json: {}
          bc88d41dfcf7605336c44c1fbd82b6007752a3fe42bb69b7a812da5811979413.json: {}
          bcac6a2714e025c9149582f458c41e8de287a10ce49d10ea1fb63d5a34c3260d.json: {}
          bcac7bdca8da4a9bd6f39c0befa74ca17db315edb35d72defc25916f46e38d20.json: {}
          bcac98409023b897916f7b8aa9e89d38406f3abf955fb611a08d08381eb04b0b.json: {}
          bcad7d7ac812085b6958b811bc8fd8849376f37f946633ce9fb20f475d434f15.json: {}
          bcb3a08b933ccd6aa5f8ff8797ca09739bdfea4e0bdc85c8e6bc8f1f5b7a115d.json: {}
          bccdd35cdea23d3b2e54abdaf8395db40885c5e0f0af31a9ce6b8d63466f6658.json: {}
          bccf7d2bc73c1b7b8ba0e34047190ac2193f8cb1a10b4bf2538e661ec2beb00e.json: {}
          bcf646db5c1370b0013da6eae8cc789e434d8efb6c23bacb5f2f8d79a10619fe.json: {}
          bd1715af441c835aac30190fe6b9643cd9ccd9bea1e6ad681230a59f2db74dc3.json: {}
          bd2336383956e4627c157b0ec8eb8d6f477e9606b8b75d79dab9e8ba425f7ef2.json: {}
          bd45c9167a7e562b68fa13e5488904e0aaf8c885b716c5647aad63c4468d31d4.json: {}
          bd579452c3f5dabd51617d77d0d5ef1ae3eed4d1e10dcf12d8bcb95ae9ed19b1.json: {}
          bd598ef89d065b228186ae2065babd9a5959d5d3d1ca86fe71d186285d430f23.json: {}
          bd75c7ba96d281ce2655e17180664f15b6d0b3081d5f4c4332da79168aeb6e57.json: {}
          bd90c668be0bc1b45882b3221d7f7495457a9eb319db7659f81941264ed33f50.json: {}
          bdb98836a5a5099b014e3b807f687470d3029d5cc9c5bcaa71405dfb1aee9d55.json: {}
          bdcaca60f7325ea4af512f308393a0f7942c165a8461531d2db6018bc1fc812d.json: {}
          bdd4c307bc5e161d02393aca0c34db49eb2885589675d73008cc811d1bebecaf.json: {}
          bdfb1f4840296eeb74889828176eb994a5f8ba7c6bff4678acab09436fb5852f.json: {}
          be61c6575732cae5ddb0011c2598276d61e4d832f05a589adee10436881b42fb.json: {}
          be8f8441efbbbcd53b18f2cdd21c27593352cf1f3d05f50c34befffe0ec14b9a.json: {}
          bebbcf815f85acbe4d2dc8ad62a29167bf141f15b7211b8cc14299ddf93469c8.json: {}
          bef971c8d5820190712a203bf250ee66f2a93c51f018f36a9aafbb67326b8c37.json: {}
          befc7e337a9fbec8d0556088b42a1eee6fa4d05b05115bb5a9376f60721892ef.json: {}
          befe1582448e5aa07798eade719b2232b44ce14c7acb19be879c95b15bdf7e29.json: {}
          bf02ea82eda57909cb0623b153a5eb0ae9fc788a6c22273935b9e32c0bf828c4.json: {}
          bf10259dab08ddc65661e6ea6e604244b15265b384806b406fdb92a7ab069f6e.json: {}
          bf1deea1452746f5b336276937fe34794d96bd5b1fa986e355283ff16ed1554e.json: {}
          bf4f056fde4a760d1fd878ac06d240c29c92ea89af23cf40c56ae467b21d76e8.json: {}
          bf532f9ce634d7049df8bef959292cba3c7ba62e41247269e1f3e0dd4350723e.json: {}
          bf54ed37b16f6c63111f5d88ee3fc107a75374a451c7198c05b37bb122ec49a4.json: {}
          bfb6eed64d5844fadb4be920e70341bcc4b1519bc14c7b0bc90f9dacfc1b2307.json: {}
          bfbc52b000f3fee75e82dc634fa911312a912c57d2bd4087ba715b1d335ab102.json: {}
          bfd0b2923eb2c83752543fbdae723af823f501f9db486e558fcaf75f0ed7ca0c.json: {}
          bfd16d8f359fa3d645c15179adffb48ac2d669f7500e51d6fc21e3a48402bcfb.json: {}
          bfdc9670f4d9318ac52d2a72e3f6b5bb8d6d0a6f1aefdade17d9ad375be842dc.json: {}
          c019933385b903d2ad0c586020cdad26d4276070076ea1a24a62069f1962c35c.json: {}
          c0295b602ed30c15cf2ec19cbcefe3910f13edb7776d218c924b72ade363ff38.json: {}
          c0336d7dc1546be177c85bf89198a7cd227c22e92bc6b930520847121209dc7c.json: {}
          c074a40a2c7759650e656d5f917b10d37f8970718cbc83b279c8ef9d884c1410.json: {}
          c08770584b012af6d16b5ffda66e31ab341244ea98959986ae075118bde8d83b.json: {}
          c0966baf63e8c7461557c4446f93f8cbee95b5bc4a8c73676d8a904278753dda.json: {}
          c09aaeaad11e3da25ac1e20f7a93d3afda4e1563e96c99bc5489f62fab6fee1e.json: {}
          c0b43d335c0891c7a5b15acbdd96b889127cdee256dfc87423585d76783a164e.json: {}
          c0c55b80d706de13ac65dd7a286b0fe5ea0fbb2a12027fbef8026af9fb74be20.json: {}
          c0d1e84387bc8827936d04a611da472b70cc67d0c23c57bdc4e103feb6d48eaa.json: {}
          c0f211fe2fa6269f7d6ad9d7f0ea9040c876763fc5544e012cffd8dfd57645be.json: {}
          c10dd02805831eb1a19f9253e7a2c2c9b5d82234f71c20a6b722e2102a8954da.json: {}
          c10f8c0657c2b90b24b952dd4ab4ec993727b2f67ff3cb555d4781f832624363.json: {}
          c121f16415c2dce5cdcfbee5667c116a569c4bd8d2eff9ab165f439cefcd9377.json: {}
          c12423e05b24781df7f5e12806adf210660deec7d9460a3e62402b101dea9ba2.json: {}
          c1338d983fc09d990e12a50a5193f928a04d6ff126c4df084c5e6fbe51b37b1c.json: {}
          c13bff0ea458394192b6df88988af2eef1fcf2e7dc1e75e04c9a16a281eb7252.json: {}
          c144da768f3bc0bdf9a2cdaff1b4b7ec7f55ef8c149bacc3553402d26a592cb8.json: {}
          c14e56000dbacfcf0645a5b5865b51a2c69f32ee96f1ec870f8084289abf8e81.json: {}
          c15291250059e884a9551c6446747bf4e67b732e8c8ef14e84ba1ff705168076.json: {}
          c1739b90490ddb04019d235fddf575956bac6aa0d85a9a7f5c52f7f8fee5280a.json: {}
          c17a229e4f859a1765ba9b2f8ec2bed2c3476f612b1e5422910715bc67a50c7b.json: {}
          c19dc18ffbe7c3352f386cc02b334351c63fd01e44589d1f058ace495cd0087d.json: {}
          c1a827128cb432cbd42a67f7bdf621a2ccc0b7fc7c668f29f7e7eb033fbddac5.json: {}
          c1b0324f1e59001874967ca6b4094b6785d3518574208bb3e3e4e41bb785f20e.json: {}
          c1b2c96a5ba2cbad50d1c08ce9ee99443ecaf34652261b5c7010bf55a2a06196.json: {}
          c1d128f595359e8b09accb438526f469fc5fade19c4e6ce9892908d5cc7bee29.json: {}
          c1e52845478902bd49fcab8d506dd7ed389ad3c6797b70f4f5e22e2b31939b01.json: {}
          c1ec33c351cd0230fd52f1d82fc1642dd1645b4a314321a7d950ed679afbf103.json: {}
          c1f72baa897f2361eb7b961d57daf83903860cf3d3eaa378f6fd15de5d0f3d63.json: {}
          c1f874d11a3938d5979fce27e4da3341785f77bc3965dd9862c18347b993d3ae.json: {}
          c214f41ccbb3da23f3a2b652f0472646b5489eec76796360eb2aa8f1526a1eaf.json: {}
          c21567247a7e821c189b37a7434a160d0aacaf25dfde1e24b6b2a1ce3f39ae9e.json: {}
          c21c52bfda164cb15e29144e598561e0463e40afe9ccd35443b0b11df31e563c.json: {}
          c267b166d99dc77bceaa7f95403c2bb41cf6bf8d6fd0553be0ead0899329db93.json: {}
          c271c32004c27435028b075014fe9bf21f7756a9a029c939334525cda08a9ec5.json: {}
          c27dd60bb50eb82a084947398619ab63fd45ec4d4043332b2d5ef0c3f25c47a8.json: {}
          c281458689f4278e0f6bc576f0deacec7625b35656ce6b18c5936ca3cd25788e.json: {}
          c2ac90020f1e8ed3a2baa6e2a4c0fb26e8fd6e649e9631d6c6943d5c264e0c7a.json: {}
          c2b209bd69047f823ba2a318996915180cce8ad0afa7942e0803ed6d09d1e3d4.json: {}
          c2bc6735735f6d5cda38dfb6fdd6175c851ac6d6fb1a8522c4bf8a4fede5d914.json: {}
          c2c0389b7561a53de0e15112a9c42116942d1c53979d7f3ffd3fdc02278e96a8.json: {}
          c2c1c42c6b17179ca019fec22f7432c70d5046bdc68dbc66beeae2da15c9662c.json: {}
          c2c3c904622b22b0b306db9f30071a4b3981558e371fcdd026aeb77b40408156.json: {}
          c331c3c36b00dbef723546b016e30b62146b0e6c07667a5e18292bcda38177dd.json: {}
          c33d91f1d82988237c640fd4390a8e6664e6b8b525c33f4b397596c0ea57f211.json: {}
          c359276eada1c7ced4378b3d7d3ae5b52df26b8c7ba57a83bfcde83e18416f96.json: {}
          c381aca543fc8e09535d3e53091fa88003cd7c207c4dbf7a07e9cfd0a54edc6e.json: {}
          c38b1abd03f94d118c6ff7d545c0e14ee1df285b0f398058d1e6668e963818d8.json: {}
          c39a6dfda5bde027dcd4719bec6311f2b49d7b9e07b0ae57c37da6ac60162627.json: {}
          c3a38b089224151bf0d37fe13cbbbb6af4b1060db76418efcfeedb7adfc09bc5.json: {}
          c3ac70d148f04f9b71cb4b54cb83be6e6602115cb7bf61c877587f2a8a117e31.json: {}
          c3b3ec20a657d920b791b3c97b98e2ae49d6975a96564c07613d8e77452408d6.json: {}
          c3b754e5ffc4ece03fd874e91ac1a9d848b4cf815f04cf44955a6a39207a1162.json: {}
          c3bf63c38359af317300c43c817a41160f2666c722a04084b593276d56649c1c.json: {}
          c3c506272bfec6efe549589d56573152b2f6d3bb6bc513028ed88f8d77aac3f1.json: {}
          c3f1edc157491500b1e50c6007fe091470fb034f6dd75eadf7cb0fed847da763.json: {}
          c4089889ab62e6d1a1e46b1da84d2712a0bb0b1a688037ea560cbcad464302da.json: {}
          c428ce2cf8eb837a7f72692b122d5da3bba9846ae722677b9c693d36a1cd9732.json: {}
          c45602d0e71e66bef4a37491f6f3657bf2dbf121bf4c18b647ff36b36141436a.json: {}
          c46cae70f4920ae231837a651bbcdea8729af8f9873f0cd0ec57ddefd82525e7.json: {}
          c48fcb71bf7152ed23df7cf84d415ad00309cc6307e983616c0826b8f82f087a.json: {}
          c4b0a72e69ce3cbe4b2e267eabeb235d41449732715651bd2756a2866f62c476.json: {}
          c4b436ff539c291d9d619f7e594dd6e122076068c1c3682e8a28f5e211d86449.json: {}
          c4bb629b5a9f17ee3f79906bd0e520e2ab69970a1dae82bbb470fb2af0f074b5.json: {}
          c4bc0ef7f76b5d0a700fdde68de4cdfaf887c146566a755ee589fe6046e9e2d9.json: {}
          c4da27bcdf06a1232b98548cb9ab953314d73abacd29af72ee49ed4e56647ffb.json: {}
          c4fd888eccbe7c8eae918edaf03c4fc699aeff1e31995dd5c9d60f5efff890e7.json: {}
          c5207771a20e00b9ef873e72d2276a4cc41829f1836b6a6b0eab7485c6c154ee.json: {}
          c52babde7001dbe8e9eabc5f069ece9ca91a6c44574ddade780af964f657eef7.json: {}
          c535f2a8bc607d5acd305b065e7c5fd9d6ac34d6302be95b8615c682df84eb26.json: {}
          c588f1e56b0049a0dc087479220ad65ad4809f7fe25b47a9a4deab79f22f8b1e.json: {}
          c59acdb7aeb9e054b9113a7140e568404a5b93e21453aa6f1e027624cccdfa95.json: {}
          c5a7e7b553734afb8a4bab0086211a0fe20bc4a983a937c5b78782075a9a41ce.json: {}
          c5b92823cb775da9e350840e7344070ab351d4629e364d2f86a3059ab3b0ccb4.json: {}
          c5d3ae1f0074c7cafd37f972cd37a8f5a9cb8188b645009323156c5d0611106c.json: {}
          c5e01ddd977979814f36040c396f29e322f513b1f8cf5f4ac37c61dfb3466b77.json: {}
          c612a32af788b25b10a6702b853f5c88a33e15d385af3a6d40669871a30ffbb7.json: {}
          c61bbcd20b5b053669a15c5418fa68a34ee1f72ec37a6b2fc667bb749fb6079b.json: {}
          c629a71fc41023946eb4dfa18a8a0af53c41cd18afb38696588e395428c2b2d9.json: {}
          c639c7c18f081bfc1b0106018281ae983c081f4b892e040b590f48aeb982bc0a.json: {}
          c66c876c339e6faf6e5969f86bb9ef4eee513e3b67305e7928136d2b82651052.json: {}
          c66de41241812815af50a8e4e1a94b3639569be2aafdf88a5404489b24502f21.json: {}
          c66f67eac8228e9febc0ab0ab33c8d1280eeb5e906c38601d7dbc7f1f09efc68.json: {}
          c6914cfe815001e04fbadc6633d9fc9ccc6787ed41297ebe7e6fd6ec5a114ee9.json: {}
          c6b5663654b80960719f4619e8d33f02230090a5fa3c757ec9285941cb696148.json: {}
          c6d3c76bc6e65f3fc176d7c4dee506e96feca7e6c124e61e1a4b20d014511b9b.json: {}
          c6deac58a78e16bac3a7f92e28cbe01e5e58786b2d86cc40ecf4402524591644.json: {}
          c70ec7c3f6f216e42c673dc35086a2fbd41c346e14b013693e41595091d394a6.json: {}
          c7137f65781f10f19e948a4dd7364eaf2ef04336de2b897c1f7f273813d2033c.json: {}
          c7291f19e211294be1104e9fd3d5db0e559fd037a0d07fe1114144ae25dea518.json: {}
          c75a9b94aee563233408f0725b2bcb94c6fba8dd5459c8d51cf3eb3a669c7a19.json: {}
          c7733417bd5a5f6a3fa28dcfa334487232a9adef8a96f0e74d304363e1b77afa.json: {}
          c777bf24e0b6648674009f34b6cd41209ec7cfd57d59c11a7c62be89362607f7.json: {}
          c77b9b83b188ff8629e098f20e1f2543b2ffd84a743237e0f909fa7cd3ef2c1e.json: {}
          c780284ea096701f552e3ca8b5d8eae719a3c43273313144c5997eb3d9536b83.json: {}
          c7870eade0824a147119d6cfa104039c806cbc717109cf59e2bbdeaa80930c7e.json: {}
          c796c31a9897d3c3a87a391e7f975fc14040eb059a0dab985aaa7c173bfdf3e6.json: {}
          c7b6f294ed285ff3a3a2c2c246c775e1e4c189c1fc7845015608f477343c71cd.json: {}
          c7c3e124e2aa2931a7f7ff5f256bf066dd673fcd557e47e995648617253902c6.json: {}
          c7ef591710094b074357c56379cf4bf46963023ea13304025a630cc5e3bea3a2.json: {}
          c7f6fbaed454a2f0f144bebeaf4ab1f956758666e2f56e81f6646adef1363146.json: {}
          c82effd16d05e392a7a160290dbf38e4a6fb5fca0c261342c66f0d11d9ae5078.json: {}
          c83dbeb46243a1122ca627be1469ad8b3fffe4b7099c3e33f78e530aea6ba774.json: {}
          c84e73b1d9112014f7d8dc756773d5afe2cd8f1b3a3fda10e10318d2265adf93.json: {}
          c87e03a6960cb71842f9f69d53144078bee4366127726197b15cf0ff921e6945.json: {}
          c87ea0881b94fcdeff8001cca9464d9607e3bb0155777a90125e52ca7c4336fd.json: {}
          c8932876597e74f244cfa7e6d213c2240dab1c8012a92549994c74c340a25b33.json: {}
          c8955c7f8e78b02a67ac830766e4cc22c7763118896d989fd718dd233bedd1b5.json: {}
          c8a97771748dcebe554111a65f267802696acc16970a25eb2d48c8d503272c7a.json: {}
          c8b90348f4ae547f2e178b2f5c86be622e6b4c5f863432eeae1df6da53461dd6.json: {}
          c8bed36fd7fb83d42de8a617d673528c51b78234e65241900eb8b1dc7b969dec.json: {}
          c8fab01f33938a53b76d7950f697d816129762c746fc5d952283377be4f0abc7.json: {}
          c905c681495ed55226c0c0a89e7496abf84207f8f7d24eda3d3d80e8b8c4a4ce.json: {}
          c912fcc5c9270cd6fba8e7cb568716a80edef36a89a8d72cab688952bbb32626.json: {}
          c92d58c490624b422763c5ec8fe80ef266a57bbbb1026d02fba546a668ddc873.json: {}
          c9303dec4db4b8f6ef287854f262d12a7e01f03f65962639da93ff473196e147.json: {}
          c935231ca80d977ca3ff1301ad56bf1c6b0a50f43f6ee02caca0601d161b211b.json: {}
          c93c1e63cc23c26c9e165957b172ac67a9141be1d68dfee25fd6f2c27ae5ef91.json: {}
          c93deed8a4ab5db29d8b80ba617bdb491684d8adda6efe04c6a282a924e46cb6.json: {}
          c95142cbe142d9f59f95e5832bb6e3653c42bc5e305bc2563567185ad977e01d.json: {}
          c9bebf33cb8d914ea156230c5b75b47a85a0430eba57df8515c3d66a55107a8b.json: {}
          c9d97e391df69fec762b06b2a2193b0ffe0ccbdb0c4fd9202aba9d4f08590ceb.json: {}
          c9fd823e3a2fee25c772c071358d3bd7b175eea50e83dd21131a44b01e72ee29.json: {}
          ca1752c6604d4840ab5e7c63d25272fb3b0e5dc73d849d348ac9877ffc069e5b.json: {}
          ca2b85156c913c694eb96b1fca723673792c99c1fdbd60d772496708aa2727f5.json: {}
          ca357fe10030928adc6ceb663f85979d2a4dc7c626542b7afbbd48a0ae554a2f.json: {}
          ca424c486ce26b3a6a59915a121e3a3c4c513b43289069b114d79bf05d5fcbb1.json: {}
          ca42ba0334b11e3877cfebce2ea07befa1847560862b397699d5e0ce9c66908f.json: {}
          ca465150553e43c72c7ea1d1b70c83ee32864f99ff545a5672efb80c65713dc7.json: {}
          ca4d4b27fc95b1ab693d7f28a8d47a3d62b402a8670907758963c21242372226.json: {}
          ca6d331ee3f182adbc44799cc7e60a9d4ba8e7c79138679a2faf50b5bc090228.json: {}
          ca8b7d3b64c9e3987e22913c4d5464af5d032529f16bdac688040b91fb45460e.json: {}
          ca8d6df1f7f57cc9b4ec0d6fd34c40d78f1df5babd0657cf78941fedd43f9aa0.json: {}
          caa197e9ed14f523d7fbdb56170404078c9263e6dcf5c384b72c2f6c08a66062.json: {}
          cab1336de0b4634c4abba9ffa75642181d8845b9d7d415e6eda173f6e0846870.json: {}
          cac461e8505f31ad2369c2748d1eae98d5eff4ff30f076c5ee2d78517550da42.json: {}
          cac97529a5302030665441b2d2b9545b5cd1f3eadf5b8bc1a18f4e76a7163a4b.json: {}
          cad1d78c9c5d8ce8a4647f6227bf013983f38a2c10c70d70878d8c20c5887300.json: {}
          cad6604379856c3769bd3cf9ff6fd16b97ab9b484d978f9158cfbefcc796982d.json: {}
          cad7cdf50b6b8873bab17cf6acc78f1365ba3c251c6815dd390b090eaa954812.json: {}
          caea5c2af8795b7b98f3cd52b07ebdd9bde934fb9e28b8c0f3b7d6d02dff2674.json: {}
          cb2dd70b9221b9a0f36a1ccac70b5d2e9868a6ec2882af1f9d41869cf3a37898.json: {}
          cb777037b8f161768d6d3d7b3abe2a59318303f8d093dfee457e689e1e9d0088.json: {}
          cb7d40c995d971777c89c3dce31075436467b5429f1f6158ff006dcf17aaf449.json: {}
          cb854f69079590d612422ac643364f3ae39662118e293813fb3e6128695b4987.json: {}
          cb8ee0a3553a0171aeef50e92ac65542ca8a16a1ec54bd57ee1eb9faf22ccdbd.json: {}
          cba04c13d13c61565d736349a33063e850ad58e8b2918cdc0b0ff10488a0542a.json: {}
          cbc18ca41040a05670f7cbb7a5b1b67a3052ac46502c67e434f7c3321dcef1ad.json: {}
          cbd9c6eb19274a78c0e9ce2230af0832f3a8dca060587885cec9503334daf114.json: {}
          cc056d5150c15522790dff3a4237be61bec71188a7d0bfca3861c767ab3558af.json: {}
          cc08040a104e19a716c0da69cbf9842484a8acb4bff02c69f2295a972c999609.json: {}
          cc0a2c339dbc93662994059b593c7e7caab9b3690c5f955f11ba718121e6ac63.json: {}
          cc1348a0531493a6f60616093f845bbd136bbd3964c752646439542167b95acd.json: {}
          cc1a3947405c3cb4df40dee0238b7b49ab9719ec11a84fc8cdf58bdee0d39e66.json: {}
          cc1e5945e606bf3d20627c4c6ae5b30710c6fa35f695101b2a4bcc2810c4efe2.json: {}
          cc28e492172ed5935509e38ec783ef109f64d128d4119e9d846164ed33a190d9.json: {}
          cc3159e22e941f8268b016d057a7b6ce6c537344486be9415b42fef8521cf552.json: {}
          cc3e49daeea6e4e8d4738d03558cf7f291e7492a170fca01f8ce4ed729005fbe.json: {}
          cc67e875ff6ffb25f3671701d2ee6c1db1a82c1c7b3dab97703a4d76de6e4879.json: {}
          cc7a0a38c94663d38ce84215037e0412c43ae7bdacb3b81e0c8e81fff060c776.json: {}
          cc8afd1e9ce4a2df89fe4b4aa8e3d13193559aebd3682ac9d881c24474fa3321.json: {}
          cc8c3bb9166d39e971cd60797c5c9a7f7cdf26b91a442a55aae33a3a995648ef.json: {}
          cc90c8096e4fcc10b1b894accfe6b40bd7e1bc3afb464337ebf869af95cbb4bf.json: {}
          cc94ccd87ada95ad507994f7a311ddea6b6e9d5c62394cdcf71a38f812a0a4f3.json: {}
          ccd2ebc7d2b416c527e2239e5a7a2595345991fc28fc8f4fd1f1270041744792.json: {}
          cce5944f441c294be52319c995ed000e789728a82e49515c3290577ca438a2a4.json: {}
          cced29cfd4c0a2479caf17768d7c94d205da487711ca134c10e53f422d7f8e64.json: {}
          cceec62a81e16841d30b4ac42296bb7249765871beca01501ae26e74a045522e.json: {}
          ccfd0513b03c36fc87bc46e58dfa4e4a48d27db84b97c12fe6218910e4c0002e.json: {}
          cd0638c189007587938070f403c0d8ecd070218742b3da561839a12a645b3273.json: {}
          cd0c019ae58d9e5104ea487f710b17b9ae72b0ab6fcaae252a12b53b7e7487c0.json: {}
          cd2c9ae66ad59dcbdeb09ea5e6e2b1687438f06dc9fc5f16bf2f2e16dba734ad.json: {}
          cd4536501461bb19ee7c8d4dfb56ccfedc0ed9659c4fa39fa5e7f02ceef05167.json: {}
          cd74689e8de003069cba498f36916c77f595ce7730f786a19aca33b3daaacdb3.json: {}
          cd74786eb4a0b9127efa352627ec6ade5a1fde930fda9a0073de252c76aa6524.json: {}
          cd7e4a20dda34cc93f29fb35d854270890fea93fd58e266aada9d1f88dbf3a66.json: {}
          cd89f783dedac54cff2c09d4af194e289a49648b5c385839b65909f8d7bb6bca.json: {}
          cd8b7f97780daa9467eb738b2cf9688c1defbe0019806877501ed43ab8ebc1f7.json: {}
          cd8ce18e7d0d0a64440b69569e60a60d4454710979a45610b13be558024dde71.json: {}
          cd927d97615f089718c2a3b5dbe47d36ae1c9d2764d77faf2c94b780faddec51.json: {}
          cdd2ac586646f6be51ba42c94b4cb9c7b7366ebee177d4c247ab69cb2708c51d.json: {}
          cdec236cd701c3f90acd69ca2ed0bf8ee635b92091bd20518e392fed11fec2c9.json: {}
          cdeefe19dc8a5141c9072556e73edd251d4fe4830ef5d4b4217180b6e87c004a.json: {}
          cdf1c7069967e476770b3ffb41c942714d14b8f899978e5bdc650a77c3105785.json: {}
          ce17d44467c95e3230277e3a340a881936ffb231213ca07558238b6dba21e130.json: {}
          ce3a0ba00758f9c65010c36963472874f17baf5dfacd9ea376300cd4795109eb.json: {}
          ce3fb5fb70eff9c5a0f819ce99091063090ea4fe1b43a2ee5456449560b3d347.json: {}
          ce3fd44e306b50b9f2d78ed77ff0d48c04cb16647d017cb51b0e872a3b366a54.json: {}
          ce4faa7fe229139a1b19e6c5f68fea56b2ee31b8610783f1465e6efdc1d656dc.json: {}
          ce5607b19ff640e6dd07fcc427610e0a8935991c312074d09a4ff4a0b2080fe4.json: {}
          ce578119485ba0d480ad3bfd3463ad0e8e712f76b47976a84938ad034ac9766a.json: {}
          ce5819502ee10680819fb7dc555282c64cfbe55d52770c9b36e3c23f124780a0.json: {}
          ce6693502591f2786dff4affc71fe4009584d591c13212dbb52993d145f4018d.json: {}
          ce8157ab71c819164a778d1e785ee9813c6860f80caa1e9f83758f6f1f0cce61.json: {}
          ceb5aa67ccfbfcbbf89fd6d30ccc25253d05ab4a5bb9236bff99afb6ebcf9026.json: {}
          cebb8cb7cf86207c88a5375a5ca867793cf3204290718bb8092591176bc727e0.json: {}
          ced143388b5a04bf99e3fee2a2e562ff19489f4cd6dd7fe1ca246176236cc483.json: {}
          ced83642330dc15c30b2496cc6e6a4782934fb04997523288d575ab711c3cd5f.json: {}
          cf1afe31ccac031ad5e40b74ddd84ac04a869707919e2e2ae9af8fb997eb55c5.json: {}
          cf3235668719c65932134afa2ae7bdafc204b1807d939dd2b2685cff0e31886a.json: {}
          cf36e7d54eb3c58b85252c4bdbdf1bbff146e5341594da9a66403957021b6041.json: {}
          cf4898e922aa079398b0b029b756b378f44d96657bbd33c81fa16b455ff53bed.json: {}
          cf6ac28d9324a7bdf3d773617524c42674f3d02ed38ed2fbcb4337c25d726390.json: {}
          cf7f12e73642fa9e3d9e37563a3c8327978487d0efd96c1d034a0f04db243103.json: {}
          cf80d7d97afe7a63d4b1fb36a982646c711b4b57d0a16fb80112a826324f8d2a.json: {}
          cf89344bc7948b6812e6564464eb9407df3d166643952d01107096db2f98cc52.json: {}
          cf9138515a482865e6479c0f00f38ea3cdff789a03531eacd5a2118035e44e78.json: {}
          cf98dfd52830666512b8764e789b2e4de235db56f9ce1c8fdc08cc420b63c88a.json: {}
          cfd4097427af93e28dc2474ecf89154346269d74cdcb2f5798d6514e3407b087.json: {}
          cff85e7cea289c15f54558d70956d463e957cdd61b7192b83a5f77293ab49f84.json: {}
          cffa461109d6871d8039645f755b727498667b1736374420ad621c806f8a3518.json: {}
          d00457e10a47c2e18f7dd41b4dc95e3f97e0a160971253d00bd3889fd669f61e.json: {}
          d018b1d0ab58dc776c760f5afadd63fda3832f8709d9470cb255d00caa33119a.json: {}
          d019e9f03a93904b7382cf6b83b8585b887b03a36ab5d51cb8d3010bb39f606c.json: {}
          d01ee7cf0bb410a3bae158268d3b580974d18a6791c9c6cbf5189e6232ab77b9.json: {}
          d02739521323ec480d4aef820993784c2c03c465d5d2e2e6c9a81db5a0b15e92.json: {}
          d04c031b01765487d6035414cf35394388f074b4759c1d19a0f7e7c3b371787d.json: {}
          d07539abe16d225b07a5a55781da95ff0680212ac4d6117c22320fd8b6e088ac.json: {}
          d07fcac1793f98faf71a42b7dc6ece5f9ce28b7e363c30fd1cc19c117bb597ab.json: {}
          d09bcba96af41702c01b075bc3acbda4a5fb6be2bd26583f6eeac28a63936ffc.json: {}
          d0a3b5822e8e75e63188c244dcd16e5233b198940a0b9685a7e264c137015fe4.json: {}
          d0cd2f4a624c2f6987767e21a8c30c979d6dd0e5b3fa645545e1c4f22cf8e8f3.json: {}
          d103e341c6adba9e3fe5b2251ac0a47091cb6e4c77602f877b4b1ee33e5c175b.json: {}
          d1164a85a8abcb6f933d7fbf343e0a1f058cb403ec47434d6df04ddb4a4b4f1c.json: {}
          d1313c0096028d37b1697202a9c8fc61fab9aac90fb4054596c554b7f89db6ce.json: {}
          d16b2a67a016596a176ff3a5b7a3ef3016006664c6fc0815eda5da20f4f1b155.json: {}
          d174bb3dd88c80ba8addba86602d4061da248b960053b1d856e11b7153edd546.json: {}
          d187189c2628a48a29458175104a661523d0d92ea9a0e67c873ead12e2150a1b.json: {}
          d19bb2f6ee09e34eca5f2b3701f55086cfe71156c817b38e7f84fb5d6e076964.json: {}
          d1a295e6cc281cc9cd8687fa994109e65ea670130c1cecd6646c67ffe21e5cf3.json: {}
          d1b9415cc89827145763aac3fccb2ba972f0f78bcd20ca6ce128adf987f47d61.json: {}
          d1cb1be1bee3fedeb409641cbd2d1f8fb7bf4c393808ca6386df38b31300aec9.json: {}
          d1df9edb3dc9da4f3bf91b230fd4c226d11213058051863753a205467cd29067.json: {}
          d1e19017aa04626373bd5b45429f055ecbcbef6815b225fa95eddb15c79f9663.json: {}
          d1e8e46e6a7c39514cda9e8797f690bfb775100f77166de41a6f1ea5d470e9e9.json: {}
          d20620a83f5e5ffc552664569a1747812f991bd27278ef7b4ea41e2cf6ce9543.json: {}
          d20853e02a6ef1b9c70700b3ff7e714c474b57a6f6d94876fd282e1a7766768d.json: {}
          d225182e3220f5848fb5de83e9709af876506b514fe06b656e6f499480be668e.json: {}
          d23639bf8898129b0aca9f70ca6b9de5c1ef5b6d348a054282b9e484b1ce70c2.json: {}
          d24e42999c40452646a573027bd024bdc15273ad4ab49d4f6c72aea25e364d5c.json: {}
          d257483ff6d945c7c4f7e5b4671c0737d86b22c1849bb1dcb0cba4440ef81c20.json: {}
          d25a608cfb72e37694db85ea79370a5b2bd63dc1a21303c1f3e28bdb351effcd.json: {}
          d2606b06a55e2ebc1d6664691aadc252ae250616208fde4faaddff2ffdd8d4d1.json: {}
          d26677f38fbd6514aaad36da1d454272b71d562157d16b303289e77db2418f15.json: {}
          d27f23f73def22884cb8b746c91d7a159c879901de2e3660582e2e25dfd8d638.json: {}
          d29a1bec376a5ff3b9b6020168739a20180fadb06b5b44a24144f8e89f2345eb.json: {}
          d29f18c9ec3412e5f038eebb4d51c60b9cf4c4603bf6b277a77f283553c0c330.json: {}
          d2a1b2240d9b8c579bd998142c979cf1c29010b69dd4d449b28a82fe24c6f6f3.json: {}
          d2b5b19b6e95db87c085667bfaa911e33a5dc11ee89a5e99e639d6ab371147ac.json: {}
          d2c5fa5f634a3082b251239f136078420b0b3ec7e8877cb911cbfe9d04f91514.json: {}
          d2d6b630575a5a0f118a0820455c87d307e5afb313f6010030a9cf985f6ecbca.json: {}
          d2fdb28579e307a7531fe9f77cc86b6685e3019a18e14a2dc8ace8f866e782ac.json: {}
          d2fe7d3dd73bb1a0fdc3a4201b09757538bf835ec16036a6b663c28cf9f48601.json: {}
          d3100db2c31360e53cf2f6c2cb0e39a749e58c5b2e4cf04e33c190b674663112.json: {}
          d31b6d4dafc4e1fb9501db3bbca970b9deb67ca20fb80560128797d66aabf1c4.json: {}
          d32538828f3bf7b540c52e935abca80a097621002b20d586675bd3dcc16db603.json: {}
          d326a78d590aae52e8b031907434c2bf0106ba90900c128146c83274bc7067da.json: {}
          d338015bab44cb12f5aba0c941b5c589c74441eb4dc34b21d4484480b3954605.json: {}
          d34e8e6a4e5cdbca75ca914c572a3ae29d6092b0072088bdf94215f575a19c92.json: {}
          d36c320a4a09793a80ec463b53d938b2a9a983d5ea64be09e34964d90cd79bd7.json: {}
          d377ccad97ef9e66f7f006c604efd0a3007b06082631c29aca1f21ee8e1a5bb1.json: {}
          d3802f83c9546950ce7e034f3ad88678460236f44519fd871bb3ebd00fcae582.json: {}
          d3c99989574b67eb61545db4f8275f3a13bfe30c529c373bc62d6662a392993b.json: {}
          d3e17ebed59f88f10b5f1f2b5df7bb64d1d36ab90b8ca250b584521c64e694ad.json: {}
          d3f459b335c25bd2ab07cd5e5a152aae68e0aa5e031950fc236ea7e7c2122057.json: {}
          d3f9ac0581720dd38e6ea1dd4364ede2d907ed8faca8a32dc8452c535671ce80.json: {}
          d40a8d1f7ab6f6162fdcb1c9b53c61d28e76705d8669b79fa1d85941a94f7593.json: {}
          d417378823ccd2e454219845109322ff83fe93cd5d0a27e45356126ab8d0d272.json: {}
          d43aaf30f7dd63d16b92ee9b093590f20ffb4501bb40226a00ee08f462fe9352.json: {}
          d44c66f4ca208f69c67fac52c217f297c374826a2b9818e07dec66da9336bc66.json: {}
          d4524f6a7d1b92fbb5898fd177eb929a162dceb4a7f5017015e4f334c002682b.json: {}
          d47230c5b5303e3cdff2f4f73472f052860e872cf7f6d998df555f2fb015b1d7.json: {}
          d47743f29aaf8303614f8b38cc1161302ad05b38ff5cd91880d23df55f740fbc.json: {}
          d4939d6707b16be2f0b0513095e48d36ce018ec66938ea6cab4dd34ba2c99595.json: {}
          d498f038a8582dc97000d9ec2f93f900b4e51d8dfc780b04500761d7bbf89e2f.json: {}
          d4f9c3685427c49a09df8d68524146320fe422da379b135f15da0a09979d4142.json: {}
          d5225fba3432bce538dc8e6e3bc0b424acc20be45b1a78a3883c40a95e9f395a.json: {}
          d528e9ea51f6bf8b9790d879d49b2e29f5f9992974c0250eede7f566fce8f333.json: {}
          d52ec1c4b7ceb85ee962f4d67861e5eb6667c1910ec3bb6a452a466896a3a7eb.json: {}
          d538aa1a0f3a41ef3d543916d90b8e4746032d85f9fb25594663803add6fa710.json: {}
          d54f7a2a48aea5895dc06686c80eaeca9732079902c8d8825479b4275350ff81.json: {}
          d567fa346b43174c18529939f5a4ff5901b99ee61911b88fd44dc31c173513e0.json: {}
          d57badf4575e8e9633762311e9074b8b3a3eb906f3d0c7dc5523034b5fb7ef69.json: {}
          d58629fccbeb2dc12dc55324fe5eaa5c14a6ae234d0372a92738abe1f8a4e4ce.json: {}
          d59c8bbad62131098489596dc35c1e9cfbca5e1c5f013617b868068edc70da56.json: {}
          d59e299a26fe07de5e0658beef55fc13e7d54e7ab3f3faf7e1f27ffaa87ac58f.json: {}
          d59e656fd322b4ff9b0f17cb07d1d08d2b8daa6f6df1b9a09d2263153fa6846d.json: {}
          d5c3b1fad03197dd2c748ed8ea25caf75bb6e6a8b8400d9212534d352a0a8ab9.json: {}
          d5cabe31c5f93ba61411d8edf00bd03b1d39fcdf197941257983c1eaa4f805a5.json: {}
          d5f7d6dcddc52ada0e740ebbbe36fbdbe8e136032d721a14c97295560af760b2.json: {}
          d6146fa053a7e1825c5fb936e449191347811553634f0df582d95d224f0da5dc.json: {}
          d6178d6ba752cbc4062736a60c718d1af533156b51107301a4f581e9b7eedb67.json: {}
          d63bebe6f40f2ffad45ac671a83f23deeccf665eeaa578d0f71521add85b7963.json: {}
          d67b0bb37a038bd7119197cf48359208ece9102ad77b88142505db8c13977cff.json: {}
          d68c5f16d356b18f55995fe211931b8ebadfba109c8685cad0814501e0b85316.json: {}
          d699dcf26b71ac32f5d16d48022872918bb1b5233bf020d7fc9fa2b4b417cf99.json: {}
          d6df2384dc4650c894cf44186a26272c1434846fec8084379f9d184100debc18.json: {}
          d6df83fba41800ad01e2575af91ee627fb9fd605ceea7aba035d079fd97c53bd.json: {}
          d6f769b7823609b47e06ca33770a091cae00e0512c4a9b29530dbcaabf2916b9.json: {}
          d70c2c069d52ca71a4665d27379f31b7712801634e4363546c3ee95ddef6c6a4.json: {}
          d73e4ce97fd6471543891a4aa0c7a6a607edb910b32e6c5d97025ace02ec26e7.json: {}
          d74660e949afbda60a821b087b4172680cc630d089dae9d9ffdc7f4c1d452095.json: {}
          d74faefb137e52f5a8ec0ca8b52084c65b2531e053fdc1694aef376ff0521ddb.json: {}
          d755905617e6847e08e40259dc7b805359438c67f40ce858d5aa64f3043b587e.json: {}
          d75595244e56b75b79167bf4e3e1c03e9586f617177b9d25de6cae49eb174a19.json: {}
          d75dbfda46bc2e91e3eeb7aa6c12749c15d5e385e60ae4687832ee87bb8aff00.json: {}
          d75efd117e92a9dcc1ef8f7f4734c36ad92513a6663583949f8d306f799029fc.json: {}
          d768101def0292d456e46072349167bb42bfda2b87a51d28c00880d9ff46ebff.json: {}
          d7dc326b5c02b5be7728a04294d33be2ec82952b4ea771c268bdfe19b93edab8.json: {}
          d7f16d3046524accbb33315711d4941c2b4db5afb0e81bd6c914d1fa97c83b26.json: {}
          d80ed570e0711087dbbc62f70461d378aa92b9e5f7136bfdb64a7b42362ab518.json: {}
          d8459a2ca814d25887a4e7e11a3beac77de1ebb8299bc8c6f97df41a14daff50.json: {}
          d847e68b58c252fbd672b4e8f72c0548b6fdc413c28d60803f0ae3808430886b.json: {}
          d85642a730dd7269ad24390c2328d52f0ff3955f705a75ca7eeb66c93cf2cb98.json: {}
          d86b769bea3b03fd1cb526ee1d8f07d27b32ea74c69847ec415ec4b568349a7f.json: {}
          d86f526b101965f5be4f5bce93b19bddff0b7cb40e3acb921c01a8dc97a2280c.json: {}
          d872ade94bcfc7412282d97b3d1196f23f1273d4916268abcce5d5b4db66a794.json: {}
          d875e68fd513de3fc8141293917abc2d91de1ec4aa644ed9137d128e20911e46.json: {}
          d8773554a924219e7146f41656fd05f6c1d5a4e9782e46d7ee18e44f85d75f6b.json: {}
          d8812c841f726c6eb4b0a8381de236dd23ccda3c50c2b623f14d3d1eab8a9398.json: {}
          d88240e7176c22cdceb8fa1e147491a89c83cd853188c913ec144caf20ed39fe.json: {}
          d88c0305e61fe8739a408b7f585f6c0d6b9e67ff66748c38faf248b260bcd75d.json: {}
          d89809b50cca4010ac0eba817ec9058ab49015ea06d6e3974343cd8155fac114.json: {}
          d8bf6189e2a4249d40cc43b63b692357ecdd0179cb314a09a5abed15964a1b49.json: {}
          d8cd07290cdc100fbb96cb492c858c227aa5189668697b3b1b88e6f2a9ab6925.json: {}
          d8d192fcb7003070e3a84bab2ab497b7e2299659b6e846ab528f799b93a47aa3.json: {}
          d8d432af6023ce3499d741354188fff6bbfd108699b1955f773c8e04b862330d.json: {}
          d8dd64e065a2e4bf723d1e3a99c48907ea8f55f56e048e0f3958ac524d99bcfe.json: {}
          d9082c014a695ede2236409afd3df7b27cd0775250ca3370b9e96520335b2903.json: {}
          d90d1708a6d0d6da325bfebe4f22f55147b5849b507dfd4041a3c3d73c384ce1.json: {}
          d9415ee630a5c17280667475653a9e0bbe7dbeb30dbde6b487cb14b1b40e89fc.json: {}
          d965df9ed1b70f510309a3d5456bd519cb3e3515fda82d7739ddea0e89fcf342.json: {}
          d96918062b15e31315ca656d35fe661062ea842770adb9a97f9a80f109429612.json: {}
          d96c33a9daaff3abb9669079f5614db243c6174a9346ae462b6d8aaab5fc65ad.json: {}
          d96e1e0a4356e17484833b0b06222fe66c750ca563581c42edabecbd29ac3ef5.json: {}
          d970538410f28c76de3b43eb6f5354b71558f52b24633f6e32f8d8820de8edf2.json: {}
          d987158648849dd9bed7a4f22b3038ac3cd774b6b1129a606d05661fb3f975d4.json: {}
          d989bb18a5b521c91df826f257c90df87d88be45c1bf0e47b8065f02d312f1cb.json: {}
          d9923f89d2119593d1eaa035552d04f9092390e6ae7041432a4d08b3ea6ec97e.json: {}
          d9a70f6254b4a26e9819bce7bed7efa0db842670f510c3246c63b71ee02d9957.json: {}
          d9ac3563ed084d3cc68ab95d223be6031e8629bc9e0fe635933d50b0bbec3f5a.json: {}
          d9bb4cf69411eefc4a76847e805111010af03f47ca594987ab4dcaeb3587f854.json: {}
          d9c871bcae8bda2282cbe6c0024531b9185324dbaa28844cfd27ea6fa14d19f0.json: {}
          d9d0f2ec1c97fe7ff48eea8982a781ad5778030697040b6cec94ff2cd13bd7f3.json: {}
          d9d98816d79bec91cd5e5b6732696a181ffe3dcff4838dbe4359803bed988c9d.json: {}
          d9d9ac4b66f8067fbfe986a8595ea58128a551863ba994343e4a59c771a91f7f.json: {}
          d9db5236ec6ead0c1b94aed21935f157cf16da45afdd692b8d1013306f792392.json: {}
          da02aed38fa5435672c6bda65772ec9f28079b370d4510c72e293a2878f8b30d.json: {}
          da21232194389128ed64bfba8c04b8b24f54ab2f3eb88b67087cce252a1fa80b.json: {}
          da269723f238d5549712bb4ef5c75a724f9a15367d13263922db73b8e6429b66.json: {}
          da40f24f5e3d9482b37b8f6c32104fc86d0c1ff6bb2ee5010463d9d005dd5b17.json: {}
          da5ea4fbd5c54945f10dee974c892300b47180dcba38a516648dd7901cee016d.json: {}
          da619300e9719fa42e4be7b079ba8ba1431d468242ceb76357a6f5e118fd239b.json: {}
          da73487ce2dda12643e8a982ec7ee0396af08c894535bf0244e21e432bd211e8.json: {}
          da7682a63569623d52c7e6d4272f72197aaf1d108da7c45c48ce3401bfed28db.json: {}
          da85303d7649ce7911da9b69ebf4c2043f639193c97568e538f099d9559710d8.json: {}
          da9832b184a840c559c60332948f594b2da7ebbc50117e9b51c31a9efd27b021.json: {}
          da9e19228b570cccae9bf083a55de09adeb8e2fc0592a4d8b468969ac37db7c8.json: {}
          dacfd7de3fbaff587d9a165b73d48773c4a3ee741acc3bf3cbbb90d755111686.json: {}
          dadb8c4e9715538a88fb6a5ab733bac3c7708d85ea497320f04d7225af1f60a2.json: {}
          dafdc742a7e53fe39d8b2f122487adb5b7d89805c99ec4513e9dbb296cb31148.json: {}
          db01d6e1526aa246eaa0e55218140314d5da1ed55f1a1c551eb2091e44bd0225.json: {}
          db0abc4c44e2d2af92f14e4edebf58446b1f98ca211ca21cb04f85bf0b85e91a.json: {}
          db2afab3c18ecf22a63d12dd7d920501dda114e12c8b7bc850a12c334735f184.json: {}
          db32a8cc10f13b3efcc856a37c89d09e9d14b0bcbd400097892553c55a2bd666.json: {}
          db376c76907be9aacf619154eb99d8fbb598744ca0c222b19a336a3b2420ed44.json: {}
          db46e6a66010bdd270ec8cb6708e2ac42a6625bfbabee2409483e2af6e19c3fe.json: {}
          db7539e355f239b8395a06127c74bd2ec6ed800c2d0012b11c78526bf9616410.json: {}
          db83cd0608649a17b97c8dff8d71c4ba15398735351b80f8d27a5f1c3222fe04.json: {}
          db8bba04bc85709b55dd3d2a2189172f32a4d453652ac1343ba54169c7a2427a.json: {}
          db9af5e83769335535374041491df81300dbfe519f6d34fb48f435caf6b85969.json: {}
          dba8128fc63f1f2211c40b6534f02896258d2ee7a482c1fb391790cc9c0d61e5.json: {}
          dbb8e446317855abd2d619ec731b2ca143a513e2a061c2a76641c0e8d45618c0.json: {}
          dbbe40fd6dff47cca83914427179d382eae163a25c610d27271e8332c680bf9b.json: {}
          dbf449d32be1758b6d3e69345ac025b036e50aaa2596b411ede0d153d426cf7c.json: {}
          dbff805ac63beb2a2fa75df519c4601644ccc77d9e1926290cc081923893d402.json: {}
          dc241e10152197842d4c6f5f1b33ba2e1abbb67c346e8fba7bbcf353748f2200.json: {}
          dc24ebd7a2db8c355ab0153777dfee98f3e3e78fb313422d8012f3bc46b8bdef.json: {}
          dc262fa77184adb46e4a105e8d229f87e8cad20e43d82f065938cd10abf60ce7.json: {}
          dc4d0d3dffadb978f4522addfb0f302155154e722900fd4215572da30d5b0820.json: {}
          dc4e6c6843946f6e9094b3291600c24cd7f5386b8b94dcda22d3ef0f08c67bd1.json: {}
          dc7d5f34f43f75e4e84e3e736d596cb1dfdfb00b7468e3741f40670dce2f9555.json: {}
          dc8c4ab1e8d260d0f3884f8c65cd27e8bcc17a257f5e8372657dd479710a1b9f.json: {}
          dc9376055ee7cb8025166a7fc10fc9c4a0625b27ac768b61bcdb6a22b608c1ba.json: {}
          dc97bc3505b39b6179494e4d1ac5d1b6373c8dd930b6d8dcb317b0c393dac59d.json: {}
          dca10c3edd0d8f12105f0de3d063371df5d674d84611f9ef846f4059f8f25ef5.json: {}
          dcc3a09bf33b73b3712f4b2620726cf7f24fa5d7b5381e2bb374fff88195bc40.json: {}
          dcc42bb66a2a6f362897459486cf7c9fac017cf3be72babaa0eecbbec31784b2.json: {}
          dcdf099a3817936a7e4e5c773dac1107a167cac9023f5c40bd8eb491698b777b.json: {}
          dce3d68a11ea1aa779a910b61863caaddcddc80923b2495902696d683181cce6.json: {}
          dd21799663602bc6065f2787c765cfb91456f5f440acf0ecd5c1224c2bc531b7.json: {}
          dd32ecce31c66aae97d3d6dc7410da71f1be0063d3e1ecd7b42f92f12d9ba343.json: {}
          dd567eaa8722323550589488b94296b4364b6295afdc007d7d26e00c99058c55.json: {}
          dd6310f3e248a876b081c3851c6cd61db1a57bb50cc83d8277bc256f027f153a.json: {}
          dd70b1d3972752e408d71b764b413abd9a26487e6d7bf44cdf0385be196638db.json: {}
          dd92ffcbc412e9db1229d0893eb9b4dba07b2ae9c71a3fad6edb6a3cfdfa9906.json: {}
          ddbd55fedd8bfa7fa397121ea82871cdb8433ee7a2a834d146b79a7a1933b11c.json: {}
          ddbf76f4b6783ca866d1816f3303c907b1cea9f7abe553ec834793194068a234.json: {}
          ddc1b79a0a453c8981409c3d067377d7bd6c0280c9b3731b8e1596c1ce25a28e.json: {}
          ddea45ea544935bd55cb6cc440668c103d059dfd81d4912566eb59f9bb1ca534.json: {}
          ddf1b254006df18de5d08e241e0a31c680b945d6b06f43d0f22e58fda9569909.json: {}
          de1042e9fa32c277e7b1dfea133612626c8b26485974e1b89e3742e9609a8295.json: {}
          de1ee3f24f20d89c3b34d1ef2baa39d3becf2e6c7320af1eb92f35b56e689304.json: {}
          de2f648272eb53361695968c5caa8b7403a7591a8777f94d429682ecbec4a1d5.json: {}
          de34ea94fffa195bda644ab56dcb92b491e5fc44e7fc67b8e448c465a5b1b9a8.json: {}
          de3f8caeab83bc49dcdd5d39f9929325f98da4c08e182cf3687d7f2a43b3f881.json: {}
          de496dd1a2a8009ac46cd20ff831c2c48f362bb8022c3545fc99b8405854c0ad.json: {}
          de4db3c6c9f67864a938739add97bebbb054fae12a8898d2d7a5aec452bdf603.json: {}
          de4f6f938c34708d4da01f0bcd9d0902d330d79e83c0a036ea94ad0b185c9e27.json: {}
          de7660079f68c9dc05edacb087dfee6267c42315742c6247beca6d61d52a415f.json: {}
          de8f1c00b3c823db4f2156d83689029d0c7817b994fe7560122e8eece495331f.json: {}
          de964df67c902c34a8c67d43d9d10051a1a3a7202391e0964547f6a623d9191b.json: {}
          de9eac7580f7d369b4207cddf283d6a90b3d061ba590e48272c98d061f3df334.json: {}
          dea3f00fe5f507bc23a7cd1237cc8f1ec00cfb3e6c55b9729f976981b2c160e8.json: {}
          dea4dc4f4355229227c9708c834f1f94652fc1b5dcd88eed9e76159ad796c96c.json: {}
          deac95c6243f5a07605379994b08e1a4b51b507162f09788653369079e2ae994.json: {}
          deb20fe96b3ebb19fca01ac545c1757b507ddb9c36ac759abdd9f5dd7f771ced.json: {}
          ded5ea2fe0291ac2ebd122e99f3fb7831aea6ea5c536f683a0df954ce974e4af.json: {}
          defc664548b05cdb1f1922e5c0d8052bf8a03199bf59be8e6016aab62f546773.json: {}
          df1f13f69c15a0881e32a0ddcc33de4627405d6fcd5f9afddfa7228c4f8d1145.json: {}
          df2f75d51fa7b0ddc4ef0731ed384bb1c61164229dca842f26b36d81db047daf.json: {}
          df5145df2f5637c911b9bea5399fe40833e0a3ecb24d5e2e3a419108f5b32fe1.json: {}
          df5f485dd0073aafe2e926f4c55b3dd5316562918adec7be387f84bdbf6008a7.json: {}
          df5ff397379228e905c790a365def063f51b2bfa8316565cbf6329ec2ceae329.json: {}
          df612281b79310ff949959f2314977ff858cc65eef8eb4a116d0bb76f5d679b9.json: {}
          df678856feda0d9d6b855be7ed1ec329b478bb6a86ed8af9dd945e24a793761b.json: {}
          df6830326e563624c18207c67daf03dc519ece0f4da048eaafcd57287478688f.json: {}
          df6ee37ae31fe5f75aa8c573d5e8e7f4a15b8b0a55b8c13ec9dfc2c131f32274.json: {}
          df7664d4c9321ee95cf4d4eb0c9d4f1cceac45eae1d42b2dfec618000ff9ff7b.json: {}
          df8f8bee73cab0cfa1dea4c15b7145af4e1277d60efb344d3579b91c9fcb0b87.json: {}
          df97f1d99921a697d92f9c42cd644b3503e6cb9d2fe771bd17ef3a4003ee0090.json: {}
          dfa0c9bfc664ba9f03c1d285132eead4367f29b3922d8cf644c7adfa15eaa236.json: {}
          dfb4baedd61753948fc377eef3846b602c22c9dc8988961bb407dd818282f5e5.json: {}
          dfba2d2804ac567b15e19bd7b9001ed572abd85cae2c7beb2428f889c0714067.json: {}
          dfd6b7fb1aa8e98a5a4c734c8c8c7f345fe58d208ac203d0c76b57f3b4835902.json: {}
          dfe2ff16f612ee9477301bf3d4eee44119f401bbfca5973cec44abfe51237660.json: {}
          dff5b66268b6884e007353e97e5bd783a83d9ffb53b9c60e815144beb9333699.json: {}
          dffb0e207a34a9461611325ebf1fe6b38bd79fd0a50171b05c6afbd5dab5b86e.json: {}
          e0023dfebe04c2294e585267f872dd721875b5539554e97cba5fc51e8535a5e1.json: {}
          e01a3b3563c0f9fa0cd30b5276f68b5f333b4fccc317715519581e162f51c0b3.json: {}
          e0318a77ba49603c9b22e2649e9b6e9cf7cb14435bc9ec7f723f246f34a7b759.json: {}
          e04a9f08c7da3f3abb22fc421e65abacbc44c151c5c3c37383f62a71b3b9d2df.json: {}
          e04d6849d92cc130ecf3f86f160636d4a902385aad73e5047ca122330a9e1fde.json: {}
          e08b299563399039f087640e2233f94b519a673e0c7807e8afac2fd293cebb06.json: {}
          e09c2d11f34cd35d45b50d271a0d5049989b373e8a23d2cb74a235ef32360174.json: {}
          e0bba9db8c11364c549957cc5be828547a71678b283761458cf64a5329b11d58.json: {}
          e0d23414e49e815d3f2910270814df56caacfe10374c357bf4caefcce4da49b8.json: {}
          e0fef4b076c6d8fd3f99575dc2fdbb95a8c0d1a1199d7ae69ba93b2695cdbe7e.json: {}
          e0ff4890593ae10053a9967018978dea6ce495627e7d218b7c6bdb7cbb535e60.json: {}
          e100026a1dfa5ec8fe544e958751f73c71079c84e59ece726b11159d6732717c.json: {}
          e10f4aafae7d3202b64564a1a02c0876d51a2e3e0fc8fdb40fbc4d3556770cfd.json: {}
          e1343f984ef5eb90996c760a225cc25212b56f431df06547dcc6f7a9f9b3c5cd.json: {}
          e145e4da6b92c162dc2d492887f279a789f38e877b750e2369a2f0dfbc68d012.json: {}
          e1552eb4bac14327d6f2fa1c18630bac52dafcb0b670aa7283a2b7601a16b0e0.json: {}
          e16345215f6ac7e1f93662fa7ffa11da80f773779c1a02dd5d83a5126e31eea8.json: {}
          e166c367fb31275efa7724924cedc5d39525bc21952fb6dd76e86818176c9c77.json: {}
          e16a085b763258b32f5a1200de636b4d975b5d6292b6d3328c09854f4b1a6cc1.json: {}
          e1785eee11bf6027aa2f90391f751369f499a0214463690fceb6761fae9e96f1.json: {}
          e188a988c750f2db333fd9f6ff67d46cdadfa1066ac6825529e6758539b4746d.json: {}
          e195f9163dd514d15a2dcda7bb74067eeef755bf5a8e4a0323501272734b2ea7.json: {}
          e1ac0ddf6e04d66091943980e013989d6c010bd633e3b1dd5315237b25300f84.json: {}
          e1e0ee2f35724ff8e46a4227beb8237cf6c35cdaada4206ddee6312466ea049c.json: {}
          e1e8de77f6db2c93afce20f0c12e74f0c64941acb0e922b08376df0cd9e5e64c.json: {}
          e1f77a46c6eacdc61b071f813d4cf9ebea7f2de82b241da369dec73216cd30ae.json: {}
          e1f7d73304d1d5d49c41b87c492fe0ea0681a8dee83da9a0ea492ecfb76f7613.json: {}
          e204c78f9701984454ea0ab4e952bcd3835e2d9946187810d1abcb666dc4005a.json: {}
          e210a7c5d87770f8bfebb94aaa705773d7a7c94d7d799f64184791aecf26b321.json: {}
          e213a4b4fb383e360202060d9cfbf98ca6cf5520534b1f1722bd4937c578a505.json: {}
          e2167ea7fac033b3b595da881979cea042d0fe52aca89c00eb46a1f55de0dcaf.json: {}
          e223ced15754fa0b3310cdadea2ab87938ae7ff60612ecf21ad24f8b0838b90f.json: {}
          e23810014ebd62b2c55a82683c3cbe3a6393c4a46a86235bc8e8ec584bf6ed73.json: {}
          e27e52643f009f50106dd6e398347200521f2e8e5cdce8af8c5fbc5ed0dd5d4d.json: {}
          e29e937ac6afe62d15549f2140aca2f25632e231d4a44e15c3f4387d7889ba23.json: {}
          e2ca7950c81f2a1f6b496fb9f6f4b9f748de8de2c58f754e95f07ed1417bc7c9.json: {}
          e2d9d6be8c8669dd4e51c2707f23d3bed5ca8df84f6b9608eacb74ab0884a3df.json: {}
          e2eed54b4b31a343eb94602f252e5495b091482af14381452e5da5742da2e607.json: {}
          e2f0e71f2ac89a70d96b910356fbcbc8fc19ffc485fd9c3d39cb3e6f9e78d6f0.json: {}
          e2f2445175f0b9829e926bc6283c056ff93aa25a227721ff80d3aded6c8c67d1.json: {}
          e2f384e903fa2250649c29eebc840e12ec0b90d6570602191c0197ed04fc48d0.json: {}
          e30de07bd8baf7946caa1f727bb2e15ac535b6fd974f9628d43bf68988ad88ed.json: {}
          e31b54441c9d1b2bc98b847065d1dd20d5f045488fa89647276b6e6bc3fd03ef.json: {}
          e3207da30b46ca8abd12f8a2b3dc9061e8ef7d3e5780a7dbb76ba325da87b400.json: {}
          e362b4f3e4c8a7e00edef1ef77ccf6219bff6509c6f78100a500dc34f8d73594.json: {}
          e386b1596146369518a89eb89a19ab099cff89084ef870a750db01f4d40aa906.json: {}
          e3962c45c2006e58e24389c48fe5bec7f48f740b600bd2299b64369c786e13a9.json: {}
          e3c27ddddcef39791c7a5892261e46781c45061281af97aab811ee97a337a3b4.json: {}
          e408d95236d87925eae6e1dbec7f19dbd3e19228bacd1ba01fbfeb44b28af281.json: {}
          e4216e260ef727c3f8045cdcf663f8b232cc74778159c7e00df31f5ff410f9eb.json: {}
          e424cf3a960d263b20b24b2ca3b4bb8fa7f7fe1670f18df908e624eccdb2b687.json: {}
          e43156c4a9c67e70b464cd5692d796345bb2eef556b7b02f3289ba6a605c6bb0.json: {}
          e437f5e151d250003a245c04d1325099e1e0cb43da23c8bebae941601781bc86.json: {}
          e46399c0e2b80563b0c795b34c58fbc967f8e16879fa73ff8ded082c586bdc34.json: {}
          e464f05081836499a8d31cc24587806719ec8d1d31cc8e8b969a5338c19b38d5.json: {}
          e4929ddc7f2ee67726bf9aa8dc8d735d106872aea993320a84b8a8eba9b66258.json: {}
          e4a5710e98fa4069adda3629abe8f7d097605808bb1f72b72152513b8c3b02d4.json: {}
          e4cd35f8eefb305a6607750b8ff7ba8c56d67192c212dc973bbade416b3101ec.json: {}
          e4dfa7ddb92e6cf5bf3a6a071e5f3817148727344deb140da2774223c5d00609.json: {}
          e4e342c5172c6b5cab2130fcb5fd704f6cc4f40b74ce753fe80f9d6f085704d9.json: {}
          e4fc3c460a7d7dc5465b9f97381229a90e3143c018ab1f5c912988eed2a0f421.json: {}
          e4fcac447603776a65ba7f2ea04a356da9ff47420e6308e3c9e3c60e69ac76cf.json: {}
          e531b7132113dabd93349739e1f30a95a85de66fdc8dbb0529f5847f17d46726.json: {}
          e54776950cc66890fc8af9f12c96e0ed7114623418f26520ec0f43ec5968c7b1.json: {}
          e549e04bcc65966db059fb0b102045ffb2c1f38a871f2113323c176b2962ba1f.json: {}
          e54a568e8578fa3d93e6bc6aebbce7a8c9bef7f5513f8988ea1d83130d6df655.json: {}
          e570377f7b1d79dd9f07d70e4d792fe16561810e88f4be44d48e044329fea177.json: {}
          e5768173cf10eefd430ee4be8c1ffdf2bb17704640b874b4f90606422a564986.json: {}
          e57a8bcbbec406e24ed56c51ddcb41451f6a5b7ed1ff90107f7ddfea929032a5.json: {}
          e58588e3b1318827a4abf662cf488683aa4cdb7adbc8f559b686659c3b577600.json: {}
          e5939d6866f212bd957c7a33d369127fe71fdd61f4fc34b225cf7649f70f71c4.json: {}
          e596746500a75858cae2c465cd74b0aa31fc88bb1117c8543c7c13db86913904.json: {}
          e59a0a6d239c46461174515f9ffffbcfd2c5e6a51c2baf6fb5aff262bf4d2084.json: {}
          e59bfbebba41ca0bb27f97f7f991f1d268fc4763515c7a02ff2b978d9ba4ea6d.json: {}
          e5cdbdec98b53741f591052749f0476caed63ae7f10a791adf435d667b747485.json: {}
          e5e5f21e1b32342a942c05ea658a8b500dc729f8cd08b9c26ec03b1e44bdb110.json: {}
          e5f7cd6203aa04d06078417d0caf96a940c998fbdba808bf27fe0691c5794388.json: {}
          e6156eebdd6ab355a9745138dd2376fd2bed441dcae7930dd2bb3f94931b8ca7.json: {}
          e6196f747c609ef6dbee93c2bbcbcb05a8b761a94225d41061d6b0c6e5c365f1.json: {}
          e64078c0e1ce8091dc8205244562fdfa5b6739b3c19a2c345c898d81272365c9.json: {}
          e64270fdc98f9d8cb4ae4430e0bdda90f7361547f3ff48dcc7290e989ed98916.json: {}
          e66ceb8c0c9c67375503a4366b712f6125e21f08d3ca4b55844cab2c87efddef.json: {}
          e670e1b2056c9b984e51c481222ca0386c234358cf1133958e800235a749627c.json: {}
          e6a48d792aa3d554b775997066bcdc4e8157ae4697e4fca90c1a0ab91ffc01aa.json: {}
          e6af854f5fbf3b9d261e79d7a955d71adc8be0ed017d9ef57e86b544f55ee684.json: {}
          e6afdc7d1d1d4f0355542b7ea117ecfbd80a21c38402bb665f5f407194ce75e4.json: {}
          e6de74289ba62f6214290ac7133037f2801a5db830fd957f9be9cb8c40b42b6f.json: {}
          e6e5f9407f62fa531b61d2644440d262786efc7e0a8630b062b73322066ed44a.json: {}
          e6ff23dc1f1264b95d8f62baa805adb025dddaaa23311de57d37e61dc5a60978.json: {}
          e71ac872fe481a10e5c43fdc39d2af904998d6a56a5d2c0a8d0657ec643fc1c6.json: {}
          e731f0b27af8938607d3489d391598f5b0d72217e68a176735283a030afdd95d.json: {}
          e742c1bb097a86ed29bb8ef2d7b033a12a4f7c9b690cf3b9217e94268a829d12.json: {}
          e7544ee9381a06aabcaa3005c078333dc5f6f54908359b7a4091b84922707a68.json: {}
          e755161a6c75b9e60fa5937087e9c22c960fbdef3bba67bcdcaeae89e2878e9a.json: {}
          e76fbde845beb7683ff530b809104e5b10bd4ad832a22dcc491f2c4311a1cbf9.json: {}
          e786b7e7e3aac3948a2154f133c368d37e03891009ef32a4e5f061d8445b6fcb.json: {}
          e78bda8824f16df83f423fdac03dba9d84f55e255f45baedb461a16d09c626ed.json: {}
          e78d338fa079511bb201603977e7f93efc461ffc8d77df89def57b786d56d1c4.json: {}
          e7d4e2595de1337cce4423e0cda68b6bdcbf11649203384181aaf38185be1ba0.json: {}
          e7ee0cedb631846943608852a189d51f9bb1761aeb60c1d7dc49cfe4e366abf5.json: {}
          e814b38ee879f5f982ed573616d7061430ae1721eaa81a0086d9125e8a4f4e15.json: {}
          e84c9b21c750177adfbf90653f76eb7d0c628c655dddc86cd664fde1341ab71f.json: {}
          e869c1e72afc0f2cb7e83e095f18d158c629863b2105a11f0bbb8eaf076948a7.json: {}
          e86f0a67c430faead2c2b5ccd77a1fd2ce8744a05eefe5ea3c8324aeca954c4d.json: {}
          e8748371c8d155ec3c00e35963cbdd745a6b5d2b3b4c0a7ec42f0b74cb66f2ad.json: {}
          e88fff87e0bf72d3d569207982fa1ac1314501e8531deba0d0e27fa9d0febf5b.json: {}
          e89f43c7c83984141a98bbb6c7f58a946da89427ce21e5bc87e616b63325c4f8.json: {}
          e8b8dde48295b283b7c473acb6078aab9378a1612b5475d4ba505baaecc7629c.json: {}
          e8fd566c8ef56f94c99ccf003575165311431f51140acf565f85947b5e9b41b7.json: {}
          e9102b78032122bc53393d059785e18430b11c462f1cd97f9319e6ef19643b20.json: {}
          e9480444f9488fa5d956bb9454cfc0e13ada3bcaa5d59b01ebb38574f879af5a.json: {}
          e95315e660d644a5a7d5261036bbd9987b9a5a46a5e102fd8729a74400b5cba0.json: {}
          e95e097a11f7096c7b6b818f17e8034411f60cf93ea0b97104b48864a60ca8e8.json: {}
          e965e904e500ff6dd8315bef07904468bff40cbe4da6fd68715a5b1dc6525731.json: {}
          e968ae913b54c2cb707181ab59f1a6ca90b9c04a9c485a5208d3054840765adb.json: {}
          e97eb79700740cbff38524d12e3b4950ecabed0e040fb0eb41b8d2aa49089572.json: {}
          e9931b0e99b6d7e3411d40058eb49313560882ada9165facdc4350bcefe9e435.json: {}
          e9a2ed778156e2135e352a5f0d21392b6dfa325650729d6019edd968d02ee8f5.json: {}
          e9b8a40cf17e47225b3eeee2641e7e0848ee4e66c84796e071bc53895e55afad.json: {}
          e9c221ab1b9e0bfd98a5f29efc5a5a6ffb40afb98e52cf2d775d7a636fe3fc22.json: {}
          e9ca9652ff4500ed4232f50ab3ef20bc91f27baedb2b7cd9d9992dab96636869.json: {}
          e9f27102e7030c177d31e90f358b5bdcb6d3cab93e8b212ac5e84eaf0317e927.json: {}
          ea120fbda7e8071d78f5c4db0d6986744e84a21184612d471453beacde54e9ba.json: {}
          ea381d5776ac0374ec1cc52f41220d539cccecd3e26da2f67c6868d74a450df8.json: {}
          ea3e6e4207ce74c60cca8ee5a662be89d0016af87142284cbd86e71ac592d466.json: {}
          ea514352493e50a77f29f4d0c528e7d40072bdcdae49d69b03b7f5754c2a8256.json: {}
          ea6c9fb939fa11fd8a9aad7a8b5ec467e4dca3229f7d617efc7fbd47c3ea6e62.json: {}
          ea7f6912c403097771ddabe84f69eeb9803d1cb7f22afd7ac911c3513510ec74.json: {}
          eabb4ee255871e7532ce2c2278657402124173615a7b223b787ad1c743e728dd.json: {}
          eac7ca6b29ea14d63ef3662440de8ca4b7c9816c683f2740f81a42cbd3df37c2.json: {}
          eacadc1dbe623ee8999d27e394bfd3af31e49b13f42ffc37e91eb74c0594330c.json: {}
          eaf0e3b683fa927e6e216a117f781503f13902bc722eec0f77b78cec03facb17.json: {}
          eb0e478d8fcd10a33a76e8648790f1d73d51bb725a75b061caa1f310c2af8254.json: {}
          eb146e64b95acf2bec4c2b3ff1d2c3633828bdcc39c2ba1633a0deeb31d00f15.json: {}
          eb2ce861ed7cff295bf9c43ff87c2fee40c0d289da10a2a64e0a60b0d8b1a113.json: {}
          eb56049a2021df6a2c2bfb8275fb5cbcd1a3b80b4b1ca988ae78a02e5e41ef2b.json: {}
          eb7488672e9bf85351e58dc1ba08bd76ff81f2618d347f74d8eaa47c6102ddf7.json: {}
          eb759bf74dd1bbd6be0cb5da64e0e70a1797bddef453947efe38dceb87e3f99a.json: {}
          eb80547084f8168d4a17aebb4926f767ac1579a9de46afa3732f9222001f270b.json: {}
          ebe79e2fee2270b3c9ecef0e593c959681e40b88511464441f74aee4f0ff7a53.json: {}
          ebec3a7ab6017e2474f1a29dfddd5b87ebfbad5470813581817e10b61ce9acf7.json: {}
          ec0dbcf7164c70edab41f5176dd5eaa5b43ee3ed3722e537d0d0723d93db884c.json: {}
          ec0e0a4ba0191c7aeac9e3931378609ed446104bc943ecfaa2d38c73f2260484.json: {}
          ec2a6748bc9770dc42175bd0dd3a7014e3f4441464692a366dc4b7ebf1594bd2.json: {}
          ec510d9b71acb5eab4637a1caba1bfdf8e8eaac68d0fee3df01079e1b90a3f33.json: {}
          ec80daace4204a6be9e6ba85291f00ae712866e8f380b18f8a2454dad667a34b.json: {}
          ecb6d64985300333d77f3a4a8a37d9685fc5888a0b5b6d4dfe74cc36120b7b5e.json: {}
          ecbd8e5e1928a050ada51cc1a6fb23faeeac24378fbb3138142ae26cc90a1ca0.json: {}
          ecbdaae4a3290152e8183ad808ffa1b5b5ec4835eae005d57b27c8743b052577.json: {}
          ecd0a30244c3b2a8544035229b237d7265b34fd0e606e901b0e47b46b08270c2.json: {}
          ecd765e3d68857602376793a8bb301e2f97d95b99bebd475c7fdeed06d50166b.json: {}
          eceda01f2a10167502139be5a5593a0d42243df3376edbd0d91fcfee01879943.json: {}
          ecf348f6f916fefd9cf5e53921cb8cf58467c6e9094a81fa4a25a6d8b6afc951.json: {}
          ed0de67fc0657bbc1e6bea701ab6878eeb480fb92e2a3a78900a46a8fdf1a9a3.json: {}
          ed13fc8fea899cd0485b62007d5b59162cddfe00157810ec0d4b84f8f2938153.json: {}
          ed1fdbd2c8f925aac28a7907a290a19d2d8fea5a091bdce3dc8bfda0fa86db2b.json: {}
          ed2804499b3fa0477512e8efb7f0d867a76b9ece57e749e9a633feec93e83e88.json: {}
          ed35b7ba789dde91563aadb0bc7f0a7cd410f17fdf9ad8a55aed78433baa21d2.json: {}
          ed38e9a9cbd313b2c9d72d8b0bb0fa6f2146c45942a0247fc728197eac2e6944.json: {}
          ed4819f098b99abd6eededc7880154057ff3f60477c8f81ac227d05bb43f7e10.json: {}
          ed4c5abbcd74eacca315db284815c91aa56000e83cff4a3a7ea94f1e7a9f1c6e.json: {}
          ed508e408e529923dc37973f385b996f593bda583f63c683e6bd764d4c1f2fbc.json: {}
          ed6963edf86c4c7e85d494b6d74bed3dcb28c1358d1875e52fd96e9b7ba678f9.json: {}
          ed6fb6cfbed69e831b19851218dc0439d72bb6c6829603e944858b738a759552.json: {}
          ed7dd296831cf674d153ca4183da87a0d006c405c2564039ce40a90bdba608e5.json: {}
          edac3db18862e2b20f7301a22216f0cd60bcb55779b2ede8779b591d4ca2919b.json: {}
          edd8771d0fce31a0f30c0c1e82b4f8091dbc05a0fac5f2d4c4dcc4934c5d4f92.json: {}
          ede07768960c1983888cdb5ca51c1aa475ecc510753360e015103c9839baf91a.json: {}
          edf251c3b3bc336f5c8ab3dfc114971b50e5962bc0d2cf83bc64a7434a7e73cf.json: {}
          ee14ebbf47ad58b0901c4060cd563bc3f9d2338264e76c9266a312317b93dbc3.json: {}
          ee41e773f043816bbc44440667fa3cd511de0607546d8c91d63507e7f3d9a91f.json: {}
          ee64a0e5a4e9e81cae465cc26c3c9fa3346162fe77eed1ce6daa2594b765bf47.json: {}
          ee94e082eb3d83dda182c694a3e652dc5c5afc3c6b2c8a22e77859cc306616a1.json: {}
          eeb00604b220b21cc8a0ccc3cf266304b1cf40d3d6aaa78b5f447e24c22e7a65.json: {}
          eeb4c84a9e916e7046a59e25ba1345d0f950cb5e27db9ea0011209a6bb24b596.json: {}
          eed4658ba4467beadf38713b492f92be1b2ede92696d032266684fa9d968ff47.json: {}
          eed492d28f5adf2cc1ba33bfde384e2df7e3321c43cc873e6d79b9b1ddcfa5ac.json: {}
          eed881522261314aad4c5ef846e89ece7af655a2698c6ad7d9d96b48f52deb39.json: {}
          eef6cca0372fe4ca07932a1f00fcb38eaed71a421f0f4083b1715f064ca98c97.json: {}
          eefe29761a8ffabe8720a14945a5093360c9b235237e72413bc18ac9f8a28e1f.json: {}
          ef14da1a6aa1513bff10a9f115d6b3d338a04dc48ef85809d66603c202abb4b1.json: {}
          ef1e11f17f7774a4b9d225d3c29fdf7aa94b1a17dac6129c3d936169cf72a4c7.json: {}
          ef205c446140d6603345b24d58787ea932286cad012aedaffbd8ff660ab522b1.json: {}
          ef361c93cc83be430539d75630ca6283a634634431e9f6a12e6bee2078aeb84d.json: {}
          ef473563b382ee063c01c70613f7d2e9e1628efbc1b90c6085d198596f6da356.json: {}
          ef4ab06a521202b2d8e4fbd4a05694ab30392007f39e0b8667c8a3f1591d1abe.json: {}
          ef6a5902f2c2b53554cec2a35015c9e1e72dd01790cdf71a016adfb076f4a0b9.json: {}
          ef7b6d83a16a672b6dc451311ee9b74c7e8d751aa7ec3ba7ed603b53a945a5ca.json: {}
          ef85368b535541a363b395ec6c4fe010706a229f0b633f61ad4feeb181cdc382.json: {}
          efa8671e8520a0fbbd76c2e53a3302477c604bfd5cf47ca692199a7a6bc395aa.json: {}
          efebb1f64fd299523cfa45a86c0395c89f3534b785e061d69404246bf01a2185.json: {}
          f020ec313b8140d069b4a09f46dc2b02daf5889b9d3c1f3d8033594b2cb53dc9.json: {}
          f02abac8062e2ab6e21c019a7dea1bcc81183b7e028093bf9947fade2b822c93.json: {}
          f0383d376e52dfd8b64da1a10377ab621dfdf556430f652942cdb8b8d3799c2d.json: {}
          f043a417b2663e92aa01908989ab5b1056d2b94222e72211e9a876fc0be04cfa.json: {}
          f04f656a83f0a74a7a7a9747b089df6c415fb69fccc5dae69499b9845a8c06f6.json: {}
          f0994fb322df6cdd9647e76c80b62bc391c3e500eb9dc6e974f7f38c2de8eaea.json: {}
          f0bbbc117d5e02eb17a20a7f74e6678df42a57586882a3a7eab312d0247c839f.json: {}
          f0efeb44a16ccc877e6f795d317a6554daf357a146a83907a8ccbfd6987d860f.json: {}
          f0fbfd9b7aeca9a8667c3e147b3afe816077a7d70eecfc0806690157d3f0b23f.json: {}
          f103d85316724f29636de9dc002607c814fca30bd5265107e7a424803503faff.json: {}
          f10624a2c5c264fb2eee8b6eaa643345ca6ed7a82dd6ea8a4c415f694d06ef3e.json: {}
          f109fa557c76323fb67ad9a59f52b34b0f5b599d98b600f96c0060f0b24f11ce.json: {}
          f10ad4add21dad113f85d17e39879101a6dfc090a931b983b6a625a92e9e13f2.json: {}
          f1126b4406e1afd40113634f57664e473336189191049ba857b94c22c0a3e168.json: {}
          f12c42de5acb47482a5c9c548ce0f39444b4ab15625f3c74746cdd88dd6c639e.json: {}
          f145379f227b5b65742fb82cd299b923a3df9326ddb488ab2e71010b3d529a46.json: {}
          f1562f4522e0f6807cfba16adf2aae5452c791592fb4b11c0fa3abf530883630.json: {}
          f1594f39a7235a708b813185c93165708b96c3edc0f1df72028ece0bc4894d46.json: {}
          f15b6ac345e5196136e17dfd2efb5d8dac42ef18095caea1cbfce7fc3779695b.json: {}
          f171818a24cc7cd7b8b2532065bbe5035e0813e7a8811e8b0b0cda11627cbe28.json: {}
          f19751fdc1b29f6ce79b3e289984bdb9ac13c458062ff0a74ad5f77c4c7e0f01.json: {}
          f19843fcdab1c5f5f44b0fffba642cecb74f4e3508a8167049b2ca5fe2764fef.json: {}
          f1ad55e7a2e6190f93d77b51f834622f6783915768911267a12d85033f0d6e06.json: {}
          f1c1a36d4d53df3d86f11c24a3ecc071dbc0c5f8b89eecb994a828e420a995b3.json: {}
          f1e1677a5eaecbd382a8595e4dc9d18788f2c826e696de26d2d98338a18582c1.json: {}
          f1ec16dd34c6c9c2bc8c14d70cc0442b6fbd59340025adbfb59210c079b15f16.json: {}
          f204f4583650e5a725c065a38675baa84f432d5f11ec9e78fb38d6ba57db856e.json: {}
          f207a7f472db4b311fc28e87e4d9c846f69b317ae972ca9e8c4606f8583753c4.json: {}
          f227acc9deba0307fd149b9f1e273d6102458335d24659d7ba27844ad3c83ebd.json: {}
          f2378e571bfa3b8429fb6319b21ef7fe7a02cdbe29d4e1efc60c12814278a11c.json: {}
          f24965797b1420aefe625ee79391ea7eab2de15beb26b34e2afea351bb894ba4.json: {}
          f255f3cf6911c2ca87b083a8326810f34aee911dd487424c9630741aa6a47781.json: {}
          f2584ed23f44f7e08c78d1457adfff9420132b85d4131a2e2e372638cc290bed.json: {}
          f27ecd30926c7f299013448e6c7414fa4563a8b259f6dc0bed5a6bb8939634c1.json: {}
          f281e8552fde2dd121d09e66a8dc4ce5bc390b723e79fdff67327965be1972e8.json: {}
          f284145a2f6f735d25726f42302289dcdb7f4c4022ae4cac5036c832407110d2.json: {}
          f291667fa2f17138696d24d98a5694aa1123719f25d1a5a91ef5d724d74bd498.json: {}
          f29ca81b05ce864d64c8440c8eea717154136857cd01bab99180504b5626abf6.json: {}
          f2b3cc480b8f19189a21cbe1468ca4a6e94a277a8fa609e8c0ae521a3257b7ae.json: {}
          f2e90cc8a43b125a0b89aea5b8de05adc87ab0a104215ea65bf2c545db2be15c.json: {}
          f2f3b6e490943c3eea7ad605c70f52ddf32db26a2523f60f7066bc0300146506.json: {}
          f30b0b65206d876e123fa156aa8ede850b933e9540850aed3c01bc54a357c7cb.json: {}
          f362e71bb2c01c12e01135da312d31ba224e9ad8338484ae16e6a7dd373f4cac.json: {}
          f36a6c65375a19acb12878b549f20424e47c5c412e8abe5c18b3b6f96f0faea6.json: {}
          f380a4cfdebf788f03ca499c12d1675bf1da80ac476d8e806e20c038d6492f44.json: {}
          f392da93509149c803fe28fcbac437295dd4daba2a0c3fecbeb4c1d220643969.json: {}
          f3e62d0691d4cf11a008999997bfcc6972a4f02f6332dca1087ea08374c15b4b.json: {}
          f3edfc216f1eeb79f9435b93dc9f0e994b0dd85034d4ddd2ce716c2d66570491.json: {}
          f3f889e9deefbb6f4da28470044ab5b23153bd5fdfac07e840b169d8ad3296af.json: {}
          f40bd0ec87ea41a98ea224ec16ce8a161e7f409c3e2bdad94f91f95147c79720.json: {}
          f41642ef3559fa39c963ce238b122f7ffaaffca20012be489ca5aa0d995e0c28.json: {}
          f42bc70c4a5ab8caac737c0f09cdd3fd74cf52c9d6d3837e0ab7206025e9ee0b.json: {}
          f42cc7612b67b0fae1b967bbc9028d8d9455e06e5b320bc248863ed7f8376387.json: {}
          f4369bd8fed1238241fe4afdbf0cc9a7d0447064b8e37ed17283df8300376701.json: {}
          f4380cfd905348e619e921e090f2299ed4e0db846c51f65731f111a5e7f1cbf4.json: {}
          f43d3a6eb580b0c85f269539fcce0c1da8e2a18aa5d6b4eb31ff3c0af2706f6f.json: {}
          f44c79bac4238dcbfb7a98ed964f0079c9e56874db6502cbcc5c5c0a8b1e7d45.json: {}
          f457ab2b0087f888c8b2762b1e608712d9c091bd26b3da1748d77d005e5b9c27.json: {}
          f45d3d474665ea62b9932c45ec781ea3ce938598ac7d0ce5ad9f6b912c9b47dc.json: {}
          f4697c60f5923c84964fe4c9f4e7b086f3e70224b0e47265d804b12e424e0108.json: {}
          f4782e9e21bc9ab2e57905380ded1ffb195af0edd6974c4e5fb5266fd8ae32ca.json: {}
          f484349f516bdb6c19a4fa62e2ddc96bc14896a77847601728a5a7e07251d038.json: {}
          f49931b41a216e2038594eafc3376d5a901c4f932cd286f398201dfbd03e41a3.json: {}
          f4e96f123600b0509a9ef383dd0de37487ab3ba63f12100135df78bf20657d35.json: {}
          f568b1067cf61227e1925c3cb50bf9231e49600f3ea1235b93274913d9659e25.json: {}
          f57ba906209b591ee9cd4f4efa043e4a7e6b3a44a68b31524c1c38f267a9c4b0.json: {}
          f58423a0546f61f42367f54625eb2561a149a4a35e50d14fcfdd027299a11f53.json: {}
          f58565f4ba65ecb4d412a761a1552c9f4d08cbcf0c41a9bcc2ce085ff7292e73.json: {}
          f587397c6eab92ed2bf2e0c0d02cd5f3c6930e7bac29cf0ada4364bf6e241c44.json: {}
          f58e0e9653b53892ccf6d76b28ae5fdacd9067e7782400fc92ce11114e88259f.json: {}
          f5a511d6f7259505f66305e2e8814038be7e9676137e4a8d9c03ab95ea574e72.json: {}
          f5a7bab2eab4bc7de006888114be3127c192a08072fc910bff4208e5b87be8c8.json: {}
          f5c4bc6208e65040fdb850468843e41a8a8734d50d8de4557367876ac729db8f.json: {}
          f5c964d2972b99471ceb1c557c915621126a1e79b2429591cb91415b1049f77b.json: {}
          f5e0a246df9cb736017f5ad5a85cbbad3b11d16e76730c30494f9c7afe1e3490.json: {}
          f616f46ae28c8d5566f1a8d4b14d52a508c82987ee1c57ee625891f33ff5039f.json: {}
          f6320cce48a68ff32de86dfe6667a0c7bdd616eb8c2282798ff4886cc4078009.json: {}
          f651e89438a7d4c3cee8c967cfdf589e14d27373402ffc0e31645b09a5616ff8.json: {}
          f6a4c0ba1c8ab6d7ee28e5bd1856c1fdafaba74e5a4c32e953dbb108de25ad82.json: {}
          f6ce3651a2868739ba099c03fe566b158ecedbfeb3a76ed33b2f3d1a3a81a354.json: {}
          f6ce48da4cbed86b109aa9bc8c8e520efb4e4c3fc908c2897b6659c9ee62f6ea.json: {}
          f6ce562f5206a6b4202827f946c39ce0b702759e5a4e06ac9abeccfdb338e458.json: {}
          f6de1c01913201f3240c7971d4f565807daba83932f2c347a70fa22924aa1e81.json: {}
          f6e1a21d0c0132b263c377ec1edc8cec2af224e9377bd19252423e97e367acbe.json: {}
          f6f0403b32f47b92aa88f94c6bb9662156e4ee00f4282d4fe6f4b5b5fde1aa12.json: {}
          f6f6e819cfa9e1893a06897ab8c33371b54763d55ddcda7cfb5d1ffe7eb25ce4.json: {}
          f6fced7c1b8bcc015f0996a252bdf033c9528db45f33684dbb906127d4a65b1f.json: {}
          f725902faecd21b1f65c1f16f3d1b6b3385c668768a8e61d939f5340f36d4775.json: {}
          f771bea2340ee0a307c296f82d83eda8e254b2af8259e09dcb61e99bba18a9db.json: {}
          f7c4dc73c0906e9bde35b861515b16a5d0d27d87cfb61b8f4548f609d895473b.json: {}
          f7cc8f515bbe75186f5c281a60591282338f0585b883687868dc616a1fc83155.json: {}
          f7d545329b680d63b6683aa32f919d3f73eb176c329419966bcac6dc8cceca15.json: {}
          f7d74a8f7590dc52bd8ccc195f443b32fb6170777608470523d08df1242d653a.json: {}
          f7de334e8854ec208b5d3c34917a15cab2c3e658f507f5d9945d98806ff985f9.json: {}
          f7dfe96390105c11857d7d0b665037d93d45f47134d4359d4681ccf11d20dc81.json: {}
          f7e1d800a2f05ac1d77577c9c3baee797db3dc68b08094f0de29488f8747f80f.json: {}
          f80c99006b4eb7b9248fd887670ba282ad95a60b9267fc0146f19411a7cfdacb.json: {}
          f8102a2aa8567b8d026cc34de65f1a40d13cd1bad63129c5226db38b21b27667.json: {}
          f81b079e91f12340aa8c256037087d8bd473aabf94ab3dd3715e32193c94f44a.json: {}
          f834fafe373e7981a4b15a171b5447ba27de45491bf96b1962931e5532d65704.json: {}
          f849958f70663bf666558b73fc693a5af4b9f944b8751146f0fb8f547ca6e7fe.json: {}
          f87796965f8820a8e88101b85140fdb840d41cadc94ff594b5c7e32678e25361.json: {}
          f88134ca30c52a35eb6f6c921ab072623cefe7a1f7c7326e7ce2b01133eb817f.json: {}
          f890e99f41f46d822da9853fd0a73c4dc109997f3852b0c0ebd66141171db2a3.json: {}
          f8a0c07c89a6db2476bd9705c0f966a4e03c21a67a1e4f0ea09c9b372a2019fd.json: {}
          f8ae0e56d7b5daedd363a15edad9beee979695eb2ee682889fd485c01bf2acc4.json: {}
          f8bc1e5a0c37dad8432544c0ffc71b92f3ef09facca5c9b2a1ea2e8849fc79da.json: {}
          f8bff867a9a54e1ec7d76a446c037896117b3aef21c3055ebf753c2c53738254.json: {}
          f8c6463e2c839f7995b4a77a9105c785503fe608eed72e515f5cc8a6aaaad03b.json: {}
          f8d6027957409fcbb1c354570595cf3ff807ed5f6b8c89c1de15f965002deacb.json: {}
          f8e2e0c939d4b36d12f84a410c49215d90e7edbea7a04b8a5c3c6be33c0b9ccc.json: {}
          f8f1fdb8ca22abc8cf6572b1a3938041d668c5d221370c6d07013e52ceb82ea5.json: {}
          f8f38938042d9beec4b00794c26412043cc7d7e57d623bc17dac443717844959.json: {}
          f8f56eff07d4acbec6addd01ef2729ded000c033f5db6039dc227be8e964a8bf.json: {}
          f8f5a48d508068ca4b8ce6977b05c360bc24e1818b1de0575118e140bf75d418.json: {}
          f91559a8d408a7a93f428e4d39cd75b74ac5381e5c1c4f291c991cbcdb9e0f6f.json: {}
          f91e4a1d16fcbfbebe09bac751a468b0660138d975d6747fbc8a48cd5c86b5ee.json: {}
          f952e0bb60094cc55dfebdf38c5142837ea668c0b8f811e9febf8fd24a9025bf.json: {}
          f96b49158c5edfc22e5816c85345718e378d82bb949e73f03fd32469d29c63da.json: {}
          f97abc52972a4969f8a8e6eb84cd0b68671cd371bcda006101f8973b14fba51a.json: {}
          f999249eab0263547a90bb649339bedea3d1f0bbcc2ac914aa4163a053823479.json: {}
          f99a4919d3f1631c31050bdad14e4f4d5e1d4ba77fd35c4b0dd10f77e74ff730.json: {}
          f9bd35ed418093e88cd2fbf2d141a57648bf9b1ef8ad8b4f5ce0f2b6fda15c49.json: {}
          f9cfbb19044097dde62d61eb93b9a4560e6c6c53797f0a154bb981640e63c977.json: {}
          f9e81b70415d61df0aedcbddf62444d1857fde5ae0d422cb3b74cd2edf5898ec.json: {}
          f9f992ee9f8cf97af9e7c737656f7c82b24bb28049da68c808d8e68bbb75a82f.json: {}
          f9fa19fafa92e5421c764eedb2ea050f29468414d1fd7628c9bbd795d3e1f425.json: {}
          fa0440c0d47d21cbc38730b7bb64b9da92cf06c78bd8f3e319acc943a4a97549.json: {}
          fa10b4f1ddf3b339647c068e351ed2816fe33f107d710b3dbbf87a7bf09a46f7.json: {}
          fa1a6b41a56eb27f2d40d6876fa341e23b63fb55661c71ca094e7db0b3d3692e.json: {}
          fa23d14f9ed0ce2daab0e0c27d94567c1a36e022fd615022683d5f13d378d67d.json: {}
          fa3524606b07a5f9c1a7a0452c21850f59163a65aa211941c097b60a9d08de5b.json: {}
          fa482119b61d7a37332f7569dce06f2416d8319263628554b590b99035d896e1.json: {}
          fa58886317e598967ce964b886bf286b04eaa1f5ec613fae44d4be4ffe352a9d.json: {}
          fa61151fe0f190ca33f2331c584b21846f58c6b8203b1ef21f0670439c615591.json: {}
          fa6cbcf753acfeeea2f7479a9e7a33a474dc05aa7809bd33e99f8d3a5a32382a.json: {}
          fa711219211d5e4b10d7b64606ce8d5591b0502f65d03963588397ffd69017c4.json: {}
          fa7febfff4a2a550470d3406b2fecd46997ef36d71c1350f2c52f4b1c15aa08a.json: {}
          fa912b24537f1ee1ff0ff488793bfffca1d31724572ab4e4063bc803f4076db3.json: {}
          fa922f394b9a858cf30ec3059a3036f55564c2185506cd3f11c36d328aeb55e7.json: {}
          fa924f9ae21b2d73803fbc59d2f2d29c539875ea57f10c06deeedccd596264df.json: {}
          fa972ce80a8c5a04172f3f87dbe3b40b8934884d86f505180cac7d99932a7587.json: {}
          faa19cd8ac2ef713f52ac4f34beafdc608783c48c662596ff3c095556901eeab.json: {}
          facd7b60d45fd9b2a7c231659f7090d30cc696c1d8d934ed856a81e2556ea075.json: {}
          face66b7cd570fb587ade89b3a18cf7f69561371cd7f8e1475858f5f7330398c.json: {}
          fad4bc2fb361a254f8161992ba6d5434fedcf057ba638468243a9231a56bf45f.json: {}
          fae3f0a12380f367dfb0967b261fd52b9544733fc0eb93213a0a6a3b95b7f7b7.json: {}
          faeeee91247b27fcc87213f800cf10f7166a11b316148f97510cadc2d89ded89.json: {}
          faf763e3cc245a30ac528c4e7fa8add560004f0f9ff94e3a40e6baab6f96de33.json: {}
          fb2d0b07de66224ef683ab2e3afdfaec6a5eb2ad0ad2df9c708ab2b6bf97ce33.json: {}
          fb4290177a83d7f0dc797d7a4018fb9cf944f6b10d326d6d2544750b00ea941c.json: {}
          fb4dd54cad516fa43cc43ee20514e1c3076bac1585acb1aa38c301cbd0cbd615.json: {}
          fb503c833270b85dafd022043067ac0cdf205ce0b162a61ebfcfffe742119f86.json: {}
          fb6537bffa20b3e8563bb165e50f17592f21e32c96713e37f73673b8026332ad.json: {}
          fb69751cf970f1534ee84c667abbfd29c87fa2f2ba2a2928371d896a61df93d5.json: {}
          fb76f58914c4fb3ef25dc6cce4ccca06b9569114736c4848d89c8e40840156ff.json: {}
          fb826651b51a8b21faf518abbdc8288d0bbde1580621cfa0c7a73fdd0fc0847c.json: {}
          fb837e166155487424fecfdfd951b8ec13681b3f4e48c0a603a68ae8cde28ca4.json: {}
          fb8624cbe834de5a6c4478d0a6adf0a8d92dd56451027675829248296b7cfbc9.json: {}
          fb96bde27c0b3a938655dfa912f36cc851f72f7016748e430f693ed047f9c111.json: {}
          fb9c5a81f25db0f982f1631c080ac0d30f38cc42f5c6d0588336076d6b67a2f4.json: {}
          fbabe7d4c662eb17100e48b00412386bb45ecc72b3a07a71faf535503307ef89.json: {}
          fbaf14e20f38a8f4061e63dbb61ea9a1e477e690b83b9ed24dcb17dd6b9b2392.json: {}
          fbbb5424ac5511b56d4bf0d4bcc9dffe404a678f961bce6f6e4d075ba145210e.json: {}
          fbbfd4ec203aee03e3911410406bfd3191427c0d1fd5331e65d9b778db63753c.json: {}
          fbe51982f7879ac34681992eabcff16dc5641756cf57a7e25daf5d0d5eff2ac1.json: {}
          fbe7138a6efce5bdb43c749ac16ec339d216a051a9a54764b3ddf9df5e64532d.json: {}
          fc15a34485ce38754975cd0947cb4c26a4f410d6d3a40f9d9c77c61602223d56.json: {}
          fc26dd536158af87a744bc6711bc7b9aa6877f4e8cc10a7ab8918671627cec4a.json: {}
          fc345b216811ec38c8921b08bbc969309217685e2e6e787ed2898141e1f36ada.json: {}
          fc3f103ad5b31340760014b32788040768f2e2141455a9964331d99f767ad476.json: {}
          fc5df7a3ff054433a81244e3f393b8e6d2cda208e77eca0a2bca7e1c3393adab.json: {}
          fc6bd9c7e76ad52e544fef71017ad63ae242891923f0d4fa98c97c672a546e4e.json: {}
          fc851c8a286eaa6a3acc3471c93f5eaaf0731a0eff4c34567ebc719eeb7fa6d9.json: {}
          fc8ed956d7f2421c0b12e7bacd1d388515955860d45d1eca454ccd4b98dd8fa3.json: {}
          fcdb099d82b2484deb1a6719f4d35760a2237f2d1bce5f530dc57fa6cb88e52d.json: {}
          fcfd7c45b123b0190901ef073f841889106486763c3a79ec79f34ceb3dcd0aea.json: {}
          fd0ce9488de8fac9e5036185c7da41e1067b950eee24252224682d11e5848911.json: {}
          fd0e0ea70042d4c3de7c39a7104a11079ceb024a267643b4af4815d14b06c1e6.json: {}
          fd130dfd593bd2f5b884a094b2ecf70f244b28c28846359aeefa08e3e17f6d56.json: {}
          fd1e4fd3f77631a9821222620a4a3e3ad9d44b4f600ad5801ddf08ae37c08f9b.json: {}
          fd6e008c75253f87a9afc003a4b85ca003b72c29d820c4102449c090270c5b50.json: {}
          fd75e77d8f84d79c7ff1b918acb856b8a677b21f32f15017894614278ae0de42.json: {}
          fd78f688b332fa68fad1f5ea75b39081793dde9038b4b3157ff3a6d8205a66ce.json: {}
          fd7fdcd890b7879add40a2b4872060b4c27980b0471caced77ef5f952a9b4b49.json: {}
          fd8be19a28f03766cf2bc63a1aa777309b0c15074b23ae5e793ada7448ac0096.json: {}
          fda044e9ee29072e2f4013f61f7c3273c54ed9caf36165bceb1d20b38cb1f2c8.json: {}
          fdd4498da6a9eef78ded7753ff020e2d723e1fe802e5a9153dd44cd20d74f74b.json: {}
          fdfed3154af49a748344d50124329077e18ecccbf2e13c3e984b35938bde553c.json: {}
          fe25b600fc34cbaf4c30e85cb2d059d04d4e2745939cc345f9babf39da7f344e.json: {}
          fe2cbfe7d5c885e5e78ae4fcad99e1fcfc9ebc100e8212389a56e42dbd1456d9.json: {}
          fe2f8a4716bd5bfe8f9d57cb65ddecc19d5900de6a75bbc9fb80ea5be059d7e4.json: {}
          fe6ddefbbcaf601860d956e912792b6f0e4a5f04efacfa8910e919e37fe857e0.json: {}
          fe6fcd260b329251b1ae2594961dc679530a21f6705586abfeb242510a61b2f5.json: {}
          fe824db3ccbd0b58ddb5f4e196a501c62badc2fd6a588f324ecd7167190aaa2d.json: {}
          fe8f64c0805b393014f840f6fd704eedf9c295870f2da85ea4d151a736242a9f.json: {}
          fea54ab4c8fac3845113f04e287f0b13dcd45e28f5f12fc6bdd01249965f0e23.json: {}
          fea90bc97aa778a0d5398ca151aecc4241f438e572af114f66105c84ca8eb461.json: {}
          fecc49abc8bd5046869e82d9b8ac623050602eb09ea7d25613745ac54983f756.json: {}
          fed4326ba7ccdce92b9d2eed8ece14ae39d9af4050bd2cda41b770fd1cbb9e70.json: {}
          fee29e216407cbb6435a9c45229f73b393dd02b1d2fb33a09bd51d65feef6a63.json: {}
          ff084c3b75f39ae5d4eebc76016ba4c6cdcf44dc48808953e65210016c6c9e22.json: {}
          ff0f46c7cb54824a63dbaf2c07bf0218b73c8370e8ac110c359cdb8fa5959807.json: {}
          ff2da071da763bd9a3fc9ad487c2525c12c38ba2845c5bb11b350324c0d25fe4.json: {}
          ff30aeadf46dc5e87a8d343593ac61bcf461d3d8db256ce6959c86c035ee6f62.json: {}
          ff47cea6086adc1483e5147a603c28bc5a09541283ff9e7e91fe42ee03fe393e.json: {}
          ff5ce0a9afc38504eac4cadd58be03d5f21f5c0c7aeec68c81d832767a7ec2d7.json: {}
          ff7b2b83acf37afb6929f89d7757249bbe612a9d41309e6461f4bc6b826405b8.json: {}
          ff9457e27e6d0e67e446424ccbff5d96c1485553c01ae3e3e882d7f875e65bd0.json: {}
          ff94e49c4af7d569ef0c58c9362d190de609576000048077636cd60e6f2b06ec.json: {}
          ffa17d70215e65f838072303574652841ad7f177b6841077ef9d3b4622d84570.json: {}
          ffc026582e22b195686d0a2ff18266c054e2ff592ab25140ee0b2c732fb8306f.json: {}
          ffcdc4d0037a91e333bf632b2ded67cd0f476dfbf760e98da07c98923a3d877f.json: {}
          ffd194ed8587dd2e3a7ffc45ed20b309afada193c38ff2272d331e55d028f409.json: {}
          ffd3fb06d6d0b8de1d44b655d7cecd8cfd1580066fb7f470d371e027ea8e4f4f.json: {}
          ffd79caf868ad70cf35ea227a0679c20cbe445848686b5d0ea147c3da68e8508.json: {}
          ffdf3a3b0c3d0ebbfa4cd7afc39b8ed6fe58fa668c5702949c99543c6dd0109d.json: {}
          ffecc2068682b4490b71e871506d91c54171c3fc72d815b26b232c98c01445df.json: {}
        default-development:
          0.pack: {}
          1.pack: {}
          2.pack: {}
          index.pack: {}
          index.pack.old: {}
      .package-lock.json: {}
      '@aashutoshrathi':
        word-wrap:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          index.js: {}
          package.json: {}
      '@adobe':
        css-tools:
          LICENSE: {}
          Readme.md: {}
          dist:
            index.cjs: {}
            index.cjs.map: {}
            index.mjs: {}
            index.mjs.map: {}
            types.d.ts: {}
            types.d.ts.map: {}
          package.json: {}
      '@alloc':
        quick-lru:
          index.d.ts: {}
          index.js: {}
          license: {}
          package.json: {}
          readme.md: {}
      '@ampproject':
        remapping:
          LICENSE: {}
          README.md: {}
          dist:
            remapping.mjs: {}
            remapping.mjs.map: {}
            remapping.umd.js: {}
            remapping.umd.js.map: {}
            types:
              build-source-map-tree.d.ts: {}
              remapping.d.ts: {}
              source-map-tree.d.ts: {}
              source-map.d.ts: {}
              types.d.ts: {}
          package.json: {}
      '@babel':
        code-frame:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        compat-data:
          LICENSE: {}
          README.md: {}
          corejs2-built-ins.js: {}
          corejs3-shipped-proposals.js: {}
          data:
            corejs2-built-ins.json: {}
            corejs3-shipped-proposals.json: {}
            native-modules.json: {}
            overlapping-plugins.json: {}
            plugin-bugfixes.json: {}
            plugins.json: {}
          native-modules.js: {}
          overlapping-plugins.js: {}
          package.json: {}
          plugin-bugfixes.js: {}
          plugins.js: {}
        core:
          LICENSE: {}
          README.md: {}
          cjs-proxy.cjs: {}
          lib:
            config:
              cache-contexts.js: {}
              cache-contexts.js.map: {}
              caching.js: {}
              caching.js.map: {}
              config-chain.js: {}
              config-chain.js.map: {}
              config-descriptors.js: {}
              config-descriptors.js.map: {}
              files:
                configuration.js: {}
                configuration.js.map: {}
                import.cjs: {}
                import.cjs.map: {}
                index-browser.js: {}
                index-browser.js.map: {}
                index.js: {}
                index.js.map: {}
                module-types.js: {}
                module-types.js.map: {}
                package.js: {}
                package.js.map: {}
                plugins.js: {}
                plugins.js.map: {}
                types.js: {}
                types.js.map: {}
                utils.js: {}
                utils.js.map: {}
              full.js: {}
              full.js.map: {}
              helpers:
                config-api.js: {}
                config-api.js.map: {}
                deep-array.js: {}
                deep-array.js.map: {}
                environment.js: {}
                environment.js.map: {}
              index.js: {}
              index.js.map: {}
              item.js: {}
              item.js.map: {}
              partial.js: {}
              partial.js.map: {}
              pattern-to-regex.js: {}
              pattern-to-regex.js.map: {}
              plugin.js: {}
              plugin.js.map: {}
              printer.js: {}
              printer.js.map: {}
              resolve-targets-browser.js: {}
              resolve-targets-browser.js.map: {}
              resolve-targets.js: {}
              resolve-targets.js.map: {}
              util.js: {}
              util.js.map: {}
              validation:
                option-assertions.js: {}
                option-assertions.js.map: {}
                options.js: {}
                options.js.map: {}
                plugins.js: {}
                plugins.js.map: {}
                removed.js: {}
                removed.js.map: {}
            errors:
              config-error.js: {}
              config-error.js.map: {}
              rewrite-stack-trace.js: {}
              rewrite-stack-trace.js.map: {}
            gensync-utils:
              async.js: {}
              async.js.map: {}
              fs.js: {}
              fs.js.map: {}
              functional.js: {}
              functional.js.map: {}
            index.js: {}
            index.js.map: {}
            parse.js: {}
            parse.js.map: {}
            parser:
              index.js: {}
              index.js.map: {}
              util:
                missing-plugin-helper.js: {}
                missing-plugin-helper.js.map: {}
            tools:
              build-external-helpers.js: {}
              build-external-helpers.js.map: {}
            transform-ast.js: {}
            transform-ast.js.map: {}
            transform-file-browser.js: {}
            transform-file-browser.js.map: {}
            transform-file.js: {}
            transform-file.js.map: {}
            transform.js: {}
            transform.js.map: {}
            transformation:
              block-hoist-plugin.js: {}
              block-hoist-plugin.js.map: {}
              file:
                file.js: {}
                file.js.map: {}
                generate.js: {}
                generate.js.map: {}
                merge-map.js: {}
                merge-map.js.map: {}
              index.js: {}
              index.js.map: {}
              normalize-file.js: {}
              normalize-file.js.map: {}
              normalize-opts.js: {}
              normalize-opts.js.map: {}
              plugin-pass.js: {}
              plugin-pass.js.map: {}
              util:
                clone-deep.js: {}
                clone-deep.js.map: {}
            vendor:
              import-meta-resolve.js: {}
              import-meta-resolve.js.map: {}
          node_modules:
            .bin:
              semver: {}
            semver:
              LICENSE: {}
              README.md: {}
              bin:
                semver.js: {}
              package.json: {}
              range.bnf: {}
              semver.js: {}
          package.json: {}
          src:
            config:
              files:
                index-browser.ts: {}
                index.ts: {}
              resolve-targets-browser.ts: {}
              resolve-targets.ts: {}
            transform-file-browser.ts: {}
            transform-file.ts: {}
        eslint-parser:
          LICENSE: {}
          README.md: {}
          lib:
            analyze-scope.cjs: {}
            analyze-scope.cjs.map: {}
            client.cjs: {}
            client.cjs.map: {}
            configuration.cjs: {}
            configuration.cjs.map: {}
            convert:
              convertAST.cjs: {}
              convertAST.cjs.map: {}
              convertComments.cjs: {}
              convertComments.cjs.map: {}
              convertTokens.cjs: {}
              convertTokens.cjs.map: {}
              index.cjs: {}
              index.cjs.map: {}
            experimental-worker.cjs: {}
            experimental-worker.cjs.map: {}
            index.cjs: {}
            index.cjs.map: {}
            parse.cjs: {}
            parse.cjs.map: {}
            utils:
              eslint-version.cjs: {}
              eslint-version.cjs.map: {}
            worker:
              ast-info.cjs: {}
              ast-info.cjs.map: {}
              babel-core.cjs: {}
              babel-core.cjs.map: {}
              configuration.cjs: {}
              configuration.cjs.map: {}
              extract-parser-options-plugin.cjs: {}
              extract-parser-options-plugin.cjs.map: {}
              handle-message.cjs: {}
              handle-message.cjs.map: {}
              index.cjs: {}
              index.cjs.map: {}
              maybeParse.cjs: {}
              maybeParse.cjs.map: {}
          node_modules:
            .bin:
              semver: {}
            eslint-visitor-keys:
              CHANGELOG.md: {}
              LICENSE: {}
              README.md: {}
              lib:
                index.js: {}
                visitor-keys.json: {}
              package.json: {}
            semver:
              LICENSE: {}
              README.md: {}
              bin:
                semver.js: {}
              package.json: {}
              range.bnf: {}
              semver.js: {}
          package.json: {}
        generator:
          LICENSE: {}
          README.md: {}
          lib:
            buffer.js: {}
            buffer.js.map: {}
            generators:
              base.js: {}
              base.js.map: {}
              classes.js: {}
              classes.js.map: {}
              expressions.js: {}
              expressions.js.map: {}
              flow.js: {}
              flow.js.map: {}
              index.js: {}
              index.js.map: {}
              jsx.js: {}
              jsx.js.map: {}
              methods.js: {}
              methods.js.map: {}
              modules.js: {}
              modules.js.map: {}
              statements.js: {}
              statements.js.map: {}
              template-literals.js: {}
              template-literals.js.map: {}
              types.js: {}
              types.js.map: {}
              typescript.js: {}
              typescript.js.map: {}
            index.js: {}
            index.js.map: {}
            node:
              index.js: {}
              index.js.map: {}
              parentheses.js: {}
              parentheses.js.map: {}
              whitespace.js: {}
              whitespace.js.map: {}
            printer.js: {}
            printer.js.map: {}
            source-map.js: {}
            source-map.js.map: {}
          package.json: {}
        helper-annotate-as-pure:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        helper-builder-binary-assignment-operator-visitor:
          LICENSE: {}
          README.md: {}
          lib:
            explode-assignable-expression.js: {}
            explode-assignable-expression.js.map: {}
            index.js: {}
            index.js.map: {}
          package.json: {}
        helper-compilation-targets:
          LICENSE: {}
          README.md: {}
          lib:
            debug.js: {}
            debug.js.map: {}
            filter-items.js: {}
            filter-items.js.map: {}
            index.js: {}
            index.js.map: {}
            options.js: {}
            options.js.map: {}
            pretty.js: {}
            pretty.js.map: {}
            targets.js: {}
            targets.js.map: {}
            utils.js: {}
            utils.js.map: {}
          node_modules:
            .bin:
              semver: {}
            semver:
              LICENSE: {}
              README.md: {}
              bin:
                semver.js: {}
              package.json: {}
              range.bnf: {}
              semver.js: {}
          package.json: {}
        helper-create-class-features-plugin:
          LICENSE: {}
          README.md: {}
          lib:
            decorators-2018-09.js: {}
            decorators-2018-09.js.map: {}
            decorators.js: {}
            decorators.js.map: {}
            features.js: {}
            features.js.map: {}
            fields.js: {}
            fields.js.map: {}
            index.js: {}
            index.js.map: {}
            misc.js: {}
            misc.js.map: {}
            typescript.js: {}
            typescript.js.map: {}
          node_modules:
            .bin:
              semver: {}
            semver:
              LICENSE: {}
              README.md: {}
              bin:
                semver.js: {}
              package.json: {}
              range.bnf: {}
              semver.js: {}
          package.json: {}
        helper-create-regexp-features-plugin:
          LICENSE: {}
          README.md: {}
          lib:
            features.js: {}
            features.js.map: {}
            index.js: {}
            index.js.map: {}
            util.js: {}
            util.js.map: {}
          node_modules:
            .bin:
              semver: {}
            semver:
              LICENSE: {}
              README.md: {}
              bin:
                semver.js: {}
              package.json: {}
              range.bnf: {}
              semver.js: {}
          package.json: {}
        helper-define-polyfill-provider:
          LICENSE: {}
          README.md: {}
          esm:
            index.browser.mjs: {}
            index.browser.mjs.map: {}
            index.node.mjs: {}
            index.node.mjs.map: {}
          lib:
            browser:
              dependencies.js: {}
            debug-utils.js: {}
            define-provider.js: {}
            imports-injector.js: {}
            index.js: {}
            meta-resolver.js: {}
            node:
              dependencies.js: {}
            normalize-options.js: {}
            types.js: {}
            utils.js: {}
            visitors:
              entry.js: {}
              index.js: {}
              usage.js: {}
          package.json: {}
        helper-environment-visitor:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        helper-function-name:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        helper-hoist-variables:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        helper-member-expression-to-functions:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        helper-module-imports:
          LICENSE: {}
          README.md: {}
          lib:
            import-builder.js: {}
            import-builder.js.map: {}
            import-injector.js: {}
            import-injector.js.map: {}
            index.js: {}
            index.js.map: {}
            is-module.js: {}
            is-module.js.map: {}
          package.json: {}
        helper-module-transforms:
          LICENSE: {}
          README.md: {}
          lib:
            dynamic-import.js: {}
            dynamic-import.js.map: {}
            get-module-name.js: {}
            get-module-name.js.map: {}
            index.js: {}
            index.js.map: {}
            lazy-modules.js: {}
            lazy-modules.js.map: {}
            normalize-and-load-metadata.js: {}
            normalize-and-load-metadata.js.map: {}
            rewrite-live-references.js: {}
            rewrite-live-references.js.map: {}
            rewrite-this.js: {}
            rewrite-this.js.map: {}
          package.json: {}
        helper-optimise-call-expression:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        helper-plugin-utils:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        helper-remap-async-to-generator:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        helper-replace-supers:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        helper-simple-access:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        helper-skip-transparent-expression-wrappers:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        helper-split-export-declaration:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        helper-string-parser:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        helper-validator-identifier:
          LICENSE: {}
          README.md: {}
          lib:
            identifier.js: {}
            identifier.js.map: {}
            index.js: {}
            index.js.map: {}
            keyword.js: {}
            keyword.js.map: {}
          package.json: {}
          scripts:
            generate-identifier-regex.js: {}
        helper-validator-option:
          LICENSE: {}
          README.md: {}
          lib:
            find-suggestion.js: {}
            find-suggestion.js.map: {}
            index.js: {}
            index.js.map: {}
            validator.js: {}
            validator.js.map: {}
          package.json: {}
        helper-wrap-function:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        helpers:
          LICENSE: {}
          README.md: {}
          lib:
            helpers:
              AsyncGenerator.js: {}
              AsyncGenerator.js.map: {}
              OverloadYield.js: {}
              OverloadYield.js.map: {}
              applyDecs.js: {}
              applyDecs.js.map: {}
              applyDecs2203.js: {}
              applyDecs2203.js.map: {}
              applyDecs2203R.js: {}
              applyDecs2203R.js.map: {}
              applyDecs2301.js: {}
              applyDecs2301.js.map: {}
              applyDecs2305.js: {}
              applyDecs2305.js.map: {}
              applyDecs2311.js: {}
              applyDecs2311.js.map: {}
              assertClassBrand.js: {}
              assertClassBrand.js.map: {}
              asyncGeneratorDelegate.js: {}
              asyncGeneratorDelegate.js.map: {}
              asyncIterator.js: {}
              asyncIterator.js.map: {}
              awaitAsyncGenerator.js: {}
              awaitAsyncGenerator.js.map: {}
              callSuper.js: {}
              callSuper.js.map: {}
              checkInRHS.js: {}
              checkInRHS.js.map: {}
              classPrivateFieldGet2.js: {}
              classPrivateFieldGet2.js.map: {}
              classPrivateFieldSet2.js: {}
              classPrivateFieldSet2.js.map: {}
              classPrivateGetter.js: {}
              classPrivateGetter.js.map: {}
              classPrivateSetter.js: {}
              classPrivateSetter.js.map: {}
              construct.js: {}
              construct.js.map: {}
              defineAccessor.js: {}
              defineAccessor.js.map: {}
              dispose.js: {}
              dispose.js.map: {}
              importDeferProxy.js: {}
              importDeferProxy.js.map: {}
              interopRequireWildcard.js: {}
              interopRequireWildcard.js.map: {}
              isNativeReflectConstruct.js: {}
              isNativeReflectConstruct.js.map: {}
              iterableToArrayLimit.js: {}
              iterableToArrayLimit.js.map: {}
              iterableToArrayLimitLoose.js: {}
              iterableToArrayLimitLoose.js.map: {}
              jsx.js: {}
              jsx.js.map: {}
              objectSpread2.js: {}
              objectSpread2.js.map: {}
              regeneratorRuntime.js: {}
              regeneratorRuntime.js.map: {}
              setFunctionName.js: {}
              setFunctionName.js.map: {}
              toPrimitive.js: {}
              toPrimitive.js.map: {}
              toPropertyKey.js: {}
              toPropertyKey.js.map: {}
              toSetter.js: {}
              toSetter.js.map: {}
              typeof.js: {}
              typeof.js.map: {}
              using.js: {}
              using.js.map: {}
              usingCtx.js: {}
              usingCtx.js.map: {}
              wrapRegExp.js: {}
              wrapRegExp.js.map: {}
            helpers-generated.js: {}
            helpers-generated.js.map: {}
            helpers.js: {}
            helpers.js.map: {}
            index.js: {}
            index.js.map: {}
          package.json: {}
          scripts:
            generate-helpers.js: {}
            generate-regenerator-runtime.js: {}
            package.json: {}
        highlight:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        parser:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          bin:
            babel-parser.js: {}
          index.cjs: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
          typings:
            babel-parser.d.ts: {}
        plugin-bugfix-firefox-class-in-computed-class-key:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-bugfix-safari-id-destructuring-collision-in-function-expression:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-bugfix-v8-spread-parameters-in-optional-chaining:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-bugfix-v8-static-class-fields-redefine-readonly:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-proposal-class-properties:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        plugin-proposal-decorators:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
            transformer-legacy.js: {}
            transformer-legacy.js.map: {}
          package.json: {}
        plugin-proposal-nullish-coalescing-operator:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        plugin-proposal-numeric-separator:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        plugin-proposal-optional-chaining:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-proposal-private-methods:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        plugin-proposal-private-property-in-object:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-syntax-async-generators:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        plugin-syntax-bigint:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        plugin-syntax-class-properties:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        plugin-syntax-class-static-block:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        plugin-syntax-decorators:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-syntax-dynamic-import:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        plugin-syntax-export-namespace-from:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        plugin-syntax-flow:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-syntax-import-assertions:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-syntax-import-attributes:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-syntax-import-meta:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        plugin-syntax-json-strings:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        plugin-syntax-jsx:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-syntax-logical-assignment-operators:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        plugin-syntax-nullish-coalescing-operator:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        plugin-syntax-numeric-separator:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        plugin-syntax-object-rest-spread:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        plugin-syntax-optional-catch-binding:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        plugin-syntax-optional-chaining:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        plugin-syntax-private-property-in-object:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        plugin-syntax-top-level-await:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        plugin-syntax-typescript:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-syntax-unicode-sets-regex:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        plugin-transform-arrow-functions:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-async-generator-functions:
          LICENSE: {}
          README.md: {}
          lib:
            for-await.js: {}
            for-await.js.map: {}
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-async-to-generator:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-block-scoped-functions:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-block-scoping:
          LICENSE: {}
          README.md: {}
          lib:
            annex-B_3_3.js: {}
            annex-B_3_3.js.map: {}
            index.js: {}
            index.js.map: {}
            loop.js: {}
            loop.js.map: {}
            validation.js: {}
            validation.js.map: {}
          package.json: {}
        plugin-transform-class-properties:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-class-static-block:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-classes:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
            inline-callSuper-helpers.js: {}
            inline-callSuper-helpers.js.map: {}
            transformClass.js: {}
            transformClass.js.map: {}
          package.json: {}
        plugin-transform-computed-properties:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-destructuring:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-dotall-regex:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-duplicate-keys:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-dynamic-import:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-exponentiation-operator:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-export-namespace-from:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-flow-strip-types:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-for-of:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
            no-helper-implementation.js: {}
            no-helper-implementation.js.map: {}
          package.json: {}
        plugin-transform-function-name:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-json-strings:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-literals:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-logical-assignment-operators:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-member-expression-literals:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-modules-amd:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-modules-commonjs:
          LICENSE: {}
          README.md: {}
          lib:
            dynamic-import.js: {}
            dynamic-import.js.map: {}
            hooks.js: {}
            hooks.js.map: {}
            index.js: {}
            index.js.map: {}
            lazy.js: {}
            lazy.js.map: {}
          package.json: {}
        plugin-transform-modules-systemjs:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-modules-umd:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-named-capturing-groups-regex:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-new-target:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-nullish-coalescing-operator:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-numeric-separator:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-object-rest-spread:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-object-super:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-optional-catch-binding:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-optional-chaining:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-parameters:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
            params.js: {}
            params.js.map: {}
            rest.js: {}
            rest.js.map: {}
            shadow-utils.js: {}
            shadow-utils.js.map: {}
          package.json: {}
        plugin-transform-private-methods:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-private-property-in-object:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-property-literals:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-react-constant-elements:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-react-display-name:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-react-jsx:
          LICENSE: {}
          README.md: {}
          lib:
            create-plugin.js: {}
            create-plugin.js.map: {}
            development.js: {}
            development.js.map: {}
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-react-jsx-development:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-react-pure-annotations:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-regenerator:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-reserved-words:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-runtime:
          LICENSE: {}
          README.md: {}
          lib:
            babel-7:
              index.cjs: {}
              index.cjs.map: {}
              polyfills.cjs: {}
              polyfills.cjs.map: {}
            get-runtime-path:
              browser.js: {}
              browser.js.map: {}
              index.js: {}
              index.js.map: {}
            helpers.js: {}
            helpers.js.map: {}
            index.js: {}
            index.js.map: {}
          node_modules:
            .bin:
              semver: {}
            semver:
              LICENSE: {}
              README.md: {}
              bin:
                semver.js: {}
              package.json: {}
              range.bnf: {}
              semver.js: {}
          package.json: {}
          src:
            get-runtime-path:
              browser.ts: {}
              index.ts: {}
        plugin-transform-shorthand-properties:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-spread:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-sticky-regex:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-template-literals:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-typeof-symbol:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-typescript:
          LICENSE: {}
          README.md: {}
          lib:
            const-enum.js: {}
            const-enum.js.map: {}
            enum.js: {}
            enum.js.map: {}
            global-types.js: {}
            global-types.js.map: {}
            index.js: {}
            index.js.map: {}
            namespace.js: {}
            namespace.js.map: {}
          package.json: {}
        plugin-transform-unicode-escapes:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-unicode-property-regex:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-unicode-regex:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        plugin-transform-unicode-sets-regex:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        preset-env:
          LICENSE: {}
          README.md: {}
          data:
            built-in-modules.js: {}
            built-in-modules.json.js: {}
            built-ins.js: {}
            built-ins.json.js: {}
            core-js-compat.js: {}
            corejs2-built-ins.js: {}
            corejs2-built-ins.json.js: {}
            package.json: {}
            plugins.js: {}
            plugins.json.js: {}
            shipped-proposals.js: {}
            unreleased-labels.js: {}
          lib:
            available-plugins.js: {}
            available-plugins.js.map: {}
            debug.js: {}
            debug.js.map: {}
            filter-items.js: {}
            filter-items.js.map: {}
            index.js: {}
            index.js.map: {}
            module-transformations.js: {}
            module-transformations.js.map: {}
            normalize-options.js: {}
            normalize-options.js.map: {}
            options.js: {}
            options.js.map: {}
            plugins-compat-data.js: {}
            plugins-compat-data.js.map: {}
            polyfills:
              babel-7-plugins.cjs: {}
              babel-7-plugins.cjs.map: {}
              babel-polyfill.cjs: {}
              babel-polyfill.cjs.map: {}
              regenerator.cjs: {}
              regenerator.cjs.map: {}
              utils.cjs: {}
              utils.cjs.map: {}
            shipped-proposals.js: {}
            shipped-proposals.js.map: {}
            targets-parser.js: {}
            targets-parser.js.map: {}
          node_modules:
            .bin:
              semver: {}
            semver:
              LICENSE: {}
              README.md: {}
              bin:
                semver.js: {}
              package.json: {}
              range.bnf: {}
              semver.js: {}
          package.json: {}
        preset-modules:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            plugins:
              transform-async-arrows-in-class:
                index.js: {}
              transform-edge-default-parameters:
                index.js: {}
              transform-edge-function-name:
                index.js: {}
              transform-jsx-spread:
                index.js: {}
              transform-safari-block-shadowing:
                index.js: {}
              transform-safari-for-shadowing:
                index.js: {}
              transform-tagged-template-caching:
                index.js: {}
          package.json: {}
          src:
            index.js: {}
            plugins:
              transform-async-arrows-in-class:
                index.js: {}
              transform-edge-default-parameters:
                index.js: {}
              transform-edge-function-name:
                index.js: {}
              transform-jsx-spread:
                index.js: {}
              transform-safari-block-shadowing:
                index.js: {}
              transform-safari-for-shadowing:
                index.js: {}
              transform-tagged-template-caching:
                index.js: {}
        preset-react:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        preset-typescript:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            index.js.map: {}
          package.json: {}
        regjsgen:
          LICENSE-MIT.txt: {}
          README.md: {}
          package.json: {}
          regjsgen.js: {}
        runtime:
          LICENSE: {}
          README.md: {}
          helpers:
            AsyncGenerator.js: {}
            AwaitValue.js: {}
            OverloadYield.js: {}
            applyDecoratedDescriptor.js: {}
            applyDecs.js: {}
            applyDecs2203.js: {}
            applyDecs2203R.js: {}
            applyDecs2301.js: {}
            applyDecs2305.js: {}
            applyDecs2311.js: {}
            arrayLikeToArray.js: {}
            arrayWithHoles.js: {}
            arrayWithoutHoles.js: {}
            assertClassBrand.js: {}
            assertThisInitialized.js: {}
            asyncGeneratorDelegate.js: {}
            asyncIterator.js: {}
            asyncToGenerator.js: {}
            awaitAsyncGenerator.js: {}
            callSuper.js: {}
            checkInRHS.js: {}
            checkPrivateRedeclaration.js: {}
            classApplyDescriptorDestructureSet.js: {}
            classApplyDescriptorGet.js: {}
            classApplyDescriptorSet.js: {}
            classCallCheck.js: {}
            classCheckPrivateStaticAccess.js: {}
            classCheckPrivateStaticFieldDescriptor.js: {}
            classExtractFieldDescriptor.js: {}
            classNameTDZError.js: {}
            classPrivateFieldDestructureSet.js: {}
            classPrivateFieldGet.js: {}
            classPrivateFieldGet2.js: {}
            classPrivateFieldInitSpec.js: {}
            classPrivateFieldLooseBase.js: {}
            classPrivateFieldLooseKey.js: {}
            classPrivateFieldSet.js: {}
            classPrivateFieldSet2.js: {}
            classPrivateGetter.js: {}
            classPrivateMethodGet.js: {}
            classPrivateMethodInitSpec.js: {}
            classPrivateMethodSet.js: {}
            classPrivateSetter.js: {}
            classStaticPrivateFieldDestructureSet.js: {}
            classStaticPrivateFieldSpecGet.js: {}
            classStaticPrivateFieldSpecSet.js: {}
            classStaticPrivateMethodGet.js: {}
            classStaticPrivateMethodSet.js: {}
            construct.js: {}
            createClass.js: {}
            createForOfIteratorHelper.js: {}
            createForOfIteratorHelperLoose.js: {}
            createSuper.js: {}
            decorate.js: {}
            defaults.js: {}
            defineAccessor.js: {}
            defineEnumerableProperties.js: {}
            defineProperty.js: {}
            dispose.js: {}
            esm:
              AsyncGenerator.js: {}
              AwaitValue.js: {}
              OverloadYield.js: {}
              applyDecoratedDescriptor.js: {}
              applyDecs.js: {}
              applyDecs2203.js: {}
              applyDecs2203R.js: {}
              applyDecs2301.js: {}
              applyDecs2305.js: {}
              applyDecs2311.js: {}
              arrayLikeToArray.js: {}
              arrayWithHoles.js: {}
              arrayWithoutHoles.js: {}
              assertClassBrand.js: {}
              assertThisInitialized.js: {}
              asyncGeneratorDelegate.js: {}
              asyncIterator.js: {}
              asyncToGenerator.js: {}
              awaitAsyncGenerator.js: {}
              callSuper.js: {}
              checkInRHS.js: {}
              checkPrivateRedeclaration.js: {}
              classApplyDescriptorDestructureSet.js: {}
              classApplyDescriptorGet.js: {}
              classApplyDescriptorSet.js: {}
              classCallCheck.js: {}
              classCheckPrivateStaticAccess.js: {}
              classCheckPrivateStaticFieldDescriptor.js: {}
              classExtractFieldDescriptor.js: {}
              classNameTDZError.js: {}
              classPrivateFieldDestructureSet.js: {}
              classPrivateFieldGet.js: {}
              classPrivateFieldGet2.js: {}
              classPrivateFieldInitSpec.js: {}
              classPrivateFieldLooseBase.js: {}
              classPrivateFieldLooseKey.js: {}
              classPrivateFieldSet.js: {}
              classPrivateFieldSet2.js: {}
              classPrivateGetter.js: {}
              classPrivateMethodGet.js: {}
              classPrivateMethodInitSpec.js: {}
              classPrivateMethodSet.js: {}
              classPrivateSetter.js: {}
              classStaticPrivateFieldDestructureSet.js: {}
              classStaticPrivateFieldSpecGet.js: {}
              classStaticPrivateFieldSpecSet.js: {}
              classStaticPrivateMethodGet.js: {}
              classStaticPrivateMethodSet.js: {}
              construct.js: {}
              createClass.js: {}
              createForOfIteratorHelper.js: {}
              createForOfIteratorHelperLoose.js: {}
              createSuper.js: {}
              decorate.js: {}
              defaults.js: {}
              defineAccessor.js: {}
              defineEnumerableProperties.js: {}
              defineProperty.js: {}
              dispose.js: {}
              extends.js: {}
              get.js: {}
              getPrototypeOf.js: {}
              identity.js: {}
              importDeferProxy.js: {}
              inherits.js: {}
              inheritsLoose.js: {}
              initializerDefineProperty.js: {}
              initializerWarningHelper.js: {}
              instanceof.js: {}
              interopRequireDefault.js: {}
              interopRequireWildcard.js: {}
              isNativeFunction.js: {}
              isNativeReflectConstruct.js: {}
              iterableToArray.js: {}
              iterableToArrayLimit.js: {}
              iterableToArrayLimitLoose.js: {}
              jsx.js: {}
              maybeArrayLike.js: {}
              newArrowCheck.js: {}
              nonIterableRest.js: {}
              nonIterableSpread.js: {}
              nullishReceiverError.js: {}
              objectDestructuringEmpty.js: {}
              objectSpread.js: {}
              objectSpread2.js: {}
              objectWithoutProperties.js: {}
              objectWithoutPropertiesLoose.js: {}
              package.json: {}
              possibleConstructorReturn.js: {}
              readOnlyError.js: {}
              regeneratorRuntime.js: {}
              set.js: {}
              setFunctionName.js: {}
              setPrototypeOf.js: {}
              skipFirstGeneratorNext.js: {}
              slicedToArray.js: {}
              slicedToArrayLoose.js: {}
              superPropBase.js: {}
              taggedTemplateLiteral.js: {}
              taggedTemplateLiteralLoose.js: {}
              tdz.js: {}
              temporalRef.js: {}
              temporalUndefined.js: {}
              toArray.js: {}
              toConsumableArray.js: {}
              toPrimitive.js: {}
              toPropertyKey.js: {}
              toSetter.js: {}
              typeof.js: {}
              unsupportedIterableToArray.js: {}
              using.js: {}
              usingCtx.js: {}
              wrapAsyncGenerator.js: {}
              wrapNativeSuper.js: {}
              wrapRegExp.js: {}
              writeOnlyError.js: {}
            extends.js: {}
            get.js: {}
            getPrototypeOf.js: {}
            identity.js: {}
            importDeferProxy.js: {}
            inherits.js: {}
            inheritsLoose.js: {}
            initializerDefineProperty.js: {}
            initializerWarningHelper.js: {}
            instanceof.js: {}
            interopRequireDefault.js: {}
            interopRequireWildcard.js: {}
            isNativeFunction.js: {}
            isNativeReflectConstruct.js: {}
            iterableToArray.js: {}
            iterableToArrayLimit.js: {}
            iterableToArrayLimitLoose.js: {}
            jsx.js: {}
            maybeArrayLike.js: {}
            newArrowCheck.js: {}
            nonIterableRest.js: {}
            nonIterableSpread.js: {}
            nullishReceiverError.js: {}
            objectDestructuringEmpty.js: {}
            objectSpread.js: {}
            objectSpread2.js: {}
            objectWithoutProperties.js: {}
            objectWithoutPropertiesLoose.js: {}
            possibleConstructorReturn.js: {}
            readOnlyError.js: {}
            regeneratorRuntime.js: {}
            set.js: {}
            setFunctionName.js: {}
            setPrototypeOf.js: {}
            skipFirstGeneratorNext.js: {}
            slicedToArray.js: {}
            slicedToArrayLoose.js: {}
            superPropBase.js: {}
            taggedTemplateLiteral.js: {}
            taggedTemplateLiteralLoose.js: {}
            tdz.js: {}
            temporalRef.js: {}
            temporalUndefined.js: {}
            toArray.js: {}
            toConsumableArray.js: {}
            toPrimitive.js: {}
            toPropertyKey.js: {}
            toSetter.js: {}
            typeof.js: {}
            unsupportedIterableToArray.js: {}
            using.js: {}
            usingCtx.js: {}
            wrapAsyncGenerator.js: {}
            wrapNativeSuper.js: {}
            wrapRegExp.js: {}
            writeOnlyError.js: {}
          package.json: {}
          regenerator:
            index.js: {}
        template:
          LICENSE: {}
          README.md: {}
          lib:
            builder.js: {}
            builder.js.map: {}
            formatters.js: {}
            formatters.js.map: {}
            index.js: {}
            index.js.map: {}
            literal.js: {}
            literal.js.map: {}
            options.js: {}
            options.js.map: {}
            parse.js: {}
            parse.js.map: {}
            populate.js: {}
            populate.js.map: {}
            string.js: {}
            string.js.map: {}
          package.json: {}
        traverse:
          LICENSE: {}
          README.md: {}
          lib:
            cache.js: {}
            cache.js.map: {}
            context.js: {}
            context.js.map: {}
            hub.js: {}
            hub.js.map: {}
            index.js: {}
            index.js.map: {}
            path:
              ancestry.js: {}
              ancestry.js.map: {}
              comments.js: {}
              comments.js.map: {}
              context.js: {}
              context.js.map: {}
              conversion.js: {}
              conversion.js.map: {}
              evaluation.js: {}
              evaluation.js.map: {}
              family.js: {}
              family.js.map: {}
              index.js: {}
              index.js.map: {}
              inference:
                index.js: {}
                index.js.map: {}
                inferer-reference.js: {}
                inferer-reference.js.map: {}
                inferers.js: {}
                inferers.js.map: {}
                util.js: {}
                util.js.map: {}
              introspection.js: {}
              introspection.js.map: {}
              lib:
                hoister.js: {}
                hoister.js.map: {}
                removal-hooks.js: {}
                removal-hooks.js.map: {}
                virtual-types-validator.js: {}
                virtual-types-validator.js.map: {}
                virtual-types.js: {}
                virtual-types.js.map: {}
              modification.js: {}
              modification.js.map: {}
              removal.js: {}
              removal.js.map: {}
              replacement.js: {}
              replacement.js.map: {}
            scope:
              binding.js: {}
              binding.js.map: {}
              index.js: {}
              index.js.map: {}
              lib:
                renamer.js: {}
                renamer.js.map: {}
            traverse-node.js: {}
            traverse-node.js.map: {}
            types.js: {}
            types.js.map: {}
            visitors.js: {}
            visitors.js.map: {}
          package.json: {}
        types:
          LICENSE: {}
          README.md: {}
          lib:
            asserts:
              assertNode.js: {}
              assertNode.js.map: {}
              generated:
                index.js: {}
                index.js.map: {}
            ast-types:
              generated:
                index.js: {}
                index.js.map: {}
            builders:
              flow:
                createFlowUnionType.js: {}
                createFlowUnionType.js.map: {}
                createTypeAnnotationBasedOnTypeof.js: {}
                createTypeAnnotationBasedOnTypeof.js.map: {}
              generated:
                index.js: {}
                index.js.map: {}
                uppercase.js: {}
                uppercase.js.map: {}
              productions.js: {}
              productions.js.map: {}
              react:
                buildChildren.js: {}
                buildChildren.js.map: {}
              typescript:
                createTSUnionType.js: {}
                createTSUnionType.js.map: {}
              validateNode.js: {}
              validateNode.js.map: {}
            clone:
              clone.js: {}
              clone.js.map: {}
              cloneDeep.js: {}
              cloneDeep.js.map: {}
              cloneDeepWithoutLoc.js: {}
              cloneDeepWithoutLoc.js.map: {}
              cloneNode.js: {}
              cloneNode.js.map: {}
              cloneWithoutLoc.js: {}
              cloneWithoutLoc.js.map: {}
            comments:
              addComment.js: {}
              addComment.js.map: {}
              addComments.js: {}
              addComments.js.map: {}
              inheritInnerComments.js: {}
              inheritInnerComments.js.map: {}
              inheritLeadingComments.js: {}
              inheritLeadingComments.js.map: {}
              inheritTrailingComments.js: {}
              inheritTrailingComments.js.map: {}
              inheritsComments.js: {}
              inheritsComments.js.map: {}
              removeComments.js: {}
              removeComments.js.map: {}
            constants:
              generated:
                index.js: {}
                index.js.map: {}
              index.js: {}
              index.js.map: {}
            converters:
              ensureBlock.js: {}
              ensureBlock.js.map: {}
              gatherSequenceExpressions.js: {}
              gatherSequenceExpressions.js.map: {}
              toBindingIdentifierName.js: {}
              toBindingIdentifierName.js.map: {}
              toBlock.js: {}
              toBlock.js.map: {}
              toComputedKey.js: {}
              toComputedKey.js.map: {}
              toExpression.js: {}
              toExpression.js.map: {}
              toIdentifier.js: {}
              toIdentifier.js.map: {}
              toKeyAlias.js: {}
              toKeyAlias.js.map: {}
              toSequenceExpression.js: {}
              toSequenceExpression.js.map: {}
              toStatement.js: {}
              toStatement.js.map: {}
              valueToNode.js: {}
              valueToNode.js.map: {}
            definitions:
              core.js: {}
              core.js.map: {}
              deprecated-aliases.js: {}
              deprecated-aliases.js.map: {}
              experimental.js: {}
              experimental.js.map: {}
              flow.js: {}
              flow.js.map: {}
              index.js: {}
              index.js.map: {}
              jsx.js: {}
              jsx.js.map: {}
              misc.js: {}
              misc.js.map: {}
              placeholders.js: {}
              placeholders.js.map: {}
              typescript.js: {}
              typescript.js.map: {}
              utils.js: {}
              utils.js.map: {}
            index-legacy.d.ts: {}
            index.d.ts: {}
            index.js: {}
            index.js.flow: {}
            index.js.map: {}
            modifications:
              appendToMemberExpression.js: {}
              appendToMemberExpression.js.map: {}
              flow:
                removeTypeDuplicates.js: {}
                removeTypeDuplicates.js.map: {}
              inherits.js: {}
              inherits.js.map: {}
              prependToMemberExpression.js: {}
              prependToMemberExpression.js.map: {}
              removeProperties.js: {}
              removeProperties.js.map: {}
              removePropertiesDeep.js: {}
              removePropertiesDeep.js.map: {}
              typescript:
                removeTypeDuplicates.js: {}
                removeTypeDuplicates.js.map: {}
            retrievers:
              getBindingIdentifiers.js: {}
              getBindingIdentifiers.js.map: {}
              getOuterBindingIdentifiers.js: {}
              getOuterBindingIdentifiers.js.map: {}
            traverse:
              traverse.js: {}
              traverse.js.map: {}
              traverseFast.js: {}
              traverseFast.js.map: {}
            utils:
              deprecationWarning.js: {}
              deprecationWarning.js.map: {}
              inherit.js: {}
              inherit.js.map: {}
              react:
                cleanJSXElementLiteralChild.js: {}
                cleanJSXElementLiteralChild.js.map: {}
              shallowEqual.js: {}
              shallowEqual.js.map: {}
            validators:
              buildMatchMemberExpression.js: {}
              buildMatchMemberExpression.js.map: {}
              generated:
                index.js: {}
                index.js.map: {}
              is.js: {}
              is.js.map: {}
              isBinding.js: {}
              isBinding.js.map: {}
              isBlockScoped.js: {}
              isBlockScoped.js.map: {}
              isImmutable.js: {}
              isImmutable.js.map: {}
              isLet.js: {}
              isLet.js.map: {}
              isNode.js: {}
              isNode.js.map: {}
              isNodesEquivalent.js: {}
              isNodesEquivalent.js.map: {}
              isPlaceholderType.js: {}
              isPlaceholderType.js.map: {}
              isReferenced.js: {}
              isReferenced.js.map: {}
              isScope.js: {}
              isScope.js.map: {}
              isSpecifierDefault.js: {}
              isSpecifierDefault.js.map: {}
              isType.js: {}
              isType.js.map: {}
              isValidES3Identifier.js: {}
              isValidES3Identifier.js.map: {}
              isValidIdentifier.js: {}
              isValidIdentifier.js.map: {}
              isVar.js: {}
              isVar.js.map: {}
              matchesPattern.js: {}
              matchesPattern.js.map: {}
              react:
                isCompatTag.js: {}
                isCompatTag.js.map: {}
                isReactComponent.js: {}
                isReactComponent.js.map: {}
              validate.js: {}
              validate.js.map: {}
          package.json: {}
      '@bcoe':
        v8-coverage:
          .editorconfig: {}
          .gitattributes: {}
          CHANGELOG.md: {}
          LICENSE.md: {}
          LICENSE.txt: {}
          README.md: {}
          dist:
            lib:
              CHANGELOG.md: {}
              LICENSE.md: {}
              README.md: {}
              _src:
                ascii.ts: {}
                clone.ts: {}
                compare.ts: {}
                index.ts: {}
                merge.ts: {}
                normalize.ts: {}
                range-tree.ts: {}
                types.ts: {}
              ascii.d.ts: {}
              ascii.js: {}
              ascii.mjs: {}
              clone.d.ts: {}
              clone.js: {}
              clone.mjs: {}
              compare.d.ts: {}
              compare.js: {}
              compare.mjs: {}
              index.d.ts: {}
              index.js: {}
              index.mjs: {}
              merge.d.ts: {}
              merge.js: {}
              merge.mjs: {}
              normalize.d.ts: {}
              normalize.js: {}
              normalize.mjs: {}
              package.json: {}
              range-tree.d.ts: {}
              range-tree.js: {}
              range-tree.mjs: {}
              tsconfig.json: {}
              types.d.ts: {}
              types.js: {}
              types.mjs: {}
          gulpfile.ts: {}
          package.json: {}
          src:
            lib:
              ascii.ts: {}
              clone.ts: {}
              compare.ts: {}
              index.ts: {}
              merge.ts: {}
              normalize.ts: {}
              range-tree.ts: {}
              types.ts: {}
            test:
              merge.spec.ts: {}
          tsconfig.json: {}
      '@csstools':
        normalize.css:
          LICENSE.md: {}
          README.md: {}
          normalize.css: {}
          opinionated.css: {}
          package.json: {}
        postcss-cascade-layers:
          CHANGELOG.md: {}
          LICENSE.md: {}
          README.md: {}
          dist:
            adjust-selector-specificity.d.ts: {}
            clean-blocks.d.ts: {}
            constants.d.ts: {}
            desugar-and-parse-layer-names.d.ts: {}
            desugar-nested-layers.d.ts: {}
            get-conditional-atrule-ancestor.d.ts: {}
            get-layer-atrule-ancestor.d.ts: {}
            index.cjs: {}
            index.d.ts: {}
            index.mjs: {}
            is-processable-layer-rule.d.ts: {}
            model.d.ts: {}
            options.d.ts: {}
            record-layer-order.d.ts: {}
            some-in-tree.d.ts: {}
            sort-root-nodes.d.ts: {}
            split-important-styles.d.ts: {}
          package.json: {}
        postcss-color-function:
          CHANGELOG.md: {}
          LICENSE.md: {}
          README.md: {}
          dist:
            convert-a98-rgb-to-srgb.d.ts: {}
            convert-cie-xyz-50-to-srgb.d.ts: {}
            convert-cie-xyz-65-to-srgb.d.ts: {}
            convert-display-p3-to-srgb.d.ts: {}
            convert-prophoto-rgb-to-srgb.d.ts: {}
            convert-rec2020-to-srgb.d.ts: {}
            convert-srgb-linear-to-srgb.d.ts: {}
            convert-srgb-to-srgb.d.ts: {}
            css-color-4:
              conversions.d.ts: {}
              deltaEOK.d.ts: {}
              map-gamut.d.ts: {}
              multiply-matrices.d.ts: {}
              utilities.d.ts: {}
            has-fallback-decl.d.ts: {}
            has-supports-at-rule-ancestor.d.ts: {}
            index.cjs: {}
            index.d.ts: {}
            index.mjs: {}
            modified-value.d.ts: {}
            on-css-function.d.ts: {}
          package.json: {}
        postcss-font-format-keywords:
          CHANGELOG.md: {}
          LICENSE.md: {}
          README.md: {}
          dist:
            index.cjs: {}
            index.d.ts: {}
            index.mjs: {}
          package.json: {}
        postcss-hwb-function:
          CHANGELOG.md: {}
          INSTALL.md: {}
          LICENSE.md: {}
          README.md: {}
          dist:
            has-supports-at-rule-ancestor.d.ts: {}
            hwb.d.ts: {}
            index.cjs: {}
            index.d.ts: {}
            index.mjs: {}
            on-css-function.d.ts: {}
          package.json: {}
        postcss-ic-unit:
          CHANGELOG.md: {}
          LICENSE.md: {}
          README.md: {}
          dist:
            has-supports-at-rule-ancestor.d.ts: {}
            index.cjs: {}
            index.d.ts: {}
            index.mjs: {}
          package.json: {}
        postcss-is-pseudo-class:
          CHANGELOG.md: {}
          LICENSE.md: {}
          README.md: {}
          dist:
            index.cjs: {}
            index.d.ts: {}
            index.mjs: {}
            split-selectors:
              complex:
                child-adjacent-child.d.ts: {}
                is-in-compound.d.ts: {}
              complex.d.ts: {}
              compound-selector-order.d.ts: {}
              split-selectors.d.ts: {}
          package.json: {}
        postcss-nested-calc:
          CHANGELOG.md: {}
          LICENSE.md: {}
          README.md: {}
          dist:
            index.cjs: {}
            index.d.ts: {}
            index.mjs: {}
            occurrences.d.ts: {}
          package.json: {}
        postcss-normalize-display-values:
          CHANGELOG.md: {}
          LICENSE.md: {}
          README.md: {}
          dist:
            index.cjs: {}
            index.d.ts: {}
            index.mjs: {}
            mappings.d.ts: {}
          package.json: {}
        postcss-oklab-function:
          CHANGELOG.md: {}
          LICENSE.md: {}
          README.md: {}
          dist:
            convert-oklab-to-display-p3.d.ts: {}
            convert-oklab-to-srgb.d.ts: {}
            convert-oklch-to-display-p3.d.ts: {}
            convert-oklch-to-srgb.d.ts: {}
            css-color-4:
              conversions.d.ts: {}
              deltaEOK.d.ts: {}
              map-gamut.d.ts: {}
              multiply-matrices.d.ts: {}
              utilities.d.ts: {}
            has-fallback-decl.d.ts: {}
            has-supports-at-rule-ancestor.d.ts: {}
            index.cjs: {}
            index.d.ts: {}
            index.mjs: {}
            modified-values.d.ts: {}
            on-css-function.d.ts: {}
          package.json: {}
        postcss-progressive-custom-properties:
          CHANGELOG.md: {}
          LICENSE.md: {}
          README.md: {}
          dist:
            custom:
              double-position-gradients.d.ts: {}
            index.cjs: {}
            index.d.ts: {}
            index.mjs: {}
            match.d.ts: {}
            matchers.d.ts: {}
            support-conditions-from-values.d.ts: {}
          package.json: {}
        postcss-stepped-value-functions:
          CHANGELOG.md: {}
          LICENSE.md: {}
          README.md: {}
          dist:
            index.cjs: {}
            index.d.ts: {}
            index.mjs: {}
            mod.d.ts: {}
            rem.d.ts: {}
            round.d.ts: {}
            utils.d.ts: {}
          package.json: {}
        postcss-text-decoration-shorthand:
          CHANGELOG.md: {}
          LICENSE.md: {}
          README.md: {}
          dist:
            index.cjs: {}
            index.d.ts: {}
            index.mjs: {}
          package.json: {}
        postcss-trigonometric-functions:
          CHANGELOG.md: {}
          LICENSE.md: {}
          README.md: {}
          dist:
            acos.d.ts: {}
            asin.d.ts: {}
            atan.d.ts: {}
            atan2.d.ts: {}
            cos.d.ts: {}
            index.cjs: {}
            index.d.ts: {}
            index.mjs: {}
            sin.d.ts: {}
            tan.d.ts: {}
            utils.d.ts: {}
          package.json: {}
        postcss-unset-value:
          CHANGELOG.md: {}
          LICENSE.md: {}
          README.md: {}
          dist:
            index.cjs: {}
            index.d.ts: {}
            index.mjs: {}
            property-def.d.ts: {}
          package.json: {}
        selector-specificity:
          CHANGELOG.md: {}
          LICENSE.md: {}
          README.md: {}
          dist:
            index.cjs: {}
            index.d.ts: {}
            index.mjs: {}
          package.json: {}
      '@eslint':
        eslintrc:
          LICENSE: {}
          README.md: {}
          conf:
            config-schema.js: {}
            environments.js: {}
          dist:
            eslintrc-universal.cjs: {}
            eslintrc-universal.cjs.map: {}
            eslintrc.cjs: {}
            eslintrc.cjs.map: {}
          lib:
            cascading-config-array-factory.js: {}
            config-array:
              config-array.js: {}
              config-dependency.js: {}
              extracted-config.js: {}
              ignore-pattern.js: {}
              index.js: {}
              override-tester.js: {}
            config-array-factory.js: {}
            flat-compat.js: {}
            index-universal.js: {}
            index.js: {}
            shared:
              ajv.js: {}
              config-ops.js: {}
              config-validator.js: {}
              deprecation-warnings.js: {}
              naming.js: {}
              relative-module-resolver.js: {}
              types.js: {}
          node_modules:
            .bin:
              js-yaml: {}
            argparse:
              CHANGELOG.md: {}
              LICENSE: {}
              README.md: {}
              argparse.js: {}
              lib:
                sub.js: {}
                textwrap.js: {}
              package.json: {}
            globals:
              globals.json: {}
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            js-yaml:
              CHANGELOG.md: {}
              LICENSE: {}
              README.md: {}
              bin:
                js-yaml.js: {}
              dist:
                js-yaml.js: {}
                js-yaml.min.js: {}
                js-yaml.mjs: {}
              index.js: {}
              lib:
                common.js: {}
                dumper.js: {}
                exception.js: {}
                loader.js: {}
                schema:
                  core.js: {}
                  default.js: {}
                  failsafe.js: {}
                  json.js: {}
                schema.js: {}
                snippet.js: {}
                type:
                  binary.js: {}
                  bool.js: {}
                  float.js: {}
                  int.js: {}
                  map.js: {}
                  merge.js: {}
                  null.js: {}
                  omap.js: {}
                  pairs.js: {}
                  seq.js: {}
                  set.js: {}
                  str.js: {}
                  timestamp.js: {}
                type.js: {}
              package.json: {}
            type-fest:
              base.d.ts: {}
              index.d.ts: {}
              license: {}
              package.json: {}
              readme.md: {}
              source:
                async-return-type.d.ts: {}
                asyncify.d.ts: {}
                basic.d.ts: {}
                conditional-except.d.ts: {}
                conditional-keys.d.ts: {}
                conditional-pick.d.ts: {}
                entries.d.ts: {}
                entry.d.ts: {}
                except.d.ts: {}
                fixed-length-array.d.ts: {}
                iterable-element.d.ts: {}
                literal-union.d.ts: {}
                merge-exclusive.d.ts: {}
                merge.d.ts: {}
                mutable.d.ts: {}
                opaque.d.ts: {}
                package-json.d.ts: {}
                partial-deep.d.ts: {}
                promisable.d.ts: {}
                promise-value.d.ts: {}
                readonly-deep.d.ts: {}
                require-at-least-one.d.ts: {}
                require-exactly-one.d.ts: {}
                set-optional.d.ts: {}
                set-required.d.ts: {}
                set-return-type.d.ts: {}
                stringified.d.ts: {}
                tsconfig-json.d.ts: {}
                union-to-intersection.d.ts: {}
                utilities.d.ts: {}
                value-of.d.ts: {}
              ts41:
                camel-case.d.ts: {}
                delimiter-case.d.ts: {}
                index.d.ts: {}
                kebab-case.d.ts: {}
                pascal-case.d.ts: {}
                snake-case.d.ts: {}
          package.json: {}
          universal.js: {}
        js:
          LICENSE: {}
          README.md: {}
          package.json: {}
          src:
            configs:
              eslint-all.js: {}
              eslint-recommended.js: {}
            index.js: {}
      '@eslint-community':
        eslint-utils:
          LICENSE: {}
          README.md: {}
          index.js: {}
          index.js.map: {}
          index.mjs: {}
          index.mjs.map: {}
          package.json: {}
        regexpp:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          index.js: {}
          index.js.map: {}
          index.mjs: {}
          index.mjs.map: {}
          package.json: {}
      '@humanwhocodes':
        config-array:
          LICENSE: {}
          README.md: {}
          api.js: {}
          package.json: {}
        module-importer:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          dist:
            module-importer.cjs: {}
            module-importer.d.cts: {}
            module-importer.d.ts: {}
            module-importer.js: {}
          package.json: {}
          src:
            module-importer.cjs: {}
            module-importer.js: {}
        object-schema:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          package.json: {}
          src:
            index.js: {}
            merge-strategy.js: {}
            object-schema.js: {}
            validation-strategy.js: {}
      '@isaacs':
        cliui:
          LICENSE.txt: {}
          README.md: {}
          build:
            index.cjs: {}
            index.d.cts: {}
            lib:
              index.js: {}
          index.mjs: {}
          node_modules:
            ansi-regex:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            ansi-styles:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            string-width:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            strip-ansi:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            wrap-ansi:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
          package.json: {}
      '@istanbuljs':
        load-nyc-config:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          index.js: {}
          load-esm.js: {}
          node_modules:
            camelcase:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            find-up:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            locate-path:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            p-limit:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            p-locate:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
          package.json: {}
        schema:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          default-exclude.js: {}
          default-extension.js: {}
          index.js: {}
          package.json: {}
      '@jest':
        console:
          LICENSE: {}
          build:
            BufferedConsole.d.ts: {}
            BufferedConsole.js: {}
            CustomConsole.d.ts: {}
            CustomConsole.js: {}
            NullConsole.d.ts: {}
            NullConsole.js: {}
            getConsoleOutput.d.ts: {}
            getConsoleOutput.js: {}
            index.d.ts: {}
            index.js: {}
            types.d.ts: {}
            types.js: {}
          node_modules:
            ansi-styles:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            chalk:
              index.d.ts: {}
              license: {}
              package.json: {}
              readme.md: {}
              source:
                index.js: {}
                templates.js: {}
                util.js: {}
            color-convert:
              CHANGELOG.md: {}
              LICENSE: {}
              README.md: {}
              conversions.js: {}
              index.js: {}
              package.json: {}
              route.js: {}
            color-name:
              LICENSE: {}
              README.md: {}
              index.js: {}
              package.json: {}
            has-flag:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            supports-color:
              browser.js: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
          package.json: {}
        core:
          LICENSE: {}
          README.md: {}
          build:
            FailedTestsCache.d.ts: {}
            FailedTestsCache.js: {}
            FailedTestsInteractiveMode.d.ts: {}
            FailedTestsInteractiveMode.js: {}
            ReporterDispatcher.d.ts: {}
            ReporterDispatcher.js: {}
            SearchSource.d.ts: {}
            SearchSource.js: {}
            SnapshotInteractiveMode.d.ts: {}
            SnapshotInteractiveMode.js: {}
            TestNamePatternPrompt.d.ts: {}
            TestNamePatternPrompt.js: {}
            TestPathPatternPrompt.d.ts: {}
            TestPathPatternPrompt.js: {}
            TestScheduler.d.ts: {}
            TestScheduler.js: {}
            TestWatcher.d.ts: {}
            TestWatcher.js: {}
            assets:
              jest_logo.png: {}
            cli:
              index.d.ts: {}
              index.js: {}
            collectHandles.d.ts: {}
            collectHandles.js: {}
            getChangedFilesPromise.d.ts: {}
            getChangedFilesPromise.js: {}
            getConfigsOfProjectsToRun.d.ts: {}
            getConfigsOfProjectsToRun.js: {}
            getNoTestFound.d.ts: {}
            getNoTestFound.js: {}
            getNoTestFoundFailed.d.ts: {}
            getNoTestFoundFailed.js: {}
            getNoTestFoundPassWithNoTests.d.ts: {}
            getNoTestFoundPassWithNoTests.js: {}
            getNoTestFoundRelatedToChangedFiles.d.ts: {}
            getNoTestFoundRelatedToChangedFiles.js: {}
            getNoTestFoundVerbose.d.ts: {}
            getNoTestFoundVerbose.js: {}
            getNoTestsFoundMessage.d.ts: {}
            getNoTestsFoundMessage.js: {}
            getProjectDisplayName.d.ts: {}
            getProjectDisplayName.js: {}
            getProjectNamesMissingWarning.d.ts: {}
            getProjectNamesMissingWarning.js: {}
            getSelectProjectsMessage.d.ts: {}
            getSelectProjectsMessage.js: {}
            jest.d.ts: {}
            jest.js: {}
            lib:
              activeFiltersMessage.d.ts: {}
              activeFiltersMessage.js: {}
              createContext.d.ts: {}
              createContext.js: {}
              handleDeprecationWarnings.d.ts: {}
              handleDeprecationWarnings.js: {}
              isValidPath.d.ts: {}
              isValidPath.js: {}
              logDebugMessages.d.ts: {}
              logDebugMessages.js: {}
              updateGlobalConfig.d.ts: {}
              updateGlobalConfig.js: {}
              watchPluginsHelpers.d.ts: {}
              watchPluginsHelpers.js: {}
            plugins:
              FailedTestsInteractive.d.ts: {}
              FailedTestsInteractive.js: {}
              Quit.d.ts: {}
              Quit.js: {}
              TestNamePattern.d.ts: {}
              TestNamePattern.js: {}
              TestPathPattern.d.ts: {}
              TestPathPattern.js: {}
              UpdateSnapshots.d.ts: {}
              UpdateSnapshots.js: {}
              UpdateSnapshotsInteractive.d.ts: {}
              UpdateSnapshotsInteractive.js: {}
            pluralize.d.ts: {}
            pluralize.js: {}
            runGlobalHook.d.ts: {}
            runGlobalHook.js: {}
            runJest.d.ts: {}
            runJest.js: {}
            testSchedulerHelper.d.ts: {}
            testSchedulerHelper.js: {}
            types.d.ts: {}
            types.js: {}
            version.d.ts: {}
            version.js: {}
            watch.d.ts: {}
            watch.js: {}
          node_modules:
            ansi-styles:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            chalk:
              index.d.ts: {}
              license: {}
              package.json: {}
              readme.md: {}
              source:
                index.js: {}
                templates.js: {}
                util.js: {}
            color-convert:
              CHANGELOG.md: {}
              LICENSE: {}
              README.md: {}
              conversions.js: {}
              index.js: {}
              package.json: {}
              route.js: {}
            color-name:
              LICENSE: {}
              README.md: {}
              index.js: {}
              package.json: {}
            has-flag:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            supports-color:
              browser.js: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
          package.json: {}
        environment:
          LICENSE: {}
          build:
            index.d.ts: {}
            index.js: {}
          package.json: {}
        expect-utils:
          LICENSE: {}
          README.md: {}
          build:
            immutableUtils.js: {}
            index.d.ts: {}
            index.js: {}
            jasmineUtils.js: {}
            types.js: {}
            utils.js: {}
          node_modules:
            jest-get-type:
              LICENSE: {}
              build:
                index.d.ts: {}
                index.js: {}
              package.json: {}
          package.json: {}
        fake-timers:
          LICENSE: {}
          build:
            index.d.ts: {}
            index.js: {}
            legacyFakeTimers.d.ts: {}
            legacyFakeTimers.js: {}
            modernFakeTimers.d.ts: {}
            modernFakeTimers.js: {}
          package.json: {}
        globals:
          LICENSE: {}
          build:
            index.d.ts: {}
            index.js: {}
          package.json: {}
        reporters:
          LICENSE: {}
          build:
            BaseReporter.d.ts: {}
            BaseReporter.js: {}
            CoverageReporter.d.ts: {}
            CoverageReporter.js: {}
            CoverageWorker.d.ts: {}
            CoverageWorker.js: {}
            DefaultReporter.d.ts: {}
            DefaultReporter.js: {}
            NotifyReporter.d.ts: {}
            NotifyReporter.js: {}
            Status.d.ts: {}
            Status.js: {}
            SummaryReporter.d.ts: {}
            SummaryReporter.js: {}
            VerboseReporter.d.ts: {}
            VerboseReporter.js: {}
            generateEmptyCoverage.d.ts: {}
            generateEmptyCoverage.js: {}
            getResultHeader.d.ts: {}
            getResultHeader.js: {}
            getSnapshotStatus.d.ts: {}
            getSnapshotStatus.js: {}
            getSnapshotSummary.d.ts: {}
            getSnapshotSummary.js: {}
            getWatermarks.d.ts: {}
            getWatermarks.js: {}
            index.d.ts: {}
            index.js: {}
            types.d.ts: {}
            types.js: {}
            utils.d.ts: {}
            utils.js: {}
          node_modules:
            ansi-styles:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            chalk:
              index.d.ts: {}
              license: {}
              package.json: {}
              readme.md: {}
              source:
                index.js: {}
                templates.js: {}
                util.js: {}
            color-convert:
              CHANGELOG.md: {}
              LICENSE: {}
              README.md: {}
              conversions.js: {}
              index.js: {}
              package.json: {}
              route.js: {}
            color-name:
              LICENSE: {}
              README.md: {}
              index.js: {}
              package.json: {}
            has-flag:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            source-map:
              CHANGELOG.md: {}
              LICENSE: {}
              README.md: {}
              dist:
                source-map.debug.js: {}
                source-map.js: {}
                source-map.min.js: {}
                source-map.min.js.map: {}
              lib:
                array-set.js: {}
                base64-vlq.js: {}
                base64.js: {}
                binary-search.js: {}
                mapping-list.js: {}
                quick-sort.js: {}
                source-map-consumer.js: {}
                source-map-generator.js: {}
                source-node.js: {}
                util.js: {}
              package.json: {}
              source-map.d.ts: {}
              source-map.js: {}
            supports-color:
              browser.js: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
          package.json: {}
        schemas:
          LICENSE: {}
          README.md: {}
          build:
            index.d.ts: {}
            index.js: {}
          package.json: {}
        source-map:
          LICENSE: {}
          build:
            getCallsite.d.ts: {}
            getCallsite.js: {}
            index.d.ts: {}
            index.js: {}
            types.d.ts: {}
            types.js: {}
          node_modules:
            source-map:
              CHANGELOG.md: {}
              LICENSE: {}
              README.md: {}
              dist:
                source-map.debug.js: {}
                source-map.js: {}
                source-map.min.js: {}
                source-map.min.js.map: {}
              lib:
                array-set.js: {}
                base64-vlq.js: {}
                base64.js: {}
                binary-search.js: {}
                mapping-list.js: {}
                quick-sort.js: {}
                source-map-consumer.js: {}
                source-map-generator.js: {}
                source-node.js: {}
                util.js: {}
              package.json: {}
              source-map.d.ts: {}
              source-map.js: {}
          package.json: {}
        test-result:
          LICENSE: {}
          build:
            formatTestResults.d.ts: {}
            formatTestResults.js: {}
            helpers.d.ts: {}
            helpers.js: {}
            index.d.ts: {}
            index.js: {}
            types.d.ts: {}
            types.js: {}
          package.json: {}
        test-sequencer:
          LICENSE: {}
          build:
            index.d.ts: {}
            index.js: {}
          package.json: {}
        transform:
          LICENSE: {}
          build:
            ScriptTransformer.d.ts: {}
            ScriptTransformer.js: {}
            enhanceUnexpectedTokenMessage.d.ts: {}
            enhanceUnexpectedTokenMessage.js: {}
            index.d.ts: {}
            index.js: {}
            runtimeErrorsAndWarnings.d.ts: {}
            runtimeErrorsAndWarnings.js: {}
            shouldInstrument.d.ts: {}
            shouldInstrument.js: {}
            types.d.ts: {}
            types.js: {}
          node_modules:
            ansi-styles:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            chalk:
              index.d.ts: {}
              license: {}
              package.json: {}
              readme.md: {}
              source:
                index.js: {}
                templates.js: {}
                util.js: {}
            color-convert:
              CHANGELOG.md: {}
              LICENSE: {}
              README.md: {}
              conversions.js: {}
              index.js: {}
              package.json: {}
              route.js: {}
            color-name:
              LICENSE: {}
              README.md: {}
              index.js: {}
              package.json: {}
            convert-source-map:
              LICENSE: {}
              README.md: {}
              index.js: {}
              package.json: {}
            has-flag:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            source-map:
              CHANGELOG.md: {}
              LICENSE: {}
              README.md: {}
              dist:
                source-map.debug.js: {}
                source-map.js: {}
                source-map.min.js: {}
                source-map.min.js.map: {}
              lib:
                array-set.js: {}
                base64-vlq.js: {}
                base64.js: {}
                binary-search.js: {}
                mapping-list.js: {}
                quick-sort.js: {}
                source-map-consumer.js: {}
                source-map-generator.js: {}
                source-node.js: {}
                util.js: {}
              package.json: {}
              source-map.d.ts: {}
              source-map.js: {}
            supports-color:
              browser.js: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
          package.json: {}
        types:
          LICENSE: {}
          build:
            Circus.d.ts: {}
            Circus.js: {}
            Config.d.ts: {}
            Config.js: {}
            Global.d.ts: {}
            Global.js: {}
            TestResult.d.ts: {}
            TestResult.js: {}
            Transform.d.ts: {}
            Transform.js: {}
            index.d.ts: {}
            index.js: {}
          node_modules:
            ansi-styles:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            chalk:
              index.d.ts: {}
              license: {}
              package.json: {}
              readme.md: {}
              source:
                index.js: {}
                templates.js: {}
                util.js: {}
            color-convert:
              CHANGELOG.md: {}
              LICENSE: {}
              README.md: {}
              conversions.js: {}
              index.js: {}
              package.json: {}
              route.js: {}
            color-name:
              LICENSE: {}
              README.md: {}
              index.js: {}
              package.json: {}
            has-flag:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            supports-color:
              browser.js: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
          package.json: {}
      '@jridgewell':
        gen-mapping:
          LICENSE: {}
          README.md: {}
          dist:
            gen-mapping.mjs: {}
            gen-mapping.mjs.map: {}
            gen-mapping.umd.js: {}
            gen-mapping.umd.js.map: {}
            types:
              gen-mapping.d.ts: {}
              sourcemap-segment.d.ts: {}
              types.d.ts: {}
          package.json: {}
        resolve-uri:
          LICENSE: {}
          README.md: {}
          dist:
            resolve-uri.mjs: {}
            resolve-uri.mjs.map: {}
            resolve-uri.umd.js: {}
            resolve-uri.umd.js.map: {}
            types:
              resolve-uri.d.ts: {}
          package.json: {}
        set-array:
          LICENSE: {}
          README.md: {}
          dist:
            set-array.mjs: {}
            set-array.mjs.map: {}
            set-array.umd.js: {}
            set-array.umd.js.map: {}
            types:
              set-array.d.ts: {}
          package.json: {}
        source-map:
          LICENSE: {}
          README.md: {}
          dist:
            source-map.cjs: {}
            source-map.cjs.map: {}
            source-map.mjs: {}
            source-map.mjs.map: {}
            source-map.umd.js: {}
            source-map.umd.js.map: {}
            types:
              source-map.d.ts: {}
          package.json: {}
        sourcemap-codec:
          LICENSE: {}
          README.md: {}
          dist:
            sourcemap-codec.mjs: {}
            sourcemap-codec.mjs.map: {}
            sourcemap-codec.umd.js: {}
            sourcemap-codec.umd.js.map: {}
            types:
              sourcemap-codec.d.ts: {}
          package.json: {}
        trace-mapping:
          LICENSE: {}
          README.md: {}
          dist:
            trace-mapping.mjs: {}
            trace-mapping.mjs.map: {}
            trace-mapping.umd.js: {}
            trace-mapping.umd.js.map: {}
            types:
              any-map.d.ts: {}
              binary-search.d.ts: {}
              by-source.d.ts: {}
              resolve.d.ts: {}
              sort.d.ts: {}
              sourcemap-segment.d.ts: {}
              strip-filename.d.ts: {}
              trace-mapping.d.ts: {}
              types.d.ts: {}
          package.json: {}
      '@leichtgewicht':
        ip-codec:
          LICENSE: {}
          Readme.md: {}
          index.cjs: {}
          index.mjs: {}
          package.json: {}
          types:
            index.d.ts: {}
      '@nicolo-ribaudo':
        eslint-scope-5-internals:
          LICENSE: {}
          index.js: {}
          node_modules:
            eslint-scope:
              CHANGELOG.md: {}
              LICENSE: {}
              README.md: {}
              lib:
                definition.js: {}
                index.js: {}
                pattern-visitor.js: {}
                reference.js: {}
                referencer.js: {}
                scope-manager.js: {}
                scope.js: {}
                variable.js: {}
              package.json: {}
            estraverse:
              .jshintrc: {}
              LICENSE.BSD: {}
              README.md: {}
              estraverse.js: {}
              gulpfile.js: {}
              package.json: {}
          package.json: {}
      '@nodelib':
        fs.scandir:
          LICENSE: {}
          README.md: {}
          out:
            adapters:
              fs.d.ts: {}
              fs.js: {}
            constants.d.ts: {}
            constants.js: {}
            index.d.ts: {}
            index.js: {}
            providers:
              async.d.ts: {}
              async.js: {}
              common.d.ts: {}
              common.js: {}
              sync.d.ts: {}
              sync.js: {}
            settings.d.ts: {}
            settings.js: {}
            types:
              index.d.ts: {}
              index.js: {}
            utils:
              fs.d.ts: {}
              fs.js: {}
              index.d.ts: {}
              index.js: {}
          package.json: {}
        fs.stat:
          LICENSE: {}
          README.md: {}
          out:
            adapters:
              fs.d.ts: {}
              fs.js: {}
            index.d.ts: {}
            index.js: {}
            providers:
              async.d.ts: {}
              async.js: {}
              sync.d.ts: {}
              sync.js: {}
            settings.d.ts: {}
            settings.js: {}
            types:
              index.d.ts: {}
              index.js: {}
          package.json: {}
        fs.walk:
          LICENSE: {}
          README.md: {}
          out:
            index.d.ts: {}
            index.js: {}
            providers:
              async.d.ts: {}
              async.js: {}
              index.d.ts: {}
              index.js: {}
              stream.d.ts: {}
              stream.js: {}
              sync.d.ts: {}
              sync.js: {}
            readers:
              async.d.ts: {}
              async.js: {}
              common.d.ts: {}
              common.js: {}
              reader.d.ts: {}
              reader.js: {}
              sync.d.ts: {}
              sync.js: {}
            settings.d.ts: {}
            settings.js: {}
            types:
              index.d.ts: {}
              index.js: {}
          package.json: {}
      '@opencensus':
        core:
          LICENSE: {}
          README.md: {}
          build:
            src:
              common:
                console-logger.d.ts: {}
                console-logger.js: {}
                time-util.d.ts: {}
                time-util.js: {}
                types.d.ts: {}
                types.js: {}
                validations.d.ts: {}
                validations.js: {}
                version.d.ts: {}
                version.js: {}
              exporters:
                console-exporter.d.ts: {}
                console-exporter.js: {}
                exporter-buffer.d.ts: {}
                exporter-buffer.js: {}
                types.d.ts: {}
                types.js: {}
              index.d.ts: {}
              index.js: {}
              internal:
                clock.d.ts: {}
                clock.js: {}
                cls-ah.d.ts: {}
                cls-ah.js: {}
                cls.d.ts: {}
                cls.js: {}
                string-utils.d.ts: {}
                string-utils.js: {}
                util.d.ts: {}
                util.js: {}
              metrics:
                export:
                  base-metric-producer.d.ts: {}
                  base-metric-producer.js: {}
                  metric-producer-manager.d.ts: {}
                  metric-producer-manager.js: {}
                  types.d.ts: {}
                  types.js: {}
                gauges:
                  derived-gauge.d.ts: {}
                  derived-gauge.js: {}
                  gauge.d.ts: {}
                  gauge.js: {}
                  types.d.ts: {}
                  types.js: {}
                metric-component.d.ts: {}
                metric-component.js: {}
                metric-registry.d.ts: {}
                metric-registry.js: {}
                metrics.d.ts: {}
                metrics.js: {}
                utils.d.ts: {}
                utils.js: {}
              resource:
                resource.d.ts: {}
                resource.js: {}
                types.d.ts: {}
                types.js: {}
              stats:
                bucket-boundaries.d.ts: {}
                bucket-boundaries.js: {}
                metric-producer.d.ts: {}
                metric-producer.js: {}
                metric-utils.d.ts: {}
                metric-utils.js: {}
                recorder.d.ts: {}
                recorder.js: {}
                stats.d.ts: {}
                stats.js: {}
                types.d.ts: {}
                types.js: {}
                view.d.ts: {}
                view.js: {}
              tags:
                tag-map.d.ts: {}
                tag-map.js: {}
                types.d.ts: {}
                types.js: {}
                validation.d.ts: {}
                validation.js: {}
              trace:
                config:
                  types.d.ts: {}
                  types.js: {}
                instrumentation:
                  base-plugin.d.ts: {}
                  base-plugin.js: {}
                  types.d.ts: {}
                  types.js: {}
                model:
                  root-span.d.ts: {}
                  root-span.js: {}
                  span-base.d.ts: {}
                  span-base.js: {}
                  span.d.ts: {}
                  span.js: {}
                  tracer.d.ts: {}
                  tracer.js: {}
                  types.d.ts: {}
                  types.js: {}
                propagation:
                  types.d.ts: {}
                  types.js: {}
                sampler:
                  sampler.d.ts: {}
                  sampler.js: {}
                  types.d.ts: {}
                  types.js: {}
                types.d.ts: {}
                types.js: {}
          node_modules:
            .bin:
              semver: {}
              uuid: {}
            semver:
              LICENSE: {}
              README.md: {}
              bin:
                semver: {}
              package.json: {}
              range.bnf: {}
              semver.js: {}
            uuid:
              AUTHORS: {}
              CHANGELOG.md: {}
              LICENSE.md: {}
              README.md: {}
              bin:
                uuid: {}
              index.js: {}
              lib:
                bytesToUuid.js: {}
                md5-browser.js: {}
                md5.js: {}
                rng-browser.js: {}
                rng.js: {}
                sha1-browser.js: {}
                sha1.js: {}
                v35.js: {}
              package.json: {}
              v1.js: {}
              v3.js: {}
              v4.js: {}
              v5.js: {}
          package.json: {}
        propagation-b3:
          LICENSE: {}
          README.md: {}
          build:
            src:
              b3-format.d.ts: {}
              b3-format.js: {}
              index.d.ts: {}
              index.js: {}
          node_modules:
            .bin:
              semver: {}
              uuid: {}
            '@opencensus':
              core:
                LICENSE: {}
                README.md: {}
                build:
                  src:
                    common:
                      console-logger.d.ts: {}
                      console-logger.js: {}
                      types.d.ts: {}
                      types.js: {}
                      validations.d.ts: {}
                      validations.js: {}
                      version.d.ts: {}
                      version.js: {}
                    exporters:
                      console-exporter.d.ts: {}
                      console-exporter.js: {}
                      exporter-buffer.d.ts: {}
                      exporter-buffer.js: {}
                      types.d.ts: {}
                      types.js: {}
                    index.d.ts: {}
                    index.js: {}
                    internal:
                      clock.d.ts: {}
                      clock.js: {}
                      cls-ah.d.ts: {}
                      cls-ah.js: {}
                      cls.d.ts: {}
                      cls.js: {}
                      string-utils.d.ts: {}
                      string-utils.js: {}
                      util.d.ts: {}
                      util.js: {}
                    metrics:
                      export:
                        metric-producer.d.ts: {}
                        metric-producer.js: {}
                        types.d.ts: {}
                        types.js: {}
                      gauges:
                        derived-gauge.d.ts: {}
                        derived-gauge.js: {}
                        gauge.d.ts: {}
                        gauge.js: {}
                        types.d.ts: {}
                        types.js: {}
                      metric-registry.d.ts: {}
                      metric-registry.js: {}
                      metrics.d.ts: {}
                      metrics.js: {}
                      utils.d.ts: {}
                      utils.js: {}
                    resource:
                      resource.d.ts: {}
                      resource.js: {}
                      types.d.ts: {}
                      types.js: {}
                    stats:
                      bucket-boundaries.d.ts: {}
                      bucket-boundaries.js: {}
                      metric-producer.d.ts: {}
                      metric-producer.js: {}
                      metric-utils.d.ts: {}
                      metric-utils.js: {}
                      recorder.d.ts: {}
                      recorder.js: {}
                      stats.d.ts: {}
                      stats.js: {}
                      types.d.ts: {}
                      types.js: {}
                      view.d.ts: {}
                      view.js: {}
                    trace:
                      config:
                        types.d.ts: {}
                        types.js: {}
                      instrumentation:
                        base-plugin.d.ts: {}
                        base-plugin.js: {}
                        types.d.ts: {}
                        types.js: {}
                      model:
                        root-span.d.ts: {}
                        root-span.js: {}
                        span-base.d.ts: {}
                        span-base.js: {}
                        span.d.ts: {}
                        span.js: {}
                        tracer.d.ts: {}
                        tracer.js: {}
                        types.d.ts: {}
                        types.js: {}
                      propagation:
                        types.d.ts: {}
                        types.js: {}
                      sampler:
                        sampler.d.ts: {}
                        sampler.js: {}
                        types.d.ts: {}
                        types.js: {}
                      types.d.ts: {}
                      types.js: {}
                package.json: {}
            semver:
              LICENSE: {}
              README.md: {}
              bin:
                semver: {}
              package.json: {}
              range.bnf: {}
              semver.js: {}
            uuid:
              AUTHORS: {}
              CHANGELOG.md: {}
              LICENSE.md: {}
              README.md: {}
              bin:
                uuid: {}
              index.js: {}
              lib:
                bytesToUuid.js: {}
                md5-browser.js: {}
                md5.js: {}
                rng-browser.js: {}
                rng.js: {}
                sha1-browser.js: {}
                sha1.js: {}
                v35.js: {}
              package.json: {}
              v1.js: {}
              v3.js: {}
              v4.js: {}
              v5.js: {}
          package.json: {}
      '@pkgjs':
        parseargs:
          .editorconfig: {}
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          examples:
            is-default-value.js: {}
            limit-long-syntax.js: {}
            negate.js: {}
            no-repeated-options.js: {}
            ordered-options.mjs: {}
            simple-hard-coded.js: {}
          index.js: {}
          internal:
            errors.js: {}
            primordials.js: {}
            util.js: {}
            validators.js: {}
          package.json: {}
          utils.js: {}
      '@pm2':
        agent:
          .drone.jsonnet: {}
          .mocharc.yml: {}
          .vscode:
            launch.json: {}
          LICENSE: {}
          README.md: {}
          config.js: {}
          constants.js: {}
          index.js: {}
          node_modules:
            .bin:
              semver: {}
            ansi-styles:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            chalk:
              index.d.ts: {}
              license: {}
              package.json: {}
              readme.md: {}
              source:
                index.js: {}
                templates.js: {}
                util.js: {}
            color-convert:
              CHANGELOG.md: {}
              LICENSE: {}
              README.md: {}
              conversions.js: {}
              index.js: {}
              package.json: {}
              route.js: {}
            color-name:
              LICENSE: {}
              README.md: {}
              index.js: {}
              package.json: {}
            dayjs:
              .editorconfig: {}
              CHANGELOG.md: {}
              LICENSE: {}
              README.md: {}
              dayjs.min.js: {}
              esm:
                constant.js: {}
                index.d.ts: {}
                index.js: {}
                locale:
                  af.js: {}
                  am.js: {}
                  ar-dz.js: {}
                  ar-kw.js: {}
                  ar-ly.js: {}
                  ar-ma.js: {}
                  ar-sa.js: {}
                  ar-tn.js: {}
                  ar.js: {}
                  az.js: {}
                  be.js: {}
                  bg.js: {}
                  bi.js: {}
                  bm.js: {}
                  bn.js: {}
                  bo.js: {}
                  br.js: {}
                  bs.js: {}
                  ca.js: {}
                  cs.js: {}
                  cv.js: {}
                  cy.js: {}
                  da.js: {}
                  de-at.js: {}
                  de-ch.js: {}
                  de.js: {}
                  dv.js: {}
                  el.js: {}
                  en-SG.js: {}
                  en-au.js: {}
                  en-ca.js: {}
                  en-gb.js: {}
                  en-ie.js: {}
                  en-il.js: {}
                  en-in.js: {}
                  en-nz.js: {}
                  en-tt.js: {}
                  en.js: {}
                  eo.js: {}
                  es-do.js: {}
                  es-pr.js: {}
                  es-us.js: {}
                  es.js: {}
                  et.js: {}
                  eu.js: {}
                  fa.js: {}
                  fi.js: {}
                  fo.js: {}
                  fr-ca.js: {}
                  fr-ch.js: {}
                  fr.js: {}
                  fy.js: {}
                  ga.js: {}
                  gd.js: {}
                  gl.js: {}
                  gom-latn.js: {}
                  gu.js: {}
                  he.js: {}
                  hi.js: {}
                  hr.js: {}
                  ht.js: {}
                  hu.js: {}
                  hy-am.js: {}
                  id.js: {}
                  index.d.ts: {}
                  is.js: {}
                  it-ch.js: {}
                  it.js: {}
                  ja.js: {}
                  jv.js: {}
                  ka.js: {}
                  kk.js: {}
                  km.js: {}
                  kn.js: {}
                  ko.js: {}
                  ku.js: {}
                  ky.js: {}
                  lb.js: {}
                  lo.js: {}
                  lt.js: {}
                  lv.js: {}
                  me.js: {}
                  mi.js: {}
                  mk.js: {}
                  ml.js: {}
                  mn.js: {}
                  mr.js: {}
                  ms-my.js: {}
                  ms.js: {}
                  mt.js: {}
                  my.js: {}
                  nb.js: {}
                  ne.js: {}
                  nl-be.js: {}
                  nl.js: {}
                  nn.js: {}
                  oc-lnc.js: {}
                  pa-in.js: {}
                  pl.js: {}
                  pt-br.js: {}
                  pt.js: {}
                  ro.js: {}
                  ru.js: {}
                  rw.js: {}
                  sd.js: {}
                  se.js: {}
                  si.js: {}
                  sk.js: {}
                  sl.js: {}
                  sq.js: {}
                  sr-cyrl.js: {}
                  sr.js: {}
                  ss.js: {}
                  sv.js: {}
                  sw.js: {}
                  ta.js: {}
                  te.js: {}
                  tet.js: {}
                  tg.js: {}
                  th.js: {}
                  tk.js: {}
                  tl-ph.js: {}
                  tlh.js: {}
                  tr.js: {}
                  types.d.ts: {}
                  tzl.js: {}
                  tzm-latn.js: {}
                  tzm.js: {}
                  ug-cn.js: {}
                  uk.js: {}
                  ur.js: {}
                  uz-latn.js: {}
                  uz.js: {}
                  vi.js: {}
                  x-pseudo.js: {}
                  yo.js: {}
                  zh-cn.js: {}
                  zh-hk.js: {}
                  zh-tw.js: {}
                  zh.js: {}
                plugin:
                  advancedFormat:
                    index.d.ts: {}
                    index.js: {}
                  badMutable:
                    index.d.ts: {}
                    index.js: {}
                  buddhistEra:
                    index.d.ts: {}
                    index.js: {}
                  calendar:
                    index.d.ts: {}
                    index.js: {}
                  customParseFormat:
                    index.d.ts: {}
                    index.js: {}
                  dayOfYear:
                    index.d.ts: {}
                    index.js: {}
                  duration:
                    index.d.ts: {}
                    index.js: {}
                  isBetween:
                    index.d.ts: {}
                    index.js: {}
                  isLeapYear:
                    index.d.ts: {}
                    index.js: {}
                  isMoment:
                    index.d.ts: {}
                    index.js: {}
                  isSameOrAfter:
                    index.d.ts: {}
                    index.js: {}
                  isSameOrBefore:
                    index.d.ts: {}
                    index.js: {}
                  isToday:
                    index.d.ts: {}
                    index.js: {}
                  isTomorrow:
                    index.d.ts: {}
                    index.js: {}
                  isYesterday:
                    index.d.ts: {}
                    index.js: {}
                  isoWeek:
                    index.d.ts: {}
                    index.js: {}
                  isoWeeksInYear:
                    index.d.ts: {}
                    index.js: {}
                  localeData:
                    index.d.ts: {}
                    index.js: {}
                  localizedFormat:
                    index.d.ts: {}
                    index.js: {}
                  minMax:
                    index.d.ts: {}
                    index.js: {}
                  objectSupport:
                    index.d.ts: {}
                    index.js: {}
                  pluralGetSet:
                    index.d.ts: {}
                    index.js: {}
                  quarterOfYear:
                    index.d.ts: {}
                    index.js: {}
                  relativeTime:
                    index.d.ts: {}
                    index.js: {}
                  timezone:
                    index.d.ts: {}
                    index.js: {}
                  toArray:
                    index.d.ts: {}
                    index.js: {}
                  toObject:
                    index.d.ts: {}
                    index.js: {}
                  updateLocale:
                    index.d.ts: {}
                    index.js: {}
                  utc:
                    index.d.ts: {}
                    index.js: {}
                  weekOfYear:
                    index.d.ts: {}
                    index.js: {}
                  weekYear:
                    index.d.ts: {}
                    index.js: {}
                  weekday:
                    index.d.ts: {}
                    index.js: {}
                utils.js: {}
              index.d.ts: {}
              locale:
                af.js: {}
                am.js: {}
                ar-dz.js: {}
                ar-kw.js: {}
                ar-ly.js: {}
                ar-ma.js: {}
                ar-sa.js: {}
                ar-tn.js: {}
                ar.js: {}
                az.js: {}
                be.js: {}
                bg.js: {}
                bi.js: {}
                bm.js: {}
                bn.js: {}
                bo.js: {}
                br.js: {}
                bs.js: {}
                ca.js: {}
                cs.js: {}
                cv.js: {}
                cy.js: {}
                da.js: {}
                de-at.js: {}
                de-ch.js: {}
                de.js: {}
                dv.js: {}
                el.js: {}
                en-SG.js: {}
                en-au.js: {}
                en-ca.js: {}
                en-gb.js: {}
                en-ie.js: {}
                en-il.js: {}
                en-in.js: {}
                en-nz.js: {}
                en-tt.js: {}
                en.js: {}
                eo.js: {}
                es-do.js: {}
                es-pr.js: {}
                es-us.js: {}
                es.js: {}
                et.js: {}
                eu.js: {}
                fa.js: {}
                fi.js: {}
                fo.js: {}
                fr-ca.js: {}
                fr-ch.js: {}
                fr.js: {}
                fy.js: {}
                ga.js: {}
                gd.js: {}
                gl.js: {}
                gom-latn.js: {}
                gu.js: {}
                he.js: {}
                hi.js: {}
                hr.js: {}
                ht.js: {}
                hu.js: {}
                hy-am.js: {}
                id.js: {}
                index.d.ts: {}
                is.js: {}
                it-ch.js: {}
                it.js: {}
                ja.js: {}
                jv.js: {}
                ka.js: {}
                kk.js: {}
                km.js: {}
                kn.js: {}
                ko.js: {}
                ku.js: {}
                ky.js: {}
                lb.js: {}
                lo.js: {}
                lt.js: {}
                lv.js: {}
                me.js: {}
                mi.js: {}
                mk.js: {}
                ml.js: {}
                mn.js: {}
                mr.js: {}
                ms-my.js: {}
                ms.js: {}
                mt.js: {}
                my.js: {}
                nb.js: {}
                ne.js: {}
                nl-be.js: {}
                nl.js: {}
                nn.js: {}
                oc-lnc.js: {}
                pa-in.js: {}
                pl.js: {}
                pt-br.js: {}
                pt.js: {}
                ro.js: {}
                ru.js: {}
                rw.js: {}
                sd.js: {}
                se.js: {}
                si.js: {}
                sk.js: {}
                sl.js: {}
                sq.js: {}
                sr-cyrl.js: {}
                sr.js: {}
                ss.js: {}
                sv.js: {}
                sw.js: {}
                ta.js: {}
                te.js: {}
                tet.js: {}
                tg.js: {}
                th.js: {}
                tk.js: {}
                tl-ph.js: {}
                tlh.js: {}
                tr.js: {}
                types.d.ts: {}
                tzl.js: {}
                tzm-latn.js: {}
                tzm.js: {}
                ug-cn.js: {}
                uk.js: {}
                ur.js: {}
                uz-latn.js: {}
                uz.js: {}
                vi.js: {}
                x-pseudo.js: {}
                yo.js: {}
                zh-cn.js: {}
                zh-hk.js: {}
                zh-tw.js: {}
                zh.js: {}
              locale.json: {}
              package.json: {}
              plugin:
                advancedFormat.d.ts: {}
                advancedFormat.js: {}
                badMutable.d.ts: {}
                badMutable.js: {}
                buddhistEra.d.ts: {}
                buddhistEra.js: {}
                calendar.d.ts: {}
                calendar.js: {}
                customParseFormat.d.ts: {}
                customParseFormat.js: {}
                dayOfYear.d.ts: {}
                dayOfYear.js: {}
                duration.d.ts: {}
                duration.js: {}
                isBetween.d.ts: {}
                isBetween.js: {}
                isLeapYear.d.ts: {}
                isLeapYear.js: {}
                isMoment.d.ts: {}
                isMoment.js: {}
                isSameOrAfter.d.ts: {}
                isSameOrAfter.js: {}
                isSameOrBefore.d.ts: {}
                isSameOrBefore.js: {}
                isToday.d.ts: {}
                isToday.js: {}
                isTomorrow.d.ts: {}
                isTomorrow.js: {}
                isYesterday.d.ts: {}
                isYesterday.js: {}
                isoWeek.d.ts: {}
                isoWeek.js: {}
                isoWeeksInYear.d.ts: {}
                isoWeeksInYear.js: {}
                localeData.d.ts: {}
                localeData.js: {}
                localizedFormat.d.ts: {}
                localizedFormat.js: {}
                minMax.d.ts: {}
                minMax.js: {}
                objectSupport.d.ts: {}
                objectSupport.js: {}
                pluralGetSet.d.ts: {}
                pluralGetSet.js: {}
                quarterOfYear.d.ts: {}
                quarterOfYear.js: {}
                relativeTime.d.ts: {}
                relativeTime.js: {}
                timezone.d.ts: {}
                timezone.js: {}
                toArray.d.ts: {}
                toArray.js: {}
                toObject.d.ts: {}
                toObject.js: {}
                updateLocale.d.ts: {}
                updateLocale.js: {}
                utc.d.ts: {}
                utc.js: {}
                weekOfYear.d.ts: {}
                weekOfYear.js: {}
                weekYear.d.ts: {}
                weekYear.js: {}
                weekday.d.ts: {}
                weekday.js: {}
            has-flag:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            lru-cache:
              LICENSE: {}
              README.md: {}
              index.js: {}
              package.json: {}
            semver:
              LICENSE: {}
              README.md: {}
              bin:
                semver.js: {}
              classes:
                comparator.js: {}
                index.js: {}
                range.js: {}
                semver.js: {}
              functions:
                clean.js: {}
                cmp.js: {}
                coerce.js: {}
                compare-build.js: {}
                compare-loose.js: {}
                compare.js: {}
                diff.js: {}
                eq.js: {}
                gt.js: {}
                gte.js: {}
                inc.js: {}
                lt.js: {}
                lte.js: {}
                major.js: {}
                minor.js: {}
                neq.js: {}
                parse.js: {}
                patch.js: {}
                prerelease.js: {}
                rcompare.js: {}
                rsort.js: {}
                satisfies.js: {}
                sort.js: {}
                valid.js: {}
              index.js: {}
              internal:
                constants.js: {}
                debug.js: {}
                identifiers.js: {}
                parse-options.js: {}
                re.js: {}
              package.json: {}
              preload.js: {}
              range.bnf: {}
              ranges:
                gtr.js: {}
                intersects.js: {}
                ltr.js: {}
                max-satisfying.js: {}
                min-satisfying.js: {}
                min-version.js: {}
                outside.js: {}
                simplify.js: {}
                subset.js: {}
                to-comparators.js: {}
                valid.js: {}
            supports-color:
              browser.js: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            ws:
              LICENSE: {}
              README.md: {}
              browser.js: {}
              index.js: {}
              lib:
                buffer-util.js: {}
                constants.js: {}
                event-target.js: {}
                extension.js: {}
                limiter.js: {}
                permessage-deflate.js: {}
                receiver.js: {}
                sender.js: {}
                stream.js: {}
                validation.js: {}
                websocket-server.js: {}
                websocket.js: {}
              package.json: {}
            yallist:
              LICENSE: {}
              README.md: {}
              iterator.js: {}
              package.json: {}
              yallist.js: {}
          package.json: {}
          src:
            InteractorClient.js: {}
            InteractorDaemon.js: {}
            PM2Client.js: {}
            PM2Interface.js: {}
            TransporterInterface.js: {}
            Utility.js: {}
            WatchDog.js: {}
            push:
              DataRetriever.js: {}
              PushInteractor.js: {}
              TransactionAggregator.js: {}
            reverse:
              ReverseInteractor.js: {}
            transporters:
              Transporter.js: {}
              WebsocketTransport.js: {}
            utils:
              BinaryHeap.js: {}
              EDS.js: {}
              probes:
                Histogram.js: {}
              units.js: {}
        io:
          .drone.jsonnet: {}
          .mocharc.js: {}
          .vscode:
            settings.json: {}
          CHANGELOG.md: {}
          LICENSE.md: {}
          NOTES.md: {}
          README.md: {}
          build:
            main:
              census:
                config:
                  default-config.d.ts: {}
                  default-config.js: {}
                constants.d.ts: {}
                constants.js: {}
                exporter.d.ts: {}
                exporter.js: {}
                instrumentation:
                  ext-types.d.ts: {}
                  ext-types.js: {}
                  plugin-loader.d.ts: {}
                  plugin-loader.js: {}
                plugins:
                  express.d.ts: {}
                  express.js: {}
                  http.d.ts: {}
                  http.js: {}
                  http2.d.ts: {}
                  http2.js: {}
                  https.d.ts: {}
                  https.js: {}
                  ioredis.d.ts: {}
                  ioredis.js: {}
                  mongodb.d.ts: {}
                  mongodb.js: {}
                  mysql.d.ts: {}
                  mysql.js: {}
                  mysql2.d.ts: {}
                  mysql2.js: {}
                  net.d.ts: {}
                  net.js: {}
                  pg.d.ts: {}
                  pg.js: {}
                  redis.d.ts: {}
                  redis.js: {}
                  vue.d.ts: {}
                  vue.js: {}
                tracer.d.ts: {}
                tracer.js: {}
              configuration.d.ts: {}
              configuration.js: {}
              constants.d.ts: {}
              constants.js: {}
              featureManager.d.ts: {}
              featureManager.js: {}
              features:
                dependencies.d.ts: {}
                dependencies.js: {}
                entrypoint.d.ts: {}
                entrypoint.js: {}
                events.d.ts: {}
                events.js: {}
                metrics.d.ts: {}
                metrics.js: {}
                notify.d.ts: {}
                notify.js: {}
                profiling.d.ts: {}
                profiling.js: {}
                tracing.d.ts: {}
                tracing.js: {}
              index.d.ts: {}
              index.js: {}
              metrics:
                eventLoopMetrics.d.ts: {}
                eventLoopMetrics.js: {}
                httpMetrics.d.ts: {}
                httpMetrics.js: {}
                network.d.ts: {}
                network.js: {}
                runtime.d.ts: {}
                runtime.js: {}
                v8.d.ts: {}
                v8.js: {}
              pmx.d.ts: {}
              pmx.js: {}
              profilers:
                addonProfiler.d.ts: {}
                addonProfiler.js: {}
                inspectorProfiler.d.ts: {}
                inspectorProfiler.js: {}
              serviceManager.d.ts: {}
              serviceManager.js: {}
              services:
                actions.d.ts: {}
                actions.js: {}
                inspector.d.ts: {}
                inspector.js: {}
                metrics.d.ts: {}
                metrics.js: {}
                runtimeStats.d.ts: {}
                runtimeStats.js: {}
                transport.d.ts: {}
                transport.js: {}
              transports:
                IPCTransport.d.ts: {}
                IPCTransport.js: {}
                WebsocketTransport.d.ts: {}
                WebsocketTransport.js: {}
              utils:
                BinaryHeap.d.ts: {}
                BinaryHeap.js: {}
                EDS.d.ts: {}
                EDS.js: {}
                EWMA.d.ts: {}
                EWMA.js: {}
                autocast.d.ts: {}
                autocast.js: {}
                metrics:
                  counter.d.ts: {}
                  counter.js: {}
                  gauge.d.ts: {}
                  gauge.js: {}
                  histogram.d.ts: {}
                  histogram.js: {}
                  meter.d.ts: {}
                  meter.js: {}
                miscellaneous.d.ts: {}
                miscellaneous.js: {}
                module.d.ts: {}
                module.js: {}
                stackParser.d.ts: {}
                stackParser.js: {}
                transactionAggregator.d.ts: {}
                transactionAggregator.js: {}
                units.d.ts: {}
                units.js: {}
          docker-compose.yml: {}
          docs:
            README.md: {}
          node_modules:
            .bin:
              semver: {}
            async:
              CHANGELOG.md: {}
              LICENSE: {}
              README.md: {}
              all.js: {}
              allLimit.js: {}
              allSeries.js: {}
              any.js: {}
              anyLimit.js: {}
              anySeries.js: {}
              apply.js: {}
              applyEach.js: {}
              applyEachSeries.js: {}
              asyncify.js: {}
              auto.js: {}
              autoInject.js: {}
              bower.json: {}
              cargo.js: {}
              compose.js: {}
              concat.js: {}
              concatLimit.js: {}
              concatSeries.js: {}
              constant.js: {}
              detect.js: {}
              detectLimit.js: {}
              detectSeries.js: {}
              dir.js: {}
              dist:
                async.js: {}
                async.min.js: {}
                async.min.map: {}
              doDuring.js: {}
              doUntil.js: {}
              doWhilst.js: {}
              during.js: {}
              each.js: {}
              eachLimit.js: {}
              eachOf.js: {}
              eachOfLimit.js: {}
              eachOfSeries.js: {}
              eachSeries.js: {}
              ensureAsync.js: {}
              every.js: {}
              everyLimit.js: {}
              everySeries.js: {}
              filter.js: {}
              filterLimit.js: {}
              filterSeries.js: {}
              find.js: {}
              findLimit.js: {}
              findSeries.js: {}
              foldl.js: {}
              foldr.js: {}
              forEach.js: {}
              forEachLimit.js: {}
              forEachOf.js: {}
              forEachOfLimit.js: {}
              forEachOfSeries.js: {}
              forEachSeries.js: {}
              forever.js: {}
              groupBy.js: {}
              groupByLimit.js: {}
              groupBySeries.js: {}
              index.js: {}
              inject.js: {}
              internal:
                DoublyLinkedList.js: {}
                applyEach.js: {}
                breakLoop.js: {}
                consoleFunc.js: {}
                createTester.js: {}
                doLimit.js: {}
                doParallel.js: {}
                doParallelLimit.js: {}
                eachOfLimit.js: {}
                filter.js: {}
                findGetResult.js: {}
                getIterator.js: {}
                initialParams.js: {}
                iterator.js: {}
                map.js: {}
                notId.js: {}
                once.js: {}
                onlyOnce.js: {}
                parallel.js: {}
                queue.js: {}
                reject.js: {}
                setImmediate.js: {}
                slice.js: {}
                withoutIndex.js: {}
                wrapAsync.js: {}
              log.js: {}
              map.js: {}
              mapLimit.js: {}
              mapSeries.js: {}
              mapValues.js: {}
              mapValuesLimit.js: {}
              mapValuesSeries.js: {}
              memoize.js: {}
              nextTick.js: {}
              package.json: {}
              parallel.js: {}
              parallelLimit.js: {}
              priorityQueue.js: {}
              queue.js: {}
              race.js: {}
              reduce.js: {}
              reduceRight.js: {}
              reflect.js: {}
              reflectAll.js: {}
              reject.js: {}
              rejectLimit.js: {}
              rejectSeries.js: {}
              retry.js: {}
              retryable.js: {}
              select.js: {}
              selectLimit.js: {}
              selectSeries.js: {}
              seq.js: {}
              series.js: {}
              setImmediate.js: {}
              some.js: {}
              someLimit.js: {}
              someSeries.js: {}
              sortBy.js: {}
              timeout.js: {}
              times.js: {}
              timesLimit.js: {}
              timesSeries.js: {}
              transform.js: {}
              tryEach.js: {}
              unmemoize.js: {}
              until.js: {}
              waterfall.js: {}
              whilst.js: {}
              wrapSync.js: {}
            eventemitter2:
              LICENSE.txt: {}
              README.md: {}
              eventemitter2.d.ts: {}
              index.js: {}
              lib:
                eventemitter2.js: {}
              package.json: {}
            lru-cache:
              LICENSE: {}
              README.md: {}
              index.js: {}
              package.json: {}
            semver:
              LICENSE: {}
              README.md: {}
              bin:
                semver.js: {}
              classes:
                comparator.js: {}
                index.js: {}
                range.js: {}
                semver.js: {}
              functions:
                clean.js: {}
                cmp.js: {}
                coerce.js: {}
                compare-build.js: {}
                compare-loose.js: {}
                compare.js: {}
                diff.js: {}
                eq.js: {}
                gt.js: {}
                gte.js: {}
                inc.js: {}
                lt.js: {}
                lte.js: {}
                major.js: {}
                minor.js: {}
                neq.js: {}
                parse.js: {}
                patch.js: {}
                prerelease.js: {}
                rcompare.js: {}
                rsort.js: {}
                satisfies.js: {}
                sort.js: {}
                valid.js: {}
              index.js: {}
              internal:
                constants.js: {}
                debug.js: {}
                identifiers.js: {}
                parse-options.js: {}
                re.js: {}
              package.json: {}
              preload.js: {}
              range.bnf: {}
              ranges:
                gtr.js: {}
                intersects.js: {}
                ltr.js: {}
                max-satisfying.js: {}
                min-satisfying.js: {}
                min-version.js: {}
                outside.js: {}
                simplify.js: {}
                subset.js: {}
                to-comparators.js: {}
                valid.js: {}
            tslib:
              .gitattributes: {}
              CopyrightNotice.txt: {}
              LICENSE.txt: {}
              README.md: {}
              bower.json: {}
              docs:
                generator.md: {}
              package.json: {}
              tslib.d.ts: {}
              tslib.es6.html: {}
              tslib.es6.js: {}
              tslib.html: {}
              tslib.js: {}
            yallist:
              LICENSE: {}
              README.md: {}
              iterator.js: {}
              package.json: {}
              yallist.js: {}
          package.json: {}
          pres:
            io-black.png: {}
            io-white.png: {}
          test.sh: {}
        js-api:
          .drone.jsonnet: {}
          LICENSE: {}
          README.md: {}
          constants.js: {}
          dist:
            keymetrics.es5.js: {}
            keymetrics.es5.min.js: {}
          index.js: {}
          node_modules:
            async:
              CHANGELOG.md: {}
              LICENSE: {}
              README.md: {}
              all.js: {}
              allLimit.js: {}
              allSeries.js: {}
              any.js: {}
              anyLimit.js: {}
              anySeries.js: {}
              apply.js: {}
              applyEach.js: {}
              applyEachSeries.js: {}
              asyncify.js: {}
              auto.js: {}
              autoInject.js: {}
              bower.json: {}
              cargo.js: {}
              compose.js: {}
              concat.js: {}
              concatLimit.js: {}
              concatSeries.js: {}
              constant.js: {}
              detect.js: {}
              detectLimit.js: {}
              detectSeries.js: {}
              dir.js: {}
              dist:
                async.js: {}
                async.min.js: {}
                async.min.map: {}
              doDuring.js: {}
              doUntil.js: {}
              doWhilst.js: {}
              during.js: {}
              each.js: {}
              eachLimit.js: {}
              eachOf.js: {}
              eachOfLimit.js: {}
              eachOfSeries.js: {}
              eachSeries.js: {}
              ensureAsync.js: {}
              every.js: {}
              everyLimit.js: {}
              everySeries.js: {}
              filter.js: {}
              filterLimit.js: {}
              filterSeries.js: {}
              find.js: {}
              findLimit.js: {}
              findSeries.js: {}
              foldl.js: {}
              foldr.js: {}
              forEach.js: {}
              forEachLimit.js: {}
              forEachOf.js: {}
              forEachOfLimit.js: {}
              forEachOfSeries.js: {}
              forEachSeries.js: {}
              forever.js: {}
              groupBy.js: {}
              groupByLimit.js: {}
              groupBySeries.js: {}
              index.js: {}
              inject.js: {}
              internal:
                DoublyLinkedList.js: {}
                applyEach.js: {}
                breakLoop.js: {}
                consoleFunc.js: {}
                createTester.js: {}
                doLimit.js: {}
                doParallel.js: {}
                doParallelLimit.js: {}
                eachOfLimit.js: {}
                filter.js: {}
                findGetResult.js: {}
                getIterator.js: {}
                initialParams.js: {}
                iterator.js: {}
                map.js: {}
                notId.js: {}
                once.js: {}
                onlyOnce.js: {}
                parallel.js: {}
                queue.js: {}
                reject.js: {}
                setImmediate.js: {}
                slice.js: {}
                withoutIndex.js: {}
                wrapAsync.js: {}
              log.js: {}
              map.js: {}
              mapLimit.js: {}
              mapSeries.js: {}
              mapValues.js: {}
              mapValuesLimit.js: {}
              mapValuesSeries.js: {}
              memoize.js: {}
              nextTick.js: {}
              package.json: {}
              parallel.js: {}
              parallelLimit.js: {}
              priorityQueue.js: {}
              queue.js: {}
              race.js: {}
              reduce.js: {}
              reduceRight.js: {}
              reflect.js: {}
              reflectAll.js: {}
              reject.js: {}
              rejectLimit.js: {}
              rejectSeries.js: {}
              retry.js: {}
              retryable.js: {}
              select.js: {}
              selectLimit.js: {}
              selectSeries.js: {}
              seq.js: {}
              series.js: {}
              setImmediate.js: {}
              some.js: {}
              someLimit.js: {}
              someSeries.js: {}
              sortBy.js: {}
              timeout.js: {}
              times.js: {}
              timesLimit.js: {}
              timesSeries.js: {}
              transform.js: {}
              tryEach.js: {}
              unmemoize.js: {}
              until.js: {}
              waterfall.js: {}
              whilst.js: {}
              wrapSync.js: {}
            eventemitter2:
              LICENSE.txt: {}
              README.md: {}
              eventemitter2.d.ts: {}
              index.js: {}
              lib:
                eventemitter2.js: {}
              package.json: {}
          package.json: {}
          src:
            api_mappings.json: {}
            auth_strategies:
              browser_strategy.js: {}
              embed_strategy.js: {}
              standalone_strategy.js: {}
              strategy.js: {}
            endpoint.js: {}
            keymetrics.js: {}
            namespace.js: {}
            network.js: {}
            utils:
              validator.js: {}
              websocket.js: {}
        pm2-version-check:
          README.md: {}
          index.js: {}
          package.json: {}
      '@pmmmwh':
        react-refresh-webpack-plugin:
          LICENSE: {}
          README.md: {}
          client:
            ErrorOverlayEntry.js: {}
            ReactRefreshEntry.js: {}
            package.json: {}
            utils:
              errorEventHandlers.js: {}
              formatWebpackErrors.js: {}
              patchUrl.js: {}
              retry.js: {}
          lib:
            globals.js: {}
            index.js: {}
            options.json: {}
            runtime:
              RefreshUtils.js: {}
            types.js: {}
            utils:
              getAdditionalEntries.js: {}
              getIntegrationEntry.js: {}
              getRefreshGlobal.js: {}
              getSocketIntegration.js: {}
              index.js: {}
              injectRefreshEntry.js: {}
              injectRefreshLoader.js: {}
              makeRefreshRuntimeModule.js: {}
              normalizeOptions.js: {}
          loader:
            index.js: {}
            options.json: {}
            types.js: {}
            utils:
              getIdentitySourceMap.js: {}
              getModuleSystem.js: {}
              getRefreshModuleRuntime.js: {}
              index.js: {}
              normalizeOptions.js: {}
          options:
            index.js: {}
          overlay:
            components:
              CompileErrorTrace.js: {}
              PageHeader.js: {}
              RuntimeErrorFooter.js: {}
              RuntimeErrorHeader.js: {}
              RuntimeErrorStack.js: {}
              Spacer.js: {}
            containers:
              CompileErrorContainer.js: {}
              RuntimeErrorContainer.js: {}
            index.js: {}
            package.json: {}
            theme.js: {}
            utils.js: {}
          package.json: {}
          sockets:
            WDSSocket.js: {}
            WHMEventSource.js: {}
            WPSSocket.js: {}
            package.json: {}
            utils:
              getCurrentScriptSource.js: {}
              getSocketUrlParts.js: {}
              getUrlFromParts.js: {}
              getWDSMetadata.js: {}
          types:
            lib:
              index.d.ts: {}
              types.d.ts: {}
            loader:
              index.d.ts: {}
              types.d.ts: {}
            options:
              index.d.ts: {}
      '@popperjs':
        core:
          LICENSE.md: {}
          README.md: {}
          dist:
            cjs:
              enums.js: {}
              enums.js.flow: {}
              enums.js.map: {}
              popper-base.js: {}
              popper-base.js.flow: {}
              popper-base.js.map: {}
              popper-lite.js: {}
              popper-lite.js.flow: {}
              popper-lite.js.map: {}
              popper.js: {}
              popper.js.flow: {}
              popper.js.map: {}
            esm:
              createPopper.js: {}
              dom-utils:
                contains.js: {}
                getBoundingClientRect.js: {}
                getClippingRect.js: {}
                getCompositeRect.js: {}
                getComputedStyle.js: {}
                getDocumentElement.js: {}
                getDocumentRect.js: {}
                getHTMLElementScroll.js: {}
                getLayoutRect.js: {}
                getNodeName.js: {}
                getNodeScroll.js: {}
                getOffsetParent.js: {}
                getParentNode.js: {}
                getScrollParent.js: {}
                getViewportRect.js: {}
                getWindow.js: {}
                getWindowScroll.js: {}
                getWindowScrollBarX.js: {}
                instanceOf.js: {}
                isLayoutViewport.js: {}
                isScrollParent.js: {}
                isTableElement.js: {}
                listScrollParents.js: {}
              enums.js: {}
              index.js: {}
              modifiers:
                applyStyles.js: {}
                arrow.js: {}
                computeStyles.js: {}
                eventListeners.js: {}
                flip.js: {}
                hide.js: {}
                index.js: {}
                offset.js: {}
                popperOffsets.js: {}
                preventOverflow.js: {}
              popper-base.js: {}
              popper-lite.js: {}
              popper.js: {}
              types.js: {}
              utils:
                computeAutoPlacement.js: {}
                computeOffsets.js: {}
                debounce.js: {}
                detectOverflow.js: {}
                expandToHashMap.js: {}
                getAltAxis.js: {}
                getAltLen.js: {}
                getBasePlacement.js: {}
                getFreshSideObject.js: {}
                getMainAxisFromPlacement.js: {}
                getOppositePlacement.js: {}
                getOppositeVariationPlacement.js: {}
                getVariation.js: {}
                math.js: {}
                mergeByName.js: {}
                mergePaddingObject.js: {}
                orderModifiers.js: {}
                rectToClientRect.js: {}
                uniqueBy.js: {}
                userAgent.js: {}
                within.js: {}
            umd:
              enums.js: {}
              enums.js.map: {}
              enums.min.js: {}
              enums.min.js.flow: {}
              enums.min.js.map: {}
              popper-base.js: {}
              popper-base.js.map: {}
              popper-base.min.js: {}
              popper-base.min.js.flow: {}
              popper-base.min.js.map: {}
              popper-lite.js: {}
              popper-lite.js.map: {}
              popper-lite.min.js: {}
              popper-lite.min.js.flow: {}
              popper-lite.min.js.map: {}
              popper.js: {}
              popper.js.map: {}
              popper.min.js: {}
              popper.min.js.flow: {}
              popper.min.js.map: {}
          index.d.ts: {}
          lib:
            createPopper.d.ts: {}
            createPopper.js: {}
            createPopper.js.flow: {}
            dom-utils:
              contains.d.ts: {}
              contains.js: {}
              contains.js.flow: {}
              getBoundingClientRect.d.ts: {}
              getBoundingClientRect.js: {}
              getBoundingClientRect.js.flow: {}
              getClippingRect.d.ts: {}
              getClippingRect.js: {}
              getClippingRect.js.flow: {}
              getCompositeRect.d.ts: {}
              getCompositeRect.js: {}
              getCompositeRect.js.flow: {}
              getComputedStyle.d.ts: {}
              getComputedStyle.js: {}
              getComputedStyle.js.flow: {}
              getDocumentElement.d.ts: {}
              getDocumentElement.js: {}
              getDocumentElement.js.flow: {}
              getDocumentRect.d.ts: {}
              getDocumentRect.js: {}
              getDocumentRect.js.flow: {}
              getHTMLElementScroll.d.ts: {}
              getHTMLElementScroll.js: {}
              getHTMLElementScroll.js.flow: {}
              getLayoutRect.d.ts: {}
              getLayoutRect.js: {}
              getLayoutRect.js.flow: {}
              getNodeName.d.ts: {}
              getNodeName.js: {}
              getNodeName.js.flow: {}
              getNodeScroll.d.ts: {}
              getNodeScroll.js: {}
              getNodeScroll.js.flow: {}
              getOffsetParent.d.ts: {}
              getOffsetParent.js: {}
              getOffsetParent.js.flow: {}
              getParentNode.d.ts: {}
              getParentNode.js: {}
              getParentNode.js.flow: {}
              getScrollParent.d.ts: {}
              getScrollParent.js: {}
              getScrollParent.js.flow: {}
              getViewportRect.d.ts: {}
              getViewportRect.js: {}
              getViewportRect.js.flow: {}
              getWindow.d.ts: {}
              getWindow.js: {}
              getWindow.js.flow: {}
              getWindowScroll.d.ts: {}
              getWindowScroll.js: {}
              getWindowScroll.js.flow: {}
              getWindowScrollBarX.d.ts: {}
              getWindowScrollBarX.js: {}
              getWindowScrollBarX.js.flow: {}
              instanceOf.d.ts: {}
              instanceOf.js: {}
              instanceOf.js.flow: {}
              isLayoutViewport.d.ts: {}
              isLayoutViewport.js: {}
              isLayoutViewport.js.flow: {}
              isScrollParent.d.ts: {}
              isScrollParent.js: {}
              isScrollParent.js.flow: {}
              isTableElement.d.ts: {}
              isTableElement.js: {}
              isTableElement.js.flow: {}
              listScrollParents.d.ts: {}
              listScrollParents.js: {}
              listScrollParents.js.flow: {}
            enums.d.ts: {}
            enums.js: {}
            enums.js.flow: {}
            index.d.ts: {}
            index.js: {}
            index.js.flow: {}
            modifiers:
              applyStyles.d.ts: {}
              applyStyles.js: {}
              applyStyles.js.flow: {}
              arrow.d.ts: {}
              arrow.js: {}
              arrow.js.flow: {}
              computeStyles.d.ts: {}
              computeStyles.js: {}
              computeStyles.js.flow: {}
              eventListeners.d.ts: {}
              eventListeners.js: {}
              eventListeners.js.flow: {}
              flip.d.ts: {}
              flip.js: {}
              flip.js.flow: {}
              hide.d.ts: {}
              hide.js: {}
              hide.js.flow: {}
              index.d.ts: {}
              index.js: {}
              index.js.flow: {}
              offset.d.ts: {}
              offset.js: {}
              offset.js.flow: {}
              popperOffsets.d.ts: {}
              popperOffsets.js: {}
              popperOffsets.js.flow: {}
              preventOverflow.d.ts: {}
              preventOverflow.js: {}
              preventOverflow.js.flow: {}
            popper-base.d.ts: {}
            popper-base.js: {}
            popper-base.js.flow: {}
            popper-lite.d.ts: {}
            popper-lite.js: {}
            popper-lite.js.flow: {}
            popper.d.ts: {}
            popper.js: {}
            popper.js.flow: {}
            types.d.ts: {}
            types.js: {}
            types.js.flow: {}
            utils:
              computeAutoPlacement.d.ts: {}
              computeAutoPlacement.js: {}
              computeAutoPlacement.js.flow: {}
              computeOffsets.d.ts: {}
              computeOffsets.js: {}
              computeOffsets.js.flow: {}
              debounce.d.ts: {}
              debounce.js: {}
              debounce.js.flow: {}
              detectOverflow.d.ts: {}
              detectOverflow.js: {}
              detectOverflow.js.flow: {}
              expandToHashMap.d.ts: {}
              expandToHashMap.js: {}
              expandToHashMap.js.flow: {}
              getAltAxis.d.ts: {}
              getAltAxis.js: {}
              getAltAxis.js.flow: {}
              getAltLen.d.ts: {}
              getAltLen.js: {}
              getAltLen.js.flow: {}
              getBasePlacement.d.ts: {}
              getBasePlacement.js: {}
              getBasePlacement.js.flow: {}
              getFreshSideObject.d.ts: {}
              getFreshSideObject.js: {}
              getFreshSideObject.js.flow: {}
              getMainAxisFromPlacement.d.ts: {}
              getMainAxisFromPlacement.js: {}
              getMainAxisFromPlacement.js.flow: {}
              getOppositePlacement.d.ts: {}
              getOppositePlacement.js: {}
              getOppositePlacement.js.flow: {}
              getOppositeVariationPlacement.d.ts: {}
              getOppositeVariationPlacement.js: {}
              getOppositeVariationPlacement.js.flow: {}
              getVariation.d.ts: {}
              getVariation.js: {}
              getVariation.js.flow: {}
              math.d.ts: {}
              math.js: {}
              math.js.flow: {}
              mergeByName.d.ts: {}
              mergeByName.js: {}
              mergeByName.js.flow: {}
              mergePaddingObject.d.ts: {}
              mergePaddingObject.js: {}
              mergePaddingObject.js.flow: {}
              orderModifiers.d.ts: {}
              orderModifiers.js: {}
              orderModifiers.js.flow: {}
              rectToClientRect.d.ts: {}
              rectToClientRect.js: {}
              rectToClientRect.js.flow: {}
              uniqueBy.d.ts: {}
              uniqueBy.js: {}
              uniqueBy.js.flow: {}
              userAgent.d.ts: {}
              userAgent.js: {}
              userAgent.js.flow: {}
              within.d.ts: {}
              within.js: {}
              within.js.flow: {}
          package.json: {}
      '@react-aria':
        ssr:
          LICENSE: {}
          README.md: {}
          dist:
            SSRProvider.main.js: {}
            SSRProvider.main.js.map: {}
            SSRProvider.mjs: {}
            SSRProvider.module.js: {}
            SSRProvider.module.js.map: {}
            import.mjs: {}
            main.js: {}
            main.js.map: {}
            module.js: {}
            module.js.map: {}
            types.d.ts: {}
            types.d.ts.map: {}
          package.json: {}
          src:
            SSRProvider.tsx: {}
            index.ts: {}
      '@remix-run':
        router:
          CHANGELOG.md: {}
          LICENSE.md: {}
          README.md: {}
          dist:
            history.d.ts: {}
            index.d.ts: {}
            router.cjs.js: {}
            router.cjs.js.map: {}
            router.d.ts: {}
            router.js: {}
            router.js.map: {}
            router.umd.js: {}
            router.umd.js.map: {}
            router.umd.min.js: {}
            router.umd.min.js.map: {}
            utils.d.ts: {}
          history.ts: {}
          index.ts: {}
          package.json: {}
          router.ts: {}
          utils.ts: {}
      '@restart':
        hooks:
          LICENSE: {}
          README.md: {}
          cjs:
            globals.d.ts: {}
            index.d.ts: {}
            index.js: {}
            useAnimationFrame.d.ts: {}
            useAnimationFrame.js: {}
            useBreakpoint.d.ts: {}
            useBreakpoint.js: {}
            useCallbackRef.d.ts: {}
            useCallbackRef.js: {}
            useCommittedRef.d.ts: {}
            useCommittedRef.js: {}
            useCustomEffect.d.ts: {}
            useCustomEffect.js: {}
            useDebouncedCallback.d.ts: {}
            useDebouncedCallback.js: {}
            useDebouncedState.d.ts: {}
            useDebouncedState.js: {}
            useDebouncedValue.d.ts: {}
            useDebouncedValue.js: {}
            useEventCallback.d.ts: {}
            useEventCallback.js: {}
            useEventListener.d.ts: {}
            useEventListener.js: {}
            useFocusManager.d.ts: {}
            useFocusManager.js: {}
            useForceUpdate.d.ts: {}
            useForceUpdate.js: {}
            useGlobalListener.d.ts: {}
            useGlobalListener.js: {}
            useImage.d.ts: {}
            useImage.js: {}
            useImmediateUpdateEffect.d.ts: {}
            useImmediateUpdateEffect.js: {}
            useIntersectionObserver.d.ts: {}
            useIntersectionObserver.js: {}
            useInterval.d.ts: {}
            useInterval.js: {}
            useIsInitialRenderRef.d.ts: {}
            useIsInitialRenderRef.js: {}
            useIsomorphicEffect.d.ts: {}
            useIsomorphicEffect.js: {}
            useMap.d.ts: {}
            useMap.js: {}
            useMediaQuery.d.ts: {}
            useMediaQuery.js: {}
            useMergeState.d.ts: {}
            useMergeState.js: {}
            useMergeStateFromProps.d.ts: {}
            useMergeStateFromProps.js: {}
            useMergedRefs.d.ts: {}
            useMergedRefs.js: {}
            useMountEffect.d.ts: {}
            useMountEffect.js: {}
            useMounted.d.ts: {}
            useMounted.js: {}
            useMutationObserver.d.ts: {}
            useMutationObserver.js: {}
            usePrevious.d.ts: {}
            usePrevious.js: {}
            useRafInterval.d.ts: {}
            useRafInterval.js: {}
            useRefWithInitialValueFactory.d.ts: {}
            useRefWithInitialValueFactory.js: {}
            useResizeObserver.d.ts: {}
            useResizeObserver.js: {}
            useSafeState.d.ts: {}
            useSafeState.js: {}
            useSet.d.ts: {}
            useSet.js: {}
            useStableMemo.d.ts: {}
            useStableMemo.js: {}
            useStateAsync.d.ts: {}
            useStateAsync.js: {}
            useThrottledEventHandler.d.ts: {}
            useThrottledEventHandler.js: {}
            useTimeout.d.ts: {}
            useTimeout.js: {}
            useToggleState.d.ts: {}
            useToggleState.js: {}
            useUpdateEffect.d.ts: {}
            useUpdateEffect.js: {}
            useUpdateImmediateEffect.d.ts: {}
            useUpdateImmediateEffect.js: {}
            useUpdateLayoutEffect.d.ts: {}
            useUpdateLayoutEffect.js: {}
            useUpdatedRef.d.ts: {}
            useUpdatedRef.js: {}
            useWillUnmount.d.ts: {}
            useWillUnmount.js: {}
          esm:
            globals.d.ts: {}
            index.d.ts: {}
            index.js: {}
            useAnimationFrame.d.ts: {}
            useAnimationFrame.js: {}
            useBreakpoint.d.ts: {}
            useBreakpoint.js: {}
            useCallbackRef.d.ts: {}
            useCallbackRef.js: {}
            useCommittedRef.d.ts: {}
            useCommittedRef.js: {}
            useCustomEffect.d.ts: {}
            useCustomEffect.js: {}
            useDebouncedCallback.d.ts: {}
            useDebouncedCallback.js: {}
            useDebouncedState.d.ts: {}
            useDebouncedState.js: {}
            useDebouncedValue.d.ts: {}
            useDebouncedValue.js: {}
            useEventCallback.d.ts: {}
            useEventCallback.js: {}
            useEventListener.d.ts: {}
            useEventListener.js: {}
            useFocusManager.d.ts: {}
            useFocusManager.js: {}
            useForceUpdate.d.ts: {}
            useForceUpdate.js: {}
            useGlobalListener.d.ts: {}
            useGlobalListener.js: {}
            useImage.d.ts: {}
            useImage.js: {}
            useImmediateUpdateEffect.d.ts: {}
            useImmediateUpdateEffect.js: {}
            useIntersectionObserver.d.ts: {}
            useIntersectionObserver.js: {}
            useInterval.d.ts: {}
            useInterval.js: {}
            useIsInitialRenderRef.d.ts: {}
            useIsInitialRenderRef.js: {}
            useIsomorphicEffect.d.ts: {}
            useIsomorphicEffect.js: {}
            useMap.d.ts: {}
            useMap.js: {}
            useMediaQuery.d.ts: {}
            useMediaQuery.js: {}
            useMergeState.d.ts: {}
            useMergeState.js: {}
            useMergeStateFromProps.d.ts: {}
            useMergeStateFromProps.js: {}
            useMergedRefs.d.ts: {}
            useMergedRefs.js: {}
            useMountEffect.d.ts: {}
            useMountEffect.js: {}
            useMounted.d.ts: {}
            useMounted.js: {}
            useMutationObserver.d.ts: {}
            useMutationObserver.js: {}
            usePrevious.d.ts: {}
            usePrevious.js: {}
            useRafInterval.d.ts: {}
            useRafInterval.js: {}
            useRefWithInitialValueFactory.d.ts: {}
            useRefWithInitialValueFactory.js: {}
            useResizeObserver.d.ts: {}
            useResizeObserver.js: {}
            useSafeState.d.ts: {}
            useSafeState.js: {}
            useSet.d.ts: {}
            useSet.js: {}
            useStableMemo.d.ts: {}
            useStableMemo.js: {}
            useStateAsync.d.ts: {}
            useStateAsync.js: {}
            useThrottledEventHandler.d.ts: {}
            useThrottledEventHandler.js: {}
            useTimeout.d.ts: {}
            useTimeout.js: {}
            useToggleState.d.ts: {}
            useToggleState.js: {}
            useUpdateEffect.d.ts: {}
            useUpdateEffect.js: {}
            useUpdateImmediateEffect.d.ts: {}
            useUpdateImmediateEffect.js: {}
            useUpdateLayoutEffect.d.ts: {}
            useUpdateLayoutEffect.js: {}
            useUpdatedRef.d.ts: {}
            useUpdatedRef.js: {}
            useWillUnmount.d.ts: {}
            useWillUnmount.js: {}
          package.json: {}
          useAnimationFrame:
            package.json: {}
          useBreakpoint:
            package.json: {}
          useCallbackRef:
            package.json: {}
          useCommittedRef:
            package.json: {}
          useCustomEffect:
            package.json: {}
          useDebouncedCallback:
            package.json: {}
          useDebouncedState:
            package.json: {}
          useDebouncedValue:
            package.json: {}
          useEventCallback:
            package.json: {}
          useEventListener:
            package.json: {}
          useFocusManager:
            package.json: {}
          useForceUpdate:
            package.json: {}
          useGlobalListener:
            package.json: {}
          useImage:
            package.json: {}
          useImmediateUpdateEffect:
            package.json: {}
          useIntersectionObserver:
            package.json: {}
          useInterval:
            package.json: {}
          useIsInitialRenderRef:
            package.json: {}
          useIsomorphicEffect:
            package.json: {}
          useMap:
            package.json: {}
          useMediaQuery:
            package.json: {}
          useMergeState:
            package.json: {}
          useMergeStateFromProps:
            package.json: {}
          useMergedRefs:
            package.json: {}
          useMountEffect:
            package.json: {}
          useMounted:
            package.json: {}
          useMutationObserver:
            package.json: {}
          usePrevious:
            package.json: {}
          useRafInterval:
            package.json: {}
          useRefWithInitialValueFactory:
            package.json: {}
          useResizeObserver:
            package.json: {}
          useSafeState:
            package.json: {}
          useSet:
            package.json: {}
          useStableMemo:
            package.json: {}
          useStateAsync:
            package.json: {}
          useThrottledEventHandler:
            package.json: {}
          useTimeout:
            package.json: {}
          useToggleState:
            package.json: {}
          useUpdateEffect:
            package.json: {}
          useUpdateImmediateEffect:
            package.json: {}
          useUpdateLayoutEffect:
            package.json: {}
          useUpdatedRef:
            package.json: {}
          useWillUnmount:
            package.json: {}
        ui:
          Anchor:
            package.json: {}
          Button:
            package.json: {}
          DataKey:
            package.json: {}
          Dropdown:
            package.json: {}
          DropdownContext:
            package.json: {}
          DropdownItem:
            package.json: {}
          DropdownMenu:
            package.json: {}
          DropdownToggle:
            package.json: {}
          ImperativeTransition:
            package.json: {}
          LICENSE: {}
          Modal:
            package.json: {}
          ModalManager:
            package.json: {}
          Nav:
            package.json: {}
          NavContext:
            package.json: {}
          NavItem:
            package.json: {}
          NoopTransition:
            package.json: {}
          Overlay:
            package.json: {}
          Portal:
            package.json: {}
          README.md: {}
          RTGTransition:
            package.json: {}
          SelectableContext:
            package.json: {}
          TabContext:
            package.json: {}
          TabPanel:
            package.json: {}
          Tabs:
            package.json: {}
          Waypoint:
            package.json: {}
          cjs:
            Anchor.d.ts: {}
            Anchor.js: {}
            Button.d.ts: {}
            Button.js: {}
            DataKey.d.ts: {}
            DataKey.js: {}
            Dropdown.d.ts: {}
            Dropdown.js: {}
            DropdownContext.d.ts: {}
            DropdownContext.js: {}
            DropdownItem.d.ts: {}
            DropdownItem.js: {}
            DropdownMenu.d.ts: {}
            DropdownMenu.js: {}
            DropdownToggle.d.ts: {}
            DropdownToggle.js: {}
            ImperativeTransition.d.ts: {}
            ImperativeTransition.js: {}
            Modal.d.ts: {}
            Modal.js: {}
            ModalManager.d.ts: {}
            ModalManager.js: {}
            Nav.d.ts: {}
            Nav.js: {}
            NavContext.d.ts: {}
            NavContext.js: {}
            NavItem.d.ts: {}
            NavItem.js: {}
            NoopTransition.d.ts: {}
            NoopTransition.js: {}
            Overlay.d.ts: {}
            Overlay.js: {}
            Portal.d.ts: {}
            Portal.js: {}
            RTGTransition.d.ts: {}
            RTGTransition.js: {}
            SelectableContext.d.ts: {}
            SelectableContext.js: {}
            TabContext.d.ts: {}
            TabContext.js: {}
            TabPanel.d.ts: {}
            TabPanel.js: {}
            Tabs.d.ts: {}
            Tabs.js: {}
            Waypoint.d.ts: {}
            Waypoint.js: {}
            getScrollbarWidth.d.ts: {}
            getScrollbarWidth.js: {}
            index.d.ts: {}
            index.js: {}
            mergeOptionsWithPopperConfig.d.ts: {}
            mergeOptionsWithPopperConfig.js: {}
            popper.d.ts: {}
            popper.js: {}
            ssr.d.ts: {}
            ssr.js: {}
            types.d.ts: {}
            types.js: {}
            useClickOutside.d.ts: {}
            useClickOutside.js: {}
            usePopper.d.ts: {}
            usePopper.js: {}
            useRTGTransitionProps.d.ts: {}
            useRTGTransitionProps.js: {}
            useRootClose.d.ts: {}
            useRootClose.js: {}
            useScrollParent.d.ts: {}
            useScrollParent.js: {}
            useWaitForDOMRef.d.ts: {}
            useWaitForDOMRef.js: {}
            useWaypoint.d.ts: {}
            useWaypoint.js: {}
            useWindow.d.ts: {}
            useWindow.js: {}
            utils.d.ts: {}
            utils.js: {}
          esm:
            Anchor.d.ts: {}
            Anchor.js: {}
            Button.d.ts: {}
            Button.js: {}
            DataKey.d.ts: {}
            DataKey.js: {}
            Dropdown.d.ts: {}
            Dropdown.js: {}
            DropdownContext.d.ts: {}
            DropdownContext.js: {}
            DropdownItem.d.ts: {}
            DropdownItem.js: {}
            DropdownMenu.d.ts: {}
            DropdownMenu.js: {}
            DropdownToggle.d.ts: {}
            DropdownToggle.js: {}
            ImperativeTransition.d.ts: {}
            ImperativeTransition.js: {}
            Modal.d.ts: {}
            Modal.js: {}
            ModalManager.d.ts: {}
            ModalManager.js: {}
            Nav.d.ts: {}
            Nav.js: {}
            NavContext.d.ts: {}
            NavContext.js: {}
            NavItem.d.ts: {}
            NavItem.js: {}
            NoopTransition.d.ts: {}
            NoopTransition.js: {}
            Overlay.d.ts: {}
            Overlay.js: {}
            Portal.d.ts: {}
            Portal.js: {}
            RTGTransition.d.ts: {}
            RTGTransition.js: {}
            SelectableContext.d.ts: {}
            SelectableContext.js: {}
            TabContext.d.ts: {}
            TabContext.js: {}
            TabPanel.d.ts: {}
            TabPanel.js: {}
            Tabs.d.ts: {}
            Tabs.js: {}
            Waypoint.d.ts: {}
            Waypoint.js: {}
            getScrollbarWidth.d.ts: {}
            getScrollbarWidth.js: {}
            index.d.ts: {}
            index.js: {}
            mergeOptionsWithPopperConfig.d.ts: {}
            mergeOptionsWithPopperConfig.js: {}
            popper.d.ts: {}
            popper.js: {}
            ssr.d.ts: {}
            ssr.js: {}
            types.d.ts: {}
            types.js: {}
            useClickOutside.d.ts: {}
            useClickOutside.js: {}
            usePopper.d.ts: {}
            usePopper.js: {}
            useRTGTransitionProps.d.ts: {}
            useRTGTransitionProps.js: {}
            useRootClose.d.ts: {}
            useRootClose.js: {}
            useScrollParent.d.ts: {}
            useScrollParent.js: {}
            useWaitForDOMRef.d.ts: {}
            useWaitForDOMRef.js: {}
            useWaypoint.d.ts: {}
            useWaypoint.js: {}
            useWindow.d.ts: {}
            useWindow.js: {}
            utils.d.ts: {}
            utils.js: {}
          getScrollbarWidth:
            package.json: {}
          mergeOptionsWithPopperConfig:
            package.json: {}
          node_modules:
            uncontrollable:
              .babelrc: {}
              CHANGELOG.md: {}
              LICENSE: {}
              README.md: {}
              lib:
                cjs:
                  index.d.ts: {}
                  index.js: {}
                esm:
                  index.d.ts: {}
                  index.js: {}
              package.json: {}
              test:
                test.js: {}
                types-test.tsx: {}
              tsconfig.json: {}
          package.json: {}
          popper:
            package.json: {}
          ssr:
            package.json: {}
          types:
            package.json: {}
          useClickOutside:
            package.json: {}
          usePopper:
            package.json: {}
          useRTGTransitionProps:
            package.json: {}
          useRootClose:
            package.json: {}
          useScrollParent:
            package.json: {}
          useWaitForDOMRef:
            package.json: {}
          useWaypoint:
            package.json: {}
          useWindow:
            package.json: {}
          utils:
            package.json: {}
      '@rollup':
        plugin-babel:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          dist:
            index.es.js: {}
            index.js: {}
          package.json: {}
          types:
            index.d.ts: {}
        plugin-node-resolve:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          dist:
            cjs:
              index.js: {}
            es:
              index.js: {}
              package.json: {}
          package.json: {}
          types:
            index.d.ts: {}
        plugin-replace:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          dist:
            rollup-plugin-replace.cjs.js: {}
            rollup-plugin-replace.es.js: {}
          package.json: {}
          src:
            index.js: {}
          types:
            index.d.ts: {}
        pluginutils:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          dist:
            cjs:
              index.js: {}
            es:
              index.js: {}
              package.json: {}
          node_modules:
            '@types':
              estree:
                LICENSE: {}
                README.md: {}
                index.d.ts: {}
                package.json: {}
          package.json: {}
          types:
            index.d.ts: {}
      '@rushstack':
        eslint-patch:
          .eslintrc.js: {}
          LICENSE: {}
          README.md: {}
          custom-config-package-names.js: {}
          eslint-bulk-suppressions.js: {}
          lib:
            _patch-base.d.ts: {}
            _patch-base.d.ts.map: {}
            _patch-base.js: {}
            _patch-base.js.map: {}
            custom-config-package-names.d.ts: {}
            custom-config-package-names.d.ts.map: {}
            custom-config-package-names.js: {}
            custom-config-package-names.js.map: {}
            eslint-bulk-suppressions:
              ast-guards.d.ts: {}
              ast-guards.d.ts.map: {}
              ast-guards.js: {}
              ast-guards.js.map: {}
              bulk-suppressions-file.d.ts: {}
              bulk-suppressions-file.d.ts.map: {}
              bulk-suppressions-file.js: {}
              bulk-suppressions-file.js.map: {}
              bulk-suppressions-patch.d.ts: {}
              bulk-suppressions-patch.d.ts.map: {}
              bulk-suppressions-patch.js: {}
              bulk-suppressions-patch.js.map: {}
              cli:
                prune.d.ts: {}
                prune.d.ts.map: {}
                prune.js: {}
                prune.js.map: {}
                runEslint.d.ts: {}
                runEslint.d.ts.map: {}
                runEslint.js: {}
                runEslint.js.map: {}
                start.d.ts: {}
                start.d.ts.map: {}
                start.js: {}
                start.js.map: {}
                suppress.d.ts: {}
                suppress.d.ts.map: {}
                suppress.js: {}
                suppress.js.map: {}
                utils:
                  get-eslint-cli.d.ts: {}
                  get-eslint-cli.d.ts.map: {}
                  get-eslint-cli.js: {}
                  get-eslint-cli.js.map: {}
                  is-correct-cwd.d.ts: {}
                  is-correct-cwd.d.ts.map: {}
                  is-correct-cwd.js: {}
                  is-correct-cwd.js.map: {}
                  print-help.d.ts: {}
                  print-help.d.ts.map: {}
                  print-help.js: {}
                  print-help.js.map: {}
                  wrap-words-to-lines.d.ts: {}
                  wrap-words-to-lines.d.ts.map: {}
                  wrap-words-to-lines.js: {}
                  wrap-words-to-lines.js.map: {}
              constants.d.ts: {}
              constants.d.ts.map: {}
              constants.js: {}
              constants.js.map: {}
              generate-patched-file.d.ts: {}
              generate-patched-file.d.ts.map: {}
              generate-patched-file.js: {}
              generate-patched-file.js.map: {}
              index.d.ts: {}
              index.d.ts.map: {}
              index.js: {}
              index.js.map: {}
              path-utils.d.ts: {}
              path-utils.d.ts.map: {}
              path-utils.js: {}
              path-utils.js.map: {}
            exports:
              eslint-bulk.d.ts: {}
              eslint-bulk.d.ts.map: {}
              eslint-bulk.js: {}
              eslint-bulk.js.map: {}
            modern-module-resolution.d.ts: {}
            modern-module-resolution.d.ts.map: {}
            modern-module-resolution.js: {}
            modern-module-resolution.js.map: {}
            usage.d.ts: {}
            usage.d.ts.map: {}
            usage.js: {}
            usage.js.map: {}
          modern-module-resolution.js: {}
          package.json: {}
      '@sinclair':
        typebox:
          compiler:
            compiler.d.ts: {}
            compiler.js: {}
            index.d.ts: {}
            index.js: {}
          conditional:
            conditional.d.ts: {}
            conditional.js: {}
            index.d.ts: {}
            index.js: {}
            structural.d.ts: {}
            structural.js: {}
          errors:
            errors.d.ts: {}
            errors.js: {}
            index.d.ts: {}
            index.js: {}
          format:
            format.d.ts: {}
            format.js: {}
            index.d.ts: {}
            index.js: {}
          guard:
            guard.d.ts: {}
            guard.js: {}
            index.d.ts: {}
            index.js: {}
          license: {}
          package.json: {}
          readme.md: {}
          typebox.d.ts: {}
          typebox.js: {}
          value:
            cast.d.ts: {}
            cast.js: {}
            check.d.ts: {}
            check.js: {}
            clone.d.ts: {}
            clone.js: {}
            create.d.ts: {}
            create.js: {}
            delta.d.ts: {}
            delta.js: {}
            equal.d.ts: {}
            equal.js: {}
            index.d.ts: {}
            index.js: {}
            is.d.ts: {}
            is.js: {}
            pointer.d.ts: {}
            pointer.js: {}
            value.d.ts: {}
            value.js: {}
      '@sinonjs':
        commons:
          LICENSE: {}
          README.md: {}
          lib:
            called-in-order.js: {}
            called-in-order.test.js: {}
            class-name.js: {}
            class-name.test.js: {}
            deprecated.js: {}
            deprecated.test.js: {}
            every.js: {}
            every.test.js: {}
            function-name.js: {}
            function-name.test.js: {}
            global.js: {}
            global.test.js: {}
            index.js: {}
            index.test.js: {}
            order-by-first-call.js: {}
            order-by-first-call.test.js: {}
            prototypes:
              README.md: {}
              array.js: {}
              copy-prototype-methods.js: {}
              copy-prototype-methods.test.js: {}
              function.js: {}
              index.js: {}
              index.test.js: {}
              map.js: {}
              object.js: {}
              set.js: {}
              string.js: {}
              throws-on-proto.js: {}
            type-of.js: {}
            type-of.test.js: {}
            value-to-string.js: {}
            value-to-string.test.js: {}
          package.json: {}
          types:
            called-in-order.d.ts: {}
            class-name.d.ts: {}
            deprecated.d.ts: {}
            every.d.ts: {}
            function-name.d.ts: {}
            global.d.ts: {}
            index.d.ts: {}
            order-by-first-call.d.ts: {}
            prototypes:
              array.d.ts: {}
              copy-prototype-methods.d.ts: {}
              function.d.ts: {}
              index.d.ts: {}
              map.d.ts: {}
              object.d.ts: {}
              set.d.ts: {}
              string.d.ts: {}
              throws-on-proto.d.ts: {}
            type-of.d.ts: {}
            value-to-string.d.ts: {}
        fake-timers:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          package.json: {}
          src:
            fake-timers-src.js: {}
      '@socket.io':
        component-emitter:
          LICENSE: {}
          Readme.md: {}
          lib:
            cjs:
              index.d.ts: {}
              index.js: {}
              package.json: {}
            esm:
              index.d.ts: {}
              index.js: {}
              package.json: {}
          package.json: {}
      '@surma':
        rollup-plugin-off-main-thread:
          .travis.yml: {}
          CODEOWNERS: {}
          CONTRIBUTING: {}
          CONTRIBUTORS: {}
          Dockerfile: {}
          LICENSE: {}
          README.md: {}
          index.js: {}
          karma.conf.js: {}
          loader.ejs: {}
          package.json: {}
          renovate.json: {}
          run_tests.js: {}
          tests:
            amd-function-name.test.js: {}
            asset-in-worker.test.js: {}
            dynamic-import.test.js: {}
            fixtures:
              amd-function-name:
                a.js: {}
                build:
                  runner.html: {}
                config.json: {}
                entry.js: {}
              assets-in-worker:
                build:
                  assets:
                    my-asset-620b911b.bin: {}
                  runner.html: {}
                entry.js: {}
                rollup.config.js: {}
                worker.js: {}
              dynamic-import:
                a.js: {}
                build:
                  runner.html: {}
                entry.js: {}
              empty.js: {}
              import-meta:
                a.js: {}
                build:
                  runner.html: {}
                entry.js: {}
              import-meta-worker:
                a.js: {}
                build:
                  runner.html: {}
                entry.js: {}
              import-worker-url:
                a.js: {}
                b.js: {}
                build:
                  runner.html: {}
                entry.js: {}
                worker.js: {}
              import-worker-url-custom-scheme:
                a.js: {}
                b.js: {}
                build:
                  runner.html: {}
                config.json: {}
                entry.js: {}
                worker.js: {}
              module-worker:
                a.js: {}
                b.js: {}
                build:
                  runner.html: {}
                entry.js: {}
                rollup.config.js: {}
                worker.js: {}
              more-workers:
                a.js: {}
                b.js: {}
                build:
                  runner.html: {}
                entry.js: {}
                worker_a.js: {}
                worker_b.js: {}
              public-path:
                a.js: {}
                build:
                  runner.html: {}
                config.json: {}
                entry.js: {}
              simple-bundle:
                a.js: {}
                build:
                  runner.html: {}
                entry.js: {}
              single-default:
                a.js: {}
                build:
                  runner.html: {}
                entry.js: {}
              url-import-meta-worker:
                a.js: {}
                b.js: {}
                build:
                  runner.html: {}
                entry.js: {}
                worker.js: {}
              worker:
                a.js: {}
                b.js: {}
                build:
                  runner.html: {}
                entry.js: {}
                worker.js: {}
            import-meta-worker.test.js: {}
            import-meta.test.js: {}
            import-worker-url-custom-scheme.test.js: {}
            import-worker-url.test.js: {}
            module-worker.test.js: {}
            more-workers.test.js: {}
            public-path.test.js: {}
            simple-bundle.test.js: {}
            single-default.test.js: {}
            url-import-meta-worker.test.js: {}
            worker.test.js: {}
      '@svgr':
        babel-plugin-add-jsx-attribute:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        babel-plugin-remove-jsx-attribute:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        babel-plugin-remove-jsx-empty-expression:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        babel-plugin-replace-jsx-attribute-value:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        babel-plugin-svg-dynamic-title:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        babel-plugin-svg-em-dimensions:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        babel-plugin-transform-react-native-svg:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        babel-plugin-transform-svg-component:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
            util.js: {}
          package.json: {}
        babel-preset:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        core:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          lib:
            config.js: {}
            convert.js: {}
            index.js: {}
            plugins.js: {}
            state.js: {}
          package.json: {}
        hast-util-to-babel-ast:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          lib:
            all.js: {}
            getAttributes.js: {}
            handlers.js: {}
            index.js: {}
            mappings.js: {}
            one.js: {}
            stringToObjectStyle.js: {}
            util.js: {}
          package.json: {}
        plugin-jsx:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        plugin-svgo:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          lib:
            config.js: {}
            index.js: {}
          package.json: {}
        webpack:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
      '@swc':
        helpers:
          LICENSE: {}
          _:
            _apply_decorated_descriptor:
              package.json: {}
            _apply_decs_2203_r:
              package.json: {}
            _array_like_to_array:
              package.json: {}
            _array_with_holes:
              package.json: {}
            _array_without_holes:
              package.json: {}
            _assert_this_initialized:
              package.json: {}
            _async_generator:
              package.json: {}
            _async_generator_delegate:
              package.json: {}
            _async_iterator:
              package.json: {}
            _async_to_generator:
              package.json: {}
            _await_async_generator:
              package.json: {}
            _await_value:
              package.json: {}
            _check_private_redeclaration:
              package.json: {}
            _class_apply_descriptor_destructure:
              package.json: {}
            _class_apply_descriptor_get:
              package.json: {}
            _class_apply_descriptor_set:
              package.json: {}
            _class_apply_descriptor_update:
              package.json: {}
            _class_call_check:
              package.json: {}
            _class_check_private_static_access:
              package.json: {}
            _class_check_private_static_field_descriptor:
              package.json: {}
            _class_extract_field_descriptor:
              package.json: {}
            _class_name_tdz_error:
              package.json: {}
            _class_private_field_destructure:
              package.json: {}
            _class_private_field_get:
              package.json: {}
            _class_private_field_init:
              package.json: {}
            _class_private_field_loose_base:
              package.json: {}
            _class_private_field_loose_key:
              package.json: {}
            _class_private_field_set:
              package.json: {}
            _class_private_field_update:
              package.json: {}
            _class_private_method_get:
              package.json: {}
            _class_private_method_init:
              package.json: {}
            _class_private_method_set:
              package.json: {}
            _class_static_private_field_destructure:
              package.json: {}
            _class_static_private_field_spec_get:
              package.json: {}
            _class_static_private_field_spec_set:
              package.json: {}
            _class_static_private_field_update:
              package.json: {}
            _class_static_private_method_get:
              package.json: {}
            _construct:
              package.json: {}
            _create_class:
              package.json: {}
            _create_for_of_iterator_helper_loose:
              package.json: {}
            _create_super:
              package.json: {}
            _decorate:
              package.json: {}
            _defaults:
              package.json: {}
            _define_enumerable_properties:
              package.json: {}
            _define_property:
              package.json: {}
            _dispose:
              package.json: {}
            _export_star:
              package.json: {}
            _extends:
              package.json: {}
            _get:
              package.json: {}
            _get_prototype_of:
              package.json: {}
            _identity:
              package.json: {}
            _inherits:
              package.json: {}
            _inherits_loose:
              package.json: {}
            _initializer_define_property:
              package.json: {}
            _initializer_warning_helper:
              package.json: {}
            _instanceof:
              package.json: {}
            _interop_require_default:
              package.json: {}
            _interop_require_wildcard:
              package.json: {}
            _is_native_function:
              package.json: {}
            _is_native_reflect_construct:
              package.json: {}
            _iterable_to_array:
              package.json: {}
            _iterable_to_array_limit:
              package.json: {}
            _iterable_to_array_limit_loose:
              package.json: {}
            _jsx:
              package.json: {}
            _new_arrow_check:
              package.json: {}
            _non_iterable_rest:
              package.json: {}
            _non_iterable_spread:
              package.json: {}
            _object_destructuring_empty:
              package.json: {}
            _object_spread:
              package.json: {}
            _object_spread_props:
              package.json: {}
            _object_without_properties:
              package.json: {}
            _object_without_properties_loose:
              package.json: {}
            _possible_constructor_return:
              package.json: {}
            _read_only_error:
              package.json: {}
            _set:
              package.json: {}
            _set_prototype_of:
              package.json: {}
            _skip_first_generator_next:
              package.json: {}
            _sliced_to_array:
              package.json: {}
            _sliced_to_array_loose:
              package.json: {}
            _super_prop_base:
              package.json: {}
            _tagged_template_literal:
              package.json: {}
            _tagged_template_literal_loose:
              package.json: {}
            _throw:
              package.json: {}
            _to_array:
              package.json: {}
            _to_consumable_array:
              package.json: {}
            _to_primitive:
              package.json: {}
            _to_property_key:
              package.json: {}
            _ts_decorate:
              package.json: {}
            _ts_generator:
              package.json: {}
            _ts_metadata:
              package.json: {}
            _ts_param:
              package.json: {}
            _ts_values:
              package.json: {}
            _type_of:
              package.json: {}
            _unsupported_iterable_to_array:
              package.json: {}
            _update:
              package.json: {}
            _using:
              package.json: {}
            _using_ctx:
              package.json: {}
            _wrap_async_generator:
              package.json: {}
            _wrap_native_super:
              package.json: {}
            _write_only_error:
              package.json: {}
            index:
              package.json: {}
          cjs:
            _apply_decorated_descriptor.cjs: {}
            _apply_decs_2203_r.cjs: {}
            _array_like_to_array.cjs: {}
            _array_with_holes.cjs: {}
            _array_without_holes.cjs: {}
            _assert_this_initialized.cjs: {}
            _async_generator.cjs: {}
            _async_generator_delegate.cjs: {}
            _async_iterator.cjs: {}
            _async_to_generator.cjs: {}
            _await_async_generator.cjs: {}
            _await_value.cjs: {}
            _check_private_redeclaration.cjs: {}
            _class_apply_descriptor_destructure.cjs: {}
            _class_apply_descriptor_get.cjs: {}
            _class_apply_descriptor_set.cjs: {}
            _class_apply_descriptor_update.cjs: {}
            _class_call_check.cjs: {}
            _class_check_private_static_access.cjs: {}
            _class_check_private_static_field_descriptor.cjs: {}
            _class_extract_field_descriptor.cjs: {}
            _class_name_tdz_error.cjs: {}
            _class_private_field_destructure.cjs: {}
            _class_private_field_get.cjs: {}
            _class_private_field_init.cjs: {}
            _class_private_field_loose_base.cjs: {}
            _class_private_field_loose_key.cjs: {}
            _class_private_field_set.cjs: {}
            _class_private_field_update.cjs: {}
            _class_private_method_get.cjs: {}
            _class_private_method_init.cjs: {}
            _class_private_method_set.cjs: {}
            _class_static_private_field_destructure.cjs: {}
            _class_static_private_field_spec_get.cjs: {}
            _class_static_private_field_spec_set.cjs: {}
            _class_static_private_field_update.cjs: {}
            _class_static_private_method_get.cjs: {}
            _construct.cjs: {}
            _create_class.cjs: {}
            _create_for_of_iterator_helper_loose.cjs: {}
            _create_super.cjs: {}
            _decorate.cjs: {}
            _defaults.cjs: {}
            _define_enumerable_properties.cjs: {}
            _define_property.cjs: {}
            _dispose.cjs: {}
            _export_star.cjs: {}
            _extends.cjs: {}
            _get.cjs: {}
            _get_prototype_of.cjs: {}
            _identity.cjs: {}
            _inherits.cjs: {}
            _inherits_loose.cjs: {}
            _initializer_define_property.cjs: {}
            _initializer_warning_helper.cjs: {}
            _instanceof.cjs: {}
            _interop_require_default.cjs: {}
            _interop_require_wildcard.cjs: {}
            _is_native_function.cjs: {}
            _is_native_reflect_construct.cjs: {}
            _iterable_to_array.cjs: {}
            _iterable_to_array_limit.cjs: {}
            _iterable_to_array_limit_loose.cjs: {}
            _jsx.cjs: {}
            _new_arrow_check.cjs: {}
            _non_iterable_rest.cjs: {}
            _non_iterable_spread.cjs: {}
            _object_destructuring_empty.cjs: {}
            _object_spread.cjs: {}
            _object_spread_props.cjs: {}
            _object_without_properties.cjs: {}
            _object_without_properties_loose.cjs: {}
            _possible_constructor_return.cjs: {}
            _read_only_error.cjs: {}
            _set.cjs: {}
            _set_prototype_of.cjs: {}
            _skip_first_generator_next.cjs: {}
            _sliced_to_array.cjs: {}
            _sliced_to_array_loose.cjs: {}
            _super_prop_base.cjs: {}
            _tagged_template_literal.cjs: {}
            _tagged_template_literal_loose.cjs: {}
            _throw.cjs: {}
            _to_array.cjs: {}
            _to_consumable_array.cjs: {}
            _to_primitive.cjs: {}
            _to_property_key.cjs: {}
            _ts_decorate.cjs: {}
            _ts_generator.cjs: {}
            _ts_metadata.cjs: {}
            _ts_param.cjs: {}
            _ts_values.cjs: {}
            _type_of.cjs: {}
            _unsupported_iterable_to_array.cjs: {}
            _update.cjs: {}
            _using.cjs: {}
            _using_ctx.cjs: {}
            _wrap_async_generator.cjs: {}
            _wrap_native_super.cjs: {}
            _write_only_error.cjs: {}
            index.cjs: {}
          esm:
            _apply_decorated_descriptor.js: {}
            _apply_decs_2203_r.js: {}
            _array_like_to_array.js: {}
            _array_with_holes.js: {}
            _array_without_holes.js: {}
            _assert_this_initialized.js: {}
            _async_generator.js: {}
            _async_generator_delegate.js: {}
            _async_iterator.js: {}
            _async_to_generator.js: {}
            _await_async_generator.js: {}
            _await_value.js: {}
            _check_private_redeclaration.js: {}
            _class_apply_descriptor_destructure.js: {}
            _class_apply_descriptor_get.js: {}
            _class_apply_descriptor_set.js: {}
            _class_apply_descriptor_update.js: {}
            _class_call_check.js: {}
            _class_check_private_static_access.js: {}
            _class_check_private_static_field_descriptor.js: {}
            _class_extract_field_descriptor.js: {}
            _class_name_tdz_error.js: {}
            _class_private_field_destructure.js: {}
            _class_private_field_get.js: {}
            _class_private_field_init.js: {}
            _class_private_field_loose_base.js: {}
            _class_private_field_loose_key.js: {}
            _class_private_field_set.js: {}
            _class_private_field_update.js: {}
            _class_private_method_get.js: {}
            _class_private_method_init.js: {}
            _class_private_method_set.js: {}
            _class_static_private_field_destructure.js: {}
            _class_static_private_field_spec_get.js: {}
            _class_static_private_field_spec_set.js: {}
            _class_static_private_field_update.js: {}
            _class_static_private_method_get.js: {}
            _construct.js: {}
            _create_class.js: {}
            _create_for_of_iterator_helper_loose.js: {}
            _create_super.js: {}
            _decorate.js: {}
            _defaults.js: {}
            _define_enumerable_properties.js: {}
            _define_property.js: {}
            _dispose.js: {}
            _export_star.js: {}
            _extends.js: {}
            _get.js: {}
            _get_prototype_of.js: {}
            _identity.js: {}
            _inherits.js: {}
            _inherits_loose.js: {}
            _initializer_define_property.js: {}
            _initializer_warning_helper.js: {}
            _instanceof.js: {}
            _interop_require_default.js: {}
            _interop_require_wildcard.js: {}
            _is_native_function.js: {}
            _is_native_reflect_construct.js: {}
            _iterable_to_array.js: {}
            _iterable_to_array_limit.js: {}
            _iterable_to_array_limit_loose.js: {}
            _jsx.js: {}
            _new_arrow_check.js: {}
            _non_iterable_rest.js: {}
            _non_iterable_spread.js: {}
            _object_destructuring_empty.js: {}
            _object_spread.js: {}
            _object_spread_props.js: {}
            _object_without_properties.js: {}
            _object_without_properties_loose.js: {}
            _possible_constructor_return.js: {}
            _read_only_error.js: {}
            _set.js: {}
            _set_prototype_of.js: {}
            _skip_first_generator_next.js: {}
            _sliced_to_array.js: {}
            _sliced_to_array_loose.js: {}
            _super_prop_base.js: {}
            _tagged_template_literal.js: {}
            _tagged_template_literal_loose.js: {}
            _throw.js: {}
            _to_array.js: {}
            _to_consumable_array.js: {}
            _to_primitive.js: {}
            _to_property_key.js: {}
            _ts_decorate.js: {}
            _ts_generator.js: {}
            _ts_metadata.js: {}
            _ts_param.js: {}
            _ts_values.js: {}
            _type_of.js: {}
            _unsupported_iterable_to_array.js: {}
            _update.js: {}
            _using.js: {}
            _using_ctx.js: {}
            _wrap_async_generator.js: {}
            _wrap_native_super.js: {}
            _write_only_error.js: {}
            index.js: {}
          package.json: {}
          scripts:
            ast_grep.js: {}
            build.js: {}
            errors.js: {}
            utils.js: {}
          src:
            _apply_decorated_descriptor.mjs: {}
            _apply_decs_2203_r.mjs: {}
            _array_like_to_array.mjs: {}
            _array_with_holes.mjs: {}
            _array_without_holes.mjs: {}
            _assert_this_initialized.mjs: {}
            _async_generator.mjs: {}
            _async_generator_delegate.mjs: {}
            _async_iterator.mjs: {}
            _async_to_generator.mjs: {}
            _await_async_generator.mjs: {}
            _await_value.mjs: {}
            _check_private_redeclaration.mjs: {}
            _class_apply_descriptor_destructure.mjs: {}
            _class_apply_descriptor_get.mjs: {}
            _class_apply_descriptor_set.mjs: {}
            _class_apply_descriptor_update.mjs: {}
            _class_call_check.mjs: {}
            _class_check_private_static_access.mjs: {}
            _class_check_private_static_field_descriptor.mjs: {}
            _class_extract_field_descriptor.mjs: {}
            _class_name_tdz_error.mjs: {}
            _class_private_field_destructure.mjs: {}
            _class_private_field_get.mjs: {}
            _class_private_field_init.mjs: {}
            _class_private_field_loose_base.mjs: {}
            _class_private_field_loose_key.mjs: {}
            _class_private_field_set.mjs: {}
            _class_private_field_update.mjs: {}
            _class_private_method_get.mjs: {}
            _class_private_method_init.mjs: {}
            _class_private_method_set.mjs: {}
            _class_static_private_field_destructure.mjs: {}
            _class_static_private_field_spec_get.mjs: {}
            _class_static_private_field_spec_set.mjs: {}
            _class_static_private_field_update.mjs: {}
            _class_static_private_method_get.mjs: {}
            _construct.mjs: {}
            _create_class.mjs: {}
            _create_for_of_iterator_helper_loose.mjs: {}
            _create_super.mjs: {}
            _decorate.mjs: {}
            _defaults.mjs: {}
            _define_enumerable_properties.mjs: {}
            _define_property.mjs: {}
            _dispose.mjs: {}
            _export_star.mjs: {}
            _extends.mjs: {}
            _get.mjs: {}
            _get_prototype_of.mjs: {}
            _identity.mjs: {}
            _inherits.mjs: {}
            _inherits_loose.mjs: {}
            _initializer_define_property.mjs: {}
            _initializer_warning_helper.mjs: {}
            _instanceof.mjs: {}
            _interop_require_default.mjs: {}
            _interop_require_wildcard.mjs: {}
            _is_native_function.mjs: {}
            _is_native_reflect_construct.mjs: {}
            _iterable_to_array.mjs: {}
            _iterable_to_array_limit.mjs: {}
            _iterable_to_array_limit_loose.mjs: {}
            _jsx.mjs: {}
            _new_arrow_check.mjs: {}
            _non_iterable_rest.mjs: {}
            _non_iterable_spread.mjs: {}
            _object_destructuring_empty.mjs: {}
            _object_spread.mjs: {}
            _object_spread_props.mjs: {}
            _object_without_properties.mjs: {}
            _object_without_properties_loose.mjs: {}
            _possible_constructor_return.mjs: {}
            _read_only_error.mjs: {}
            _set.mjs: {}
            _set_prototype_of.mjs: {}
            _skip_first_generator_next.mjs: {}
            _sliced_to_array.mjs: {}
            _sliced_to_array_loose.mjs: {}
            _super_prop_base.mjs: {}
            _tagged_template_literal.mjs: {}
            _tagged_template_literal_loose.mjs: {}
            _throw.mjs: {}
            _to_array.mjs: {}
            _to_consumable_array.mjs: {}
            _to_primitive.mjs: {}
            _to_property_key.mjs: {}
            _ts_decorate.mjs: {}
            _ts_generator.mjs: {}
            _ts_metadata.mjs: {}
            _ts_param.mjs: {}
            _ts_values.mjs: {}
            _type_of.mjs: {}
            _unsupported_iterable_to_array.mjs: {}
            _update.mjs: {}
            _using.mjs: {}
            _using_ctx.mjs: {}
            _wrap_async_generator.mjs: {}
            _wrap_native_super.mjs: {}
            _write_only_error.mjs: {}
            index.mjs: {}
      '@testing-library':
        dom:
          LICENSE: {}
          README.md: {}
          dist:
            '@testing-library':
              dom.cjs.js: {}
              dom.esm.js: {}
              dom.umd.js: {}
              dom.umd.js.map: {}
              dom.umd.min.js: {}
              dom.umd.min.js.map: {}
            DOMElementFilter.js: {}
            config.js: {}
            event-map.js: {}
            events.js: {}
            get-node-text.js: {}
            get-queries-for-element.js: {}
            get-user-code-frame.js: {}
            helpers.js: {}
            index.js: {}
            label-helpers.js: {}
            matches.js: {}
            pretty-dom.js: {}
            queries:
              all-utils.js: {}
              alt-text.js: {}
              display-value.js: {}
              index.js: {}
              label-text.js: {}
              placeholder-text.js: {}
              role.js: {}
              test-id.js: {}
              text.js: {}
              title.js: {}
            query-helpers.js: {}
            role-helpers.js: {}
            screen.js: {}
            suggestions.js: {}
            wait-for-element-to-be-removed.js: {}
            wait-for.js: {}
          node_modules:
            ansi-styles:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            chalk:
              index.d.ts: {}
              license: {}
              package.json: {}
              readme.md: {}
              source:
                index.js: {}
                templates.js: {}
                util.js: {}
            color-convert:
              CHANGELOG.md: {}
              LICENSE: {}
              README.md: {}
              conversions.js: {}
              index.js: {}
              package.json: {}
              route.js: {}
            color-name:
              LICENSE: {}
              README.md: {}
              index.js: {}
              package.json: {}
            has-flag:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            supports-color:
              browser.js: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
          package.json: {}
          types:
            config.d.ts: {}
            events.d.ts: {}
            get-node-text.d.ts: {}
            get-queries-for-element.d.ts: {}
            index.d.ts: {}
            matches.d.ts: {}
            pretty-dom.d.ts: {}
            queries.d.ts: {}
            query-helpers.d.ts: {}
            role-helpers.d.ts: {}
            screen.d.ts: {}
            suggestions.d.ts: {}
            wait-for-element-to-be-removed.d.ts: {}
            wait-for.d.ts: {}
        jest-dom:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          dist:
            extend-expect.js: {}
            index.js: {}
            matchers.js: {}
            to-be-checked.js: {}
            to-be-disabled.js: {}
            to-be-empty-dom-element.js: {}
            to-be-empty.js: {}
            to-be-in-the-document.js: {}
            to-be-in-the-dom.js: {}
            to-be-invalid.js: {}
            to-be-partially-checked.js: {}
            to-be-required.js: {}
            to-be-visible.js: {}
            to-contain-element.js: {}
            to-contain-html.js: {}
            to-have-accessible-description.js: {}
            to-have-accessible-errormessage.js: {}
            to-have-accessible-name.js: {}
            to-have-attribute.js: {}
            to-have-class.js: {}
            to-have-description.js: {}
            to-have-display-value.js: {}
            to-have-errormessage.js: {}
            to-have-focus.js: {}
            to-have-form-values.js: {}
            to-have-style.js: {}
            to-have-text-content.js: {}
            to-have-value.js: {}
            utils.js: {}
          extend-expect.js: {}
          matchers.js: {}
          node_modules:
            ansi-styles:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            chalk:
              index.d.ts: {}
              license: {}
              package.json: {}
              readme.md: {}
              source:
                index.js: {}
                templates.js: {}
                util.js: {}
            color-convert:
              CHANGELOG.md: {}
              LICENSE: {}
              README.md: {}
              conversions.js: {}
              index.js: {}
              package.json: {}
              route.js: {}
            color-name:
              LICENSE: {}
              README.md: {}
              index.js: {}
              package.json: {}
            has-flag:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            supports-color:
              browser.js: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
          package.json: {}
        react:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          dist:
            '@testing-library':
              react.cjs.js: {}
              react.esm.js: {}
              react.pure.cjs.js: {}
              react.pure.esm.js: {}
              react.pure.umd.js: {}
              react.pure.umd.js.map: {}
              react.pure.umd.min.js: {}
              react.pure.umd.min.js.map: {}
              react.umd.js: {}
              react.umd.js.map: {}
              react.umd.min.js: {}
              react.umd.min.js.map: {}
            act-compat.js: {}
            fire-event.js: {}
            index.js: {}
            pure.js: {}
          dont-cleanup-after-each.js: {}
          node_modules:
            '@testing-library':
              dom:
                CHANGELOG.md: {}
                LICENSE: {}
                README.md: {}
                dist:
                  '@testing-library':
                    dom.cjs.js: {}
                    dom.esm.js: {}
                    dom.umd.js: {}
                    dom.umd.js.map: {}
                    dom.umd.min.js: {}
                    dom.umd.min.js.map: {}
                  DOMElementFilter.js: {}
                  config.js: {}
                  event-map.js: {}
                  events.js: {}
                  get-node-text.js: {}
                  get-queries-for-element.js: {}
                  get-user-code-frame.js: {}
                  helpers.js: {}
                  index.js: {}
                  label-helpers.js: {}
                  matches.js: {}
                  pretty-dom.js: {}
                  queries:
                    all-utils.js: {}
                    alt-text.js: {}
                    display-value.js: {}
                    index.js: {}
                    label-text.js: {}
                    placeholder-text.js: {}
                    role.js: {}
                    test-id.js: {}
                    text.js: {}
                    title.js: {}
                  query-helpers.js: {}
                  role-helpers.js: {}
                  screen.js: {}
                  suggestions.js: {}
                  wait-for-element-to-be-removed.js: {}
                  wait-for.js: {}
                package.json: {}
                types:
                  config.d.ts: {}
                  events.d.ts: {}
                  get-node-text.d.ts: {}
                  get-queries-for-element.d.ts: {}
                  index.d.ts: {}
                  matches.d.ts: {}
                  pretty-dom.d.ts: {}
                  queries.d.ts: {}
                  query-helpers.d.ts: {}
                  role-helpers.d.ts: {}
                  screen.d.ts: {}
                  suggestions.d.ts: {}
                  wait-for-element-to-be-removed.d.ts: {}
                  wait-for.d.ts: {}
            ansi-styles:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            aria-query:
              LICENSE: {}
              README.md: {}
              lib:
                ariaPropsMap.js: {}
                domMap.js: {}
                elementRoleMap.js: {}
                etc:
                  roles:
                    abstract:
                      commandRole.js: {}
                      compositeRole.js: {}
                      inputRole.js: {}
                      landmarkRole.js: {}
                      rangeRole.js: {}
                      roletypeRole.js: {}
                      sectionRole.js: {}
                      sectionheadRole.js: {}
                      selectRole.js: {}
                      structureRole.js: {}
                      widgetRole.js: {}
                      windowRole.js: {}
                    ariaAbstractRoles.js: {}
                    ariaDpubRoles.js: {}
                    ariaGraphicsRoles.js: {}
                    ariaLiteralRoles.js: {}
                    dpub:
                      docAbstractRole.js: {}
                      docAcknowledgmentsRole.js: {}
                      docAfterwordRole.js: {}
                      docAppendixRole.js: {}
                      docBacklinkRole.js: {}
                      docBiblioentryRole.js: {}
                      docBibliographyRole.js: {}
                      docBibliorefRole.js: {}
                      docChapterRole.js: {}
                      docColophonRole.js: {}
                      docConclusionRole.js: {}
                      docCoverRole.js: {}
                      docCreditRole.js: {}
                      docCreditsRole.js: {}
                      docDedicationRole.js: {}
                      docEndnoteRole.js: {}
                      docEndnotesRole.js: {}
                      docEpigraphRole.js: {}
                      docEpilogueRole.js: {}
                      docErrataRole.js: {}
                      docExampleRole.js: {}
                      docFootnoteRole.js: {}
                      docForewordRole.js: {}
                      docGlossaryRole.js: {}
                      docGlossrefRole.js: {}
                      docIndexRole.js: {}
                      docIntroductionRole.js: {}
                      docNoterefRole.js: {}
                      docNoticeRole.js: {}
                      docPagebreakRole.js: {}
                      docPagelistRole.js: {}
                      docPartRole.js: {}
                      docPrefaceRole.js: {}
                      docPrologueRole.js: {}
                      docPullquoteRole.js: {}
                      docQnaRole.js: {}
                      docSubtitleRole.js: {}
                      docTipRole.js: {}
                      docTocRole.js: {}
                    graphics:
                      graphicsDocumentRole.js: {}
                      graphicsObjectRole.js: {}
                      graphicsSymbolRole.js: {}
                    literal:
                      alertRole.js: {}
                      alertdialogRole.js: {}
                      applicationRole.js: {}
                      articleRole.js: {}
                      bannerRole.js: {}
                      blockquoteRole.js: {}
                      buttonRole.js: {}
                      captionRole.js: {}
                      cellRole.js: {}
                      checkboxRole.js: {}
                      codeRole.js: {}
                      columnheaderRole.js: {}
                      comboboxRole.js: {}
                      complementaryRole.js: {}
                      contentinfoRole.js: {}
                      definitionRole.js: {}
                      deletionRole.js: {}
                      dialogRole.js: {}
                      directoryRole.js: {}
                      documentRole.js: {}
                      emphasisRole.js: {}
                      feedRole.js: {}
                      figureRole.js: {}
                      formRole.js: {}
                      genericRole.js: {}
                      graphicsDocumentRole.js: {}
                      graphicsObjectRole.js: {}
                      graphicsSymbolRole.js: {}
                      gridRole.js: {}
                      gridcellRole.js: {}
                      groupRole.js: {}
                      headingRole.js: {}
                      imgRole.js: {}
                      insertionRole.js: {}
                      linkRole.js: {}
                      listRole.js: {}
                      listboxRole.js: {}
                      listitemRole.js: {}
                      logRole.js: {}
                      mainRole.js: {}
                      marqueeRole.js: {}
                      mathRole.js: {}
                      menuRole.js: {}
                      menubarRole.js: {}
                      menuitemRole.js: {}
                      menuitemcheckboxRole.js: {}
                      menuitemradioRole.js: {}
                      meterRole.js: {}
                      navigationRole.js: {}
                      noneRole.js: {}
                      noteRole.js: {}
                      optionRole.js: {}
                      paragraphRole.js: {}
                      presentationRole.js: {}
                      progressbarRole.js: {}
                      radioRole.js: {}
                      radiogroupRole.js: {}
                      regionRole.js: {}
                      rowRole.js: {}
                      rowgroupRole.js: {}
                      rowheaderRole.js: {}
                      scrollbarRole.js: {}
                      searchRole.js: {}
                      searchboxRole.js: {}
                      separatorRole.js: {}
                      sliderRole.js: {}
                      spinbuttonRole.js: {}
                      statusRole.js: {}
                      strongRole.js: {}
                      subscriptRole.js: {}
                      superscriptRole.js: {}
                      switchRole.js: {}
                      tabRole.js: {}
                      tableRole.js: {}
                      tablistRole.js: {}
                      tabpanelRole.js: {}
                      termRole.js: {}
                      textboxRole.js: {}
                      timeRole.js: {}
                      timerRole.js: {}
                      toolbarRole.js: {}
                      tooltipRole.js: {}
                      treeRole.js: {}
                      treegridRole.js: {}
                      treeitemRole.js: {}
                index.js: {}
                roleElementMap.js: {}
                rolesMap.js: {}
                util:
                  iterationDecorator.js: {}
                  iteratorProxy.js: {}
              package.json: {}
            chalk:
              index.d.ts: {}
              license: {}
              package.json: {}
              readme.md: {}
              source:
                index.js: {}
                templates.js: {}
                util.js: {}
            color-convert:
              CHANGELOG.md: {}
              LICENSE: {}
              README.md: {}
              conversions.js: {}
              index.js: {}
              package.json: {}
              route.js: {}
            color-name:
              LICENSE: {}
              README.md: {}
              index.js: {}
              package.json: {}
            has-flag:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            supports-color:
              browser.js: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
          package.json: {}
          pure.d.ts: {}
          pure.js: {}
          types:
            index.d.ts: {}
            pure.d.ts: {}
        user-event:
          CHANGELOG.md: {}
          LICENSE: {}
          README.md: {}
          dist:
            blur.d.ts: {}
            blur.js: {}
            clear.d.ts: {}
            clear.js: {}
            click.d.ts: {}
            click.js: {}
            dom-helpers.d.ts: {}
            focus.d.ts: {}
            focus.js: {}
            hover.d.ts: {}
            hover.js: {}
            index.d.ts: {}
            index.js: {}
            keyboard:
              getEventProps.d.ts: {}
              getEventProps.js: {}
              getNextKeyDef.d.ts: {}
              getNextKeyDef.js: {}
              index.d.ts: {}
              index.js: {}
              keyMap.d.ts: {}
              keyMap.js: {}
              keyboardImplementation.d.ts: {}
              keyboardImplementation.js: {}
              plugins:
                arrow.d.ts: {}
                arrow.js: {}
                character.d.ts: {}
                character.js: {}
                control.d.ts: {}
                control.js: {}
                functional.d.ts: {}
                functional.js: {}
                index.d.ts: {}
                index.js: {}
              shared:
                carryValue.d.ts: {}
                carryValue.js: {}
                fireChangeForInputTimeIfValid.d.ts: {}
                fireChangeForInputTimeIfValid.js: {}
                fireInputEvent.d.ts: {}
                fireInputEvent.js: {}
                index.d.ts: {}
                index.js: {}
              specialCharMap.d.ts: {}
              specialCharMap.js: {}
              types.d.ts: {}
              types.js: {}
            paste.d.ts: {}
            paste.js: {}
            select-options.d.ts: {}
            select-options.js: {}
            tab.d.ts: {}
            tab.js: {}
            type:
              index.d.ts: {}
              index.js: {}
              typeImplementation.d.ts: {}
              typeImplementation.js: {}
            upload.d.ts: {}
            upload.js: {}
            utils:
              click:
                getMouseEventOptions.d.ts: {}
                getMouseEventOptions.js: {}
                isClickableInput.d.ts: {}
                isClickableInput.js: {}
              edit:
                buildTimeValue.d.ts: {}
                buildTimeValue.js: {}
                calculateNewValue.d.ts: {}
                calculateNewValue.js: {}
                cursorPosition.d.ts: {}
                cursorPosition.js: {}
                getValue.d.ts: {}
                getValue.js: {}
                hasUnreliableEmptyValue.d.ts: {}
                hasUnreliableEmptyValue.js: {}
                isContentEditable.d.ts: {}
                isContentEditable.js: {}
                isEditable.d.ts: {}
                isEditable.js: {}
                isValidDateValue.d.ts: {}
                isValidDateValue.js: {}
                isValidInputTimeValue.d.ts: {}
                isValidInputTimeValue.js: {}
                maxLength.d.ts: {}
                maxLength.js: {}
                selectionRange.d.ts: {}
                selectionRange.js: {}
              focus:
                getActiveElement.d.ts: {}
                getActiveElement.js: {}
                isFocusable.d.ts: {}
                isFocusable.js: {}
                selector.d.ts: {}
                selector.js: {}
              index.d.ts: {}
              index.js: {}
              misc:
                eventWrapper.d.ts: {}
                eventWrapper.js: {}
                hasFormSubmit.d.ts: {}
                hasFormSubmit.js: {}
                hasPointerEvents.d.ts: {}
                hasPointerEvents.js: {}
                isDisabled.d.ts: {}
                isDisabled.js: {}
                isDocument.d.ts: {}
                isDocument.js: {}
                isElementType.d.ts: {}
                isElementType.js: {}
                isLabelWithInternallyDisabledControl.d.ts: {}
                isLabelWithInternallyDisabledControl.js: {}
                isVisible.d.ts: {}
                isVisible.js: {}
                wait.d.ts: {}
                wait.js: {}
          package.json: {}
      '@tootallnate':
        once:
          dist:
            index.d.ts: {}
            index.js: {}
            index.js.map: {}
          package.json: {}
        quickjs-emscripten:
          LICENSE: {}
          README.md: {}
          c:
            interface.c: {}
          dist:
            asyncify-helpers.d.ts: {}
            asyncify-helpers.js: {}
            asyncify-helpers.js.map: {}
            context-asyncify.d.ts: {}
            context-asyncify.js: {}
            context-asyncify.js.map: {}
            context.d.ts: {}
            context.js: {}
            context.js.map: {}
            debug.d.ts: {}
            debug.js: {}
            debug.js.map: {}
            deferred-promise.d.ts: {}
            deferred-promise.js: {}
            deferred-promise.js.map: {}
            emscripten-types.d.ts: {}
            emscripten-types.js: {}
            emscripten-types.js.map: {}
            errors.d.ts: {}
            errors.js: {}
            errors.js.map: {}
            esmHelpers.d.ts: {}
            esmHelpers.js: {}
            esmHelpers.js.map: {}
            generated:
              emscripten-module.WASM_RELEASE_SYNC.d.ts: {}
              emscripten-module.WASM_RELEASE_SYNC.js: {}
              emscripten-module.WASM_RELEASE_SYNC.js.map: {}
              ffi.WASM_RELEASE_SYNC.d.ts: {}
              ffi.WASM_RELEASE_SYNC.js: {}
              ffi.WASM_RELEASE_SYNC.js.map: {}
            index.d.ts: {}
            index.js: {}
            index.js.map: {}
            lifetime.d.ts: {}
            lifetime.js: {}
            lifetime.js.map: {}
            memory.d.ts: {}
            memory.js: {}
            memory.js.map: {}
            module-asyncify.d.ts: {}
            module-asyncify.js: {}
            module-asyncify.js.map: {}
            module-test.d.ts: {}
            module-test.js: {}
            module-test.js.map: {}
            module.d.ts: {}
            module.js: {}
            module.js.map: {}
            runtime-asyncify.d.ts: {}
            runtime-asyncify.js: {}
            runtime-asyncify.js.map: {}
            runtime.d.ts: {}
            runtime.js: {}
            runtime.js.map: {}
            types-ffi.d.ts: {}
            types-ffi.js: {}
            types-ffi.js.map: {}
            types.d.ts: {}
            types.js: {}
            types.js.map: {}
            variants.d.ts: {}
            variants.js: {}
            variants.js.map: {}
            vm-interface.d.ts: {}
            vm-interface.js: {}
            vm-interface.js.map: {}
          package.json: {}
      '@trysound':
        sax:
          LICENSE: {}
          README.md: {}
          lib:
            sax.js: {}
          package.json: {}
      '@types':
        aria-query:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        babel__core:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        babel__generator:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        babel__template:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        babel__traverse:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        body-parser:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        bonjour:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        connect:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        connect-history-api-fallback:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        debug:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        eslint:
          LICENSE: {}
          README.md: {}
          helpers.d.ts: {}
          index.d.ts: {}
          package.json: {}
          rules:
            best-practices.d.ts: {}
            deprecated.d.ts: {}
            ecmascript-6.d.ts: {}
            index.d.ts: {}
            node-commonjs.d.ts: {}
            possible-errors.d.ts: {}
            strict-mode.d.ts: {}
            stylistic-issues.d.ts: {}
            variables.d.ts: {}
          use-at-your-own-risk.d.ts: {}
        eslint-scope:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        estree:
          LICENSE: {}
          README.md: {}
          flow.d.ts: {}
          index.d.ts: {}
          package.json: {}
        estree-jsx:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        express:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        express-serve-static-core:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        graceful-fs:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        hast:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        html-minifier-terser:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        http-errors:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        http-proxy:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        istanbul-lib-coverage:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        istanbul-lib-report:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        istanbul-reports:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        jest:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          node_modules:
            '@jest':
              schemas:
                LICENSE: {}
                README.md: {}
                build:
                  index.d.ts: {}
                  index.js: {}
                package.json: {}
              types:
                LICENSE: {}
                README.md: {}
                build:
                  Circus.js: {}
                  Config.js: {}
                  Global.js: {}
                  TestResult.js: {}
                  Transform.js: {}
                  index.d.ts: {}
                  index.js: {}
                package.json: {}
            '@sinclair':
              typebox:
                compiler:
                  compiler.d.ts: {}
                  compiler.js: {}
                  index.d.ts: {}
                  index.js: {}
                errors:
                  errors.d.ts: {}
                  errors.js: {}
                  index.d.ts: {}
                  index.js: {}
                license: {}
                package.json: {}
                readme.md: {}
                system:
                  index.d.ts: {}
                  index.js: {}
                  system.d.ts: {}
                  system.js: {}
                typebox.d.ts: {}
                typebox.js: {}
                value:
                  cast.d.ts: {}
                  cast.js: {}
                  check.d.ts: {}
                  check.js: {}
                  clone.d.ts: {}
                  clone.js: {}
                  convert.d.ts: {}
                  convert.js: {}
                  create.d.ts: {}
                  create.js: {}
                  delta.d.ts: {}
                  delta.js: {}
                  equal.d.ts: {}
                  equal.js: {}
                  hash.d.ts: {}
                  hash.js: {}
                  index.d.ts: {}
                  index.js: {}
                  is.d.ts: {}
                  is.js: {}
                  mutate.d.ts: {}
                  mutate.js: {}
                  pointer.d.ts: {}
                  pointer.js: {}
                  value.d.ts: {}
                  value.js: {}
            '@types':
              yargs:
                LICENSE: {}
                README.md: {}
                helpers.d.mts: {}
                helpers.d.ts: {}
                index.d.mts: {}
                index.d.ts: {}
                package.json: {}
                yargs.d.ts: {}
            ansi-styles:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            chalk:
              index.d.ts: {}
              license: {}
              package.json: {}
              readme.md: {}
              source:
                index.js: {}
                templates.js: {}
                util.js: {}
            color-convert:
              CHANGELOG.md: {}
              LICENSE: {}
              README.md: {}
              conversions.js: {}
              index.js: {}
              package.json: {}
              route.js: {}
            color-name:
              LICENSE: {}
              README.md: {}
              index.js: {}
              package.json: {}
            diff-sequences:
              LICENSE: {}
              README.md: {}
              build:
                index.d.ts: {}
                index.js: {}
              package.json: {}
            expect:
              LICENSE: {}
              README.md: {}
              build:
                asymmetricMatchers.js: {}
                extractExpectedAssertionsErrors.js: {}
                index.d.ts: {}
                index.js: {}
                jestMatchersObject.js: {}
                matchers.js: {}
                print.js: {}
                spyMatchers.js: {}
                toThrowMatchers.js: {}
                types.js: {}
              package.json: {}
            has-flag:
              index.d.ts: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
            jest-diff:
              LICENSE: {}
              README.md: {}
              build:
                cleanupSemantic.js: {}
                constants.js: {}
                diffLines.js: {}
                diffStrings.js: {}
                getAlignedDiffs.js: {}
                index.d.ts: {}
                index.js: {}
                joinAlignedDiffs.js: {}
                normalizeDiffOptions.js: {}
                printDiffs.js: {}
                types.js: {}
              package.json: {}
            jest-get-type:
              LICENSE: {}
              build:
                index.d.ts: {}
                index.js: {}
              package.json: {}
            jest-matcher-utils:
              LICENSE: {}
              README.md: {}
              build:
                Replaceable.js: {}
                deepCyclicCopyReplaceable.js: {}
                index.d.ts: {}
                index.js: {}
              package.json: {}
            jest-message-util:
              LICENSE: {}
              build:
                index.d.ts: {}
                index.js: {}
                types.js: {}
              package.json: {}
            jest-util:
              LICENSE: {}
              Readme.md: {}
              build:
                ErrorWithStack.js: {}
                clearLine.js: {}
                convertDescriptorToString.js: {}
                createDirectory.js: {}
                createProcessObject.js: {}
                deepCyclicCopy.js: {}
                formatTime.js: {}
                globsToMatcher.js: {}
                index.d.ts: {}
                index.js: {}
                installCommonGlobals.js: {}
                interopRequireDefault.js: {}
                invariant.js: {}
                isInteractive.js: {}
                isNonNullable.js: {}
                isPromise.js: {}
                pluralize.js: {}
                preRunMessage.js: {}
                replacePathSepForGlob.js: {}
                requireOrImportModule.js: {}
                setGlobal.js: {}
                specialChars.js: {}
                testPathPatternToRegExp.js: {}
                tryRealpath.js: {}
              package.json: {}
            pretty-format:
              LICENSE: {}
              README.md: {}
              build:
                collections.js: {}
                index.d.ts: {}
                index.js: {}
                plugins:
                  AsymmetricMatcher.js: {}
                  DOMCollection.js: {}
                  DOMElement.js: {}
                  Immutable.js: {}
                  ReactElement.js: {}
                  ReactTestComponent.js: {}
                  lib:
                    escapeHTML.js: {}
                    markup.js: {}
                types.js: {}
              node_modules:
                ansi-styles:
                  index.d.ts: {}
                  index.js: {}
                  license: {}
                  package.json: {}
                  readme.md: {}
              package.json: {}
            react-is:
              LICENSE: {}
              README.md: {}
              cjs:
                react-is.development.js: {}
                react-is.production.min.js: {}
              index.js: {}
              package.json: {}
              umd:
                react-is.development.js: {}
                react-is.production.min.js: {}
            supports-color:
              browser.js: {}
              index.js: {}
              license: {}
              package.json: {}
              readme.md: {}
          package.json: {}
        json-schema:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        json5:
          README.md: {}
          index.d.ts: {}
          package.json: {}
          types-metadata.json: {}
        mdast:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        mime:
          LICENSE: {}
          Mime.d.ts: {}
          README.md: {}
          index.d.ts: {}
          lite.d.ts: {}
          package.json: {}
        ms:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        node:
          LICENSE: {}
          README.md: {}
          assert:
            strict.d.ts: {}
          assert.d.ts: {}
          async_hooks.d.ts: {}
          buffer.d.ts: {}
          child_process.d.ts: {}
          cluster.d.ts: {}
          console.d.ts: {}
          constants.d.ts: {}
          crypto.d.ts: {}
          dgram.d.ts: {}
          diagnostics_channel.d.ts: {}
          dns:
            promises.d.ts: {}
          dns.d.ts: {}
          dom-events.d.ts: {}
          domain.d.ts: {}
          events.d.ts: {}
          fs:
            promises.d.ts: {}
          fs.d.ts: {}
          globals.d.ts: {}
          globals.global.d.ts: {}
          http.d.ts: {}
          http2.d.ts: {}
          https.d.ts: {}
          index.d.ts: {}
          inspector.d.ts: {}
          module.d.ts: {}
          net.d.ts: {}
          os.d.ts: {}
          package.json: {}
          path.d.ts: {}
          perf_hooks.d.ts: {}
          process.d.ts: {}
          punycode.d.ts: {}
          querystring.d.ts: {}
          readline:
            promises.d.ts: {}
          readline.d.ts: {}
          repl.d.ts: {}
          sea.d.ts: {}
          stream:
            consumers.d.ts: {}
            promises.d.ts: {}
            web.d.ts: {}
          stream.d.ts: {}
          string_decoder.d.ts: {}
          test.d.ts: {}
          timers:
            promises.d.ts: {}
          timers.d.ts: {}
          tls.d.ts: {}
          trace_events.d.ts: {}
          tty.d.ts: {}
          url.d.ts: {}
          util.d.ts: {}
          v8.d.ts: {}
          vm.d.ts: {}
          wasi.d.ts: {}
          worker_threads.d.ts: {}
          zlib.d.ts: {}
        node-forge:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        parse-json:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        prettier:
          LICENSE: {}
          README.md: {}
          doc.d.ts: {}
          index.d.ts: {}
          package.json: {}
          parser-angular.d.ts: {}
          parser-babel.d.ts: {}
          parser-espree.d.ts: {}
          parser-flow.d.ts: {}
          parser-glimmer.d.ts: {}
          parser-graphql.d.ts: {}
          parser-html.d.ts: {}
          parser-markdown.d.ts: {}
          parser-meriyah.d.ts: {}
          parser-postcss.d.ts: {}
          parser-typescript.d.ts: {}
          parser-yaml.d.ts: {}
          standalone.d.ts: {}
        prop-types:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        q:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        qs:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        range-parser:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        react:
          LICENSE: {}
          README.md: {}
          canary.d.ts: {}
          experimental.d.ts: {}
          global.d.ts: {}
          index.d.ts: {}
          jsx-dev-runtime.d.ts: {}
          jsx-runtime.d.ts: {}
          package.json: {}
          ts5.0:
            canary.d.ts: {}
            experimental.d.ts: {}
            global.d.ts: {}
            index.d.ts: {}
            jsx-dev-runtime.d.ts: {}
            jsx-runtime.d.ts: {}
        react-dom:
          LICENSE: {}
          README.md: {}
          canary.d.ts: {}
          client.d.ts: {}
          experimental.d.ts: {}
          index.d.ts: {}
          package.json: {}
          server.d.ts: {}
          test-utils:
            index.d.ts: {}
        react-transition-group:
          CSSTransition.d.ts: {}
          LICENSE: {}
          README.md: {}
          SwitchTransition.d.ts: {}
          Transition.d.ts: {}
          TransitionGroup.d.ts: {}
          config.d.ts: {}
          index.d.ts: {}
          package.json: {}
        resolve:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        retry:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        semver:
          LICENSE: {}
          README.md: {}
          classes:
            comparator.d.ts: {}
            range.d.ts: {}
            semver.d.ts: {}
          functions:
            clean.d.ts: {}
            cmp.d.ts: {}
            coerce.d.ts: {}
            compare-build.d.ts: {}
            compare-loose.d.ts: {}
            compare.d.ts: {}
            diff.d.ts: {}
            eq.d.ts: {}
            gt.d.ts: {}
            gte.d.ts: {}
            inc.d.ts: {}
            lt.d.ts: {}
            lte.d.ts: {}
            major.d.ts: {}
            minor.d.ts: {}
            neq.d.ts: {}
            parse.d.ts: {}
            patch.d.ts: {}
            prerelease.d.ts: {}
            rcompare.d.ts: {}
            rsort.d.ts: {}
            satisfies.d.ts: {}
            sort.d.ts: {}
            valid.d.ts: {}
          index.d.ts: {}
          internals:
            identifiers.d.ts: {}
          package.json: {}
          preload.d.ts: {}
          ranges:
            gtr.d.ts: {}
            intersects.d.ts: {}
            ltr.d.ts: {}
            max-satisfying.d.ts: {}
            min-satisfying.d.ts: {}
            min-version.d.ts: {}
            outside.d.ts: {}
            simplify.d.ts: {}
            subset.d.ts: {}
            to-comparators.d.ts: {}
            valid.d.ts: {}
        send:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        serve-index:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        serve-static:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        sockjs:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        stack-utils:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        testing-library__jest-dom:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          matchers.d.ts: {}
          package.json: {}
        trusted-types:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          lib:
            index.d.ts: {}
          package.json: {}
        unist:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        warning:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
        ws:
          LICENSE: {}
          README.md: {}
          index.d.mts: {}
          index.d.ts: {}
          package.json: {}
        yargs:
          LICENSE: {}
          README.md: {}
          helpers.d.ts: {}
          index.d.ts: {}
          package.json: {}
          yargs.d.ts: {}
        yargs-parser:
          LICENSE: {}
          README.md: {}
          index.d.ts: {}
          package.json: {}
      '@typescript-eslint':
        eslint-plugin:
          LICENSE: {}
          README.md: {}
          dist:
            configs:
              all.js: {}
              all.js.map: {}
              base.js: {}
              base.js.map: {}
              eslint-recommended.js: {}
              eslint-recommended.js.map: {}
              recommended-requiring-type-checking.js: {}
              recommended-requiring-type-checking.js.map: {}
              recommended.js: {}
              recommended.js.map: {}
              strict.js: {}
              strict.js.map: {}
            index.js: {}
            index.js.map: {}
            rules:
              adjacent-overload-signatures.js: {}
              adjacent-overload-signatures.js.map: {}
              array-type.js: {}
              array-type.js.map: {}
              await-thenable.js: {}
              await-thenable.js.map: {}
              ban-ts-comment.js: {}
              ban-ts-comment.js.map: {}
              ban-tslint-comment.js: {}
              ban-tslint-comment.js.map: {}
              ban-types.js: {}
              ban-types.js.map: {}
              block-spacing.js: {}
              block-spacing.js.map: {}
              brace-style.js: {}
              brace-style.js.map: {}
              class-literal-property-style.js: {}
              class-literal-property-style.js.map: {}
              comma-dangle.js: {}
              comma-dangle.js.map: {}
              comma-spacing.js: {}
              comma-spacing.js.map: {}
              consistent-generic-constructors.js: {}
              consistent-generic-constructors.js.map: {}
              consistent-indexed-object-style.js: {}
              consistent-indexed-object-style.js.map: {}
              consistent-type-assertions.js: {}
              consistent-type-assertions.js.map: {}
              consistent-type-definitions.js: {}
              consistent-type-definitions.js.map: {}
              consistent-type-exports.js: {}
              consistent-type-exports.js.map: {}
              consistent-type-imports.js: {}
              consistent-type-imports.js.map: {}
              default-param-last.js: {}
              default-param-last.js.map: {}
              dot-notation.js: {}
              dot-notation.js.map: {}
              enum-utils:
                shared.js: {}
                shared.js.map: {}
              explicit-function-return-type.js: {}
              explicit-function-return-type.js.map: {}
              explicit-member-accessibility.js: {}
              explicit-member-accessibility.js.map: {}
              explicit-module-boundary-types.js: {}
              explicit-module-boundary-types.js.map: {}
              func-call-spacing.js: {}
              func-call-spacing.js.map: {}
              indent.js: {}
              indent.js.map: {}
              index.js: {}
              index.js.map: {}
              init-declarations.js: {}
              init-declarations.js.map: {}
              key-spacing.js: {}
              key-spacing.js.map: {}
              keyword-spacing.js: {}
              keyword-spacing.js.map: {}
              lines-around-comment.js: {}
              lines-around-comment.js.map: {}
              lines-between-class-members.js: {}
              lines-between-class-members.js.map: {}
              member-delimiter-style.js: {}
              member-delimiter-style.js.map: {}
              member-ordering.js: {}
              member-ordering.js.map: {}
              method-signature-style.js: {}
              method-signature-style.js.map: {}
              naming-convention-utils:
                enums.js: {}
                enums.js.map: {}
                format.js: {}
                format.js.map: {}
                index.js: {}
                index.js.map: {}
                parse-options.js: {}
                parse-options.js.map: {}
                schema.js: {}
                schema.js.map: {}
                shared.js: {}
                shared.js.map: {}
                types.js: {}
                types.js.map: {}
                validator.js: {}
                validator.js.map: {}
              naming-convention.js: {}
              naming-convention.js.map: {}
              no-array-constructor.js: {}
              no-array-constructor.js.map: {}
              no-base-to-string.js: {}
              no-base-to-string.js.map: {}
              no-confusing-non-null-assertion.js: {}
              no-confusing-non-null-assertion.js.map: {}
              no-confusing-void-expression.js: {}
              no-confusing-void-expression.js.map: {}
              no-dupe-class-members.js: {}
              no-dupe-class-members.js.map: {}
              no-duplicate-enum-values.js: {}
              no-duplicate-enum-values.js.map: {}
              no-duplicate-imports.js: {}
              no-duplicate-imports.js.map: {}
              no-duplicate-type-constituents.js: {}
              no-duplicate-type-constituents.js.map: {}
              no-dynamic-delete.js: {}
              no-dynamic-delete.js.map: {}
              no-empty-function.js: {}
              no-empty-function.js.map: {}
              no-empty-interface.js: {}
              no-empty-interface.js.map: {}
              no-explicit-any.js: {}
              no-explicit-any.js.map: {}
              no-extra-non-null-assertion.js: {}
              no-extra-non-null-assertion.js.map: {}
              no-extra-parens.js: {}
              no-extra-parens.js.map: {}
              no-extra-semi.js: {}
              no-extra-semi.js.map: {}
              no-extraneous-class.js: {}
              no-extraneous-class.js.map: {}
              no-floating-promises.js: {}
              no-floating-promises.js.map: {}
              no-for-in-array.js: {}
              no-for-in-array.js.map: {}
              no-implicit-any-catch.js: {}
              no-implicit-any-catch.js.map: {}
              no-implied-eval.js: {}
              no-implied-eval.js.map: {}
              no-import-type-side-effects.js: {}
              no-import-type-side-effects.js.map: {}
              no-inferrable-types.js: {}
              no-inferrable-types.js.map: {}
              no-invalid-this.js: {}
              no-invalid-this.js.map: {}
              no-invalid-void-type.js: {}
              no-invalid-void-type.js.map: {}
              no-loop-func.js: {}
              no-loop-func.js.map: {}
              no-loss-of-precision.js: {}
              no-loss-of-precision.js.map: {}
              no-magic-numbers.js: {}
              no-magic-numbers.js.map: {}
              no-meaningless-void-operator.js: {}
              no-meaningless-void-operator.js.map: {}
              no-misused-new.js: {}
              no-misused-new.js.map: {}
              no-misused-promises.js: {}
              no-misused-promises.js.map: {}
              no-mixed-enums.js: {}
              no-mixed-enums.js.map: {}
              no-namespace.js: {}
              no-namespace.js.map: {}
              no-non-null-asserted-nullish-coalescing.js: {}
              no-non-null-asserted-nullish-coalescing.js.map: {}
              no-non-null-asserted-optional-chain.js: {}
              no-non-null-asserted-optional-chain.js.map: {}
              no-non-null-assertion.js: {}
              no-non-null-assertion.js.map: {}
              no-parameter-properties.js: {}
              no-parameter-properties.js.map: {}
              no-redeclare.js: {}
              no-redeclare.js.map: {}
              no-redundant-type-constituents.js: {}
              no-redundant-type-constituents.js.map: {}
              no-require-imports.js: {}
              no-require-imports.js.map: {}
              no-restricted-imports.js: {}
              no-restricted-imports.js.map: {}
              no-shadow.js: {}
              no-shadow.js.map: {}
              no-this-alias.js: {}
              no-this-alias.js.map: {}
              no-throw-literal.js: {}
              no-throw-literal.js.map: {}
              no-type-alias.js: {}
              no-type-alias.js.map: {}
              no-unnecessary-boolean-literal-compare.js: {}
              no-unnecessary-boolean-literal-compare.js.map: {}
              no-unnecessary-condition.js: {}
              no-unnecessary-condition.js.map: {}
              no-unnecessary-qualifier.js: {}
              no-unnecessary-qualifier.js.map: {}
              no-unnecessary-type-arguments.js: {}
              no-unnecessary-type-arguments.js.map: {}
              no-unnecessary-type-assertion.js: {}
              no-unnecessary-type-assertion.js.map: {}
              no-unnecessary-type-constraint.js: {}
              no-unnecessary-type-constraint.js.map: {}
              no-unsafe-argument.js: {}
              no-unsafe-argument.js.map: {}
              no-unsafe-assignment.js: {}
              no-unsafe-assignment.js.map: {}
              no-unsafe-call.js: {}
              no-unsafe-call.js.map: {}
              no-unsafe-declaration-merging.js: {}
              no-unsafe-declaration-merging.js.map: {}
              no-unsafe-enum-comparison.js: {}
              no-unsafe-enum-comparison.js.map: {}
              no-unsafe-member-access.js: {}
              no-unsafe-member-access.js.map: {}
              no-unsafe-return.js: {}
              no-unsafe-return.js.map: {}
              no-unused-expressions.js: {}
              no-unused-expressions.js.map: {}
              no-unused-vars.js: {}
              no-unused-vars.js.map: {}
              no-use-before-define.js: {}
              no-use-before-define.js.map: {}
              no-useless-constructor.js: {}
              no-useless-constructor.js.map: {}
              no-useless-empty-export.js: {}
              no-useless-empty-export.js.map: {}
              no-var-requires.js: {}
              no-var-requires.js.map: {}
              non-nullable-type-assertion-style.js: {}
              non-nullable-type-assertion-style.js.map: {}
              object-curly-spacing.js: {}
              object-curly-spacing.js.map: {}
              padding-line-between-statements.js: {}
              padding-line-between-statements.js.map: {}
              parameter-properties.js: {}
              parameter-properties.js.map: {}
              prefer-as-const.js: {}
              prefer-as-const.js.map: {}
              prefer-enum-initializers.js: {}
              prefer-enum-initializers.js.map: {}
              prefer-for-of.js: {}
              prefer-for-of.js.map: {}
              prefer-function-type.js: {}
              prefer-function-type.js.map: {}
              prefer-includes.js: {}
              prefer-includes.js.map: {}
              prefer-literal-enum-member.js: {}
              prefer-literal-enum-member.js.map: {}
              prefer-namespace-keyword.js: {}
              prefer-namespace-keyword.js.map: {}
              prefer-nullish-coalescing.js: {}
              prefer-nullish-coalescing.js.map: {}
              prefer-optional-chain.js: {}
              prefer-optional-chain.js.map: {}
              prefer-readonly-parameter-types.js: {}
              prefer-readonly-parameter-types.js.map: {}
              prefer-readonly.js: {}
              prefer-readonly.js.map: {}
              prefer-reduce-type-parameter.js: {}
              prefer-reduce-type-parameter.js.map: {}
              prefer-regexp-exec.js: {}
              prefer-regexp-exec.js.map: {}
              prefer-return-this-type.js: {}
              prefer-return-this-type.js.map: {}
              prefer-string-starts-ends-with.js: {}
              prefer-string-starts-ends-with.js.map: {}
              prefer-ts-expect-error.js: {}
              prefer-ts-expect-error.js.map: {}
              promise-function-async.js: {}
              promise-function-async.js.map: {}
              quotes.js: {}
              quotes.js.map: {}
              require-array-sort-compare.js: {}
              require-array-sort-compare.js.map: {}
              require-await.js: {}
              require-await.js.map: {}
              restrict-plus-operands.js: {}
              restrict-plus-operands.js.map: {}
              restrict-template-expressions.js: {}
              restrict-template-expressions.js.map: {}
              return-await.js: {}
              return-await.js.map: {}
              semi.js: {}
              semi.js.map: {}
              sort-type-constituents.js: {}
              sort-type-constituents.js.map: {}
              sort-type-union-intersection-members.js: {}
              sort-type-union-intersection-members.js.map: {}
              space-before-blocks.js: {}
              space-before-blocks.js.map: {}
              space-before-function-paren.js: {}
              space-before-function-paren.js.map: {}
              space-infix-ops.js: {}
              space-infix-ops.js.map: {}
              strict-boolean-expressions.js: {}
              strict-boolean-expressions.js.map: {}
              switch-exhaustiveness-check.js: {}
              switch-exhaustiveness-check.js.map: {}
              triple-slash-reference.js: {}
              triple-slash-reference.js.map: {}
              type-annotation-spacing.js: {}
              type-annotation-spacing.js.map: {}
              typedef.js: {}
              typedef.js.map: {}
              unbound-method.js: {}
              unbound-method.js.map: {}
              unified-signatures.js: {}
              unified-signatures.js.map: {}
            util:
              astUtils.js: {}
              astUtils.js.map: {}
              collectUnusedVariables.js: {}
              collectUnusedVariables.js.map: {}
              createRule.js: {}
              createRule.js.map: {}
              escapeRegExp.js: {}
              escapeRegExp.js.map: {}
              explicitReturnTypeUtils.js: {}
              explicitReturnTypeUtils.js.map: {}
              getESLintCoreRule.js: {}
              getESLintCoreRule.js.map: {}
              getFunctionHeadLoc.js: {}
              getFunctionHeadLoc.js.map: {}
              getOperatorPrecedence.js: {}
              getOperatorPrecedence.js.map: {}
              getStringLength.js: {}
              getStringLength.js.map: {}
              getThisExpression.js: {}
              getThisExpression.js.map: {}
              getWrappingFixer.js: {}
              getWrappingFixer.js.map: {}
              index.js: {}
              index.js.map: {}
              isNodeEqual.js: {}
              isNodeEqual.js.map: {}
              isNullLiteral.js: {}
              isNullLiteral.js.map: {}
              isUndefinedIdentifier.js: {}
              isUndefinedIdentifier.js.map: {}
              misc.js: {}
              misc.js.map: {}
              objectIterators.js: {}
              objectIterators.js.map: {}
          docs:
            rules:
              README.md: {}
              TEMPLATE.md: {}
              adjacent-overload-signatures.md: {}
              array-type.md: {}
              await-thenable.md: {}
              ban-ts-comment.md: {}
              ban-tslint-comment.md: {}
              ban-types.md: {}
              block-spacing.md: {}
              brace-style.md: {}
              camelcase.md: {}
              class-literal-property-style.md: {}
              comma-dangle.md: {}
              comma-spacing.md: {}
              consistent-generic-constructors.md: {}
              consistent-indexed-object-style.md: {}
              consistent-type-assertions.md: {}
              consistent-type-definitions.md: {}
              consistent-type-exports.md: {}
              consistent-type-imports.md: {}
              default-param-last.md: {}
              dot-notation.md: {}
              explicit-function-return-type.md: {}
              explicit-member-accessibility.md: {}
              explicit-module-boundary-types.md: {}
              func-call-spacing.md: {}
              indent.md: {}
              init-declarations.md: {}
              key-spacing.md: {}
              keyword-spacing.md: {}
              lines-around-comment.md: {}
              lines-between-class-members.md: {}
              member-delimiter-style.md: {}
              member-ordering.md: {}
              method-signature-style.md: {}
              naming-convention.md: {}
              no-array-constructor.md: {}
              no-base-to-string.md: {}
              no-confusing-non-null-assertion.md: {}
              no-confusing-void-expression.md: {}
              no-dupe-class-members.md: {}
              no-duplicate-enum-values.md: {}
              no-duplicate-imports.md: {}
              no-duplicate-type-constituents.md: {}
              no-dynamic-delete.md: {}
              no-empty-function.md: {}
              no-empty-interface.md: {}
              no-explicit-any.md: {}
              no-extra-non-null-assertion.md: {}
              no-extra-parens.md: {}
              no-extra-semi.md: {}
              no-extraneous-class.md: {}
              no-floating-promises.md: {}
              no-for-in-array.md: {}
              no-implicit-any-catch.md: {}
              no-implied-eval.md: {}
              no-import-type-side-effects.md: {}
              no-inferrable-types.md: {}
              no-invalid-this.md: {}
              no-invalid-void-type.md: {}
              no-loop-func.md: {}
              no-loss-of-precision.md: {}
              no-magic-numbers.md: {}
              no-meaningless-void-operator.md: {}
              no-misused-new.md: {}
              no-misused-promises.md: {}
              no-mixed-enums.md: {}
              no-namespace.md: {}
              no-non-null-asserted-nullish-coalescing.md: {}
              no-non-null-asserted-optional-chain.md: {}
              no-non-null-assertion.md: {}
              no-parameter-properties.md: {}
              no-redeclare.md: {}
              no-redundant-type-constituents.md: {}
              no-require-imports.md: {}
              no-restricted-imports.md: {}
              no-shadow.md: {}
              no-this-alias.md: {}
              no-throw-literal.md: {}
              no-type-alias.md: {}
              no-unnecessary-boolean-literal-compare.md: {}
              no-unnecessary-condition.md: {}
              no-unnecessary-qualifier.md: {}
              no-unnecessary-type-arguments.md: {}
              no-unnecessary-type-assertion.md: {}
              no-unnecessary-type-constraint.md: {}
              no-unsafe-argument.md: {}
              no-unsafe-assignment.md: {}
              no-unsafe-call.md: {}
              no-unsafe-declaration-merging.md: {}
              no-unsafe-enum-comparison.md: {}
              no-unsafe-member-access.md: {}
              no-unsafe-return.md: {}
              no-unused-expressions.md: {}
              no-unused-vars.md: {}
              no-use-before-define.md: {}
              no-useless-constructor.md: {}
              no-useless-empty-export.md: {}
              no-var-requires.md: {}
              non-nullable-type-assertion-style.md: {}
              object-curly-spacing.md: {}
              padding-line-between-statements.md: {}
              parameter-properties.md: {}
              prefer-as-const.md: {}
              prefer-enum-initializers.md: {}
              prefer-for-of.md: {}
              prefer-function-type.md: {}
              prefer-includes.md: {}
              prefer-literal-enum-member.md: {}
              prefer-namespace-keyword.md: {}
              prefer-nullish-coalescing.md: {}
              prefer-optional-chain.md: {}
              prefer-readonly-parameter-types.md: {}
              prefer-readonly.md: {}
              prefer-reduce-type-parameter.md: {}
              prefer-regexp-exec.md: {}
              prefer-return-this-type.md: {}
              prefer-string-starts-ends-with.md: {}
              prefer-ts-expect-error.md: {}
              promise-function-async.md: {}
              quotes.md: {}
              require-array-sort-compare.md: {}
              require-await.md: {}
              restrict-plus-operands.md: {}
              restrict-template-expressions.md: {}
              return-await.md: {}
              semi.md: {}
              sort-type-constituents.md: {}
              sort-type-union-intersection-members.md: {}
              space-before-blocks.md: {}
              space-before-function-paren.md: {}
              space-infix-ops.md: {}
              strict-boolean-expressions.md: {}
              switch-exhaustiveness-check.md: {}
              triple-slash-reference.md: {}
              type-annotation-spacing.md: {}
              typedef.md: {}
              unbound-method.md: {}
              unified-signatures.md: {}
          index.d.ts: {}
          package.json: {}
        experimental-utils:
          LICENSE: {}
          README.md: {}
          _ts3.4:
            dist:
              index.d.ts: {}
          dist:
            index.d.ts: {}
            index.d.ts.map: {}
            index.js: {}
            index.js.map: {}
          package.json: {}
        parser:
          LICENSE: {}
          README.md: {}
          _ts3.4:
            dist:
              index.d.ts: {}
              parser.d.ts: {}
          dist:
            index.d.ts: {}
            index.d.ts.map: {}
            index.js: {}
            index.js.map: {}
            parser.d.ts: {}
            parser.d.ts.map: {}
            parser.js: {}
            parser.js.map: {}
          package.json: {}
        scope-manager:
          LICENSE: {}
          README.md: {}
          dist:
            ID.d.ts: {}
            ID.d.ts.map: {}
            ID.js: {}
            ID.js.map: {}
            ScopeManager.d.ts: {}
            ScopeManager.d.ts.map: {}
            ScopeManager.js: {}
            ScopeManager.js.map: {}
            analyze.d.ts: {}
            analyze.d.ts.map: {}
            analyze.js: {}
            analyze.js.map: {}
            assert.d.ts: {}
            assert.d.ts.map: {}
            assert.js: {}
            assert.js.map: {}
            definition:
              CatchClauseDefinition.d.ts: {}
              CatchClauseDefinition.d.ts.map: {}
              CatchClauseDefinition.js: {}
              CatchClauseDefinition.js.map: {}
              ClassNameDefinition.d.ts: {}
              ClassNameDefinition.d.ts.map: {}
              ClassNameDefinition.js: {}
              ClassNameDefinition.js.map: {}
              Definition.d.ts: {}
              Definition.d.ts.map: {}
              Definition.js: {}
              Definition.js.map: {}
              DefinitionBase.d.ts: {}
              DefinitionBase.d.ts.map: {}
              DefinitionBase.js: {}
              DefinitionBase.js.map: {}
              DefinitionType.d.ts: {}
              DefinitionType.d.ts.map: {}
              DefinitionType.js: {}
              DefinitionType.js.map: {}
              FunctionNameDefinition.d.ts: {}
              FunctionNameDefinition.d.ts.map: {}
              FunctionNameDefinition.js: {}
              FunctionNameDefinition.js.map: {}
              ImplicitGlobalVariableDefinition.d.ts: {}
              ImplicitGlobalVariableDefinition.d.ts.map: {}
              ImplicitGlobalVariableDefinition.js: {}
              ImplicitGlobalVariableDefinition.js.map: {}
              ImportBindingDefinition.d.ts: {}
              ImportBindingDefinition.d.ts.map: {}
              ImportBindingDefinition.js: {}
              ImportBindingDefinition.js.map: {}
              ParameterDefinition.d.ts: {}
              ParameterDefinition.d.ts.map: {}
              ParameterDefinition.js: {}
              ParameterDefinition.js.map: {}
              TSEnumMemberDefinition.d.ts: {}
              TSEnumMemberDefinition.d.ts.map: {}
              TSEnumMemberDefinition.js: {}
              TSEnumMemberDefinition.js.map: {}
              TSEnumNameDefinition.d.ts: {}
              TSEnumNameDefinition.d.ts.map: {}
              TSEnumNameDefinition.js: {}
              TSEnumNameDefinition.js.map: {}
              TSModuleNameDefinition.d.ts: {}
              TSModuleNameDefinition.d.ts.map: {}
              TSModuleNameDefinition.js: {}
              TSModuleNameDefinition.js.map: {}
              TypeDefinition.d.ts: {}
              TypeDefinition.d.ts.map: {}
              TypeDefinition.js: {}
              TypeDefinition.js.map: {}
              VariableDefinition.d.ts: {}
              VariableDefinition.d.ts.map: {}
              VariableDefinition.js: {}
              VariableDefinition.js.map: {}
              index.d.ts: {}
              index.d.ts.map: {}
              index.js: {}
              index.js.map: {}
            index.d.ts: {}
            index.d.ts.map: {}
            index.js: {}
            index.js.map: {}
            lib:
              base-config.d.ts: {}
              base-config.d.ts.map: {}
              base-config.js: {}
              base-config.js.map: {}
              decorators.d.ts: {}
              decorators.d.ts.map: {}
              decorators.js: {}
              decorators.js.map: {}
              decorators.legacy.d.ts: {}
              decorators.legacy.d.ts.map: {}
              decorators.legacy.js: {}
              decorators.legacy.js.map: {}
              dom.d.ts: {}
              dom.d.ts.map: {}
              dom.iterable.d.ts: {}
              dom.iterable.d.ts.map: {}
              dom.iterable.js: {}
              dom.iterable.js.map: {}
              dom.js: {}
              dom.js.map: {}
              es2015.collection.d.ts: {}
              es2015.collection.d.ts.map: {}
              es2015.collection.js: {}
              es2015.collection.js.map: {}
              es2015.core.d.ts: {}
              es2015.core.d.ts.map: {}
              es2015.core.js: {}
              es2015.core.js.map: {}
              es2015.d.ts: {}
              es2015.d.ts.map: {}
              es2015.generator.d.ts: {}
              es2015.generator.d.ts.map: {}
              es2015.generator.js: {}
              es2015.generator.js.map: {}
              es2015.iterable.d.ts: {}
              es2015.iterable.d.ts.map: {}
              es2015.iterable.js: {}
              es2015.iterable.js.map: {}
              es2015.js: {}
              es2015.js.map: {}
              es2015.promise.d.ts: {}
              es2015.promise.d.ts.map: {}
              es2015.promise.js: {}
              es2015.promise.js.map: {}
              es2015.proxy.d.ts: {}
              es2015.proxy.d.ts.map: {}
              es2015.proxy.js: {}
              es2015.proxy.js.map: {}
              es2015.reflect.d.ts: {}
              es2015.reflect.d.ts.map: {}
              es2015.reflect.js: {}
              es2015.reflect.js.map: {}
              es2015.symbol.d.ts: {}
              es2015.symbol.d.ts.map: {}
              es2015.symbol.js: {}
              es2015.symbol.js.map: {}
              es2015.symbol.wellknown.d.ts: {}
              es2015.symbol.wellknown.d.ts.map: {}
              es2015.symbol.wellknown.js: {}
              es2015.symbol.wellknown.js.map: {}
              es2016.array.include.d.ts: {}
              es2016.array.include.d.ts.map: {}
              es2016.array.include.js: {}
              es2016.array.include.js.map: {}
              es2016.d.ts: {}
              es2016.d.ts.map: {}
              es2016.full.d.ts: {}
              es2016.full.d.ts.map: {}
              es2016.full.js: {}
              es2016.full.js.map: {}
              es2016.js: {}
              es2016.js.map: {}
              es2017.d.ts: {}
              es2017.d.ts.map: {}
              es2017.full.d.ts: {}
              es2017.full.d.ts.map: {}
              es2017.full.js: {}
              es2017.full.js.map: {}
              es2017.intl.d.ts: {}
              es2017.intl.d.ts.map: {}
              es2017.intl.js: {}
              es2017.intl.js.map: {}
              es2017.js: {}
              es2017.js.map: {}
              es2017.object.d.ts: {}
              es2017.object.d.ts.map: {}
              es2017.object.js: {}
              es2017.object.js.map: {}
              es2017.sharedmemory.d.ts: {}
              es2017.sharedmemory.d.ts.map: {}
              es2017.sharedmemory.js: {}
              es2017.sharedmemory.js.map: {}
              es2017.string.d.ts: {}
              es2017.string.d.ts.map: {}
              es2017.string.js: {}
              es2017.string.js.map: {}
              es2017.typedarrays.d.ts: {}
              es2017.typedarrays.d.ts.map: {}
              es2017.typedarrays.js: {}
              es2017.typedarrays.js.map: {}
              es2018.asyncgenerator.d.ts: {}
              es2018.asyncgenerator.d.ts.map: {}
              es2018.asyncgenerator.js: {}
              es2018.asyncgenerator.js.map: {}
              es2018.asynciterable.d.ts: {}
              es2018.asynciterable.d.ts.map: {}
              es2018.asynciterable.js: {}
              es2018.asynciterable.js.map: {}
              es2018.d.ts: {}
              es2018.d.ts.map: {}
              es2018.full.d.ts: {}
              es2018.full.d.ts.map: {}
              es2018.full.js: {}
              es2018.full.js.map: {}
              es2018.intl.d.ts: {}
              es2018.intl.d.ts.map: {}
              es2018.intl.js: {}
              es2018.intl.js.map: {}
              es2018.js: {}
              es2018.js.map: {}
              es2018.promise.d.ts: {}
              es2018.promise.d.ts.map: {}
              es2018.promise.js: {}
              es2018.promise.js.map: {}
              es2018.regexp.d.ts: {}
              es2018.regexp.d.ts.map: {}
              es2018.regexp.js: {}
              es2018.regexp.js.map: {}
              es2019.array.d.ts: {}
              es2019.array.d.ts.map: {}
              es2019.array.js: {}
              es2019.array.js.map: {}
              es2019.d.ts: {}
              es2019.d.ts.map: {}
              es2019.full.d.ts: {}
              es2019.full.d.ts.map: {}
              es2019.full.js: {}
              es2019.full.js.map: {}
              es2019.intl.d.ts: {}
              es2019.intl.d.ts.map: {}
              es2019.intl.js: {}
              es2019.intl.js.map: {}
              es2019.js: {}
              es2019.js.map: {}
              es2019.object.d.ts: {}
              es2019.object.d.ts.map: {}
              es2019.object.js: {}
              es2019.object.js.map: {}
              es2019.string.d.ts: {}
              es2019.string.d.ts.map: {}
              es2019.string.js: {}
              es2019.string.js.map: {}
              es2019.symbol.d.ts: {}
              es2019.symbol.d.ts.map: {}
              es2019.symbol.js: {}
              es2019.symbol.js.map: {}
              es2020.bigint.d.ts: {}
              es2020.bigint.d.ts.map: {}
              es2020.bigint.js: {}
              es2020.bigint.js.map: {}
              es2020.d.ts: {}
              es2020.d.ts.map: {}
              es2020.date.d.ts: {}
              es2020.date.d.ts.map: {}
              es2020.date.js: {}
              es2020.date.js.map: {}
              es2020.full.d.ts: {}
              es2020.full.d.ts.map: {}
              es2020.full.js: {}
              es2020.full.js.map: {}
              es2020.intl.d.ts: {}
              es2020.intl.d.ts.map: {}
              es2020.intl.js: {}
              es2020.intl.js.map: {}
              es2020.js: {}
              es2020.js.map: {}
              es2020.number.d.ts: {}
              es2020.number.d.ts.map: {}
              es2020.number.js: {}
              es2020.number.js.map: {}
              es2020.promise.d.ts: {}
              es2020.promise.d.ts.map: {}
              es2020.promise.js: {}
              es2020.promise.js.map: {}
              es2020.sharedmemory.d.ts: {}
              es2020.sharedmemory.d.ts.map: {}
              es2020.sharedmemory.js: {}
              es2020.sharedmemory.js.map: {}
              es2020.string.d.ts: {}
              es2020.string.d.ts.map: {}
              es2020.string.js: {}
              es2020.string.js.map: {}
              es2020.symbol.wellknown.d.ts: {}
              es2020.symbol.wellknown.d.ts.map: {}
              es2020.symbol.wellknown.js: {}
              es2020.symbol.wellknown.js.map: {}
              es2021.d.ts: {}
              es2021.d.ts.map: {}
              es2021.full.d.ts: {}
              es2021.full.d.ts.map: {}
              es2021.full.js: {}
              es2021.full.js.map: {}
              es2021.intl.d.ts: {}
              es2021.intl.d.ts.map: {}
              es2021.intl.js: {}
              es2021.intl.js.map: {}
              es2021.js: {}
              es2021.js.map: {}
              es2021.promise.d.ts: {}
              es2021.promise.d.ts.map: {}
              es2021.promise.js: {}
              es2021.promise.js.map: {}
              es2021.string.d.ts: {}
              es2021.string.d.ts.map: {}
              es2021.string.js: {}
              es2021.string.js.map: {}
              es2021.weakref.d.ts: {}
              es2021.weakref.d.ts.map: {}
              es2021.weakref.js: {}
              es2021.weakref.js.map: {}
              es2022.array.d.ts: {}
              es2022.array.d.ts.map: {}
              es2022.array.js: {}
              es2022.array.js.map: {}
              es2022.d.ts: {}
              es2022.d.ts.map: {}
              es2022.error.d.ts: {}
              es2022.error.d.ts.map: {}
              es2022.error.js: {}
              es2022.error.js.map: {}
              es2022.full.d.ts: {}
              es2022.full.d.ts.map: {}
              es2022.full.js: {}
              es2022.full.js.map: {}
              es2022.intl.d.ts: {}
              es2022.intl.d.ts.map: {}
              es2022.intl.js: {}
              es2022.intl.js.map: {}
              es2022.js: {}
              es2022.js.map: {}
              es2022.object.d.ts: {}
              es2022.object.d.ts.map: {}
              es2022.object.js: {}
              es2022.object.js.map: {}
              es2022.regexp.d.ts: {}
              es2022.regexp.d.ts.map: {}
              es2022.regexp.js: {}
              es2022.regexp.js.map: {}
              es2022.sharedmemory.d.ts: {}
              es2022.sharedmemory.d.ts.map: {}
              es2022.sharedmemory.js: {}
              es2022.sharedmemory.js.map: {}
              es2022.string.d.ts: {}
              es2022.string.d.ts.map: {}
              es2022.string.js: {}
              es2022.string.js.map: {}
              es2023.array.d.ts: {}
              es2023.array.d.ts.map: {}
              es2023.array.js: {}
              es2023.array.js.map: {}
              es2023.d.ts: {}
              es2023.d.ts.map: {}
              es2023.full.d.ts: {}
              es2023.full.d.ts.map: {}
              es2023.full.js: {}
              es2023.full.js.map: {}
              es2023.js: {}
              es2023.js.map: {}
              es5.d.ts: {}
              es5.d.ts.map: {}
              es5.js: {}
              es5.js.map: {}
              es6.d.ts: {}
              es6.d.ts.map: {}
              es6.js: {}
              es6.js.map: {}
              es7.d.ts: {}
              es7.d.ts.map: {}
              es7.js: {}
              es7.js.map: {}
              esnext.array.d.ts: {}
              esnext.array.d.ts.map: {}
              esnext.array.js: {}
              esnext.array.js.map: {}
              esnext.asynciterable.d.ts: {}
              esnext.asynciterable.d.ts.map: {}
              esnext.asynciterable.js: {}
              esnext.asynciterable.js.map: {}
              esnext.bigint.d.ts: {}
              esnext.bigint.d.ts.map: {}
              esnext.bigint.js: {}
              esnext.bigint.js.map: {}
              esnext.d.ts: {}
              esnext.d.ts.map: {}
              esnext.full.d.ts: {}
              esnext.full.d.ts.map: {}
              esnext.full.js: {}
              esnext.full.js.map: {}
              esnext.intl.d.ts: {}
              esnext.intl.d.ts.map: {}
              esnext.intl.js: {}
              esnext.intl.js.map: {}
              esnext.js: {}
              esnext.js.map: {}
              esnext.promise.d.ts: {}
              esnext.promise.d.ts.map: {}
              esnext.promise.js: {}
              esnext.promise.js.map: {}
              esnext.string.d.ts: {}
              esnext.string.d.ts.map: {}
              esnext.string.js: {}
              esnext.string.js.map: {}
              esnext.symbol.d.ts: {}
              esnext.symbol.d.ts.map: {}
              esnext.symbol.js: {}
              esnext.symbol.js.map: {}
              esnext.weakref.d.ts: {}
              esnext.weakref.d.ts.map: {}
              esnext.weakref.js: {}
              esnext.weakref.js.map: {}
              index.d.ts: {}
              index.d.ts.map: {}
              index.js: {}
              index.js.map: {}
              lib.d.ts: {}
              lib.d.ts.map: {}
              lib.js: {}
              lib.js.map: {}
              scripthost.d.ts: {}
              scripthost.d.ts.map: {}
              scripthost.js: {}
              scripthost.js.map: {}
              webworker.d.ts: {}
              webworker.d.ts.map: {}
              webworker.importscripts.d.ts: {}
              webworker.importscripts.d.ts.map: {}
              webworker.importscripts.js: {}
              webworker.importscripts.js.map: {}
              webworker.iterable.d.ts: {}
              webworker.iterable.d.ts.map: {}
              webworker.iterable.js: {}
              webworker.iterable.js.map: {}
              webworker.js: {}
              webworker.js.map: {}
            referencer:
              ClassVisitor.d.ts: {}
              ClassVisitor.d.ts.map: {}
              ClassVisitor.js: {}
              ClassVisitor.js.map: {}
              ExportVisitor.d.ts: {}
              ExportVisitor.d.ts.map: {}
              ExportVisitor.js: {}
              ExportVisitor.js.map: {}
              ImportVisitor.d.ts: {}
              ImportVisitor.d.ts.map: {}
              ImportVisitor.js: {}
              ImportVisitor.js.map: {}
              PatternVisitor.d.ts: {}
              PatternVisitor.d.ts.map: {}
              PatternVisitor.js: {}
              PatternVisitor.js.map: {}
              Reference.d.ts: {}
              Reference.d.ts.map: {}
              Reference.js: {}
              Reference.js.map: {}
              Referencer.d.ts: {}
              Referencer.d.ts.map: {}
              Referencer.js: {}
              Referencer.js.map: {}
              TypeVisitor.d.ts: {}
              TypeVisitor.d.ts.map: {}
              TypeVisitor.js: {}
              TypeVisitor.js.map: {}
              Visitor.d.ts: {}
              Visitor.d.ts.map: {}
              Visitor.js: {}
              Visitor.js.map: {}
              VisitorBase.d.ts: {}
              VisitorBase.d.ts.map: {}
              VisitorBase.js: {}
              VisitorBase.js.map: {}
              index.d.ts: {}
              index.d.ts.map: {}
              index.js: {}
              index.js.map: {}
            scope:
              BlockScope.d.ts: {}
              BlockScope.d.ts.map: {}
              BlockScope.js: {}
              BlockScope.js.map: {}
              CatchScope.d.ts: {}
              CatchScope.d.ts.map: {}
              CatchScope.js: {}
              CatchScope.js.map: {}
              ClassFieldInitializerScope.d.ts: {}
              ClassFieldInitializerScope.d.ts.map: {}
              ClassFieldInitializerScope.js: {}
              ClassFieldInitializerScope.js.map: {}
              ClassScope.d.ts: {}
              ClassScope.d.ts.map: {}
              ClassScope.js: {}
              ClassScope.js.map: {}
              ClassStaticBlockScope.d.ts: {}
              ClassStaticBlockScope.d.ts.map: {}
              ClassStaticBlockScope.js: {}
              ClassStaticBlockScope.js.map: {}
              ConditionalTypeScope.d.ts: {}
              ConditionalTypeScope.d.ts.map: {}
              ConditionalTypeScope.js: {}
              ConditionalTypeScope.js.map: {}
              ForScope.d.ts: {}
              ForScope.d.ts.map: {}
              ForScope.js: {}
              ForScope.js.map: {}
              FunctionExpressionNameScope.d.ts: {}
              FunctionExpressionNameScope.d.ts.map: {}
              FunctionExpressionNameScope.js: {}
              FunctionExpressionNameScope.js.map: {}
              FunctionScope.d.ts: {}
              FunctionScope.d.ts.map: {}
              FunctionScope.js: {}
              FunctionScope.js.map: {}
              FunctionTypeScope.d.ts: {}
              FunctionTypeScope.d.ts.map: {}
              FunctionTypeScope.js: {}
              FunctionTypeScope.js.map: {}
              GlobalScope.d.ts: {}
              GlobalScope.d.ts.map: {}
              GlobalScope.js: {}
              GlobalScope.js.map: {}
              MappedTypeScope.d.ts: {}
              MappedTypeScope.d.ts.map: {}
              MappedTypeScope.js: {}
              MappedTypeScope.js.map: {}
              ModuleScope.d.ts: {}
              ModuleScope.d.ts.map: {}
              ModuleScope.js: {}
              ModuleScope.js.map: {}
              Scope.d.ts: {}
              Scope.d.ts.map: {}
              Scope.js: {}
              Scope.js.map: {}
              ScopeBase.d.ts: {}
              ScopeBase.d.ts.map: {}
              ScopeBase.js: {}
              ScopeBase.js.map: {}
              ScopeType.d.ts: {}
              ScopeType.d.ts.map: {}
              ScopeType.js: {}
              ScopeType.js.map: {}
              SwitchScope.d.ts: {}
              SwitchScope.d.ts.map: {}
              SwitchScope.js: {}
              SwitchScope.js.map: {}
              TSEnumScope.d.ts: {}
              TSEnumScope.d.ts.map: {}
              TSEnumScope.js: {}
              TSEnumScope.js.map: {}
              TSModuleScope.d.ts: {}
              TSModuleScope.d.ts.map: {}
              TSModuleScope.js: {}
              TSModuleScope.js.map: {}
              TypeScope.d.ts: {}
              TypeScope.d.ts.map: {}
              TypeScope.js: {}
              TypeScope.js.map: {}
              WithScope.d.ts: {}
              WithScope.d.ts.map: {}
              WithScope.js: {}
              WithScope.js.map: {}
              index.d.ts: {}
              index.d.ts.map: {}
              index.js: {}
              index.js.map: {}
            variable:
              ESLintScopeVariable.d.ts: {}
              ESLintScopeVariable.d.ts.map: {}
              ESLintScopeVariable.js: {}
              ESLintScopeVariable.js.map: {}
              ImplicitLibVariable.d.ts: {}
              ImplicitLibVariable.d.ts.map: {}
              ImplicitLibVariable.js: {}
              ImplicitLibVariable.js.map: {}
              Variable.d.ts: {}
              Variable.d.ts.map: {}
              Variable.js: {}
              Variable.js.map: {}
              VariableBase.d.ts: {}
              VariableBase.d.ts.map: {}
              VariableBase.js: {}
              VariableBase.js.map: {}
              index.d.ts: {}
              index.d.ts.map: {}
              index.js: {}
              index.js.map: {}
          package.json: {}
        type-utils:
          LICENSE: {}
          README.md: {}
          _ts3.4:
            dist:
              containsAllTypesByName.d.ts: {}
              getConstrainedTypeAtLocation.d.ts: {}
              getContextualType.d.ts: {}
              getDeclaration.d.ts: {}
              getSourceFileOfNode.d.ts: {}
              getTokenAtPosition.d.ts: {}
              getTypeArguments.d.ts: {}
              getTypeName.d.ts: {}
              index.d.ts: {}
              isTypeReadonly.d.ts: {}
              isUnsafeAssignment.d.ts: {}
              predicates.d.ts: {}
              propertyTypes.d.ts: {}
              requiresQuoting.d.ts: {}
              typeFlagUtils.d.ts: {}
          dist:
            containsAllTypesByName.d.ts: {}
            containsAllTypesByName.d.ts.map: {}
            containsAllTypesByName.js: {}
            containsAllTypesByName.js.map: {}
            getConstrainedTypeAtLocation.d.ts: {}
            getConstrainedTypeAtLocation.d.ts.map: {}
            getConstrainedTypeAtLocation.js: {}
            getConstrainedTypeAtLocation.js.map: {}
            getContextualType.d.ts: {}
            getContextualType.d.ts.map: {}
            getContextualType.js: {}
            getContextualType.js.map: {}
            getDeclaration.d.ts: {}
            getDeclaration.d.ts.map: {}
            getDeclaration.js: {}
            getDeclaration.js.map: {}
            getSourceFileOfNode.d.ts: {}
            getSourceFileOfNode.d.ts.map: {}
            getSourceFileOfNode.js: {}
            getSourceFileOfNode.js.map: {}
            getTokenAtPosition.d.ts: {}
            getTokenAtPosition.d.ts.map: {}
            getTokenAtPosition.js: {}
            getTokenAtPosition.js.map: {}
            getTypeArguments.d.ts: {}
            getTypeArguments.d.ts.map: {}
            getTypeArguments.js: {}
            getTypeArguments.js.map: {}
            getTypeName.d.ts: {}
            getTypeName.d.ts.map: {}
            getTypeName.js: {}
            getTypeName.js.map: {}
            index.d.ts: {}
            index.d.ts.map: {}
            index.js: {}
            index.js.map: {}
            isTypeReadonly.d.ts: {}
            isTypeReadonly.d.ts.map: {}
            isTypeReadonly.js: {}
            isTypeReadonly.js.map: {}
            isUnsafeAssignment.d.ts: {}
            isUnsafeAssignment.d.ts.map: {}
            isUnsafeAssignment.js: {}
            isUnsafeAssignment.js.map: {}
            predicates.d.ts: {}
            predicates.d.ts.map: {}
            predicates.js: {}
            predicates.js.map: {}
            propertyTypes.d.ts: {}
            propertyTypes.d.ts.map: {}
            propertyTypes.js: {}
            propertyTypes.js.map: {}
            requiresQuoting.d.ts: {}
            requiresQuoting.d.ts.map: {}
            requiresQuoting.js: {}
            requiresQuoting.js.map: {}
            typeFlagUtils.d.ts: {}
            typeFlagUtils.d.ts.map: {}
            typeFlagUtils.js: {}
            typeFlagUtils.js.map: {}
          package.json: {}
        types:
          LICENSE: {}
          README.md: {}
          _ts3.4:
            dist:
              generated:
                ast-spec.d.ts: {}
              index.d.ts: {}
              lib.d.ts: {}
              parser-options.d.ts: {}
              ts-estree.d.ts: {}
          dist:
            generated:
              ast-spec.d.ts: {}
              ast-spec.d.ts.map: {}
              ast-spec.js: {}
              ast-spec.js.map: {}
            index.d.ts: {}
            index.d.ts.map: {}
            index.js: {}
            index.js.map: {}
            lib.d.ts: {}
            lib.d.ts.map: {}
            lib.js: {}
            lib.js.map: {}
            parser-options.d.ts: {}
            parser-options.d.ts.map: {}
            parser-options.js: {}
            parser-options.js.map: {}
            ts-estree.d.ts: {}
            ts-estree.d.ts.map: {}
            ts-estree.js: {}
            ts-estree.js.map: {}
          package.json: {}
        typescript-estree:
          LICENSE: {}
          README.md: {}
          _ts3.4:
            dist:
              ast-converter.d.ts: {}
              clear-caches.d.ts: {}
              convert-comments.d.ts: {}
              convert.d.ts: {}
              create-program:
                WatchCompilerHostOfConfigFile.d.ts: {}
                createDefaultProgram.d.ts: {}
                createIsolatedProgram.d.ts: {}
                createProjectProgram.d.ts: {}
                createSourceFile.d.ts: {}
                describeFilePath.d.ts: {}
                getScriptKind.d.ts: {}
                getWatchProgramsForProjects.d.ts: {}
                shared.d.ts: {}
                useProvidedPrograms.d.ts: {}
              getModifiers.d.ts: {}
              index.d.ts: {}
              jsx:
                xhtml-entities.d.ts: {}
              node-utils.d.ts: {}
              parseSettings:
                ExpiringCache.d.ts: {}
                createParseSettings.d.ts: {}
                getProjectConfigFiles.d.ts: {}
                index.d.ts: {}
                inferSingleRun.d.ts: {}
                resolveProjectList.d.ts: {}
                warnAboutTSVersion.d.ts: {}
              parser-options.d.ts: {}
              parser.d.ts: {}
              semantic-or-syntactic-errors.d.ts: {}
              simple-traverse.d.ts: {}
              ts-estree:
                estree-to-ts-node-types.d.ts: {}
                index.d.ts: {}
                ts-nodes.d.ts: {}
              version-check.d.ts: {}
          dist:
            ast-converter.d.ts: {}
            ast-converter.d.ts.map: {}
            ast-converter.js: {}
            ast-converter.js.map: {}
            clear-caches.d.ts: {}
            clear-caches.d.ts.map: {}
            clear-caches.js: {}
            clear-caches.js.map: {}
            convert-comments.d.ts: {}
            convert-comments.d.ts.map: {}
            convert-comments.js: {}
            convert-comments.js.map: {}
            convert.d.ts: {}
            convert.d.ts.map: {}
            convert.js: {}
            convert.js.map: {}
            create-program:
              WatchCompilerHostOfConfigFile.d.ts: {}
              WatchCompilerHostOfConfigFile.d.ts.map: {}
              WatchCompilerHostOfConfigFile.js: {}
              WatchCompilerHostOfConfigFile.js.map: {}
              createDefaultProgram.d.ts: {}
              createDefaultProgram.d.ts.map: {}
              createDefaultProgram.js: {}
              createDefaultProgram.js.map: {}
              createIsolatedProgram.d.ts: {}
              createIsolatedProgram.d.ts.map: {}
              createIsolatedProgram.js: {}
              createIsolatedProgram.js.map: {}
              createProjectProgram.d.ts: {}
              createProjectProgram.d.ts.map: {}
              createProjectProgram.js: {}
              createProjectProgram.js.map: {}
              createSourceFile.d.ts: {}
              createSourceFile.d.ts.map: {}
              createSourceFile.js: {}
              createSourceFile.js.map: {}
              describeFilePath.d.ts: {}
              describeFilePath.d.ts.map: {}
              describeFilePath.js: {}
              describeFilePath.js.map: {}
              getScriptKind.d.ts: {}
              getScriptKind.d.ts.map: {}
              getScriptKind.js: {}
              getScriptKind.js.map: {}
              getWatchProgramsForProjects.d.ts: {}
              getWatchProgramsForProjects.d.ts.map: {}
              getWatchProgramsForProjects.js: {}
              getWatchProgramsForProjects.js.map: {}
              shared.d.ts: {}
              shared.d.ts.map: {}
              shared.js: {}
              shared.js.map: {}
              useProvidedPrograms.d.ts: {}
              useProvidedPrograms.d.ts.map: {}
              useProvidedPrograms.js: {}
              useProvidedPrograms.js.map: {}
            getModifiers.d.ts: {}
            getModifiers.d.ts.map: {}
            getModifiers.js: {}
            getModifiers.js.map: {}
            index.d.ts: {}
            index.d.ts.map: {}
            index.js: {}
            index.js.map: {}
            jsx:
              xhtml-entities.d.ts: {}
              xhtml-entities.d.ts.map: {}
              xhtml-entities.js: {}
              xhtml-entities.js.map: {}
            node-utils.d.ts: {}
            node-utils.d.ts.map: {}
            node-utils.js: {}
            node-utils.js.map: {}
            parseSettings:
              ExpiringCache.d.ts: {}
              ExpiringCache.d.ts.map: {}
              ExpiringCache.js: {}
              ExpiringCache.js.map: {}
              createParseSettings.d.ts: {}
              createParseSettings.d.ts.map: {}
              createParseSettings.js: {}
              createParseSettings.js.map: {}
              getProjectConfigFiles.d.ts: {}
              getProjectConfigFiles.d.ts.map: {}
              getProjectConfigFiles.js: {}
              getProjectConfigFiles.js.map: {}
              index.d.ts: {}
              index.d.ts.map: {}
              index.js: {}
              index.js.map: {}
              inferSingleRun.d.ts: {}
              inferSingleRun.d.ts.map: {}
              inferSingleRun.js: {}
              inferSingleRun.js.map: {}
              resolveProjectList.d.ts: {}
              resolveProjectList.d.ts.map: {}
              resolveProjectList.js: {}
              resolveProjectList.js.map: {}
              warnAboutTSVersion.d.ts: {}
              warnAboutTSVersion.d.ts.map: {}
              warnAboutTSVersion.js: {}
              warnAboutTSVersion.js.map: {}
            parser-options.d.ts: {}
            parser-options.d.ts.map: {}
            parser-options.js: {}
            parser-options.js.map: {}
            parser.d.ts: {}
            parser.d.ts.map: {}
            parser.js: {}
            parser.js.map: {}
            semantic-or-syntactic-errors.d.ts: {}
            semantic-or-syntactic-errors.d.ts.map: {}
            semantic-or-syntactic-errors.js: {}
            semantic-or-syntactic-errors.js.map: {}
            simple-traverse.d.ts: {}
            simple-traverse.d.ts.map: {}
            simple-traverse.js: {}
            simple-traverse.js.map: {}
            ts-estree:
              estree-to-ts-node-types.d.ts: {}
              estree-to-ts-node-types.d.ts.map: {}
              estree-to-ts-node-types.js: {}
              estree-to-ts-node-types.js.map: {}
              index.d.ts: {}
              index.d.ts.map: {}
              index.js: {}
              index.js.map: {}
              ts-nodes.d.ts: {}
              ts-nodes.d.ts.map: {}
              ts-nodes.js: {}
              ts-nodes.js.map: {}
            version-check.d.ts: {}
            version-check.d.ts.map: {}
            version-check.js: {}
            version-check.js.map: {}
          package.json: {}
        utils:
          LICENSE: {}
          README.md: {}
          _ts3.4:
            dist:
              ast-utils:
                eslint-utils:
                  PatternMatcher.d.ts: {}
                  ReferenceTracker.d.ts: {}
                  astUtilities.d.ts: {}
                  index.d.ts: {}
                  predicates.d.ts: {}
                  scopeAnalysis.d.ts: {}
                helpers.d.ts: {}
                index.d.ts: {}
                misc.d.ts: {}
                predicates.d.ts: {}
              eslint-utils:
                InferTypesFromRule.d.ts: {}
                RuleCreator.d.ts: {}
                applyDefault.d.ts: {}
                batchedSingleLineTests.d.ts: {}
                deepMerge.d.ts: {}
                getParserServices.d.ts: {}
                index.d.ts: {}
                nullThrows.d.ts: {}
                rule-tester:
                  RuleTester.d.ts: {}
                  dependencyConstraints.d.ts: {}
              index.d.ts: {}
              json-schema.d.ts: {}
              ts-eslint:
                AST.d.ts: {}
                CLIEngine.d.ts: {}
                ESLint.d.ts: {}
                Linter.d.ts: {}
                ParserOptions.d.ts: {}
                Rule.d.ts: {}
                RuleTester.d.ts: {}
                Scope.d.ts: {}
                SourceCode.d.ts: {}
                index.d.ts: {}
              ts-eslint-scope:
                Definition.d.ts: {}
                Options.d.ts: {}
                PatternVisitor.d.ts: {}
                Reference.d.ts: {}
                Referencer.d.ts: {}
                Scope.d.ts: {}
                ScopeManager.d.ts: {}
                Variable.d.ts: {}
                analyze.d.ts: {}
                index.d.ts: {}
              ts-estree.d.ts: {}
          dist:
            ast-utils:
              eslint-utils:
                PatternMatcher.d.ts: {}
                PatternMatcher.d.ts.map: {}
                PatternMatcher.js: {}
                PatternMatcher.js.map: {}
                ReferenceTracker.d.ts: {}
                ReferenceTracker.d.ts.map: {}
                ReferenceTracker.js: {}
                ReferenceTracker.js.map: {}
                astUtilities.d.ts: {}
                astUtilities.d.ts.map: {}
                astUtilities.js: {}
                astUtilities.js.map: {}
                index.d.ts: {}
                index.d.ts.map: {}
                index.js: {}
                index.js.map: {}
                predicates.d.ts: {}
                predicates.d.ts.map: {}
                predicates.js: {}
                predicates.js.map: {}
                scopeAnalysis.d.ts: {}
                scopeAnalysis.d.ts.map: {}
                scopeAnalysis.js: {}
                scopeAnalysis.js.map: {}
              helpers.d.ts: {}
              helpers.d.ts.map: {}
              helpers.js: {}
              helpers.js.map: {}
              index.d.ts: {}
              index.d.ts.map: {}
              index.js: {}
              index.js.map: {}
              misc.d.ts: {}
              misc.d.ts.map: {}
              misc.js: {}
              misc.js.map: {}
              predicates.d.ts: {}
              predicates.d.ts.map: {}
              predicates.js: {}
              predicates.js.map: {}
            eslint-utils:
              InferTypesFromRule.d.ts: {}
              InferTypesFromRule.d.ts.map: {}
              InferTypesFromRule.js: {}
              InferTypesFromRule.js.map: {}
              RuleCreator.d.ts: {}
              RuleCreator.d.ts.map: {}
              RuleCreator.js: {}
              RuleCreator.js.map: {}
              applyDefault.d.ts: {}
              applyDefault.d.ts.map: {}
              applyDefault.js: {}
              applyDefault.js.map: {}
              batchedSingleLineTests.d.ts: {}
              batchedSingleLineTests.d.ts.map: {}
              batchedSingleLineTests.js: {}
              batchedSingleLineTests.js.map: {}
              deepMerge.d.ts: {}
              deepMerge.d.ts.map: {}
              deepMerge.js: {}
              deepMerge.js.map: {}
              getParserServices.d.ts: {}
              getParserServices.d.ts.map: {}
              getParserServices.js: {}
              getParserServices.js.map: {}
              index.d.ts: {}
              index.d.ts.map: {}
              index.js: {}
              index.js.map: {}
              nullThrows.d.ts: {}
              nullThrows.d.ts.map: {}
              nullThrows.js: {}
              nullThrows.js.map: {}
              rule-tester:
                RuleTester.d.ts: {}
                RuleTester.d.ts.map: {}
                RuleTester.js: {}
                RuleTester.js.map: {}
                dependencyConstraints.d.ts: {}
                dependencyConstraints.d.ts.map: {}
                dependencyConstraints.js: {}
                dependencyConstraints.js.map: {}
            index.d.ts: {}
            index.d.ts.map: {}
            index.js: {}
            index.js.map: {}
            json-schema.d.ts: {}
            json-schema.d.ts.map: {}
            json-schema.js: {}
            json-schema.js.map: {}
            ts-eslint:
              AST.d.ts: {}
              AST.d.ts.map: {}
              AST.js: {}
              AST.js.map: {}
              CLIEngine.d.ts: {}
              CLIEngine.d.ts.map: {}
              CLIEngine.js: {}
              CLIEngine.js.map: {}
              ESLint.d.ts: {}
              ESLint.d.ts.map: {}
              ESLint.js: {}
              ESLint.js.map: {}
              Linter.d.ts: {}
              Linter.d.ts.map: {}
              Linter.js: {}
              Linter.js.map: {}
              ParserOptions.d.ts: {}
              ParserOptions.d.ts.map: {}
              ParserOptions.js: {}
              ParserOptions.js.map: {}
              Rule.d.ts: {}
              Rule.d.ts.map: {}
              Rule.js: {}
              Rule.js.map: {}
              RuleTester.d.ts: {}
              RuleTester.d.ts.map: {}
              RuleTester.js: {}
              RuleTester.js.map: {}
              Scope.d.ts: {}
              Scope.d.ts.map: {}
              Scope.js: {}
              Scope.js.map: {}
              SourceCode.d.ts: {}
              SourceCode.d.ts.map: {}
              SourceCode.js: {}
              SourceCode.js.map: {}
              index.d.ts: {}
              index.d.ts.map: {}
              index.js: {}
              index.js.map: {}
            ts-eslint-scope:
              Definition.d.ts: {}
              Definition.d.ts.map: {}
              Definition.js: {}
              Definition.js.map: {}
              Options.d.ts: {}
              Options.d.ts.map: {}
              Options.js: {}
              Options.js.map: {}
              PatternVisitor.d.ts: {}
              PatternVisitor.d.ts.map: {}
              PatternVisitor.js: {}
              PatternVisitor.js.map: {}
              Reference.d.ts: {}
              Reference.d.ts.map: {}
              Reference.js: {}
              Reference.js.map: {}
              Referencer.d.ts: {}
              Referencer.d.ts.map: {}
              Referencer.js: {}
              Referencer.js.map: {}
              Scope.d.ts: {}
              Scope.d.ts.map: {}
              Scope.js: {}
              Scope.js.map: {}
              ScopeManager.d.ts: {}
              ScopeManager.d.ts.map: {}
              ScopeManager.js: {}
              ScopeManager.js.map: {}
              Variable.d.ts: {}
              Variable.d.ts.map: {}
              Variable.js: {}
              Variable.js.map: {}
              analyze.d.ts: {}
              analyze.d.ts.map: {}
              analyze.js: {}
              analyze.js.map: {}
              index.d.ts: {}
              index.d.ts.map: {}
              index.js: {}
              index.js.map: {}
            ts-estree.d.ts: {}
            ts-estree.d.ts.map: {}
            ts-estree.js: {}
            ts-estree.js.map: {}
          node_modules:
            eslint-scope:
              CHANGELOG.md: {}
              LICENSE: {}
              README.md: {}
              lib:
                definition.js: {}
                index.js: {}
                pattern-visitor.js: {}
                reference.js: {}
                referencer.js: {}
                scope-manager.js: {}
                scope.js: {}
                variable.js: {}
              package.json: {}
            estraverse:
              .jshintrc: {}
              LICENSE.BSD: {}
              README.md: {}
              estraverse.js: {}
              gulpfile.js: {}
              package.json: {}
          package.json: {}
        visitor-keys:
          LICENSE: {}
          README.md: {}
          _ts3.4:
            dist:
              get-keys.d.ts: {}
              index.d.ts: {}
              visitor-keys.d.ts: {}
          dist:
            get-keys.d.ts: {}
            get-keys.d.ts.map: {}
            get-keys.js: {}
            get-keys.js.map: {}
            index.d.ts: {}
            index.d.ts.map: {}
            index.js: {}
            index.js.map: {}
            visitor-keys.d.ts: {}
            visitor-keys.d.ts.map: {}
            visitor-keys.js: {}
            visitor-keys.js.map: {}
          package.json: {}
      '@ungap':
        structured-clone:
          .github:
            workflows:
              node.js.yml: {}
          LICENSE: {}
          README.md: {}
          cjs:
            deserialize.js: {}
            index.js: {}
            json.js: {}
            package.json: {}
            serialize.js: {}
            types.js: {}
          esm:
            deserialize.js: {}
            index.js: {}
            json.js: {}
            serialize.js: {}
            types.js: {}
          package.json: {}
          structured-json.js: {}
      '@webassemblyjs':
        ast:
          LICENSE: {}
          README.md: {}
          esm:
            clone.js: {}
            definitions.js: {}
            index.js: {}
            node-helpers.js: {}
            node-path.js: {}
            nodes.js: {}
            signatures.js: {}
            transform:
              ast-module-to-module-context:
                index.js: {}
              denormalize-type-references:
                index.js: {}
              wast-identifier-to-index:
                index.js: {}
            traverse.js: {}
            types:
              basic.js: {}
              nodes.js: {}
              traverse.js: {}
            utils.js: {}
          lib:
            clone.js: {}
            definitions.js: {}
            index.js: {}
            node-helpers.js: {}
            node-path.js: {}
            nodes.js: {}
            signatures.js: {}
            transform:
              ast-module-to-module-context:
                index.js: {}
              denormalize-type-references:
                index.js: {}
              wast-identifier-to-index:
                index.js: {}
            traverse.js: {}
            types:
              basic.js: {}
              nodes.js: {}
              traverse.js: {}
            utils.js: {}
          package.json: {}
          scripts:
            generateNodeUtils.js: {}
            generateTypeDefinitions.js: {}
            util.js: {}
        floating-point-hex-parser:
          LICENSE: {}
          README.md: {}
          lib:
            index.js: {}
          package.json: {}
        helper-api-error:
          lib:
            index.js: {}
          package.json: {}
        helper-buffer:
          LICENSE: {}
          esm:
            compare.js: {}
            index.js: {}
          lib:
            compare.js: {}
            index.js: {}
          package.json: {}
        helper-numbers:
          lib:
            index.js: {}
          package.json: {}
          src:
            index.js: {}
        helper-wasm-bytecode:
          lib:
            index.js: {}
            section.js: {}
          package.json: {}
        helper-wasm-section:
          LICENSE: {}
          esm:
            create.js: {}
            index.js: {}
            remove.js: {}
            resize.js: {}
          lib:
            create.js: {}
            index.js: {}
            remove.js: {}
            resize.js: {}
          package.json: {}
        ieee754:
          lib:
            index.js: {}
          package.json: {}
          src:
            index.js: {}
        leb128:
          LICENSE.txt: {}
          lib:
            bits.js: {}
            bufs.js: {}
            index.js: {}
            leb.js: {}
          package.json: {}
        utf8:
          lib:
            decoder.js: {}
            encoder.js: {}
            index.js: {}
          package.json: {}
          src:
            decoder.js: {}
            encoder.js: {}
            index.js: {}
          test:
            index.js: {}
        wasm-edit:
          LICENSE: {}
          README.md: {}
          esm:
            apply.js: {}
            index.js: {}
          lib:
            apply.js: {}
            index.js: {}
          package.json: {}
        wasm-gen:
          LICENSE: {}
          esm:
            encoder:
              index.js: {}
            index.js: {}
          lib:
            encoder:
              index.js: {}
            index.js: {}
          package.json: {}
        wasm-opt:
          LICENSE: {}
          esm:
            index.js: {}
            leb128.js: {}
          lib:
            index.js: {}
            leb128.js: {}
          package.json: {}
        wasm-parser:
          LICENSE: {}
          README.md: {}
          esm:
            decoder.js: {}
            index.js: {}
            types:
              decoder.js: {}
          lib:
            decoder.js: {}
            index.js: {}
            types:
              decoder.js: {}
          package.json: {}
        wast-printer:
          LICENSE: {}
          README.md: {}
          esm:
            index.js: {}
          lib:
            index.js: {}
          package.json: {}
      '@xtuc':
        ieee754:
          LICENSE: {}
          README.md: {}
          dist:
            .gitkeep: {}
            index.cjs.js: {}
          index.js: {}
          package.json: {}
        long:
          LICENSE: {}
          README.md: {}
          dist:
            long.js: {}
            long.js.map: {}
          index.d.ts: {}
          index.js: {}
          package.json: {}
          src:
            long.js: {}
      abab:
        LICENSE.md: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        lib:
          atob.js: {}
          btoa.js: {}
        package.json: {}
      accepts:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      acorn:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        bin:
          acorn: {}
        dist:
          acorn.d.mts: {}
          acorn.d.ts: {}
          acorn.js: {}
          acorn.mjs: {}
          bin.js: {}
        package.json: {}
      acorn-globals:
        LICENSE: {}
        README.md: {}
        index.js: {}
        node_modules:
          .bin:
            acorn: {}
          acorn:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            bin:
              acorn: {}
            dist:
              acorn.d.ts: {}
              acorn.js: {}
              acorn.js.map: {}
              acorn.mjs: {}
              acorn.mjs.d.ts: {}
              acorn.mjs.map: {}
              bin.js: {}
            package.json: {}
        package.json: {}
      acorn-import-assertions:
        README.md: {}
        lib:
          index.js: {}
          index.mjs: {}
        package.json: {}
        src:
          index.js: {}
      acorn-jsx:
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        xhtml.js: {}
      acorn-walk:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        dist:
          walk.d.ts: {}
          walk.js: {}
          walk.js.map: {}
          walk.mjs: {}
          walk.mjs.map: {}
        package.json: {}
      address:
        LICENSE.txt: {}
        README.md: {}
        lib:
          address.d.ts: {}
          address.js: {}
        package.json: {}
      adjust-sourcemap-loader:
        .jshintrc: {}
        .nvmrc: {}
        LICENSE: {}
        codec:
          absolute.js: {}
          bower-component.js: {}
          index.js: {}
          npm-module.js: {}
          output-relative.js: {}
          output-root-relative.js: {}
          project-relative.js: {}
          project-root-relative.js: {}
          source-relative.js: {}
          source-root-relative.js: {}
          utility:
            enhanced-relative.js: {}
            get-context-directory.js: {}
            get-output-directory.js: {}
          webpack-bootstrap.js: {}
          webpack-protocol.js: {}
        index.js: {}
        lib:
          loader.js: {}
          module-filename-template.js: {}
          process:
            debug-message.js: {}
            decode-sources-with.js: {}
            encode-sources-with.js: {}
            get-error.js: {}
            get-field-as-fn.js: {}
            index.js: {}
            locate-root-with.js: {}
            test-codec.js: {}
            throw-errors.js: {}
            to-reg-exp.js: {}
        package.json: {}
        readme.md: {}
      agent-base:
        README.md: {}
        dist:
          src:
            index.d.ts: {}
            index.js: {}
            index.js.map: {}
            promisify.d.ts: {}
            promisify.js: {}
            promisify.js.map: {}
        package.json: {}
        src:
          index.ts: {}
          promisify.ts: {}
      ajv:
        .tonic_example.js: {}
        LICENSE: {}
        README.md: {}
        dist:
          ajv.bundle.js: {}
          ajv.min.js: {}
          ajv.min.js.map: {}
        lib:
          ajv.d.ts: {}
          ajv.js: {}
          cache.js: {}
          compile:
            async.js: {}
            equal.js: {}
            error_classes.js: {}
            formats.js: {}
            index.js: {}
            resolve.js: {}
            rules.js: {}
            schema_obj.js: {}
            ucs2length.js: {}
            util.js: {}
          data.js: {}
          definition_schema.js: {}
          dot:
            _limit.jst: {}
            _limitItems.jst: {}
            _limitLength.jst: {}
            _limitProperties.jst: {}
            allOf.jst: {}
            anyOf.jst: {}
            coerce.def: {}
            comment.jst: {}
            const.jst: {}
            contains.jst: {}
            custom.jst: {}
            defaults.def: {}
            definitions.def: {}
            dependencies.jst: {}
            enum.jst: {}
            errors.def: {}
            format.jst: {}
            if.jst: {}
            items.jst: {}
            missing.def: {}
            multipleOf.jst: {}
            not.jst: {}
            oneOf.jst: {}
            pattern.jst: {}
            properties.jst: {}
            propertyNames.jst: {}
            ref.jst: {}
            required.jst: {}
            uniqueItems.jst: {}
            validate.jst: {}
          dotjs:
            README.md: {}
            _limit.js: {}
            _limitItems.js: {}
            _limitLength.js: {}
            _limitProperties.js: {}
            allOf.js: {}
            anyOf.js: {}
            comment.js: {}
            const.js: {}
            contains.js: {}
            custom.js: {}
            dependencies.js: {}
            enum.js: {}
            format.js: {}
            if.js: {}
            index.js: {}
            items.js: {}
            multipleOf.js: {}
            not.js: {}
            oneOf.js: {}
            pattern.js: {}
            properties.js: {}
            propertyNames.js: {}
            ref.js: {}
            required.js: {}
            uniqueItems.js: {}
            validate.js: {}
          keyword.js: {}
          refs:
            data.json: {}
            json-schema-draft-04.json: {}
            json-schema-draft-06.json: {}
            json-schema-draft-07.json: {}
            json-schema-secure.json: {}
        package.json: {}
        scripts:
          .eslintrc.yml: {}
          bundle.js: {}
          compile-dots.js: {}
          info: {}
          prepare-tests: {}
          publish-built-version: {}
          travis-gh-pages: {}
      ajv-formats:
        LICENSE: {}
        README.md: {}
        dist:
          formats.d.ts: {}
          formats.js: {}
          formats.js.map: {}
          index.d.ts: {}
          index.js: {}
          index.js.map: {}
          limit.d.ts: {}
          limit.js: {}
          limit.js.map: {}
        node_modules:
          ajv:
            .runkit_example.js: {}
            LICENSE: {}
            README.md: {}
            dist:
              2019.d.ts: {}
              2019.js: {}
              2019.js.map: {}
              2020.d.ts: {}
              2020.js: {}
              2020.js.map: {}
              ajv.d.ts: {}
              ajv.js: {}
              ajv.js.map: {}
              compile:
                codegen:
                  code.d.ts: {}
                  code.js: {}
                  code.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  scope.d.ts: {}
                  scope.js: {}
                  scope.js.map: {}
                errors.d.ts: {}
                errors.js: {}
                errors.js.map: {}
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                jtd:
                  parse.d.ts: {}
                  parse.js: {}
                  parse.js.map: {}
                  serialize.d.ts: {}
                  serialize.js: {}
                  serialize.js.map: {}
                  types.d.ts: {}
                  types.js: {}
                  types.js.map: {}
                names.d.ts: {}
                names.js: {}
                names.js.map: {}
                ref_error.d.ts: {}
                ref_error.js: {}
                ref_error.js.map: {}
                resolve.d.ts: {}
                resolve.js: {}
                resolve.js.map: {}
                rules.d.ts: {}
                rules.js: {}
                rules.js.map: {}
                util.d.ts: {}
                util.js: {}
                util.js.map: {}
                validate:
                  applicability.d.ts: {}
                  applicability.js: {}
                  applicability.js.map: {}
                  boolSchema.d.ts: {}
                  boolSchema.js: {}
                  boolSchema.js.map: {}
                  dataType.d.ts: {}
                  dataType.js: {}
                  dataType.js.map: {}
                  defaults.d.ts: {}
                  defaults.js: {}
                  defaults.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  keyword.d.ts: {}
                  keyword.js: {}
                  keyword.js.map: {}
                  subschema.d.ts: {}
                  subschema.js: {}
                  subschema.js.map: {}
              core.d.ts: {}
              core.js: {}
              core.js.map: {}
              jtd.d.ts: {}
              jtd.js: {}
              jtd.js.map: {}
              refs:
                data.json: {}
                json-schema-2019-09:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format.json: {}
                    meta-data.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-2020-12:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format-annotation.json: {}
                    meta-data.json: {}
                    unevaluated.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-draft-06.json: {}
                json-schema-draft-07.json: {}
                json-schema-secure.json: {}
                jtd-schema.d.ts: {}
                jtd-schema.js: {}
                jtd-schema.js.map: {}
              runtime:
                equal.d.ts: {}
                equal.js: {}
                equal.js.map: {}
                parseJson.d.ts: {}
                parseJson.js: {}
                parseJson.js.map: {}
                quote.d.ts: {}
                quote.js: {}
                quote.js.map: {}
                re2.d.ts: {}
                re2.js: {}
                re2.js.map: {}
                timestamp.d.ts: {}
                timestamp.js: {}
                timestamp.js.map: {}
                ucs2length.d.ts: {}
                ucs2length.js: {}
                ucs2length.js.map: {}
                uri.d.ts: {}
                uri.js: {}
                uri.js.map: {}
                validation_error.d.ts: {}
                validation_error.js: {}
                validation_error.js.map: {}
              standalone:
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                instance.d.ts: {}
                instance.js: {}
                instance.js.map: {}
              types:
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                json-schema.d.ts: {}
                json-schema.js: {}
                json-schema.js.map: {}
                jtd-schema.d.ts: {}
                jtd-schema.js: {}
                jtd-schema.js.map: {}
              vocabularies:
                applicator:
                  additionalItems.d.ts: {}
                  additionalItems.js: {}
                  additionalItems.js.map: {}
                  additionalProperties.d.ts: {}
                  additionalProperties.js: {}
                  additionalProperties.js.map: {}
                  allOf.d.ts: {}
                  allOf.js: {}
                  allOf.js.map: {}
                  anyOf.d.ts: {}
                  anyOf.js: {}
                  anyOf.js.map: {}
                  contains.d.ts: {}
                  contains.js: {}
                  contains.js.map: {}
                  dependencies.d.ts: {}
                  dependencies.js: {}
                  dependencies.js.map: {}
                  dependentSchemas.d.ts: {}
                  dependentSchemas.js: {}
                  dependentSchemas.js.map: {}
                  if.d.ts: {}
                  if.js: {}
                  if.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  items.d.ts: {}
                  items.js: {}
                  items.js.map: {}
                  items2020.d.ts: {}
                  items2020.js: {}
                  items2020.js.map: {}
                  not.d.ts: {}
                  not.js: {}
                  not.js.map: {}
                  oneOf.d.ts: {}
                  oneOf.js: {}
                  oneOf.js.map: {}
                  patternProperties.d.ts: {}
                  patternProperties.js: {}
                  patternProperties.js.map: {}
                  prefixItems.d.ts: {}
                  prefixItems.js: {}
                  prefixItems.js.map: {}
                  properties.d.ts: {}
                  properties.js: {}
                  properties.js.map: {}
                  propertyNames.d.ts: {}
                  propertyNames.js: {}
                  propertyNames.js.map: {}
                  thenElse.d.ts: {}
                  thenElse.js: {}
                  thenElse.js.map: {}
                code.d.ts: {}
                code.js: {}
                code.js.map: {}
                core:
                  id.d.ts: {}
                  id.js: {}
                  id.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  ref.d.ts: {}
                  ref.js: {}
                  ref.js.map: {}
                discriminator:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  types.d.ts: {}
                  types.js: {}
                  types.js.map: {}
                draft2020.d.ts: {}
                draft2020.js: {}
                draft2020.js.map: {}
                draft7.d.ts: {}
                draft7.js: {}
                draft7.js.map: {}
                dynamic:
                  dynamicAnchor.d.ts: {}
                  dynamicAnchor.js: {}
                  dynamicAnchor.js.map: {}
                  dynamicRef.d.ts: {}
                  dynamicRef.js: {}
                  dynamicRef.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  recursiveAnchor.d.ts: {}
                  recursiveAnchor.js: {}
                  recursiveAnchor.js.map: {}
                  recursiveRef.d.ts: {}
                  recursiveRef.js: {}
                  recursiveRef.js.map: {}
                errors.d.ts: {}
                errors.js: {}
                errors.js.map: {}
                format:
                  format.d.ts: {}
                  format.js: {}
                  format.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                jtd:
                  discriminator.d.ts: {}
                  discriminator.js: {}
                  discriminator.js.map: {}
                  elements.d.ts: {}
                  elements.js: {}
                  elements.js.map: {}
                  enum.d.ts: {}
                  enum.js: {}
                  enum.js.map: {}
                  error.d.ts: {}
                  error.js: {}
                  error.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  metadata.d.ts: {}
                  metadata.js: {}
                  metadata.js.map: {}
                  nullable.d.ts: {}
                  nullable.js: {}
                  nullable.js.map: {}
                  optionalProperties.d.ts: {}
                  optionalProperties.js: {}
                  optionalProperties.js.map: {}
                  properties.d.ts: {}
                  properties.js: {}
                  properties.js.map: {}
                  ref.d.ts: {}
                  ref.js: {}
                  ref.js.map: {}
                  type.d.ts: {}
                  type.js: {}
                  type.js.map: {}
                  union.d.ts: {}
                  union.js: {}
                  union.js.map: {}
                  values.d.ts: {}
                  values.js: {}
                  values.js.map: {}
                metadata.d.ts: {}
                metadata.js: {}
                metadata.js.map: {}
                next.d.ts: {}
                next.js: {}
                next.js.map: {}
                unevaluated:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  unevaluatedItems.d.ts: {}
                  unevaluatedItems.js: {}
                  unevaluatedItems.js.map: {}
                  unevaluatedProperties.d.ts: {}
                  unevaluatedProperties.js: {}
                  unevaluatedProperties.js.map: {}
                validation:
                  const.d.ts: {}
                  const.js: {}
                  const.js.map: {}
                  dependentRequired.d.ts: {}
                  dependentRequired.js: {}
                  dependentRequired.js.map: {}
                  enum.d.ts: {}
                  enum.js: {}
                  enum.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  limitContains.d.ts: {}
                  limitContains.js: {}
                  limitContains.js.map: {}
                  limitItems.d.ts: {}
                  limitItems.js: {}
                  limitItems.js.map: {}
                  limitLength.d.ts: {}
                  limitLength.js: {}
                  limitLength.js.map: {}
                  limitNumber.d.ts: {}
                  limitNumber.js: {}
                  limitNumber.js.map: {}
                  limitProperties.d.ts: {}
                  limitProperties.js: {}
                  limitProperties.js.map: {}
                  multipleOf.d.ts: {}
                  multipleOf.js: {}
                  multipleOf.js.map: {}
                  pattern.d.ts: {}
                  pattern.js: {}
                  pattern.js.map: {}
                  required.d.ts: {}
                  required.js: {}
                  required.js.map: {}
                  uniqueItems.d.ts: {}
                  uniqueItems.js: {}
                  uniqueItems.js.map: {}
            lib:
              2019.ts: {}
              2020.ts: {}
              ajv.ts: {}
              compile:
                codegen:
                  code.ts: {}
                  index.ts: {}
                  scope.ts: {}
                errors.ts: {}
                index.ts: {}
                jtd:
                  parse.ts: {}
                  serialize.ts: {}
                  types.ts: {}
                names.ts: {}
                ref_error.ts: {}
                resolve.ts: {}
                rules.ts: {}
                util.ts: {}
                validate:
                  applicability.ts: {}
                  boolSchema.ts: {}
                  dataType.ts: {}
                  defaults.ts: {}
                  index.ts: {}
                  keyword.ts: {}
                  subschema.ts: {}
              core.ts: {}
              jtd.ts: {}
              refs:
                data.json: {}
                json-schema-2019-09:
                  index.ts: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format.json: {}
                    meta-data.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-2020-12:
                  index.ts: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format-annotation.json: {}
                    meta-data.json: {}
                    unevaluated.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-draft-06.json: {}
                json-schema-draft-07.json: {}
                json-schema-secure.json: {}
                jtd-schema.ts: {}
              runtime:
                equal.ts: {}
                parseJson.ts: {}
                quote.ts: {}
                re2.ts: {}
                timestamp.ts: {}
                ucs2length.ts: {}
                uri.ts: {}
                validation_error.ts: {}
              standalone:
                index.ts: {}
                instance.ts: {}
              types:
                index.ts: {}
                json-schema.ts: {}
                jtd-schema.ts: {}
              vocabularies:
                applicator:
                  additionalItems.ts: {}
                  additionalProperties.ts: {}
                  allOf.ts: {}
                  anyOf.ts: {}
                  contains.ts: {}
                  dependencies.ts: {}
                  dependentSchemas.ts: {}
                  if.ts: {}
                  index.ts: {}
                  items.ts: {}
                  items2020.ts: {}
                  not.ts: {}
                  oneOf.ts: {}
                  patternProperties.ts: {}
                  prefixItems.ts: {}
                  properties.ts: {}
                  propertyNames.ts: {}
                  thenElse.ts: {}
                code.ts: {}
                core:
                  id.ts: {}
                  index.ts: {}
                  ref.ts: {}
                discriminator:
                  index.ts: {}
                  types.ts: {}
                draft2020.ts: {}
                draft7.ts: {}
                dynamic:
                  dynamicAnchor.ts: {}
                  dynamicRef.ts: {}
                  index.ts: {}
                  recursiveAnchor.ts: {}
                  recursiveRef.ts: {}
                errors.ts: {}
                format:
                  format.ts: {}
                  index.ts: {}
                jtd:
                  discriminator.ts: {}
                  elements.ts: {}
                  enum.ts: {}
                  error.ts: {}
                  index.ts: {}
                  metadata.ts: {}
                  nullable.ts: {}
                  optionalProperties.ts: {}
                  properties.ts: {}
                  ref.ts: {}
                  type.ts: {}
                  union.ts: {}
                  values.ts: {}
                metadata.ts: {}
                next.ts: {}
                unevaluated:
                  index.ts: {}
                  unevaluatedItems.ts: {}
                  unevaluatedProperties.ts: {}
                validation:
                  const.ts: {}
                  dependentRequired.ts: {}
                  enum.ts: {}
                  index.ts: {}
                  limitContains.ts: {}
                  limitItems.ts: {}
                  limitLength.ts: {}
                  limitNumber.ts: {}
                  limitProperties.ts: {}
                  multipleOf.ts: {}
                  pattern.ts: {}
                  required.ts: {}
                  uniqueItems.ts: {}
            package.json: {}
          json-schema-traverse:
            .eslintrc.yml: {}
            .github:
              FUNDING.yml: {}
              workflows:
                build.yml: {}
                publish.yml: {}
            LICENSE: {}
            README.md: {}
            index.d.ts: {}
            index.js: {}
            package.json: {}
            spec:
              .eslintrc.yml: {}
              fixtures:
                schema.js: {}
              index.spec.js: {}
        package.json: {}
        src:
          formats.ts: {}
          index.ts: {}
          limit.ts: {}
      ajv-keywords:
        LICENSE: {}
        README.md: {}
        ajv-keywords.d.ts: {}
        index.js: {}
        keywords:
          _formatLimit.js: {}
          _util.js: {}
          allRequired.js: {}
          anyRequired.js: {}
          deepProperties.js: {}
          deepRequired.js: {}
          dot:
            _formatLimit.jst: {}
            patternRequired.jst: {}
            switch.jst: {}
          dotjs:
            README.md: {}
            _formatLimit.js: {}
            patternRequired.js: {}
            switch.js: {}
          dynamicDefaults.js: {}
          formatMaximum.js: {}
          formatMinimum.js: {}
          index.js: {}
          instanceof.js: {}
          oneRequired.js: {}
          patternRequired.js: {}
          prohibited.js: {}
          range.js: {}
          regexp.js: {}
          select.js: {}
          switch.js: {}
          transform.js: {}
          typeof.js: {}
          uniqueItemProperties.js: {}
        package.json: {}
      amp:
        Readme.md: {}
        index.js: {}
        lib:
          decode.js: {}
          encode.js: {}
          stream.js: {}
        package.json: {}
      amp-message:
        Readme.md: {}
        index.js: {}
        package.json: {}
      ansi-colors:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        symbols.js: {}
        types:
          index.d.ts: {}
      ansi-escapes:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      ansi-html-community:
        LICENSE: {}
        README.md: {}
        bin:
          ansi-html: {}
        index.js: {}
        package.json: {}
      ansi-regex:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      ansi-styles:
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      any-promise:
        .jshintrc: {}
        .npmignore: {}
        LICENSE: {}
        README.md: {}
        implementation.d.ts: {}
        implementation.js: {}
        index.d.ts: {}
        index.js: {}
        loader.js: {}
        optional.js: {}
        package.json: {}
        register:
          bluebird.d.ts: {}
          bluebird.js: {}
          es6-promise.d.ts: {}
          es6-promise.js: {}
          lie.d.ts: {}
          lie.js: {}
          native-promise-only.d.ts: {}
          native-promise-only.js: {}
          pinkie.d.ts: {}
          pinkie.js: {}
          promise.d.ts: {}
          promise.js: {}
          q.d.ts: {}
          q.js: {}
          rsvp.d.ts: {}
          rsvp.js: {}
          vow.d.ts: {}
          vow.js: {}
          when.d.ts: {}
          when.js: {}
        register-shim.js: {}
        register.d.ts: {}
        register.js: {}
      anymatch:
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
      arg:
        LICENSE.md: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
      argparse:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        lib:
          action:
            append:
              constant.js: {}
            append.js: {}
            count.js: {}
            help.js: {}
            store:
              constant.js: {}
              false.js: {}
              true.js: {}
            store.js: {}
            subparsers.js: {}
            version.js: {}
          action.js: {}
          action_container.js: {}
          argparse.js: {}
          argument:
            error.js: {}
            exclusive.js: {}
            group.js: {}
          argument_parser.js: {}
          const.js: {}
          help:
            added_formatters.js: {}
            formatter.js: {}
          namespace.js: {}
          utils.js: {}
        package.json: {}
      aria-query:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        lib:
          ariaPropsMap.js: {}
          domMap.js: {}
          elementRoleMap.js: {}
          etc:
            roles:
              abstract:
                commandRole.js: {}
                compositeRole.js: {}
                inputRole.js: {}
                landmarkRole.js: {}
                rangeRole.js: {}
                roletypeRole.js: {}
                sectionRole.js: {}
                sectionheadRole.js: {}
                selectRole.js: {}
                structureRole.js: {}
                widgetRole.js: {}
                windowRole.js: {}
              ariaAbstractRoles.js: {}
              ariaDpubRoles.js: {}
              ariaGraphicsRoles.js: {}
              ariaLiteralRoles.js: {}
              dpub:
                docAbstractRole.js: {}
                docAcknowledgmentsRole.js: {}
                docAfterwordRole.js: {}
                docAppendixRole.js: {}
                docBacklinkRole.js: {}
                docBiblioentryRole.js: {}
                docBibliographyRole.js: {}
                docBibliorefRole.js: {}
                docChapterRole.js: {}
                docColophonRole.js: {}
                docConclusionRole.js: {}
                docCoverRole.js: {}
                docCreditRole.js: {}
                docCreditsRole.js: {}
                docDedicationRole.js: {}
                docEndnoteRole.js: {}
                docEndnotesRole.js: {}
                docEpigraphRole.js: {}
                docEpilogueRole.js: {}
                docErrataRole.js: {}
                docExampleRole.js: {}
                docFootnoteRole.js: {}
                docForewordRole.js: {}
                docGlossaryRole.js: {}
                docGlossrefRole.js: {}
                docIndexRole.js: {}
                docIntroductionRole.js: {}
                docNoterefRole.js: {}
                docNoticeRole.js: {}
                docPagebreakRole.js: {}
                docPagelistRole.js: {}
                docPartRole.js: {}
                docPrefaceRole.js: {}
                docPrologueRole.js: {}
                docPullquoteRole.js: {}
                docQnaRole.js: {}
                docSubtitleRole.js: {}
                docTipRole.js: {}
                docTocRole.js: {}
              graphics:
                graphicsDocumentRole.js: {}
                graphicsObjectRole.js: {}
                graphicsSymbolRole.js: {}
              literal:
                alertRole.js: {}
                alertdialogRole.js: {}
                applicationRole.js: {}
                articleRole.js: {}
                bannerRole.js: {}
                blockquoteRole.js: {}
                buttonRole.js: {}
                captionRole.js: {}
                cellRole.js: {}
                checkboxRole.js: {}
                codeRole.js: {}
                columnheaderRole.js: {}
                comboboxRole.js: {}
                complementaryRole.js: {}
                contentinfoRole.js: {}
                definitionRole.js: {}
                deletionRole.js: {}
                dialogRole.js: {}
                directoryRole.js: {}
                documentRole.js: {}
                emphasisRole.js: {}
                feedRole.js: {}
                figureRole.js: {}
                formRole.js: {}
                genericRole.js: {}
                graphicsDocumentRole.js: {}
                graphicsObjectRole.js: {}
                graphicsSymbolRole.js: {}
                gridRole.js: {}
                gridcellRole.js: {}
                groupRole.js: {}
                headingRole.js: {}
                imgRole.js: {}
                insertionRole.js: {}
                linkRole.js: {}
                listRole.js: {}
                listboxRole.js: {}
                listitemRole.js: {}
                logRole.js: {}
                mainRole.js: {}
                markRole.js: {}
                marqueeRole.js: {}
                mathRole.js: {}
                menuRole.js: {}
                menubarRole.js: {}
                menuitemRole.js: {}
                menuitemcheckboxRole.js: {}
                menuitemradioRole.js: {}
                meterRole.js: {}
                navigationRole.js: {}
                noneRole.js: {}
                noteRole.js: {}
                optionRole.js: {}
                paragraphRole.js: {}
                presentationRole.js: {}
                progressbarRole.js: {}
                radioRole.js: {}
                radiogroupRole.js: {}
                regionRole.js: {}
                rowRole.js: {}
                rowgroupRole.js: {}
                rowheaderRole.js: {}
                scrollbarRole.js: {}
                searchRole.js: {}
                searchboxRole.js: {}
                separatorRole.js: {}
                sliderRole.js: {}
                spinbuttonRole.js: {}
                statusRole.js: {}
                strongRole.js: {}
                subscriptRole.js: {}
                superscriptRole.js: {}
                switchRole.js: {}
                tabRole.js: {}
                tableRole.js: {}
                tablistRole.js: {}
                tabpanelRole.js: {}
                termRole.js: {}
                textboxRole.js: {}
                timeRole.js: {}
                timerRole.js: {}
                toolbarRole.js: {}
                tooltipRole.js: {}
                treeRole.js: {}
                treegridRole.js: {}
                treeitemRole.js: {}
          index.js: {}
          roleElementMap.js: {}
          rolesMap.js: {}
          util:
            iterationDecorator.js: {}
            iteratorProxy.js: {}
        package.json: {}
      array-buffer-byte-length:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      array-flatten:
        LICENSE: {}
        README.md: {}
        array-flatten.js: {}
        package.json: {}
      array-includes:
        .editorconfig: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        auto.js: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        polyfill.js: {}
        shim.js: {}
        test:
          implementation.js: {}
          index.js: {}
          shimmed.js: {}
          tests.js: {}
      array-union:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      array.prototype.findlast:
        .editorconfig: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        auto.js: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        polyfill.js: {}
        shim.js: {}
        test:
          implementation.js: {}
          index.js: {}
          shimmed.js: {}
          tests.js: {}
      array.prototype.findlastindex:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        auto.js: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        polyfill.js: {}
        shim.js: {}
        test:
          implementation.js: {}
          index.js: {}
          shimmed.js: {}
          tests.js: {}
      array.prototype.flat:
        .editorconfig: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        auto.js: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        polyfill.js: {}
        shim.js: {}
        test:
          implementation.js: {}
          index.js: {}
          shimmed.js: {}
          tests.js: {}
      array.prototype.flatmap:
        .editorconfig: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        auto.js: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        polyfill.js: {}
        shim.js: {}
        test:
          implementation.js: {}
          index.js: {}
          shimmed.js: {}
          tests.js: {}
      array.prototype.reduce:
        .editorconfig: {}
        .eslintrc: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        auto.js: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        polyfill.js: {}
        shim.js: {}
        test:
          implementation.js: {}
          index.js: {}
          shimmed.js: {}
          tests.js: {}
      array.prototype.toreversed:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        auto.js: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        polyfill.js: {}
        shim.js: {}
        test:
          implementation.js: {}
          index.js: {}
          shimmed.js: {}
          tests.js: {}
      array.prototype.tosorted:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        auto.js: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        polyfill.js: {}
        shim.js: {}
        test:
          implementation.js: {}
          index.js: {}
          shimmed.js: {}
          tests.js: {}
      arraybuffer.prototype.slice:
        .editorconfig: {}
        .eslintrc: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        auto.js: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        polyfill.js: {}
        shim.js: {}
        test:
          implementation.js: {}
          index.js: {}
          shimmed.js: {}
          tests.js: {}
      asap:
        CHANGES.md: {}
        LICENSE.md: {}
        README.md: {}
        asap.js: {}
        browser-asap.js: {}
        browser-raw.js: {}
        package.json: {}
        raw.js: {}
      ast-types:
        .github:
          dependabot.yml: {}
          workflows:
            main.yml: {}
        LICENSE: {}
        README.md: {}
        def:
          babel-core.d.ts: {}
          babel-core.js: {}
          babel.d.ts: {}
          babel.js: {}
          core.d.ts: {}
          core.js: {}
          es-proposals.d.ts: {}
          es-proposals.js: {}
          es2020.d.ts: {}
          es2020.js: {}
          es6.d.ts: {}
          es6.js: {}
          es7.d.ts: {}
          es7.js: {}
          esprima.d.ts: {}
          esprima.js: {}
          flow.d.ts: {}
          flow.js: {}
          jsx.d.ts: {}
          jsx.js: {}
          type-annotations.d.ts: {}
          type-annotations.js: {}
          typescript.d.ts: {}
          typescript.js: {}
        fork.d.ts: {}
        fork.js: {}
        gen:
          builders.d.ts: {}
          builders.js: {}
          kinds.d.ts: {}
          kinds.js: {}
          namedTypes.d.ts: {}
          namedTypes.js: {}
          visitor.d.ts: {}
          visitor.js: {}
        lib:
          equiv.d.ts: {}
          equiv.js: {}
          node-path.d.ts: {}
          node-path.js: {}
          path-visitor.d.ts: {}
          path-visitor.js: {}
          path.d.ts: {}
          path.js: {}
          scope.d.ts: {}
          scope.js: {}
          shared.d.ts: {}
          shared.js: {}
          types.d.ts: {}
          types.js: {}
        main.d.ts: {}
        main.js: {}
        package.json: {}
        tsconfig.json: {}
        types.d.ts: {}
        types.js: {}
      ast-types-flow:
        LICENSE: {}
        README.md: {}
        lib:
          types.js: {}
        package.json: {}
      async:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        all.js: {}
        allLimit.js: {}
        allSeries.js: {}
        any.js: {}
        anyLimit.js: {}
        anySeries.js: {}
        apply.js: {}
        applyEach.js: {}
        applyEachSeries.js: {}
        asyncify.js: {}
        auto.js: {}
        autoInject.js: {}
        bower.json: {}
        cargo.js: {}
        cargoQueue.js: {}
        compose.js: {}
        concat.js: {}
        concatLimit.js: {}
        concatSeries.js: {}
        constant.js: {}
        detect.js: {}
        detectLimit.js: {}
        detectSeries.js: {}
        dir.js: {}
        dist:
          async.js: {}
          async.min.js: {}
          async.mjs: {}
        doDuring.js: {}
        doUntil.js: {}
        doWhilst.js: {}
        during.js: {}
        each.js: {}
        eachLimit.js: {}
        eachOf.js: {}
        eachOfLimit.js: {}
        eachOfSeries.js: {}
        eachSeries.js: {}
        ensureAsync.js: {}
        every.js: {}
        everyLimit.js: {}
        everySeries.js: {}
        filter.js: {}
        filterLimit.js: {}
        filterSeries.js: {}
        find.js: {}
        findLimit.js: {}
        findSeries.js: {}
        flatMap.js: {}
        flatMapLimit.js: {}
        flatMapSeries.js: {}
        foldl.js: {}
        foldr.js: {}
        forEach.js: {}
        forEachLimit.js: {}
        forEachOf.js: {}
        forEachOfLimit.js: {}
        forEachOfSeries.js: {}
        forEachSeries.js: {}
        forever.js: {}
        groupBy.js: {}
        groupByLimit.js: {}
        groupBySeries.js: {}
        index.js: {}
        inject.js: {}
        internal:
          DoublyLinkedList.js: {}
          Heap.js: {}
          applyEach.js: {}
          asyncEachOfLimit.js: {}
          awaitify.js: {}
          breakLoop.js: {}
          consoleFunc.js: {}
          createTester.js: {}
          eachOfLimit.js: {}
          filter.js: {}
          getIterator.js: {}
          initialParams.js: {}
          isArrayLike.js: {}
          iterator.js: {}
          map.js: {}
          once.js: {}
          onlyOnce.js: {}
          parallel.js: {}
          promiseCallback.js: {}
          queue.js: {}
          range.js: {}
          reject.js: {}
          setImmediate.js: {}
          withoutIndex.js: {}
          wrapAsync.js: {}
        log.js: {}
        map.js: {}
        mapLimit.js: {}
        mapSeries.js: {}
        mapValues.js: {}
        mapValuesLimit.js: {}
        mapValuesSeries.js: {}
        memoize.js: {}
        nextTick.js: {}
        package.json: {}
        parallel.js: {}
        parallelLimit.js: {}
        priorityQueue.js: {}
        queue.js: {}
        race.js: {}
        reduce.js: {}
        reduceRight.js: {}
        reflect.js: {}
        reflectAll.js: {}
        reject.js: {}
        rejectLimit.js: {}
        rejectSeries.js: {}
        retry.js: {}
        retryable.js: {}
        select.js: {}
        selectLimit.js: {}
        selectSeries.js: {}
        seq.js: {}
        series.js: {}
        setImmediate.js: {}
        some.js: {}
        someLimit.js: {}
        someSeries.js: {}
        sortBy.js: {}
        timeout.js: {}
        times.js: {}
        timesLimit.js: {}
        timesSeries.js: {}
        transform.js: {}
        tryEach.js: {}
        unmemoize.js: {}
        until.js: {}
        waterfall.js: {}
        whilst.js: {}
        wrapSync.js: {}
      async-listener:
        .travis.yml: {}
        LICENSE: {}
        README.md: {}
        es6-wrapped-promise.js: {}
        glue.js: {}
        index.js: {}
        node_modules:
          .bin:
            semver: {}
          semver:
            LICENSE: {}
            README.md: {}
            bin:
              semver: {}
            package.json: {}
            range.bnf: {}
            semver.js: {}
        package.json: {}
        test:
          add-remove.tap.js: {}
          connection-handler-disconnects.tap.js: {}
          core:
            core-asynclistener-add-inflight.js: {}
            core-asynclistener-error-throw-in-before-inflight.js: {}
          core-asynclistener-error-multiple-handled.simple.js: {}
          core-asynclistener-error-multiple-mix.simple.js: {}
          core-asynclistener-error-multiple-unhandled.simple.js: {}
          core-asynclistener-error-net.simple.js: {}
          core-asynclistener-error-throw-in-after.simple.js: {}
          core-asynclistener-error-throw-in-before-multiple.simple.js: {}
          core-asynclistener-error-throw-in-before.simple.js: {}
          core-asynclistener-error-throw-in-error.simple.js: {}
          core-asynclistener-error.simple.js: {}
          core-asynclistener-nexttick-remove.simple.js: {}
          core-asynclistener-only-add.simple.js: {}
          core-asynclistener-remove-before.simple.js: {}
          core-asynclistener-remove-inflight-error.simple.js: {}
          core-asynclistener-remove-inflight.simple.js: {}
          core-asynclistener.simple.js: {}
          errors-this-tick.tap.js: {}
          fork-listen2-problem.tap.js: {}
          fork-listener.js: {}
          function-length-preserved.tap.js: {}
          handle.tap.js: {}
          http-request.tap.js: {}
          native-promises.tap.js: {}
          no-after-following-error.tap.js: {}
          overlapping-nexttick.tap.js: {}
          promise-subclass.js: {}
          simple-counter-with-io.tap.js: {}
          simple-counter.tap.js: {}
          simplified-error.simple.js: {}
          spawn.tap.js: {}
          timers.tap.js: {}
          zlib.tap.js: {}
      asynckit:
        LICENSE: {}
        README.md: {}
        bench.js: {}
        index.js: {}
        lib:
          abort.js: {}
          async.js: {}
          defer.js: {}
          iterate.js: {}
          readable_asynckit.js: {}
          readable_parallel.js: {}
          readable_serial.js: {}
          readable_serial_ordered.js: {}
          state.js: {}
          streamify.js: {}
          terminator.js: {}
        package.json: {}
        parallel.js: {}
        serial.js: {}
        serialOrdered.js: {}
        stream.js: {}
      at-least-node:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      autoprefixer:
        LICENSE: {}
        README.md: {}
        bin:
          autoprefixer: {}
        data:
          prefixes.js: {}
        lib:
          at-rule.js: {}
          autoprefixer.d.ts: {}
          autoprefixer.js: {}
          brackets.js: {}
          browsers.js: {}
          declaration.js: {}
          hacks:
            align-content.js: {}
            align-items.js: {}
            align-self.js: {}
            animation.js: {}
            appearance.js: {}
            autofill.js: {}
            backdrop-filter.js: {}
            background-clip.js: {}
            background-size.js: {}
            block-logical.js: {}
            border-image.js: {}
            border-radius.js: {}
            break-props.js: {}
            cross-fade.js: {}
            display-flex.js: {}
            display-grid.js: {}
            file-selector-button.js: {}
            filter-value.js: {}
            filter.js: {}
            flex-basis.js: {}
            flex-direction.js: {}
            flex-flow.js: {}
            flex-grow.js: {}
            flex-shrink.js: {}
            flex-spec.js: {}
            flex-wrap.js: {}
            flex.js: {}
            fullscreen.js: {}
            gradient.js: {}
            grid-area.js: {}
            grid-column-align.js: {}
            grid-end.js: {}
            grid-row-align.js: {}
            grid-row-column.js: {}
            grid-rows-columns.js: {}
            grid-start.js: {}
            grid-template-areas.js: {}
            grid-template.js: {}
            grid-utils.js: {}
            image-rendering.js: {}
            image-set.js: {}
            inline-logical.js: {}
            intrinsic.js: {}
            justify-content.js: {}
            mask-border.js: {}
            mask-composite.js: {}
            order.js: {}
            overscroll-behavior.js: {}
            pixelated.js: {}
            place-self.js: {}
            placeholder-shown.js: {}
            placeholder.js: {}
            print-color-adjust.js: {}
            text-decoration-skip-ink.js: {}
            text-decoration.js: {}
            text-emphasis-position.js: {}
            transform-decl.js: {}
            user-select.js: {}
            writing-mode.js: {}
          info.js: {}
          old-selector.js: {}
          old-value.js: {}
          prefixer.js: {}
          prefixes.js: {}
          processor.js: {}
          resolution.js: {}
          selector.js: {}
          supports.js: {}
          transition.js: {}
          utils.js: {}
          value.js: {}
          vendor.js: {}
        package.json: {}
      available-typed-arrays:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      axe-core:
        LICENSE: {}
        README.md: {}
        axe.d.ts: {}
        axe.js: {}
        axe.min.js: {}
        locales:
          _template.json: {}
          da.json: {}
          de.json: {}
          es.json: {}
          eu.json: {}
          fr.json: {}
          he.json: {}
          ja.json: {}
          ko.json: {}
          nl.json: {}
          no_NB.json: {}
          pl.json: {}
          pt_BR.json: {}
        package.json: {}
        sri-history.json: {}
      axios:
        CHANGELOG.md: {}
        LICENSE: {}
        MIGRATION_GUIDE.md: {}
        README.md: {}
        SECURITY.md: {}
        dist:
          axios.js: {}
          axios.js.map: {}
          axios.min.js: {}
          axios.min.js.map: {}
          browser:
            axios.cjs: {}
            axios.cjs.map: {}
          esm:
            axios.js: {}
            axios.js.map: {}
            axios.min.js: {}
            axios.min.js.map: {}
          node:
            axios.cjs: {}
            axios.cjs.map: {}
        index.d.cts: {}
        index.d.ts: {}
        index.js: {}
        lib:
          adapters:
            README.md: {}
            adapters.js: {}
            http.js: {}
            xhr.js: {}
          axios.js: {}
          cancel:
            CancelToken.js: {}
            CanceledError.js: {}
            isCancel.js: {}
          core:
            Axios.js: {}
            AxiosError.js: {}
            AxiosHeaders.js: {}
            InterceptorManager.js: {}
            README.md: {}
            buildFullPath.js: {}
            dispatchRequest.js: {}
            mergeConfig.js: {}
            settle.js: {}
            transformData.js: {}
          defaults:
            index.js: {}
            transitional.js: {}
          env:
            README.md: {}
            classes:
              FormData.js: {}
            data.js: {}
          helpers:
            AxiosTransformStream.js: {}
            AxiosURLSearchParams.js: {}
            HttpStatusCode.js: {}
            README.md: {}
            ZlibHeaderTransformStream.js: {}
            bind.js: {}
            buildURL.js: {}
            callbackify.js: {}
            combineURLs.js: {}
            cookies.js: {}
            deprecatedMethod.js: {}
            formDataToJSON.js: {}
            formDataToStream.js: {}
            fromDataURI.js: {}
            isAbsoluteURL.js: {}
            isAxiosError.js: {}
            isURLSameOrigin.js: {}
            null.js: {}
            parseHeaders.js: {}
            parseProtocol.js: {}
            readBlob.js: {}
            speedometer.js: {}
            spread.js: {}
            throttle.js: {}
            toFormData.js: {}
            toURLEncodedForm.js: {}
            validator.js: {}
          platform:
            browser:
              classes:
                Blob.js: {}
                FormData.js: {}
                URLSearchParams.js: {}
              index.js: {}
            common:
              utils.js: {}
            index.js: {}
            node:
              classes:
                FormData.js: {}
                URLSearchParams.js: {}
              index.js: {}
          utils.js: {}
        node_modules:
          form-data:
            License: {}
            README.md.bak: {}
            Readme.md: {}
            index.d.ts: {}
            lib:
              browser.js: {}
              form_data.js: {}
              populate.js: {}
            package.json: {}
        package.json: {}
      axobject-query:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        lib:
          AXObjectElementMap.js: {}
          AXObjectRoleMap.js: {}
          AXObjectsMap.js: {}
          elementAXObjectMap.js: {}
          etc:
            objects:
              AbbrRole.js: {}
              AlertDialogRole.js: {}
              AlertRole.js: {}
              AnnotationRole.js: {}
              ApplicationRole.js: {}
              ArticleRole.js: {}
              AudioRole.js: {}
              BannerRole.js: {}
              BlockquoteRole.js: {}
              BusyIndicatorRole.js: {}
              ButtonRole.js: {}
              CanvasRole.js: {}
              CaptionRole.js: {}
              CellRole.js: {}
              CheckBoxRole.js: {}
              ColorWellRole.js: {}
              ColumnHeaderRole.js: {}
              ColumnRole.js: {}
              ComboBoxRole.js: {}
              ComplementaryRole.js: {}
              ContentInfoRole.js: {}
              DateRole.js: {}
              DateTimeRole.js: {}
              DefinitionRole.js: {}
              DescriptionListDetailRole.js: {}
              DescriptionListRole.js: {}
              DescriptionListTermRole.js: {}
              DetailsRole.js: {}
              DialogRole.js: {}
              DirectoryRole.js: {}
              DisclosureTriangleRole.js: {}
              DivRole.js: {}
              DocumentRole.js: {}
              EmbeddedObjectRole.js: {}
              FeedRole.js: {}
              FigcaptionRole.js: {}
              FigureRole.js: {}
              FooterRole.js: {}
              FormRole.js: {}
              GridRole.js: {}
              GroupRole.js: {}
              HeadingRole.js: {}
              IframePresentationalRole.js: {}
              IframeRole.js: {}
              IgnoredRole.js: {}
              ImageMapLinkRole.js: {}
              ImageMapRole.js: {}
              ImageRole.js: {}
              InlineTextBoxRole.js: {}
              InputTimeRole.js: {}
              LabelRole.js: {}
              LegendRole.js: {}
              LineBreakRole.js: {}
              LinkRole.js: {}
              ListBoxOptionRole.js: {}
              ListBoxRole.js: {}
              ListItemRole.js: {}
              ListMarkerRole.js: {}
              ListRole.js: {}
              LogRole.js: {}
              MainRole.js: {}
              MarkRole.js: {}
              MarqueeRole.js: {}
              MathRole.js: {}
              MenuBarRole.js: {}
              MenuButtonRole.js: {}
              MenuItemCheckBoxRole.js: {}
              MenuItemRadioRole.js: {}
              MenuItemRole.js: {}
              MenuListOptionRole.js: {}
              MenuListPopupRole.js: {}
              MenuRole.js: {}
              MeterRole.js: {}
              NavigationRole.js: {}
              NoneRole.js: {}
              NoteRole.js: {}
              OutlineRole.js: {}
              ParagraphRole.js: {}
              PopUpButtonRole.js: {}
              PreRole.js: {}
              PresentationalRole.js: {}
              ProgressIndicatorRole.js: {}
              RadioButtonRole.js: {}
              RadioGroupRole.js: {}
              RegionRole.js: {}
              RootWebAreaRole.js: {}
              RowHeaderRole.js: {}
              RowRole.js: {}
              RubyRole.js: {}
              RulerRole.js: {}
              SVGRootRole.js: {}
              ScrollAreaRole.js: {}
              ScrollBarRole.js: {}
              SeamlessWebAreaRole.js: {}
              SearchBoxRole.js: {}
              SearchRole.js: {}
              SliderRole.js: {}
              SliderThumbRole.js: {}
              SpinButtonPartRole.js: {}
              SpinButtonRole.js: {}
              SplitterRole.js: {}
              StaticTextRole.js: {}
              StatusRole.js: {}
              SwitchRole.js: {}
              TabGroupRole.js: {}
              TabListRole.js: {}
              TabPanelRole.js: {}
              TabRole.js: {}
              TableHeaderContainerRole.js: {}
              TableRole.js: {}
              TermRole.js: {}
              TextAreaRole.js: {}
              TextFieldRole.js: {}
              TimeRole.js: {}
              TimerRole.js: {}
              ToggleButtonRole.js: {}
              ToolbarRole.js: {}
              TreeGridRole.js: {}
              TreeItemRole.js: {}
              TreeRole.js: {}
              UserInterfaceTooltipRole.js: {}
              VideoRole.js: {}
              WebAreaRole.js: {}
              WindowRole.js: {}
          index.js: {}
          util:
            iterationDecorator.js: {}
            iteratorProxy.js: {}
        package.json: {}
      babel-jest:
        LICENSE: {}
        README.md: {}
        build:
          index.d.ts: {}
          index.js: {}
          loadBabelConfig.d.ts: {}
          loadBabelConfig.js: {}
        node_modules:
          ansi-styles:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          chalk:
            index.d.ts: {}
            license: {}
            package.json: {}
            readme.md: {}
            source:
              index.js: {}
              templates.js: {}
              util.js: {}
          color-convert:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            conversions.js: {}
            index.js: {}
            package.json: {}
            route.js: {}
          color-name:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
      babel-loader:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        lib:
          Error.js: {}
          cache.js: {}
          index.js: {}
          injectCaller.js: {}
          schema.json: {}
          transform.js: {}
        node_modules:
          schema-utils:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            declarations:
              ValidationError.d.ts: {}
              index.d.ts: {}
              keywords:
                absolutePath.d.ts: {}
              util:
                Range.d.ts: {}
                hints.d.ts: {}
              validate.d.ts: {}
            dist:
              ValidationError.js: {}
              index.js: {}
              keywords:
                absolutePath.js: {}
              util:
                Range.js: {}
                hints.js: {}
              validate.js: {}
            package.json: {}
        package.json: {}
      babel-plugin-istanbul:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        lib:
          index.js: {}
          load-nyc-config-sync.js: {}
        package.json: {}
      babel-plugin-jest-hoist:
        LICENSE: {}
        README.md: {}
        build:
          index.d.ts: {}
          index.js: {}
        package.json: {}
      babel-plugin-macros:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        dist:
          index.js: {}
        package.json: {}
      babel-plugin-named-asset-import:
        LICENSE: {}
        index.js: {}
        package.json: {}
      babel-plugin-polyfill-corejs2:
        LICENSE: {}
        README.md: {}
        esm:
          index.mjs: {}
          index.mjs.map: {}
        lib:
          add-platform-specific-polyfills.js: {}
          built-in-definitions.js: {}
          helpers.js: {}
          index.js: {}
        node_modules:
          .bin:
            semver: {}
          semver:
            LICENSE: {}
            README.md: {}
            bin:
              semver.js: {}
            package.json: {}
            range.bnf: {}
            semver.js: {}
        package.json: {}
      babel-plugin-polyfill-corejs3:
        LICENSE: {}
        README.md: {}
        core-js-compat:
          README.md: {}
          data.js: {}
          entries.js: {}
          get-modules-list-for-target-version.js: {}
        esm:
          index.mjs: {}
          index.mjs.map: {}
        lib:
          babel-runtime-corejs3-paths.js: {}
          built-in-definitions.js: {}
          index.js: {}
          shipped-proposals.js: {}
          usage-filters.js: {}
          utils.js: {}
        package.json: {}
      babel-plugin-polyfill-regenerator:
        LICENSE: {}
        README.md: {}
        esm:
          index.mjs: {}
          index.mjs.map: {}
        lib:
          index.js: {}
        package.json: {}
      babel-plugin-transform-react-remove-prop-types:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        lib:
          index.js: {}
          isAnnotatedForRemoval.js: {}
          isStatelessComponent.js: {}
          remove.js: {}
        package.json: {}
        src:
          index.js: {}
          isAnnotatedForRemoval.js: {}
          isStatelessComponent.js: {}
          remove.js: {}
      babel-preset-current-node-syntax:
        LICENSE: {}
        README.md: {}
        package.json: {}
        scripts:
          check-yarn-bug.sh: {}
        src:
          index.js: {}
      babel-preset-jest:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      babel-preset-react-app:
        LICENSE: {}
        README.md: {}
        create.js: {}
        dependencies.js: {}
        dev.js: {}
        index.js: {}
        package.json: {}
        prod.js: {}
        test.js: {}
        webpack-overrides.js: {}
      bail:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      balanced-match:
        .github:
          FUNDING.yml: {}
        LICENSE.md: {}
        README.md: {}
        index.js: {}
        package.json: {}
      basic-ftp:
        LICENSE.txt: {}
        README.md: {}
        dist:
          Client.d.ts: {}
          Client.js: {}
          FileInfo.d.ts: {}
          FileInfo.js: {}
          FtpContext.d.ts: {}
          FtpContext.js: {}
          ProgressTracker.d.ts: {}
          ProgressTracker.js: {}
          StringEncoding.d.ts: {}
          StringEncoding.js: {}
          StringWriter.d.ts: {}
          StringWriter.js: {}
          index.d.ts: {}
          index.js: {}
          netUtils.d.ts: {}
          netUtils.js: {}
          parseControlResponse.d.ts: {}
          parseControlResponse.js: {}
          parseList.d.ts: {}
          parseList.js: {}
          parseListDOS.d.ts: {}
          parseListDOS.js: {}
          parseListMLSD.d.ts: {}
          parseListMLSD.js: {}
          parseListUnix.d.ts: {}
          parseListUnix.js: {}
          transfer.d.ts: {}
          transfer.js: {}
        package.json: {}
      batch:
        .npmignore: {}
        History.md: {}
        LICENSE: {}
        Makefile: {}
        Readme.md: {}
        component.json: {}
        index.js: {}
        package.json: {}
      bfj:
        .eslintrc: {}
        .gitlab-ci.yml: {}
        AUTHORS: {}
        CONTRIBUTING.md: {}
        COPYING: {}
        HISTORY.md: {}
        README.md: {}
        package.json: {}
        src:
          datastream.js: {}
          error.js: {}
          eventify.js: {}
          events.js: {}
          index.js: {}
          jsonstream.js: {}
          match.js: {}
          memory.js: {}
          parse.js: {}
          promise.js: {}
          read.js: {}
          stream.js: {}
          streamify.js: {}
          stringify.js: {}
          unpipe.js: {}
          walk.js: {}
          write.js: {}
        test:
          integration.js: {}
          performance.js: {}
          unit:
            datastream.js: {}
            error.js: {}
            eventify.js: {}
            jsonstream.js: {}
            match.js: {}
            parse.js: {}
            read.js: {}
            streamify.js: {}
            stringify.js: {}
            unpipe.js: {}
            walk.js: {}
            write.js: {}
      big.js:
        CHANGELOG.md: {}
        LICENCE: {}
        README.md: {}
        big.js: {}
        big.min.js: {}
        big.mjs: {}
        package.json: {}
      binary-extensions:
        binary-extensions.json: {}
        binary-extensions.json.d.ts: {}
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      blessed:
        .npmignore: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        bin:
          tput.js: {}
        browser:
          Makefile: {}
          transform.js: {}
        example:
          ansi-viewer:
            LICENSE: {}
            README.md: {}
            ansi-art.list: {}
            index.js: {}
            package.json: {}
            singlebyte.js: {}
          blessed-telnet.js: {}
          index.js: {}
          multiplex.js: {}
          ping: {}
          simple-form.js: {}
          time.js: {}
          widget.js: {}
        index.js: {}
        lib:
          alias.js: {}
          blessed.js: {}
          colors.js: {}
          events.js: {}
          gpmclient.js: {}
          helpers.js: {}
          keys.js: {}
          program.js: {}
          tput.js: {}
          unicode.js: {}
          widget.js: {}
          widgets:
            ansiimage.js: {}
            bigtext.js: {}
            box.js: {}
            button.js: {}
            checkbox.js: {}
            element.js: {}
            filemanager.js: {}
            form.js: {}
            image.js: {}
            input.js: {}
            layout.js: {}
            line.js: {}
            list.js: {}
            listbar.js: {}
            listtable.js: {}
            loading.js: {}
            log.js: {}
            message.js: {}
            node.js: {}
            overlayimage.js: {}
            progressbar.js: {}
            prompt.js: {}
            question.js: {}
            radiobutton.js: {}
            radioset.js: {}
            screen.js: {}
            scrollablebox.js: {}
            scrollabletext.js: {}
            table.js: {}
            terminal.js: {}
            text.js: {}
            textarea.js: {}
            textbox.js: {}
            video.js: {}
        package.json: {}
        usr:
          fonts:
            AUTHORS: {}
            LICENSE: {}
            README: {}
            ter-u14b.json: {}
            ter-u14n.json: {}
          linux: {}
          windows-ansi: {}
          xterm: {}
          xterm-256color: {}
          xterm.termcap: {}
          xterm.terminfo: {}
        vendor:
          tng.js: {}
      bluebird:
        LICENSE: {}
        README.md: {}
        changelog.md: {}
        js:
          browser:
            bluebird.core.js: {}
            bluebird.core.min.js: {}
            bluebird.js: {}
            bluebird.min.js: {}
          release:
            any.js: {}
            assert.js: {}
            async.js: {}
            bind.js: {}
            bluebird.js: {}
            call_get.js: {}
            cancel.js: {}
            catch_filter.js: {}
            context.js: {}
            debuggability.js: {}
            direct_resolve.js: {}
            each.js: {}
            errors.js: {}
            es5.js: {}
            filter.js: {}
            finally.js: {}
            generators.js: {}
            join.js: {}
            map.js: {}
            method.js: {}
            nodeback.js: {}
            nodeify.js: {}
            promise.js: {}
            promise_array.js: {}
            promisify.js: {}
            props.js: {}
            queue.js: {}
            race.js: {}
            reduce.js: {}
            schedule.js: {}
            settle.js: {}
            some.js: {}
            synchronous_inspection.js: {}
            thenables.js: {}
            timers.js: {}
            using.js: {}
            util.js: {}
        package.json: {}
      bodec:
        LICENSE: {}
        README.md: {}
        bodec-node.js: {}
        bodec.js: {}
        package.json: {}
      body-parser:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        SECURITY.md: {}
        index.js: {}
        lib:
          read.js: {}
          types:
            json.js: {}
            raw.js: {}
            text.js: {}
            urlencoded.js: {}
        node_modules:
          bytes:
            History.md: {}
            LICENSE: {}
            Readme.md: {}
            index.js: {}
            package.json: {}
          debug:
            .coveralls.yml: {}
            .eslintrc: {}
            .npmignore: {}
            .travis.yml: {}
            CHANGELOG.md: {}
            LICENSE: {}
            Makefile: {}
            README.md: {}
            component.json: {}
            karma.conf.js: {}
            node.js: {}
            package.json: {}
            src:
              browser.js: {}
              debug.js: {}
              index.js: {}
              inspector-log.js: {}
              node.js: {}
          iconv-lite:
            Changelog.md: {}
            LICENSE: {}
            README.md: {}
            encodings:
              dbcs-codec.js: {}
              dbcs-data.js: {}
              index.js: {}
              internal.js: {}
              sbcs-codec.js: {}
              sbcs-data-generated.js: {}
              sbcs-data.js: {}
              tables:
                big5-added.json: {}
                cp936.json: {}
                cp949.json: {}
                cp950.json: {}
                eucjp.json: {}
                gb18030-ranges.json: {}
                gbk-added.json: {}
                shiftjis.json: {}
              utf16.js: {}
              utf7.js: {}
            lib:
              bom-handling.js: {}
              extend-node.js: {}
              index.d.ts: {}
              index.js: {}
              streams.js: {}
            package.json: {}
          ms:
            index.js: {}
            license.md: {}
            package.json: {}
            readme.md: {}
        package.json: {}
      bonjour-service:
        LICENSE: {}
        README.md: {}
        dist:
          index.d.ts: {}
          index.js: {}
          index.js.map: {}
          lib:
            KeyValue.d.ts: {}
            KeyValue.js: {}
            KeyValue.js.map: {}
            browser.d.ts: {}
            browser.js: {}
            browser.js.map: {}
            dns-txt.d.ts: {}
            dns-txt.js: {}
            dns-txt.js.map: {}
            mdns-server.d.ts: {}
            mdns-server.js: {}
            mdns-server.js.map: {}
            registry.d.ts: {}
            registry.js: {}
            registry.js.map: {}
            service-types.d.ts: {}
            service-types.js: {}
            service-types.js.map: {}
            service.d.ts: {}
            service.js: {}
            service.js.map: {}
            utils:
              dns-equal.d.ts: {}
              dns-equal.js: {}
              dns-equal.js.map: {}
              equal-txt.d.ts: {}
              equal-txt.js: {}
              equal-txt.js.map: {}
              filter-service.d.ts: {}
              filter-service.js: {}
              filter-service.js.map: {}
              filter-txt.d.ts: {}
              filter-txt.js: {}
              filter-txt.js.map: {}
        package.json: {}
        types:
          multicast-dns.d.ts: {}
      boolbase:
        README.md: {}
        index.js: {}
        package.json: {}
      bootstrap:
        LICENSE: {}
        README.md: {}
        dist:
          css:
            bootstrap-grid.css: {}
            bootstrap-grid.css.map: {}
            bootstrap-grid.min.css: {}
            bootstrap-grid.min.css.map: {}
            bootstrap-grid.rtl.css: {}
            bootstrap-grid.rtl.css.map: {}
            bootstrap-grid.rtl.min.css: {}
            bootstrap-grid.rtl.min.css.map: {}
            bootstrap-reboot.css: {}
            bootstrap-reboot.css.map: {}
            bootstrap-reboot.min.css: {}
            bootstrap-reboot.min.css.map: {}
            bootstrap-reboot.rtl.css: {}
            bootstrap-reboot.rtl.css.map: {}
            bootstrap-reboot.rtl.min.css: {}
            bootstrap-reboot.rtl.min.css.map: {}
            bootstrap-utilities.css: {}
            bootstrap-utilities.css.map: {}
            bootstrap-utilities.min.css: {}
            bootstrap-utilities.min.css.map: {}
            bootstrap-utilities.rtl.css: {}
            bootstrap-utilities.rtl.css.map: {}
            bootstrap-utilities.rtl.min.css: {}
            bootstrap-utilities.rtl.min.css.map: {}
            bootstrap.css: {}
            bootstrap.css.map: {}
            bootstrap.min.css: {}
            bootstrap.min.css.map: {}
            bootstrap.rtl.css: {}
            bootstrap.rtl.css.map: {}
            bootstrap.rtl.min.css: {}
            bootstrap.rtl.min.css.map: {}
          js:
            bootstrap.bundle.js: {}
            bootstrap.bundle.js.map: {}
            bootstrap.bundle.min.js: {}
            bootstrap.bundle.min.js.map: {}
            bootstrap.esm.js: {}
            bootstrap.esm.js.map: {}
            bootstrap.esm.min.js: {}
            bootstrap.esm.min.js.map: {}
            bootstrap.js: {}
            bootstrap.js.map: {}
            bootstrap.min.js: {}
            bootstrap.min.js.map: {}
        js:
          dist:
            alert.js: {}
            alert.js.map: {}
            base-component.js: {}
            base-component.js.map: {}
            button.js: {}
            button.js.map: {}
            carousel.js: {}
            carousel.js.map: {}
            collapse.js: {}
            collapse.js.map: {}
            dom:
              data.js: {}
              data.js.map: {}
              event-handler.js: {}
              event-handler.js.map: {}
              manipulator.js: {}
              manipulator.js.map: {}
              selector-engine.js: {}
              selector-engine.js.map: {}
            dropdown.js: {}
            dropdown.js.map: {}
            modal.js: {}
            modal.js.map: {}
            offcanvas.js: {}
            offcanvas.js.map: {}
            popover.js: {}
            popover.js.map: {}
            scrollspy.js: {}
            scrollspy.js.map: {}
            tab.js: {}
            tab.js.map: {}
            toast.js: {}
            toast.js.map: {}
            tooltip.js: {}
            tooltip.js.map: {}
            util:
              backdrop.js: {}
              backdrop.js.map: {}
              component-functions.js: {}
              component-functions.js.map: {}
              config.js: {}
              config.js.map: {}
              focustrap.js: {}
              focustrap.js.map: {}
              index.js: {}
              index.js.map: {}
              sanitizer.js: {}
              sanitizer.js.map: {}
              scrollbar.js: {}
              scrollbar.js.map: {}
              swipe.js: {}
              swipe.js.map: {}
              template-factory.js: {}
              template-factory.js.map: {}
          index.esm.js: {}
          index.umd.js: {}
          src:
            alert.js: {}
            base-component.js: {}
            button.js: {}
            carousel.js: {}
            collapse.js: {}
            dom:
              data.js: {}
              event-handler.js: {}
              manipulator.js: {}
              selector-engine.js: {}
            dropdown.js: {}
            modal.js: {}
            offcanvas.js: {}
            popover.js: {}
            scrollspy.js: {}
            tab.js: {}
            toast.js: {}
            tooltip.js: {}
            util:
              backdrop.js: {}
              component-functions.js: {}
              config.js: {}
              focustrap.js: {}
              index.js: {}
              sanitizer.js: {}
              scrollbar.js: {}
              swipe.js: {}
              template-factory.js: {}
        package.json: {}
        scss:
          _accordion.scss: {}
          _alert.scss: {}
          _badge.scss: {}
          _breadcrumb.scss: {}
          _button-group.scss: {}
          _buttons.scss: {}
          _card.scss: {}
          _carousel.scss: {}
          _close.scss: {}
          _containers.scss: {}
          _dropdown.scss: {}
          _forms.scss: {}
          _functions.scss: {}
          _grid.scss: {}
          _helpers.scss: {}
          _images.scss: {}
          _list-group.scss: {}
          _maps.scss: {}
          _mixins.scss: {}
          _modal.scss: {}
          _nav.scss: {}
          _navbar.scss: {}
          _offcanvas.scss: {}
          _pagination.scss: {}
          _placeholders.scss: {}
          _popover.scss: {}
          _progress.scss: {}
          _reboot.scss: {}
          _root.scss: {}
          _spinners.scss: {}
          _tables.scss: {}
          _toasts.scss: {}
          _tooltip.scss: {}
          _transitions.scss: {}
          _type.scss: {}
          _utilities.scss: {}
          _variables-dark.scss: {}
          _variables.scss: {}
          bootstrap-grid.scss: {}
          bootstrap-reboot.scss: {}
          bootstrap-utilities.scss: {}
          bootstrap.scss: {}
          forms:
            _floating-labels.scss: {}
            _form-check.scss: {}
            _form-control.scss: {}
            _form-range.scss: {}
            _form-select.scss: {}
            _form-text.scss: {}
            _input-group.scss: {}
            _labels.scss: {}
            _validation.scss: {}
          helpers:
            _clearfix.scss: {}
            _color-bg.scss: {}
            _colored-links.scss: {}
            _focus-ring.scss: {}
            _icon-link.scss: {}
            _position.scss: {}
            _ratio.scss: {}
            _stacks.scss: {}
            _stretched-link.scss: {}
            _text-truncation.scss: {}
            _visually-hidden.scss: {}
            _vr.scss: {}
          mixins:
            _alert.scss: {}
            _backdrop.scss: {}
            _banner.scss: {}
            _border-radius.scss: {}
            _box-shadow.scss: {}
            _breakpoints.scss: {}
            _buttons.scss: {}
            _caret.scss: {}
            _clearfix.scss: {}
            _color-mode.scss: {}
            _color-scheme.scss: {}
            _container.scss: {}
            _deprecate.scss: {}
            _forms.scss: {}
            _gradients.scss: {}
            _grid.scss: {}
            _image.scss: {}
            _list-group.scss: {}
            _lists.scss: {}
            _pagination.scss: {}
            _reset-text.scss: {}
            _resize.scss: {}
            _table-variants.scss: {}
            _text-truncate.scss: {}
            _transition.scss: {}
            _utilities.scss: {}
            _visually-hidden.scss: {}
          utilities:
            _api.scss: {}
          vendor:
            _rfs.scss: {}
      brace-expansion:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      braces:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        lib:
          compile.js: {}
          constants.js: {}
          expand.js: {}
          parse.js: {}
          stringify.js: {}
          utils.js: {}
        package.json: {}
      browser-process-hrtime:
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
      browserslist:
        LICENSE: {}
        README.md: {}
        browser.js: {}
        cli.js: {}
        error.d.ts: {}
        error.js: {}
        index.d.ts: {}
        index.js: {}
        node.js: {}
        package.json: {}
        parse.js: {}
      bser:
        README.md: {}
        index.js: {}
        package.json: {}
      buffer-from:
        LICENSE: {}
        index.js: {}
        package.json: {}
        readme.md: {}
      builtin-modules:
        builtin-modules.json: {}
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
        static.d.ts: {}
        static.js: {}
      bytes:
        History.md: {}
        LICENSE: {}
        Readme.md: {}
        index.js: {}
        package.json: {}
      call-bind:
        .eslintignore: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        callBound.js: {}
        index.js: {}
        package.json: {}
        test:
          callBound.js: {}
          index.js: {}
      callsites:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      camel-case:
        LICENSE: {}
        README.md: {}
        dist:
          index.d.ts: {}
          index.js: {}
          index.js.map: {}
          index.spec.d.ts: {}
          index.spec.js: {}
          index.spec.js.map: {}
        dist.es2015:
          index.d.ts: {}
          index.js: {}
          index.js.map: {}
          index.spec.d.ts: {}
          index.spec.js: {}
          index.spec.js.map: {}
        package.json: {}
      camelcase:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      camelcase-css:
        README.md: {}
        index-es5.js: {}
        index.js: {}
        license: {}
        package.json: {}
      caniuse-api:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        dist:
          index.js: {}
          utils.js: {}
        package.json: {}
      caniuse-lite:
        LICENSE: {}
        README.md: {}
        data:
          agents.js: {}
          browserVersions.js: {}
          browsers.js: {}
          features:
            aac.js: {}
            abortcontroller.js: {}
            ac3-ec3.js: {}
            accelerometer.js: {}
            addeventlistener.js: {}
            alternate-stylesheet.js: {}
            ambient-light.js: {}
            apng.js: {}
            array-find-index.js: {}
            array-find.js: {}
            array-flat.js: {}
            array-includes.js: {}
            arrow-functions.js: {}
            asmjs.js: {}
            async-clipboard.js: {}
            async-functions.js: {}
            atob-btoa.js: {}
            audio-api.js: {}
            audio.js: {}
            audiotracks.js: {}
            autofocus.js: {}
            auxclick.js: {}
            av1.js: {}
            avif.js: {}
            background-attachment.js: {}
            background-clip-text.js: {}
            background-img-opts.js: {}
            background-position-x-y.js: {}
            background-repeat-round-space.js: {}
            background-sync.js: {}
            battery-status.js: {}
            beacon.js: {}
            beforeafterprint.js: {}
            bigint.js: {}
            blobbuilder.js: {}
            bloburls.js: {}
            border-image.js: {}
            border-radius.js: {}
            broadcastchannel.js: {}
            brotli.js: {}
            calc.js: {}
            canvas-blending.js: {}
            canvas-text.js: {}
            canvas.js: {}
            ch-unit.js: {}
            chacha20-poly1305.js: {}
            channel-messaging.js: {}
            childnode-remove.js: {}
            classlist.js: {}
            client-hints-dpr-width-viewport.js: {}
            clipboard.js: {}
            colr-v1.js: {}
            colr.js: {}
            comparedocumentposition.js: {}
            console-basic.js: {}
            console-time.js: {}
            const.js: {}
            constraint-validation.js: {}
            contenteditable.js: {}
            contentsecuritypolicy.js: {}
            contentsecuritypolicy2.js: {}
            cookie-store-api.js: {}
            cors.js: {}
            createimagebitmap.js: {}
            credential-management.js: {}
            cryptography.js: {}
            css-all.js: {}
            css-anchor-positioning.js: {}
            css-animation.js: {}
            css-any-link.js: {}
            css-appearance.js: {}
            css-at-counter-style.js: {}
            css-autofill.js: {}
            css-backdrop-filter.js: {}
            css-background-offsets.js: {}
            css-backgroundblendmode.js: {}
            css-boxdecorationbreak.js: {}
            css-boxshadow.js: {}
            css-canvas.js: {}
            css-caret-color.js: {}
            css-cascade-layers.js: {}
            css-cascade-scope.js: {}
            css-case-insensitive.js: {}
            css-clip-path.js: {}
            css-color-adjust.js: {}
            css-color-function.js: {}
            css-conic-gradients.js: {}
            css-container-queries-style.js: {}
            css-container-queries.js: {}
            css-container-query-units.js: {}
            css-containment.js: {}
            css-content-visibility.js: {}
            css-counters.js: {}
            css-crisp-edges.js: {}
            css-cross-fade.js: {}
            css-default-pseudo.js: {}
            css-descendant-gtgt.js: {}
            css-deviceadaptation.js: {}
            css-dir-pseudo.js: {}
            css-display-contents.js: {}
            css-element-function.js: {}
            css-env-function.js: {}
            css-exclusions.js: {}
            css-featurequeries.js: {}
            css-file-selector-button.js: {}
            css-filter-function.js: {}
            css-filters.js: {}
            css-first-letter.js: {}
            css-first-line.js: {}
            css-fixed.js: {}
            css-focus-visible.js: {}
            css-focus-within.js: {}
            css-font-palette.js: {}
            css-font-rendering-controls.js: {}
            css-font-stretch.js: {}
            css-gencontent.js: {}
            css-gradients.js: {}
            css-grid-animation.js: {}
            css-grid.js: {}
            css-hanging-punctuation.js: {}
            css-has.js: {}
            css-hyphens.js: {}
            css-image-orientation.js: {}
            css-image-set.js: {}
            css-in-out-of-range.js: {}
            css-indeterminate-pseudo.js: {}
            css-initial-letter.js: {}
            css-initial-value.js: {}
            css-lch-lab.js: {}
            css-letter-spacing.js: {}
            css-line-clamp.js: {}
            css-logical-props.js: {}
            css-marker-pseudo.js: {}
            css-masks.js: {}
            css-matches-pseudo.js: {}
            css-math-functions.js: {}
            css-media-interaction.js: {}
            css-media-range-syntax.js: {}
            css-media-resolution.js: {}
            css-media-scripting.js: {}
            css-mediaqueries.js: {}
            css-mixblendmode.js: {}
            css-module-scripts.js: {}
            css-motion-paths.js: {}
            css-namespaces.js: {}
            css-nesting.js: {}
            css-not-sel-list.js: {}
            css-nth-child-of.js: {}
            css-opacity.js: {}
            css-optional-pseudo.js: {}
            css-overflow-anchor.js: {}
            css-overflow-overlay.js: {}
            css-overflow.js: {}
            css-overscroll-behavior.js: {}
            css-page-break.js: {}
            css-paged-media.js: {}
            css-paint-api.js: {}
            css-placeholder-shown.js: {}
            css-placeholder.js: {}
            css-print-color-adjust.js: {}
            css-read-only-write.js: {}
            css-rebeccapurple.js: {}
            css-reflections.js: {}
            css-regions.js: {}
            css-relative-colors.js: {}
            css-repeating-gradients.js: {}
            css-resize.js: {}
            css-revert-value.js: {}
            css-rrggbbaa.js: {}
            css-scroll-behavior.js: {}
            css-scroll-timeline.js: {}
            css-scrollbar.js: {}
            css-sel2.js: {}
            css-sel3.js: {}
            css-selection.js: {}
            css-shapes.js: {}
            css-snappoints.js: {}
            css-sticky.js: {}
            css-subgrid.js: {}
            css-supports-api.js: {}
            css-table.js: {}
            css-text-align-last.js: {}
            css-text-box-trim.js: {}
            css-text-indent.js: {}
            css-text-justify.js: {}
            css-text-orientation.js: {}
            css-text-spacing.js: {}
            css-text-wrap-balance.js: {}
            css-textshadow.js: {}
            css-touch-action.js: {}
            css-transitions.js: {}
            css-unicode-bidi.js: {}
            css-unset-value.js: {}
            css-variables.js: {}
            css-when-else.js: {}
            css-widows-orphans.js: {}
            css-width-stretch.js: {}
            css-writing-mode.js: {}
            css-zoom.js: {}
            css3-attr.js: {}
            css3-boxsizing.js: {}
            css3-colors.js: {}
            css3-cursors-grab.js: {}
            css3-cursors-newer.js: {}
            css3-cursors.js: {}
            css3-tabsize.js: {}
            currentcolor.js: {}
            custom-elements.js: {}
            custom-elementsv1.js: {}
            customevent.js: {}
            datalist.js: {}
            dataset.js: {}
            datauri.js: {}
            date-tolocaledatestring.js: {}
            declarative-shadow-dom.js: {}
            decorators.js: {}
            details.js: {}
            deviceorientation.js: {}
            devicepixelratio.js: {}
            dialog.js: {}
            dispatchevent.js: {}
            dnssec.js: {}
            do-not-track.js: {}
            document-currentscript.js: {}
            document-evaluate-xpath.js: {}
            document-execcommand.js: {}
            document-policy.js: {}
            document-scrollingelement.js: {}
            documenthead.js: {}
            dom-manip-convenience.js: {}
            dom-range.js: {}
            domcontentloaded.js: {}
            dommatrix.js: {}
            download.js: {}
            dragndrop.js: {}
            element-closest.js: {}
            element-from-point.js: {}
            element-scroll-methods.js: {}
            eme.js: {}
            eot.js: {}
            es5.js: {}
            es6-class.js: {}
            es6-generators.js: {}
            es6-module-dynamic-import.js: {}
            es6-module.js: {}
            es6-number.js: {}
            es6-string-includes.js: {}
            es6.js: {}
            eventsource.js: {}
            extended-system-fonts.js: {}
            feature-policy.js: {}
            fetch.js: {}
            fieldset-disabled.js: {}
            fileapi.js: {}
            filereader.js: {}
            filereadersync.js: {}
            filesystem.js: {}
            flac.js: {}
            flexbox-gap.js: {}
            flexbox.js: {}
            flow-root.js: {}
            focusin-focusout-events.js: {}
            font-family-system-ui.js: {}
            font-feature.js: {}
            font-kerning.js: {}
            font-loading.js: {}
            font-size-adjust.js: {}
            font-smooth.js: {}
            font-unicode-range.js: {}
            font-variant-alternates.js: {}
            font-variant-numeric.js: {}
            fontface.js: {}
            form-attribute.js: {}
            form-submit-attributes.js: {}
            form-validation.js: {}
            forms.js: {}
            fullscreen.js: {}
            gamepad.js: {}
            geolocation.js: {}
            getboundingclientrect.js: {}
            getcomputedstyle.js: {}
            getelementsbyclassname.js: {}
            getrandomvalues.js: {}
            gyroscope.js: {}
            hardwareconcurrency.js: {}
            hashchange.js: {}
            heif.js: {}
            hevc.js: {}
            hidden.js: {}
            high-resolution-time.js: {}
            history.js: {}
            html-media-capture.js: {}
            html5semantic.js: {}
            http-live-streaming.js: {}
            http2.js: {}
            http3.js: {}
            iframe-sandbox.js: {}
            iframe-seamless.js: {}
            iframe-srcdoc.js: {}
            imagecapture.js: {}
            ime.js: {}
            img-naturalwidth-naturalheight.js: {}
            import-maps.js: {}
            imports.js: {}
            indeterminate-checkbox.js: {}
            indexeddb.js: {}
            indexeddb2.js: {}
            inline-block.js: {}
            innertext.js: {}
            input-autocomplete-onoff.js: {}
            input-color.js: {}
            input-datetime.js: {}
            input-email-tel-url.js: {}
            input-event.js: {}
            input-file-accept.js: {}
            input-file-directory.js: {}
            input-file-multiple.js: {}
            input-inputmode.js: {}
            input-minlength.js: {}
            input-number.js: {}
            input-pattern.js: {}
            input-placeholder.js: {}
            input-range.js: {}
            input-search.js: {}
            input-selection.js: {}
            insert-adjacent.js: {}
            insertadjacenthtml.js: {}
            internationalization.js: {}
            intersectionobserver-v2.js: {}
            intersectionobserver.js: {}
            intl-pluralrules.js: {}
            intrinsic-width.js: {}
            jpeg2000.js: {}
            jpegxl.js: {}
            jpegxr.js: {}
            js-regexp-lookbehind.js: {}
            json.js: {}
            justify-content-space-evenly.js: {}
            kerning-pairs-ligatures.js: {}
            keyboardevent-charcode.js: {}
            keyboardevent-code.js: {}
            keyboardevent-getmodifierstate.js: {}
            keyboardevent-key.js: {}
            keyboardevent-location.js: {}
            keyboardevent-which.js: {}
            lazyload.js: {}
            let.js: {}
            link-icon-png.js: {}
            link-icon-svg.js: {}
            link-rel-dns-prefetch.js: {}
            link-rel-modulepreload.js: {}
            link-rel-preconnect.js: {}
            link-rel-prefetch.js: {}
            link-rel-preload.js: {}
            link-rel-prerender.js: {}
            loading-lazy-attr.js: {}
            localecompare.js: {}
            magnetometer.js: {}
            matchesselector.js: {}
            matchmedia.js: {}
            mathml.js: {}
            maxlength.js: {}
            mdn-css-backdrop-pseudo-element.js: {}
            mdn-css-unicode-bidi-isolate-override.js: {}
            mdn-css-unicode-bidi-isolate.js: {}
            mdn-css-unicode-bidi-plaintext.js: {}
            mdn-text-decoration-color.js: {}
            mdn-text-decoration-line.js: {}
            mdn-text-decoration-shorthand.js: {}
            mdn-text-decoration-style.js: {}
            media-fragments.js: {}
            mediacapture-fromelement.js: {}
            mediarecorder.js: {}
            mediasource.js: {}
            menu.js: {}
            meta-theme-color.js: {}
            meter.js: {}
            midi.js: {}
            minmaxwh.js: {}
            mp3.js: {}
            mpeg-dash.js: {}
            mpeg4.js: {}
            multibackgrounds.js: {}
            multicolumn.js: {}
            mutation-events.js: {}
            mutationobserver.js: {}
            namevalue-storage.js: {}
            native-filesystem-api.js: {}
            nav-timing.js: {}
            netinfo.js: {}
            notifications.js: {}
            object-entries.js: {}
            object-fit.js: {}
            object-observe.js: {}
            object-values.js: {}
            objectrtc.js: {}
            offline-apps.js: {}
            offscreencanvas.js: {}
            ogg-vorbis.js: {}
            ogv.js: {}
            ol-reversed.js: {}
            once-event-listener.js: {}
            online-status.js: {}
            opus.js: {}
            orientation-sensor.js: {}
            outline.js: {}
            pad-start-end.js: {}
            page-transition-events.js: {}
            pagevisibility.js: {}
            passive-event-listener.js: {}
            passkeys.js: {}
            passwordrules.js: {}
            path2d.js: {}
            payment-request.js: {}
            pdf-viewer.js: {}
            permissions-api.js: {}
            permissions-policy.js: {}
            picture-in-picture.js: {}
            picture.js: {}
            ping.js: {}
            png-alpha.js: {}
            pointer-events.js: {}
            pointer.js: {}
            pointerlock.js: {}
            portals.js: {}
            prefers-color-scheme.js: {}
            prefers-reduced-motion.js: {}
            progress.js: {}
            promise-finally.js: {}
            promises.js: {}
            proximity.js: {}
            proxy.js: {}
            publickeypinning.js: {}
            push-api.js: {}
            queryselector.js: {}
            readonly-attr.js: {}
            referrer-policy.js: {}
            registerprotocolhandler.js: {}
            rel-noopener.js: {}
            rel-noreferrer.js: {}
            rellist.js: {}
            rem.js: {}
            requestanimationframe.js: {}
            requestidlecallback.js: {}
            resizeobserver.js: {}
            resource-timing.js: {}
            rest-parameters.js: {}
            rtcpeerconnection.js: {}
            ruby.js: {}
            run-in.js: {}
            same-site-cookie-attribute.js: {}
            screen-orientation.js: {}
            script-async.js: {}
            script-defer.js: {}
            scrollintoview.js: {}
            scrollintoviewifneeded.js: {}
            sdch.js: {}
            selection-api.js: {}
            selectlist.js: {}
            server-timing.js: {}
            serviceworkers.js: {}
            setimmediate.js: {}
            shadowdom.js: {}
            shadowdomv1.js: {}
            sharedarraybuffer.js: {}
            sharedworkers.js: {}
            sni.js: {}
            spdy.js: {}
            speech-recognition.js: {}
            speech-synthesis.js: {}
            spellcheck-attribute.js: {}
            sql-storage.js: {}
            srcset.js: {}
            stream.js: {}
            streams.js: {}
            stricttransportsecurity.js: {}
            style-scoped.js: {}
            subresource-bundling.js: {}
            subresource-integrity.js: {}
            svg-css.js: {}
            svg-filters.js: {}
            svg-fonts.js: {}
            svg-fragment.js: {}
            svg-html.js: {}
            svg-html5.js: {}
            svg-img.js: {}
            svg-smil.js: {}
            svg.js: {}
            sxg.js: {}
            tabindex-attr.js: {}
            template-literals.js: {}
            template.js: {}
            temporal.js: {}
            testfeat.js: {}
            text-decoration.js: {}
            text-emphasis.js: {}
            text-overflow.js: {}
            text-size-adjust.js: {}
            text-stroke.js: {}
            textcontent.js: {}
            textencoder.js: {}
            tls1-1.js: {}
            tls1-2.js: {}
            tls1-3.js: {}
            touch.js: {}
            transforms2d.js: {}
            transforms3d.js: {}
            trusted-types.js: {}
            ttf.js: {}
            typedarrays.js: {}
            u2f.js: {}
            unhandledrejection.js: {}
            upgradeinsecurerequests.js: {}
            url-scroll-to-text-fragment.js: {}
            url.js: {}
            urlsearchparams.js: {}
            use-strict.js: {}
            user-select-none.js: {}
            user-timing.js: {}
            variable-fonts.js: {}
            vector-effect.js: {}
            vibration.js: {}
            video.js: {}
            videotracks.js: {}
            view-transitions.js: {}
            viewport-unit-variants.js: {}
            viewport-units.js: {}
            wai-aria.js: {}
            wake-lock.js: {}
            wasm-bigint.js: {}
            wasm-bulk-memory.js: {}
            wasm-extended-const.js: {}
            wasm-gc.js: {}
            wasm-multi-memory.js: {}
            wasm-multi-value.js: {}
            wasm-mutable-globals.js: {}
            wasm-nontrapping-fptoint.js: {}
            wasm-reference-types.js: {}
            wasm-relaxed-simd.js: {}
            wasm-signext.js: {}
            wasm-simd.js: {}
            wasm-tail-calls.js: {}
            wasm-threads.js: {}
            wasm.js: {}
            wav.js: {}
            wbr-element.js: {}
            web-animation.js: {}
            web-app-manifest.js: {}
            web-bluetooth.js: {}
            web-serial.js: {}
            web-share.js: {}
            webauthn.js: {}
            webcodecs.js: {}
            webgl.js: {}
            webgl2.js: {}
            webgpu.js: {}
            webhid.js: {}
            webkit-user-drag.js: {}
            webm.js: {}
            webnfc.js: {}
            webp.js: {}
            websockets.js: {}
            webtransport.js: {}
            webusb.js: {}
            webvr.js: {}
            webvtt.js: {}
            webworkers.js: {}
            webxr.js: {}
            will-change.js: {}
            woff.js: {}
            woff2.js: {}
            word-break.js: {}
            wordwrap.js: {}
            x-doc-messaging.js: {}
            x-frame-options.js: {}
            xhr2.js: {}
            xhtml.js: {}
            xhtmlsmil.js: {}
            xml-serializer.js: {}
            zstd.js: {}
          features.js: {}
          regions:
            AD.js: {}
            AE.js: {}
            AF.js: {}
            AG.js: {}
            AI.js: {}
            AL.js: {}
            AM.js: {}
            AO.js: {}
            AR.js: {}
            AS.js: {}
            AT.js: {}
            AU.js: {}
            AW.js: {}
            AX.js: {}
            AZ.js: {}
            BA.js: {}
            BB.js: {}
            BD.js: {}
            BE.js: {}
            BF.js: {}
            BG.js: {}
            BH.js: {}
            BI.js: {}
            BJ.js: {}
            BM.js: {}
            BN.js: {}
            BO.js: {}
            BR.js: {}
            BS.js: {}
            BT.js: {}
            BW.js: {}
            BY.js: {}
            BZ.js: {}
            CA.js: {}
            CD.js: {}
            CF.js: {}
            CG.js: {}
            CH.js: {}
            CI.js: {}
            CK.js: {}
            CL.js: {}
            CM.js: {}
            CN.js: {}
            CO.js: {}
            CR.js: {}
            CU.js: {}
            CV.js: {}
            CX.js: {}
            CY.js: {}
            CZ.js: {}
            DE.js: {}
            DJ.js: {}
            DK.js: {}
            DM.js: {}
            DO.js: {}
            DZ.js: {}
            EC.js: {}
            EE.js: {}
            EG.js: {}
            ER.js: {}
            ES.js: {}
            ET.js: {}
            FI.js: {}
            FJ.js: {}
            FK.js: {}
            FM.js: {}
            FO.js: {}
            FR.js: {}
            GA.js: {}
            GB.js: {}
            GD.js: {}
            GE.js: {}
            GF.js: {}
            GG.js: {}
            GH.js: {}
            GI.js: {}
            GL.js: {}
            GM.js: {}
            GN.js: {}
            GP.js: {}
            GQ.js: {}
            GR.js: {}
            GT.js: {}
            GU.js: {}
            GW.js: {}
            GY.js: {}
            HK.js: {}
            HN.js: {}
            HR.js: {}
            HT.js: {}
            HU.js: {}
            ID.js: {}
            IE.js: {}
            IL.js: {}
            IM.js: {}
            IN.js: {}
            IQ.js: {}
            IR.js: {}
            IS.js: {}
            IT.js: {}
            JE.js: {}
            JM.js: {}
            JO.js: {}
            JP.js: {}
            KE.js: {}
            KG.js: {}
            KH.js: {}
            KI.js: {}
            KM.js: {}
            KN.js: {}
            KP.js: {}
            KR.js: {}
            KW.js: {}
            KY.js: {}
            KZ.js: {}
            LA.js: {}
            LB.js: {}
            LC.js: {}
            LI.js: {}
            LK.js: {}
            LR.js: {}
            LS.js: {}
            LT.js: {}
            LU.js: {}
            LV.js: {}
            LY.js: {}
            MA.js: {}
            MC.js: {}
            MD.js: {}
            ME.js: {}
            MG.js: {}
            MH.js: {}
            MK.js: {}
            ML.js: {}
            MM.js: {}
            MN.js: {}
            MO.js: {}
            MP.js: {}
            MQ.js: {}
            MR.js: {}
            MS.js: {}
            MT.js: {}
            MU.js: {}
            MV.js: {}
            MW.js: {}
            MX.js: {}
            MY.js: {}
            MZ.js: {}
            NA.js: {}
            NC.js: {}
            NE.js: {}
            NF.js: {}
            NG.js: {}
            NI.js: {}
            NL.js: {}
            NO.js: {}
            NP.js: {}
            NR.js: {}
            NU.js: {}
            NZ.js: {}
            OM.js: {}
            PA.js: {}
            PE.js: {}
            PF.js: {}
            PG.js: {}
            PH.js: {}
            PK.js: {}
            PL.js: {}
            PM.js: {}
            PN.js: {}
            PR.js: {}
            PS.js: {}
            PT.js: {}
            PW.js: {}
            PY.js: {}
            QA.js: {}
            RE.js: {}
            RO.js: {}
            RS.js: {}
            RU.js: {}
            RW.js: {}
            SA.js: {}
            SB.js: {}
            SC.js: {}
            SD.js: {}
            SE.js: {}
            SG.js: {}
            SH.js: {}
            SI.js: {}
            SK.js: {}
            SL.js: {}
            SM.js: {}
            SN.js: {}
            SO.js: {}
            SR.js: {}
            ST.js: {}
            SV.js: {}
            SY.js: {}
            SZ.js: {}
            TC.js: {}
            TD.js: {}
            TG.js: {}
            TH.js: {}
            TJ.js: {}
            TK.js: {}
            TL.js: {}
            TM.js: {}
            TN.js: {}
            TO.js: {}
            TR.js: {}
            TT.js: {}
            TV.js: {}
            TW.js: {}
            TZ.js: {}
            UA.js: {}
            UG.js: {}
            US.js: {}
            UY.js: {}
            UZ.js: {}
            VA.js: {}
            VC.js: {}
            VE.js: {}
            VG.js: {}
            VI.js: {}
            VN.js: {}
            VU.js: {}
            WF.js: {}
            WS.js: {}
            YE.js: {}
            YT.js: {}
            ZA.js: {}
            ZM.js: {}
            ZW.js: {}
            alt-af.js: {}
            alt-an.js: {}
            alt-as.js: {}
            alt-eu.js: {}
            alt-na.js: {}
            alt-oc.js: {}
            alt-sa.js: {}
            alt-ww.js: {}
        dist:
          lib:
            statuses.js: {}
            supported.js: {}
          unpacker:
            agents.js: {}
            browserVersions.js: {}
            browsers.js: {}
            feature.js: {}
            features.js: {}
            index.js: {}
            region.js: {}
        package.json: {}
      case-sensitive-paths-webpack-plugin:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      ccount:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      chalk:
        index.js: {}
        index.js.flow: {}
        license: {}
        package.json: {}
        readme.md: {}
        templates.js: {}
        types:
          index.d.ts: {}
      char-regex:
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
      character-entities:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      character-entities-html4:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      character-entities-legacy:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      character-reference-invalid:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      charm:
        README.markdown: {}
        example:
          256.js: {}
          column.js: {}
          cursor.js: {}
          http_spin.js: {}
          lucky.js: {}
          position.js: {}
          progress.js: {}
          resize.js: {}
          spin.js: {}
        index.js: {}
        lib:
          encode.js: {}
        package.json: {}
      check-types:
        COPYING: {}
        README.md: {}
        package.json: {}
        src:
          check-types.js: {}
          check-types.min.js: {}
      chokidar:
        LICENSE: {}
        README.md: {}
        index.js: {}
        lib:
          constants.js: {}
          fsevents-handler.js: {}
          nodefs-handler.js: {}
        node_modules:
          glob-parent:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
        package.json: {}
        types:
          index.d.ts: {}
      chrome-trace-event:
        CHANGES.md: {}
        LICENSE.txt: {}
        README.md: {}
        dist:
          trace-event.d.ts: {}
          trace-event.js: {}
          trace-event.js.map: {}
        package.json: {}
      ci-info:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        vendors.json: {}
      cjs-module-lexer:
        LICENSE: {}
        README.md: {}
        dist:
          lexer.js: {}
          lexer.mjs: {}
        lexer.d.ts: {}
        lexer.js: {}
        package.json: {}
      classnames:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        bind.d.ts: {}
        bind.js: {}
        dedupe.d.ts: {}
        dedupe.js: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
      clean-css:
        History.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        lib:
          clean.js: {}
          optimizer:
            clone.js: {}
            configuration:
              break-up.js: {}
              can-override.js: {}
              properties:
                understandable.js: {}
              restore.js: {}
            configuration.js: {}
            hack.js: {}
            invalid-property-error.js: {}
            level-0:
              optimize.js: {}
            level-1:
              optimize.js: {}
              property-optimizers:
                background.js: {}
                border-radius.js: {}
                box-shadow.js: {}
                filter.js: {}
                font-weight.js: {}
                margin.js: {}
                outline.js: {}
                padding.js: {}
              property-optimizers.js: {}
              sort-selectors.js: {}
              tidy-at-rule.js: {}
              tidy-block.js: {}
              tidy-rules.js: {}
              value-optimizers:
                color:
                  shorten-hex.js: {}
                  shorten-hsl.js: {}
                  shorten-rgb.js: {}
                color.js: {}
                degrees.js: {}
                fraction.js: {}
                precision.js: {}
                starts-as-url.js: {}
                text-quotes.js: {}
                time.js: {}
                unit.js: {}
                url-prefix.js: {}
                url-quotes.js: {}
                url-whitespace.js: {}
                whitespace.js: {}
                zero.js: {}
              value-optimizers.js: {}
            level-2:
              extract-properties.js: {}
              is-mergeable.js: {}
              merge-adjacent.js: {}
              merge-media-queries.js: {}
              merge-non-adjacent-by-body.js: {}
              merge-non-adjacent-by-selector.js: {}
              optimize.js: {}
              properties:
                every-values-pair.js: {}
                find-component-in.js: {}
                has-inherit.js: {}
                has-same-values.js: {}
                has-unset.js: {}
                is-component-of.js: {}
                is-mergeable-shorthand.js: {}
                merge-into-shorthands.js: {}
                optimize.js: {}
                override-properties.js: {}
                overrides-non-component-shorthand.js: {}
                populate-components.js: {}
              reduce-non-adjacent.js: {}
              remove-duplicate-font-at-rules.js: {}
              remove-duplicate-media-queries.js: {}
              remove-duplicates.js: {}
              remove-unused-at-rules.js: {}
              reorderable.js: {}
              restore-with-components.js: {}
              restructure.js: {}
              rules-overlap.js: {}
              specificities-overlap.js: {}
              specificity.js: {}
              tidy-rule-duplicates.js: {}
            remove-unused.js: {}
            restore-from-optimizing.js: {}
            validator.js: {}
            vendor-prefixes.js: {}
            wrap-for-optimizing.js: {}
          options:
            compatibility.js: {}
            fetch.js: {}
            format.js: {}
            inline-request.js: {}
            inline-timeout.js: {}
            inline.js: {}
            optimization-level.js: {}
            plugins.js: {}
            rebase-to.js: {}
            rebase.js: {}
            rounding-precision.js: {}
          reader:
            apply-source-maps.js: {}
            extract-import-url-and-media.js: {}
            input-source-map-tracker.js: {}
            is-allowed-resource.js: {}
            load-original-sources.js: {}
            load-remote-resource.js: {}
            match-data-uri.js: {}
            normalize-path.js: {}
            read-sources.js: {}
            rebase-local-map.js: {}
            rebase-remote-map.js: {}
            rebase.js: {}
            restore-import.js: {}
            rewrite-url.js: {}
          tokenizer:
            marker.js: {}
            token.js: {}
            tokenize.js: {}
          utils:
            clone-array.js: {}
            format-position.js: {}
            has-protocol.js: {}
            is-data-uri-resource.js: {}
            is-http-resource.js: {}
            is-https-resource.js: {}
            is-import.js: {}
            is-remote-resource.js: {}
            natural-compare.js: {}
            override.js: {}
            split.js: {}
          writer:
            helpers.js: {}
            one-time.js: {}
            simple.js: {}
            source-maps.js: {}
        node_modules:
          source-map:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            dist:
              source-map.debug.js: {}
              source-map.js: {}
              source-map.min.js: {}
              source-map.min.js.map: {}
            lib:
              array-set.js: {}
              base64-vlq.js: {}
              base64.js: {}
              binary-search.js: {}
              mapping-list.js: {}
              quick-sort.js: {}
              source-map-consumer.js: {}
              source-map-generator.js: {}
              source-node.js: {}
              util.js: {}
            package.json: {}
            source-map.d.ts: {}
            source-map.js: {}
        package.json: {}
      cli-tableau:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        lib:
          index.js: {}
          utils.js: {}
        node_modules:
          ansi-styles:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          chalk:
            index.d.ts: {}
            license: {}
            package.json: {}
            readme.md: {}
            source:
              index.js: {}
              templates.js: {}
              util.js: {}
          color-convert:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            conversions.js: {}
            index.js: {}
            package.json: {}
            route.js: {}
          color-name:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
      cliui:
        CHANGELOG.md: {}
        LICENSE.txt: {}
        README.md: {}
        build:
          index.cjs: {}
          lib:
            index.js: {}
            string-utils.js: {}
        index.mjs: {}
        package.json: {}
      co:
        History.md: {}
        LICENSE: {}
        Readme.md: {}
        index.js: {}
        package.json: {}
      coa:
        LICENSE: {}
        README.md: {}
        README.ru.md: {}
        coa.d.ts: {}
        index.js: {}
        lib:
          arg.js: {}
          cmd.js: {}
          coaobject.js: {}
          coaparam.js: {}
          completion.js: {}
          completion.sh: {}
          index.js: {}
          opt.js: {}
          shell.js: {}
        package.json: {}
      collect-v8-coverage:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
      color-convert:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        conversions.js: {}
        index.js: {}
        package.json: {}
        route.js: {}
      color-name:
        .eslintrc.json: {}
        .npmignore: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test.js: {}
      colord:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        colord.d.ts: {}
        constants.d.ts: {}
        extend.d.ts: {}
        helpers.d.ts: {}
        index.d.ts: {}
        index.js: {}
        index.mjs: {}
        package.json: {}
        parse.d.ts: {}
        plugins:
          a11y.d.ts: {}
          a11y.js: {}
          a11y.mjs: {}
          cmyk.d.ts: {}
          cmyk.js: {}
          cmyk.mjs: {}
          harmonies.d.ts: {}
          harmonies.js: {}
          harmonies.mjs: {}
          hwb.d.ts: {}
          hwb.js: {}
          hwb.mjs: {}
          lab.d.ts: {}
          lab.js: {}
          lab.mjs: {}
          lch.d.ts: {}
          lch.js: {}
          lch.mjs: {}
          minify.d.ts: {}
          minify.js: {}
          minify.mjs: {}
          mix.d.ts: {}
          mix.js: {}
          mix.mjs: {}
          names.d.ts: {}
          names.js: {}
          names.mjs: {}
          xyz.d.ts: {}
          xyz.js: {}
          xyz.mjs: {}
        random.d.ts: {}
        types.d.ts: {}
      colorette:
        LICENSE.md: {}
        README.md: {}
        index.cjs: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
      combined-stream:
        License: {}
        Readme.md: {}
        lib:
          combined_stream.js: {}
        package.json: {}
        yarn.lock: {}
      comma-separated-tokens:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      commander:
        LICENSE: {}
        Readme.md: {}
        esm.mjs: {}
        index.js: {}
        lib:
          argument.js: {}
          command.js: {}
          error.js: {}
          help.js: {}
          option.js: {}
          suggestSimilar.js: {}
        package-support.json: {}
        package.json: {}
        typings:
          index.d.ts: {}
      common-path-prefix:
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
      common-tags:
        dist:
          common-tags.min.js: {}
        es:
          TemplateTag:
            TemplateTag.js: {}
            index.js: {}
          codeBlock:
            index.js: {}
          commaLists:
            commaLists.js: {}
            index.js: {}
          commaListsAnd:
            commaListsAnd.js: {}
            index.js: {}
          commaListsOr:
            commaListsOr.js: {}
            index.js: {}
          html:
            html.js: {}
            index.js: {}
          index.js: {}
          inlineArrayTransformer:
            index.js: {}
            inlineArrayTransformer.js: {}
          inlineLists:
            index.js: {}
            inlineLists.js: {}
          oneLine:
            index.js: {}
            oneLine.js: {}
          oneLineCommaLists:
            index.js: {}
            oneLineCommaLists.js: {}
          oneLineCommaListsAnd:
            index.js: {}
            oneLineCommaListsAnd.js: {}
          oneLineCommaListsOr:
            index.js: {}
            oneLineCommaListsOr.js: {}
          oneLineInlineLists:
            index.js: {}
            oneLineInlineLists.js: {}
          oneLineTrim:
            index.js: {}
            oneLineTrim.js: {}
          removeNonPrintingValuesTransformer:
            index.js: {}
            removeNonPrintingValuesTransformer.js: {}
          replaceResultTransformer:
            index.js: {}
            replaceResultTransformer.js: {}
          replaceStringTransformer:
            index.js: {}
            replaceStringTransformer.js: {}
          replaceSubstitutionTransformer:
            index.js: {}
            replaceSubstitutionTransformer.js: {}
          safeHtml:
            index.js: {}
            safeHtml.js: {}
          source:
            index.js: {}
          splitStringTransformer:
            index.js: {}
            splitStringTransformer.js: {}
          stripIndent:
            index.js: {}
            stripIndent.js: {}
          stripIndentTransformer:
            index.js: {}
            stripIndentTransformer.js: {}
          stripIndents:
            index.js: {}
            stripIndents.js: {}
          trimResultTransformer:
            index.js: {}
            trimResultTransformer.js: {}
          utils:
            index.js: {}
            readFromFixture:
              index.js: {}
              readFromFixture.js: {}
        lib:
          TemplateTag:
            TemplateTag.js: {}
            index.js: {}
          codeBlock:
            index.js: {}
          commaLists:
            commaLists.js: {}
            index.js: {}
          commaListsAnd:
            commaListsAnd.js: {}
            index.js: {}
          commaListsOr:
            commaListsOr.js: {}
            index.js: {}
          html:
            html.js: {}
            index.js: {}
          index.js: {}
          inlineArrayTransformer:
            index.js: {}
            inlineArrayTransformer.js: {}
          inlineLists:
            index.js: {}
            inlineLists.js: {}
          oneLine:
            index.js: {}
            oneLine.js: {}
          oneLineCommaLists:
            index.js: {}
            oneLineCommaLists.js: {}
          oneLineCommaListsAnd:
            index.js: {}
            oneLineCommaListsAnd.js: {}
          oneLineCommaListsOr:
            index.js: {}
            oneLineCommaListsOr.js: {}
          oneLineInlineLists:
            index.js: {}
            oneLineInlineLists.js: {}
          oneLineTrim:
            index.js: {}
            oneLineTrim.js: {}
          removeNonPrintingValuesTransformer:
            index.js: {}
            removeNonPrintingValuesTransformer.js: {}
          replaceResultTransformer:
            index.js: {}
            replaceResultTransformer.js: {}
          replaceStringTransformer:
            index.js: {}
            replaceStringTransformer.js: {}
          replaceSubstitutionTransformer:
            index.js: {}
            replaceSubstitutionTransformer.js: {}
          safeHtml:
            index.js: {}
            safeHtml.js: {}
          source:
            index.js: {}
          splitStringTransformer:
            index.js: {}
            splitStringTransformer.js: {}
          stripIndent:
            index.js: {}
            stripIndent.js: {}
          stripIndentTransformer:
            index.js: {}
            stripIndentTransformer.js: {}
          stripIndents:
            index.js: {}
            stripIndents.js: {}
          trimResultTransformer:
            index.js: {}
            trimResultTransformer.js: {}
          utils:
            index.js: {}
            readFromFixture:
              index.js: {}
              readFromFixture.js: {}
        license.md: {}
        package.json: {}
        readme.md: {}
      commondir:
        LICENSE: {}
        example:
          dir.js: {}
        index.js: {}
        package.json: {}
        readme.markdown: {}
        test:
          dirs.js: {}
      compressible:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      compression:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        node_modules:
          debug:
            .coveralls.yml: {}
            .eslintrc: {}
            .npmignore: {}
            .travis.yml: {}
            CHANGELOG.md: {}
            LICENSE: {}
            Makefile: {}
            README.md: {}
            component.json: {}
            karma.conf.js: {}
            node.js: {}
            package.json: {}
            src:
              browser.js: {}
              debug.js: {}
              index.js: {}
              inspector-log.js: {}
              node.js: {}
          ms:
            index.js: {}
            license.md: {}
            package.json: {}
            readme.md: {}
          safe-buffer:
            LICENSE: {}
            README.md: {}
            index.d.ts: {}
            index.js: {}
            package.json: {}
        package.json: {}
      concat-map:
        .travis.yml: {}
        LICENSE: {}
        README.markdown: {}
        example:
          map.js: {}
        index.js: {}
        package.json: {}
        test:
          map.js: {}
      confusing-browser-globals:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      connect-history-api-fallback:
        LICENSE: {}
        README.md: {}
        lib:
          index.js: {}
        package.json: {}
      content-disposition:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      content-type:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      continuation-local-storage:
        .eslintrc: {}
        .travis.yml: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        context.js: {}
        package.json: {}
        test:
          async-context.tap.js: {}
          async-no-run-queue-multiple.tap.js: {}
          bind-emitter.tap.js: {}
          bind.tap.js: {}
          crypto.tap.js: {}
          dns.tap.js: {}
          error-handling.tap.js: {}
          fs.tap.js: {}
          interleave-contexts.tap.js: {}
          monkeypatching.tap.js: {}
          namespaces.tap.js: {}
          nesting.tap.js: {}
          net-events.tap.js: {}
          promises.tap.js: {}
          proper-exit.tap.js: {}
          run-and-return.tap.js: {}
          simple.tap.js: {}
          timers.tap.js: {}
          tracer-scenarios.tap.js: {}
          zlib.tap.js: {}
      convert-source-map:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      cookie:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        SECURITY.md: {}
        index.js: {}
        package.json: {}
      cookie-signature:
        .npmignore: {}
        History.md: {}
        Readme.md: {}
        index.js: {}
        package.json: {}
      core-js:
        LICENSE: {}
        README.md: {}
        actual:
          README.md: {}
          aggregate-error.js: {}
          array:
            at.js: {}
            concat.js: {}
            copy-within.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            flat-map.js: {}
            flat.js: {}
            for-each.js: {}
            from-async.js: {}
            from.js: {}
            group-by-to-map.js: {}
            group-by.js: {}
            group-to-map.js: {}
            group.js: {}
            includes.js: {}
            index-of.js: {}
            index.js: {}
            is-array.js: {}
            iterator.js: {}
            join.js: {}
            keys.js: {}
            last-index-of.js: {}
            map.js: {}
            of.js: {}
            push.js: {}
            reduce-right.js: {}
            reduce.js: {}
            reverse.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            splice.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-spliced.js: {}
            unshift.js: {}
            values.js: {}
            virtual:
              at.js: {}
              concat.js: {}
              copy-within.js: {}
              entries.js: {}
              every.js: {}
              fill.js: {}
              filter.js: {}
              find-index.js: {}
              find-last-index.js: {}
              find-last.js: {}
              find.js: {}
              flat-map.js: {}
              flat.js: {}
              for-each.js: {}
              group-by-to-map.js: {}
              group-by.js: {}
              group-to-map.js: {}
              group.js: {}
              includes.js: {}
              index-of.js: {}
              index.js: {}
              iterator.js: {}
              join.js: {}
              keys.js: {}
              last-index-of.js: {}
              map.js: {}
              push.js: {}
              reduce-right.js: {}
              reduce.js: {}
              reverse.js: {}
              slice.js: {}
              some.js: {}
              sort.js: {}
              splice.js: {}
              to-reversed.js: {}
              to-sorted.js: {}
              to-spliced.js: {}
              unshift.js: {}
              values.js: {}
              with.js: {}
            with.js: {}
          array-buffer:
            constructor.js: {}
            detached.js: {}
            index.js: {}
            is-view.js: {}
            slice.js: {}
            transfer-to-fixed-length.js: {}
            transfer.js: {}
          async-disposable-stack:
            constructor.js: {}
            index.js: {}
          async-iterator:
            async-dispose.js: {}
            drop.js: {}
            every.js: {}
            filter.js: {}
            find.js: {}
            flat-map.js: {}
            for-each.js: {}
            from.js: {}
            index.js: {}
            map.js: {}
            reduce.js: {}
            some.js: {}
            take.js: {}
            to-array.js: {}
          atob.js: {}
          btoa.js: {}
          clear-immediate.js: {}
          data-view:
            get-float16.js: {}
            index.js: {}
            set-float16.js: {}
          date:
            get-year.js: {}
            index.js: {}
            now.js: {}
            set-year.js: {}
            to-gmt-string.js: {}
            to-iso-string.js: {}
            to-json.js: {}
            to-primitive.js: {}
            to-string.js: {}
          disposable-stack:
            constructor.js: {}
            index.js: {}
          dom-collections:
            for-each.js: {}
            index.js: {}
            iterator.js: {}
          dom-exception:
            constructor.js: {}
            index.js: {}
            to-string-tag.js: {}
          error:
            constructor.js: {}
            index.js: {}
            to-string.js: {}
          escape.js: {}
          function:
            bind.js: {}
            has-instance.js: {}
            index.js: {}
            metadata.js: {}
            name.js: {}
            virtual:
              bind.js: {}
              index.js: {}
          get-iterator-method.js: {}
          get-iterator.js: {}
          global-this.js: {}
          index.js: {}
          instance:
            at.js: {}
            bind.js: {}
            code-point-at.js: {}
            concat.js: {}
            copy-within.js: {}
            ends-with.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            flags.js: {}
            flat-map.js: {}
            flat.js: {}
            for-each.js: {}
            group-by-to-map.js: {}
            group-by.js: {}
            group-to-map.js: {}
            group.js: {}
            includes.js: {}
            index-of.js: {}
            is-well-formed.js: {}
            keys.js: {}
            last-index-of.js: {}
            map.js: {}
            match-all.js: {}
            pad-end.js: {}
            pad-start.js: {}
            push.js: {}
            reduce-right.js: {}
            reduce.js: {}
            repeat.js: {}
            replace-all.js: {}
            reverse.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            splice.js: {}
            starts-with.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-spliced.js: {}
            to-well-formed.js: {}
            trim-end.js: {}
            trim-left.js: {}
            trim-right.js: {}
            trim-start.js: {}
            trim.js: {}
            unshift.js: {}
            values.js: {}
            with.js: {}
          is-iterable.js: {}
          iterator:
            dispose.js: {}
            drop.js: {}
            every.js: {}
            filter.js: {}
            find.js: {}
            flat-map.js: {}
            for-each.js: {}
            from.js: {}
            index.js: {}
            map.js: {}
            reduce.js: {}
            some.js: {}
            take.js: {}
            to-array.js: {}
            to-async.js: {}
          json:
            index.js: {}
            is-raw-json.js: {}
            parse.js: {}
            raw-json.js: {}
            stringify.js: {}
            to-string-tag.js: {}
          map:
            group-by.js: {}
            index.js: {}
          math:
            acosh.js: {}
            asinh.js: {}
            atanh.js: {}
            cbrt.js: {}
            clz32.js: {}
            cosh.js: {}
            expm1.js: {}
            f16round.js: {}
            fround.js: {}
            hypot.js: {}
            imul.js: {}
            index.js: {}
            log10.js: {}
            log1p.js: {}
            log2.js: {}
            sign.js: {}
            sinh.js: {}
            tanh.js: {}
            to-string-tag.js: {}
            trunc.js: {}
          number:
            constructor.js: {}
            epsilon.js: {}
            index.js: {}
            is-finite.js: {}
            is-integer.js: {}
            is-nan.js: {}
            is-safe-integer.js: {}
            max-safe-integer.js: {}
            min-safe-integer.js: {}
            parse-float.js: {}
            parse-int.js: {}
            to-exponential.js: {}
            to-fixed.js: {}
            to-precision.js: {}
            virtual:
              index.js: {}
              to-exponential.js: {}
              to-fixed.js: {}
              to-precision.js: {}
          object:
            assign.js: {}
            create.js: {}
            define-getter.js: {}
            define-properties.js: {}
            define-property.js: {}
            define-setter.js: {}
            entries.js: {}
            freeze.js: {}
            from-entries.js: {}
            get-own-property-descriptor.js: {}
            get-own-property-descriptors.js: {}
            get-own-property-names.js: {}
            get-own-property-symbols.js: {}
            get-prototype-of.js: {}
            group-by.js: {}
            has-own.js: {}
            index.js: {}
            is-extensible.js: {}
            is-frozen.js: {}
            is-sealed.js: {}
            is.js: {}
            keys.js: {}
            lookup-getter.js: {}
            lookup-setter.js: {}
            prevent-extensions.js: {}
            proto.js: {}
            seal.js: {}
            set-prototype-of.js: {}
            to-string.js: {}
            values.js: {}
          parse-float.js: {}
          parse-int.js: {}
          promise:
            all-settled.js: {}
            any.js: {}
            finally.js: {}
            index.js: {}
            with-resolvers.js: {}
          queue-microtask.js: {}
          reflect:
            apply.js: {}
            construct.js: {}
            define-property.js: {}
            delete-property.js: {}
            get-own-property-descriptor.js: {}
            get-prototype-of.js: {}
            get.js: {}
            has.js: {}
            index.js: {}
            is-extensible.js: {}
            own-keys.js: {}
            prevent-extensions.js: {}
            set-prototype-of.js: {}
            set.js: {}
            to-string-tag.js: {}
          regexp:
            constructor.js: {}
            dot-all.js: {}
            flags.js: {}
            index.js: {}
            match.js: {}
            replace.js: {}
            search.js: {}
            split.js: {}
            sticky.js: {}
            test.js: {}
            to-string.js: {}
          self.js: {}
          set:
            difference.js: {}
            index.js: {}
            intersection.js: {}
            is-disjoint-from.js: {}
            is-subset-of.js: {}
            is-superset-of.js: {}
            symmetric-difference.js: {}
            union.js: {}
          set-immediate.js: {}
          set-interval.js: {}
          set-timeout.js: {}
          string:
            anchor.js: {}
            at.js: {}
            big.js: {}
            blink.js: {}
            bold.js: {}
            code-point-at.js: {}
            ends-with.js: {}
            fixed.js: {}
            fontcolor.js: {}
            fontsize.js: {}
            from-code-point.js: {}
            includes.js: {}
            index.js: {}
            is-well-formed.js: {}
            italics.js: {}
            iterator.js: {}
            link.js: {}
            match-all.js: {}
            match.js: {}
            pad-end.js: {}
            pad-start.js: {}
            raw.js: {}
            repeat.js: {}
            replace-all.js: {}
            replace.js: {}
            search.js: {}
            small.js: {}
            split.js: {}
            starts-with.js: {}
            strike.js: {}
            sub.js: {}
            substr.js: {}
            sup.js: {}
            to-well-formed.js: {}
            trim-end.js: {}
            trim-left.js: {}
            trim-right.js: {}
            trim-start.js: {}
            trim.js: {}
            virtual:
              anchor.js: {}
              at.js: {}
              big.js: {}
              blink.js: {}
              bold.js: {}
              code-point-at.js: {}
              ends-with.js: {}
              fixed.js: {}
              fontcolor.js: {}
              fontsize.js: {}
              includes.js: {}
              index.js: {}
              is-well-formed.js: {}
              italics.js: {}
              iterator.js: {}
              link.js: {}
              match-all.js: {}
              pad-end.js: {}
              pad-start.js: {}
              repeat.js: {}
              replace-all.js: {}
              small.js: {}
              starts-with.js: {}
              strike.js: {}
              sub.js: {}
              substr.js: {}
              sup.js: {}
              to-well-formed.js: {}
              trim-end.js: {}
              trim-left.js: {}
              trim-right.js: {}
              trim-start.js: {}
              trim.js: {}
          structured-clone.js: {}
          suppressed-error.js: {}
          symbol:
            async-dispose.js: {}
            async-iterator.js: {}
            description.js: {}
            dispose.js: {}
            for.js: {}
            has-instance.js: {}
            index.js: {}
            is-concat-spreadable.js: {}
            iterator.js: {}
            key-for.js: {}
            match-all.js: {}
            match.js: {}
            metadata.js: {}
            replace.js: {}
            search.js: {}
            species.js: {}
            split.js: {}
            to-primitive.js: {}
            to-string-tag.js: {}
            unscopables.js: {}
          typed-array:
            at.js: {}
            copy-within.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            float32-array.js: {}
            float64-array.js: {}
            for-each.js: {}
            from-base64.js: {}
            from-hex.js: {}
            from.js: {}
            includes.js: {}
            index-of.js: {}
            index.js: {}
            int16-array.js: {}
            int32-array.js: {}
            int8-array.js: {}
            iterator.js: {}
            join.js: {}
            keys.js: {}
            last-index-of.js: {}
            map.js: {}
            methods.js: {}
            of.js: {}
            reduce-right.js: {}
            reduce.js: {}
            reverse.js: {}
            set.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            subarray.js: {}
            to-base64.js: {}
            to-hex.js: {}
            to-locale-string.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-spliced.js: {}
            to-string.js: {}
            uint16-array.js: {}
            uint32-array.js: {}
            uint8-array.js: {}
            uint8-clamped-array.js: {}
            values.js: {}
            with.js: {}
          unescape.js: {}
          url:
            can-parse.js: {}
            index.js: {}
            parse.js: {}
            to-json.js: {}
          url-search-params:
            index.js: {}
          weak-map:
            index.js: {}
          weak-set:
            index.js: {}
        configurator.js: {}
        es:
          README.md: {}
          aggregate-error.js: {}
          array:
            at.js: {}
            concat.js: {}
            copy-within.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            flat-map.js: {}
            flat.js: {}
            for-each.js: {}
            from.js: {}
            includes.js: {}
            index-of.js: {}
            index.js: {}
            is-array.js: {}
            iterator.js: {}
            join.js: {}
            keys.js: {}
            last-index-of.js: {}
            map.js: {}
            of.js: {}
            push.js: {}
            reduce-right.js: {}
            reduce.js: {}
            reverse.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            splice.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-spliced.js: {}
            unshift.js: {}
            values.js: {}
            virtual:
              at.js: {}
              concat.js: {}
              copy-within.js: {}
              entries.js: {}
              every.js: {}
              fill.js: {}
              filter.js: {}
              find-index.js: {}
              find-last-index.js: {}
              find-last.js: {}
              find.js: {}
              flat-map.js: {}
              flat.js: {}
              for-each.js: {}
              includes.js: {}
              index-of.js: {}
              index.js: {}
              iterator.js: {}
              join.js: {}
              keys.js: {}
              last-index-of.js: {}
              map.js: {}
              push.js: {}
              reduce-right.js: {}
              reduce.js: {}
              reverse.js: {}
              slice.js: {}
              some.js: {}
              sort.js: {}
              splice.js: {}
              to-reversed.js: {}
              to-sorted.js: {}
              to-spliced.js: {}
              unshift.js: {}
              values.js: {}
              with.js: {}
            with.js: {}
          array-buffer:
            constructor.js: {}
            detached.js: {}
            index.js: {}
            is-view.js: {}
            slice.js: {}
            transfer-to-fixed-length.js: {}
            transfer.js: {}
          data-view:
            index.js: {}
          date:
            get-year.js: {}
            index.js: {}
            now.js: {}
            set-year.js: {}
            to-gmt-string.js: {}
            to-iso-string.js: {}
            to-json.js: {}
            to-primitive.js: {}
            to-string.js: {}
          error:
            constructor.js: {}
            index.js: {}
            to-string.js: {}
          escape.js: {}
          function:
            bind.js: {}
            has-instance.js: {}
            index.js: {}
            name.js: {}
            virtual:
              bind.js: {}
              index.js: {}
          get-iterator-method.js: {}
          get-iterator.js: {}
          global-this.js: {}
          index.js: {}
          instance:
            at.js: {}
            bind.js: {}
            code-point-at.js: {}
            concat.js: {}
            copy-within.js: {}
            ends-with.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            flags.js: {}
            flat-map.js: {}
            flat.js: {}
            for-each.js: {}
            includes.js: {}
            index-of.js: {}
            is-well-formed.js: {}
            keys.js: {}
            last-index-of.js: {}
            map.js: {}
            match-all.js: {}
            pad-end.js: {}
            pad-start.js: {}
            push.js: {}
            reduce-right.js: {}
            reduce.js: {}
            repeat.js: {}
            replace-all.js: {}
            reverse.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            splice.js: {}
            starts-with.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-spliced.js: {}
            to-well-formed.js: {}
            trim-end.js: {}
            trim-left.js: {}
            trim-right.js: {}
            trim-start.js: {}
            trim.js: {}
            unshift.js: {}
            values.js: {}
            with.js: {}
          is-iterable.js: {}
          json:
            index.js: {}
            stringify.js: {}
            to-string-tag.js: {}
          map:
            group-by.js: {}
            index.js: {}
          math:
            acosh.js: {}
            asinh.js: {}
            atanh.js: {}
            cbrt.js: {}
            clz32.js: {}
            cosh.js: {}
            expm1.js: {}
            fround.js: {}
            hypot.js: {}
            imul.js: {}
            index.js: {}
            log10.js: {}
            log1p.js: {}
            log2.js: {}
            sign.js: {}
            sinh.js: {}
            tanh.js: {}
            to-string-tag.js: {}
            trunc.js: {}
          number:
            constructor.js: {}
            epsilon.js: {}
            index.js: {}
            is-finite.js: {}
            is-integer.js: {}
            is-nan.js: {}
            is-safe-integer.js: {}
            max-safe-integer.js: {}
            min-safe-integer.js: {}
            parse-float.js: {}
            parse-int.js: {}
            to-exponential.js: {}
            to-fixed.js: {}
            to-precision.js: {}
            virtual:
              index.js: {}
              to-exponential.js: {}
              to-fixed.js: {}
              to-precision.js: {}
          object:
            assign.js: {}
            create.js: {}
            define-getter.js: {}
            define-properties.js: {}
            define-property.js: {}
            define-setter.js: {}
            entries.js: {}
            freeze.js: {}
            from-entries.js: {}
            get-own-property-descriptor.js: {}
            get-own-property-descriptors.js: {}
            get-own-property-names.js: {}
            get-own-property-symbols.js: {}
            get-prototype-of.js: {}
            group-by.js: {}
            has-own.js: {}
            index.js: {}
            is-extensible.js: {}
            is-frozen.js: {}
            is-sealed.js: {}
            is.js: {}
            keys.js: {}
            lookup-getter.js: {}
            lookup-setter.js: {}
            prevent-extensions.js: {}
            proto.js: {}
            seal.js: {}
            set-prototype-of.js: {}
            to-string.js: {}
            values.js: {}
          parse-float.js: {}
          parse-int.js: {}
          promise:
            all-settled.js: {}
            any.js: {}
            finally.js: {}
            index.js: {}
            with-resolvers.js: {}
          reflect:
            apply.js: {}
            construct.js: {}
            define-property.js: {}
            delete-property.js: {}
            get-own-property-descriptor.js: {}
            get-prototype-of.js: {}
            get.js: {}
            has.js: {}
            index.js: {}
            is-extensible.js: {}
            own-keys.js: {}
            prevent-extensions.js: {}
            set-prototype-of.js: {}
            set.js: {}
            to-string-tag.js: {}
          regexp:
            constructor.js: {}
            dot-all.js: {}
            flags.js: {}
            index.js: {}
            match.js: {}
            replace.js: {}
            search.js: {}
            split.js: {}
            sticky.js: {}
            test.js: {}
            to-string.js: {}
          set:
            difference.js: {}
            index.js: {}
            intersection.js: {}
            is-disjoint-from.js: {}
            is-subset-of.js: {}
            is-superset-of.js: {}
            symmetric-difference.js: {}
            union.js: {}
          string:
            anchor.js: {}
            at.js: {}
            big.js: {}
            blink.js: {}
            bold.js: {}
            code-point-at.js: {}
            ends-with.js: {}
            fixed.js: {}
            fontcolor.js: {}
            fontsize.js: {}
            from-code-point.js: {}
            includes.js: {}
            index.js: {}
            is-well-formed.js: {}
            italics.js: {}
            iterator.js: {}
            link.js: {}
            match-all.js: {}
            match.js: {}
            pad-end.js: {}
            pad-start.js: {}
            raw.js: {}
            repeat.js: {}
            replace-all.js: {}
            replace.js: {}
            search.js: {}
            small.js: {}
            split.js: {}
            starts-with.js: {}
            strike.js: {}
            sub.js: {}
            substr.js: {}
            sup.js: {}
            to-well-formed.js: {}
            trim-end.js: {}
            trim-left.js: {}
            trim-right.js: {}
            trim-start.js: {}
            trim.js: {}
            virtual:
              anchor.js: {}
              at.js: {}
              big.js: {}
              blink.js: {}
              bold.js: {}
              code-point-at.js: {}
              ends-with.js: {}
              fixed.js: {}
              fontcolor.js: {}
              fontsize.js: {}
              includes.js: {}
              index.js: {}
              is-well-formed.js: {}
              italics.js: {}
              iterator.js: {}
              link.js: {}
              match-all.js: {}
              pad-end.js: {}
              pad-start.js: {}
              repeat.js: {}
              replace-all.js: {}
              small.js: {}
              starts-with.js: {}
              strike.js: {}
              sub.js: {}
              substr.js: {}
              sup.js: {}
              to-well-formed.js: {}
              trim-end.js: {}
              trim-left.js: {}
              trim-right.js: {}
              trim-start.js: {}
              trim.js: {}
          symbol:
            async-iterator.js: {}
            description.js: {}
            for.js: {}
            has-instance.js: {}
            index.js: {}
            is-concat-spreadable.js: {}
            iterator.js: {}
            key-for.js: {}
            match-all.js: {}
            match.js: {}
            replace.js: {}
            search.js: {}
            species.js: {}
            split.js: {}
            to-primitive.js: {}
            to-string-tag.js: {}
            unscopables.js: {}
          typed-array:
            at.js: {}
            copy-within.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            float32-array.js: {}
            float64-array.js: {}
            for-each.js: {}
            from.js: {}
            includes.js: {}
            index-of.js: {}
            index.js: {}
            int16-array.js: {}
            int32-array.js: {}
            int8-array.js: {}
            iterator.js: {}
            join.js: {}
            keys.js: {}
            last-index-of.js: {}
            map.js: {}
            methods.js: {}
            of.js: {}
            reduce-right.js: {}
            reduce.js: {}
            reverse.js: {}
            set.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            subarray.js: {}
            to-locale-string.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-string.js: {}
            uint16-array.js: {}
            uint32-array.js: {}
            uint8-array.js: {}
            uint8-clamped-array.js: {}
            values.js: {}
            with.js: {}
          unescape.js: {}
          weak-map:
            index.js: {}
          weak-set:
            index.js: {}
        features:
          aggregate-error.js: {}
          array:
            at.js: {}
            concat.js: {}
            copy-within.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter-out.js: {}
            filter-reject.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            flat-map.js: {}
            flat.js: {}
            for-each.js: {}
            from-async.js: {}
            from.js: {}
            group-by-to-map.js: {}
            group-by.js: {}
            group-to-map.js: {}
            group.js: {}
            includes.js: {}
            index-of.js: {}
            index.js: {}
            is-array.js: {}
            is-template-object.js: {}
            iterator.js: {}
            join.js: {}
            keys.js: {}
            last-index-of.js: {}
            last-index.js: {}
            last-item.js: {}
            map.js: {}
            of.js: {}
            push.js: {}
            reduce-right.js: {}
            reduce.js: {}
            reverse.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            splice.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-spliced.js: {}
            unique-by.js: {}
            unshift.js: {}
            values.js: {}
            virtual:
              at.js: {}
              concat.js: {}
              copy-within.js: {}
              entries.js: {}
              every.js: {}
              fill.js: {}
              filter-out.js: {}
              filter-reject.js: {}
              filter.js: {}
              find-index.js: {}
              find-last-index.js: {}
              find-last.js: {}
              find.js: {}
              flat-map.js: {}
              flat.js: {}
              for-each.js: {}
              group-by-to-map.js: {}
              group-by.js: {}
              group-to-map.js: {}
              group.js: {}
              includes.js: {}
              index-of.js: {}
              index.js: {}
              iterator.js: {}
              join.js: {}
              keys.js: {}
              last-index-of.js: {}
              map.js: {}
              push.js: {}
              reduce-right.js: {}
              reduce.js: {}
              reverse.js: {}
              slice.js: {}
              some.js: {}
              sort.js: {}
              splice.js: {}
              to-reversed.js: {}
              to-sorted.js: {}
              to-spliced.js: {}
              unique-by.js: {}
              unshift.js: {}
              values.js: {}
              with.js: {}
            with.js: {}
          array-buffer:
            constructor.js: {}
            detached.js: {}
            index.js: {}
            is-view.js: {}
            slice.js: {}
            transfer-to-fixed-length.js: {}
            transfer.js: {}
          async-disposable-stack:
            constructor.js: {}
            index.js: {}
          async-iterator:
            as-indexed-pairs.js: {}
            async-dispose.js: {}
            drop.js: {}
            every.js: {}
            filter.js: {}
            find.js: {}
            flat-map.js: {}
            for-each.js: {}
            from.js: {}
            index.js: {}
            indexed.js: {}
            map.js: {}
            reduce.js: {}
            some.js: {}
            take.js: {}
            to-array.js: {}
          atob.js: {}
          bigint:
            index.js: {}
            range.js: {}
          btoa.js: {}
          clear-immediate.js: {}
          composite-key.js: {}
          composite-symbol.js: {}
          data-view:
            get-float16.js: {}
            get-uint8-clamped.js: {}
            index.js: {}
            set-float16.js: {}
            set-uint8-clamped.js: {}
          date:
            get-year.js: {}
            index.js: {}
            now.js: {}
            set-year.js: {}
            to-gmt-string.js: {}
            to-iso-string.js: {}
            to-json.js: {}
            to-primitive.js: {}
            to-string.js: {}
          disposable-stack:
            constructor.js: {}
            index.js: {}
          dom-collections:
            for-each.js: {}
            index.js: {}
            iterator.js: {}
          dom-exception:
            constructor.js: {}
            index.js: {}
            to-string-tag.js: {}
          error:
            constructor.js: {}
            index.js: {}
            to-string.js: {}
          escape.js: {}
          function:
            bind.js: {}
            demethodize.js: {}
            has-instance.js: {}
            index.js: {}
            is-callable.js: {}
            is-constructor.js: {}
            metadata.js: {}
            name.js: {}
            un-this.js: {}
            virtual:
              bind.js: {}
              demethodize.js: {}
              index.js: {}
              un-this.js: {}
          get-iterator-method.js: {}
          get-iterator.js: {}
          global-this.js: {}
          index.js: {}
          instance:
            at.js: {}
            bind.js: {}
            code-point-at.js: {}
            code-points.js: {}
            concat.js: {}
            copy-within.js: {}
            demethodize.js: {}
            ends-with.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter-out.js: {}
            filter-reject.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            flags.js: {}
            flat-map.js: {}
            flat.js: {}
            for-each.js: {}
            group-by-to-map.js: {}
            group-by.js: {}
            group-to-map.js: {}
            group.js: {}
            includes.js: {}
            index-of.js: {}
            is-well-formed.js: {}
            keys.js: {}
            last-index-of.js: {}
            map.js: {}
            match-all.js: {}
            pad-end.js: {}
            pad-start.js: {}
            push.js: {}
            reduce-right.js: {}
            reduce.js: {}
            repeat.js: {}
            replace-all.js: {}
            reverse.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            splice.js: {}
            starts-with.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-spliced.js: {}
            to-well-formed.js: {}
            trim-end.js: {}
            trim-left.js: {}
            trim-right.js: {}
            trim-start.js: {}
            trim.js: {}
            un-this.js: {}
            unique-by.js: {}
            unshift.js: {}
            values.js: {}
            with.js: {}
          is-iterable.js: {}
          iterator:
            as-indexed-pairs.js: {}
            dispose.js: {}
            drop.js: {}
            every.js: {}
            filter.js: {}
            find.js: {}
            flat-map.js: {}
            for-each.js: {}
            from.js: {}
            index.js: {}
            indexed.js: {}
            map.js: {}
            range.js: {}
            reduce.js: {}
            some.js: {}
            take.js: {}
            to-array.js: {}
            to-async.js: {}
          json:
            index.js: {}
            is-raw-json.js: {}
            parse.js: {}
            raw-json.js: {}
            stringify.js: {}
            to-string-tag.js: {}
          map:
            delete-all.js: {}
            emplace.js: {}
            every.js: {}
            filter.js: {}
            find-key.js: {}
            find.js: {}
            from.js: {}
            group-by.js: {}
            includes.js: {}
            index.js: {}
            key-by.js: {}
            key-of.js: {}
            map-keys.js: {}
            map-values.js: {}
            merge.js: {}
            of.js: {}
            reduce.js: {}
            some.js: {}
            update-or-insert.js: {}
            update.js: {}
            upsert.js: {}
          math:
            acosh.js: {}
            asinh.js: {}
            atanh.js: {}
            cbrt.js: {}
            clamp.js: {}
            clz32.js: {}
            cosh.js: {}
            deg-per-rad.js: {}
            degrees.js: {}
            expm1.js: {}
            f16round.js: {}
            fround.js: {}
            fscale.js: {}
            hypot.js: {}
            iaddh.js: {}
            imul.js: {}
            imulh.js: {}
            index.js: {}
            isubh.js: {}
            log10.js: {}
            log1p.js: {}
            log2.js: {}
            rad-per-deg.js: {}
            radians.js: {}
            scale.js: {}
            seeded-prng.js: {}
            sign.js: {}
            signbit.js: {}
            sinh.js: {}
            sum-precise.js: {}
            tanh.js: {}
            to-string-tag.js: {}
            trunc.js: {}
            umulh.js: {}
          number:
            constructor.js: {}
            epsilon.js: {}
            from-string.js: {}
            index.js: {}
            is-finite.js: {}
            is-integer.js: {}
            is-nan.js: {}
            is-safe-integer.js: {}
            max-safe-integer.js: {}
            min-safe-integer.js: {}
            parse-float.js: {}
            parse-int.js: {}
            range.js: {}
            to-exponential.js: {}
            to-fixed.js: {}
            to-precision.js: {}
            virtual:
              index.js: {}
              to-exponential.js: {}
              to-fixed.js: {}
              to-precision.js: {}
          object:
            assign.js: {}
            create.js: {}
            define-getter.js: {}
            define-properties.js: {}
            define-property.js: {}
            define-setter.js: {}
            entries.js: {}
            freeze.js: {}
            from-entries.js: {}
            get-own-property-descriptor.js: {}
            get-own-property-descriptors.js: {}
            get-own-property-names.js: {}
            get-own-property-symbols.js: {}
            get-prototype-of.js: {}
            group-by.js: {}
            has-own.js: {}
            index.js: {}
            is-extensible.js: {}
            is-frozen.js: {}
            is-sealed.js: {}
            is.js: {}
            iterate-entries.js: {}
            iterate-keys.js: {}
            iterate-values.js: {}
            keys.js: {}
            lookup-getter.js: {}
            lookup-setter.js: {}
            prevent-extensions.js: {}
            proto.js: {}
            seal.js: {}
            set-prototype-of.js: {}
            to-string.js: {}
            values.js: {}
          observable:
            index.js: {}
          parse-float.js: {}
          parse-int.js: {}
          promise:
            all-settled.js: {}
            any.js: {}
            finally.js: {}
            index.js: {}
            try.js: {}
            with-resolvers.js: {}
          queue-microtask.js: {}
          reflect:
            apply.js: {}
            construct.js: {}
            define-metadata.js: {}
            define-property.js: {}
            delete-metadata.js: {}
            delete-property.js: {}
            get-metadata-keys.js: {}
            get-metadata.js: {}
            get-own-metadata-keys.js: {}
            get-own-metadata.js: {}
            get-own-property-descriptor.js: {}
            get-prototype-of.js: {}
            get.js: {}
            has-metadata.js: {}
            has-own-metadata.js: {}
            has.js: {}
            index.js: {}
            is-extensible.js: {}
            metadata.js: {}
            own-keys.js: {}
            prevent-extensions.js: {}
            set-prototype-of.js: {}
            set.js: {}
            to-string-tag.js: {}
          regexp:
            constructor.js: {}
            dot-all.js: {}
            escape.js: {}
            flags.js: {}
            index.js: {}
            match.js: {}
            replace.js: {}
            search.js: {}
            split.js: {}
            sticky.js: {}
            test.js: {}
            to-string.js: {}
          self.js: {}
          set:
            add-all.js: {}
            delete-all.js: {}
            difference.js: {}
            every.js: {}
            filter.js: {}
            find.js: {}
            from.js: {}
            index.js: {}
            intersection.js: {}
            is-disjoint-from.js: {}
            is-subset-of.js: {}
            is-superset-of.js: {}
            join.js: {}
            map.js: {}
            of.js: {}
            reduce.js: {}
            some.js: {}
            symmetric-difference.js: {}
            union.js: {}
          set-immediate.js: {}
          set-interval.js: {}
          set-timeout.js: {}
          string:
            anchor.js: {}
            at.js: {}
            big.js: {}
            blink.js: {}
            bold.js: {}
            code-point-at.js: {}
            code-points.js: {}
            cooked.js: {}
            dedent.js: {}
            ends-with.js: {}
            fixed.js: {}
            fontcolor.js: {}
            fontsize.js: {}
            from-code-point.js: {}
            includes.js: {}
            index.js: {}
            is-well-formed.js: {}
            italics.js: {}
            iterator.js: {}
            link.js: {}
            match-all.js: {}
            match.js: {}
            pad-end.js: {}
            pad-start.js: {}
            raw.js: {}
            repeat.js: {}
            replace-all.js: {}
            replace.js: {}
            search.js: {}
            small.js: {}
            split.js: {}
            starts-with.js: {}
            strike.js: {}
            sub.js: {}
            substr.js: {}
            sup.js: {}
            to-well-formed.js: {}
            trim-end.js: {}
            trim-left.js: {}
            trim-right.js: {}
            trim-start.js: {}
            trim.js: {}
            virtual:
              anchor.js: {}
              at.js: {}
              big.js: {}
              blink.js: {}
              bold.js: {}
              code-point-at.js: {}
              code-points.js: {}
              ends-with.js: {}
              fixed.js: {}
              fontcolor.js: {}
              fontsize.js: {}
              includes.js: {}
              index.js: {}
              is-well-formed.js: {}
              italics.js: {}
              iterator.js: {}
              link.js: {}
              match-all.js: {}
              pad-end.js: {}
              pad-start.js: {}
              repeat.js: {}
              replace-all.js: {}
              small.js: {}
              starts-with.js: {}
              strike.js: {}
              sub.js: {}
              substr.js: {}
              sup.js: {}
              to-well-formed.js: {}
              trim-end.js: {}
              trim-left.js: {}
              trim-right.js: {}
              trim-start.js: {}
              trim.js: {}
          structured-clone.js: {}
          suppressed-error.js: {}
          symbol:
            async-dispose.js: {}
            async-iterator.js: {}
            custom-matcher.js: {}
            description.js: {}
            dispose.js: {}
            for.js: {}
            has-instance.js: {}
            index.js: {}
            is-concat-spreadable.js: {}
            is-registered-symbol.js: {}
            is-registered.js: {}
            is-well-known-symbol.js: {}
            is-well-known.js: {}
            iterator.js: {}
            key-for.js: {}
            match-all.js: {}
            match.js: {}
            matcher.js: {}
            metadata-key.js: {}
            metadata.js: {}
            observable.js: {}
            pattern-match.js: {}
            replace-all.js: {}
            replace.js: {}
            search.js: {}
            species.js: {}
            split.js: {}
            to-primitive.js: {}
            to-string-tag.js: {}
            unscopables.js: {}
          typed-array:
            at.js: {}
            copy-within.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter-out.js: {}
            filter-reject.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            float32-array.js: {}
            float64-array.js: {}
            for-each.js: {}
            from-async.js: {}
            from-base64.js: {}
            from-hex.js: {}
            from.js: {}
            group-by.js: {}
            includes.js: {}
            index-of.js: {}
            index.js: {}
            int16-array.js: {}
            int32-array.js: {}
            int8-array.js: {}
            iterator.js: {}
            join.js: {}
            keys.js: {}
            last-index-of.js: {}
            map.js: {}
            methods.js: {}
            of.js: {}
            reduce-right.js: {}
            reduce.js: {}
            reverse.js: {}
            set.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            subarray.js: {}
            to-base64.js: {}
            to-hex.js: {}
            to-locale-string.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-spliced.js: {}
            to-string.js: {}
            uint16-array.js: {}
            uint32-array.js: {}
            uint8-array.js: {}
            uint8-clamped-array.js: {}
            unique-by.js: {}
            values.js: {}
            with.js: {}
          unescape.js: {}
          url:
            can-parse.js: {}
            index.js: {}
            parse.js: {}
            to-json.js: {}
          url-search-params:
            index.js: {}
          weak-map:
            delete-all.js: {}
            emplace.js: {}
            from.js: {}
            index.js: {}
            of.js: {}
            upsert.js: {}
          weak-set:
            add-all.js: {}
            delete-all.js: {}
            from.js: {}
            index.js: {}
            of.js: {}
        full:
          README.md: {}
          aggregate-error.js: {}
          array:
            at.js: {}
            concat.js: {}
            copy-within.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter-out.js: {}
            filter-reject.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            flat-map.js: {}
            flat.js: {}
            for-each.js: {}
            from-async.js: {}
            from.js: {}
            group-by-to-map.js: {}
            group-by.js: {}
            group-to-map.js: {}
            group.js: {}
            includes.js: {}
            index-of.js: {}
            index.js: {}
            is-array.js: {}
            is-template-object.js: {}
            iterator.js: {}
            join.js: {}
            keys.js: {}
            last-index-of.js: {}
            last-index.js: {}
            last-item.js: {}
            map.js: {}
            of.js: {}
            push.js: {}
            reduce-right.js: {}
            reduce.js: {}
            reverse.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            splice.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-spliced.js: {}
            unique-by.js: {}
            unshift.js: {}
            values.js: {}
            virtual:
              at.js: {}
              concat.js: {}
              copy-within.js: {}
              entries.js: {}
              every.js: {}
              fill.js: {}
              filter-out.js: {}
              filter-reject.js: {}
              filter.js: {}
              find-index.js: {}
              find-last-index.js: {}
              find-last.js: {}
              find.js: {}
              flat-map.js: {}
              flat.js: {}
              for-each.js: {}
              group-by-to-map.js: {}
              group-by.js: {}
              group-to-map.js: {}
              group.js: {}
              includes.js: {}
              index-of.js: {}
              index.js: {}
              iterator.js: {}
              join.js: {}
              keys.js: {}
              last-index-of.js: {}
              map.js: {}
              push.js: {}
              reduce-right.js: {}
              reduce.js: {}
              reverse.js: {}
              slice.js: {}
              some.js: {}
              sort.js: {}
              splice.js: {}
              to-reversed.js: {}
              to-sorted.js: {}
              to-spliced.js: {}
              unique-by.js: {}
              unshift.js: {}
              values.js: {}
              with.js: {}
            with.js: {}
          array-buffer:
            constructor.js: {}
            detached.js: {}
            index.js: {}
            is-view.js: {}
            slice.js: {}
            transfer-to-fixed-length.js: {}
            transfer.js: {}
          async-disposable-stack:
            constructor.js: {}
            index.js: {}
          async-iterator:
            as-indexed-pairs.js: {}
            async-dispose.js: {}
            drop.js: {}
            every.js: {}
            filter.js: {}
            find.js: {}
            flat-map.js: {}
            for-each.js: {}
            from.js: {}
            index.js: {}
            indexed.js: {}
            map.js: {}
            reduce.js: {}
            some.js: {}
            take.js: {}
            to-array.js: {}
          atob.js: {}
          bigint:
            index.js: {}
            range.js: {}
          btoa.js: {}
          clear-immediate.js: {}
          composite-key.js: {}
          composite-symbol.js: {}
          data-view:
            get-float16.js: {}
            get-uint8-clamped.js: {}
            index.js: {}
            set-float16.js: {}
            set-uint8-clamped.js: {}
          date:
            get-year.js: {}
            index.js: {}
            now.js: {}
            set-year.js: {}
            to-gmt-string.js: {}
            to-iso-string.js: {}
            to-json.js: {}
            to-primitive.js: {}
            to-string.js: {}
          disposable-stack:
            constructor.js: {}
            index.js: {}
          dom-collections:
            for-each.js: {}
            index.js: {}
            iterator.js: {}
          dom-exception:
            constructor.js: {}
            index.js: {}
            to-string-tag.js: {}
          error:
            constructor.js: {}
            index.js: {}
            to-string.js: {}
          escape.js: {}
          function:
            bind.js: {}
            demethodize.js: {}
            has-instance.js: {}
            index.js: {}
            is-callable.js: {}
            is-constructor.js: {}
            metadata.js: {}
            name.js: {}
            un-this.js: {}
            virtual:
              bind.js: {}
              demethodize.js: {}
              index.js: {}
              un-this.js: {}
          get-iterator-method.js: {}
          get-iterator.js: {}
          global-this.js: {}
          index.js: {}
          instance:
            at.js: {}
            bind.js: {}
            code-point-at.js: {}
            code-points.js: {}
            concat.js: {}
            copy-within.js: {}
            demethodize.js: {}
            ends-with.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter-out.js: {}
            filter-reject.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            flags.js: {}
            flat-map.js: {}
            flat.js: {}
            for-each.js: {}
            group-by-to-map.js: {}
            group-by.js: {}
            group-to-map.js: {}
            group.js: {}
            includes.js: {}
            index-of.js: {}
            is-well-formed.js: {}
            keys.js: {}
            last-index-of.js: {}
            map.js: {}
            match-all.js: {}
            pad-end.js: {}
            pad-start.js: {}
            push.js: {}
            reduce-right.js: {}
            reduce.js: {}
            repeat.js: {}
            replace-all.js: {}
            reverse.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            splice.js: {}
            starts-with.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-spliced.js: {}
            to-well-formed.js: {}
            trim-end.js: {}
            trim-left.js: {}
            trim-right.js: {}
            trim-start.js: {}
            trim.js: {}
            un-this.js: {}
            unique-by.js: {}
            unshift.js: {}
            values.js: {}
            with.js: {}
          is-iterable.js: {}
          iterator:
            as-indexed-pairs.js: {}
            dispose.js: {}
            drop.js: {}
            every.js: {}
            filter.js: {}
            find.js: {}
            flat-map.js: {}
            for-each.js: {}
            from.js: {}
            index.js: {}
            indexed.js: {}
            map.js: {}
            range.js: {}
            reduce.js: {}
            some.js: {}
            take.js: {}
            to-array.js: {}
            to-async.js: {}
          json:
            index.js: {}
            is-raw-json.js: {}
            parse.js: {}
            raw-json.js: {}
            stringify.js: {}
            to-string-tag.js: {}
          map:
            delete-all.js: {}
            emplace.js: {}
            every.js: {}
            filter.js: {}
            find-key.js: {}
            find.js: {}
            from.js: {}
            group-by.js: {}
            includes.js: {}
            index.js: {}
            key-by.js: {}
            key-of.js: {}
            map-keys.js: {}
            map-values.js: {}
            merge.js: {}
            of.js: {}
            reduce.js: {}
            some.js: {}
            update-or-insert.js: {}
            update.js: {}
            upsert.js: {}
          math:
            acosh.js: {}
            asinh.js: {}
            atanh.js: {}
            cbrt.js: {}
            clamp.js: {}
            clz32.js: {}
            cosh.js: {}
            deg-per-rad.js: {}
            degrees.js: {}
            expm1.js: {}
            f16round.js: {}
            fround.js: {}
            fscale.js: {}
            hypot.js: {}
            iaddh.js: {}
            imul.js: {}
            imulh.js: {}
            index.js: {}
            isubh.js: {}
            log10.js: {}
            log1p.js: {}
            log2.js: {}
            rad-per-deg.js: {}
            radians.js: {}
            scale.js: {}
            seeded-prng.js: {}
            sign.js: {}
            signbit.js: {}
            sinh.js: {}
            sum-precise.js: {}
            tanh.js: {}
            to-string-tag.js: {}
            trunc.js: {}
            umulh.js: {}
          number:
            constructor.js: {}
            epsilon.js: {}
            from-string.js: {}
            index.js: {}
            is-finite.js: {}
            is-integer.js: {}
            is-nan.js: {}
            is-safe-integer.js: {}
            max-safe-integer.js: {}
            min-safe-integer.js: {}
            parse-float.js: {}
            parse-int.js: {}
            range.js: {}
            to-exponential.js: {}
            to-fixed.js: {}
            to-precision.js: {}
            virtual:
              index.js: {}
              to-exponential.js: {}
              to-fixed.js: {}
              to-precision.js: {}
          object:
            assign.js: {}
            create.js: {}
            define-getter.js: {}
            define-properties.js: {}
            define-property.js: {}
            define-setter.js: {}
            entries.js: {}
            freeze.js: {}
            from-entries.js: {}
            get-own-property-descriptor.js: {}
            get-own-property-descriptors.js: {}
            get-own-property-names.js: {}
            get-own-property-symbols.js: {}
            get-prototype-of.js: {}
            group-by.js: {}
            has-own.js: {}
            index.js: {}
            is-extensible.js: {}
            is-frozen.js: {}
            is-sealed.js: {}
            is.js: {}
            iterate-entries.js: {}
            iterate-keys.js: {}
            iterate-values.js: {}
            keys.js: {}
            lookup-getter.js: {}
            lookup-setter.js: {}
            prevent-extensions.js: {}
            proto.js: {}
            seal.js: {}
            set-prototype-of.js: {}
            to-string.js: {}
            values.js: {}
          observable:
            index.js: {}
          parse-float.js: {}
          parse-int.js: {}
          promise:
            all-settled.js: {}
            any.js: {}
            finally.js: {}
            index.js: {}
            try.js: {}
            with-resolvers.js: {}
          queue-microtask.js: {}
          reflect:
            apply.js: {}
            construct.js: {}
            define-metadata.js: {}
            define-property.js: {}
            delete-metadata.js: {}
            delete-property.js: {}
            get-metadata-keys.js: {}
            get-metadata.js: {}
            get-own-metadata-keys.js: {}
            get-own-metadata.js: {}
            get-own-property-descriptor.js: {}
            get-prototype-of.js: {}
            get.js: {}
            has-metadata.js: {}
            has-own-metadata.js: {}
            has.js: {}
            index.js: {}
            is-extensible.js: {}
            metadata.js: {}
            own-keys.js: {}
            prevent-extensions.js: {}
            set-prototype-of.js: {}
            set.js: {}
            to-string-tag.js: {}
          regexp:
            constructor.js: {}
            dot-all.js: {}
            escape.js: {}
            flags.js: {}
            index.js: {}
            match.js: {}
            replace.js: {}
            search.js: {}
            split.js: {}
            sticky.js: {}
            test.js: {}
            to-string.js: {}
          self.js: {}
          set:
            add-all.js: {}
            delete-all.js: {}
            difference.js: {}
            every.js: {}
            filter.js: {}
            find.js: {}
            from.js: {}
            index.js: {}
            intersection.js: {}
            is-disjoint-from.js: {}
            is-subset-of.js: {}
            is-superset-of.js: {}
            join.js: {}
            map.js: {}
            of.js: {}
            reduce.js: {}
            some.js: {}
            symmetric-difference.js: {}
            union.js: {}
          set-immediate.js: {}
          set-interval.js: {}
          set-timeout.js: {}
          string:
            anchor.js: {}
            at.js: {}
            big.js: {}
            blink.js: {}
            bold.js: {}
            code-point-at.js: {}
            code-points.js: {}
            cooked.js: {}
            dedent.js: {}
            ends-with.js: {}
            fixed.js: {}
            fontcolor.js: {}
            fontsize.js: {}
            from-code-point.js: {}
            includes.js: {}
            index.js: {}
            is-well-formed.js: {}
            italics.js: {}
            iterator.js: {}
            link.js: {}
            match-all.js: {}
            match.js: {}
            pad-end.js: {}
            pad-start.js: {}
            raw.js: {}
            repeat.js: {}
            replace-all.js: {}
            replace.js: {}
            search.js: {}
            small.js: {}
            split.js: {}
            starts-with.js: {}
            strike.js: {}
            sub.js: {}
            substr.js: {}
            sup.js: {}
            to-well-formed.js: {}
            trim-end.js: {}
            trim-left.js: {}
            trim-right.js: {}
            trim-start.js: {}
            trim.js: {}
            virtual:
              anchor.js: {}
              at.js: {}
              big.js: {}
              blink.js: {}
              bold.js: {}
              code-point-at.js: {}
              code-points.js: {}
              ends-with.js: {}
              fixed.js: {}
              fontcolor.js: {}
              fontsize.js: {}
              includes.js: {}
              index.js: {}
              is-well-formed.js: {}
              italics.js: {}
              iterator.js: {}
              link.js: {}
              match-all.js: {}
              pad-end.js: {}
              pad-start.js: {}
              repeat.js: {}
              replace-all.js: {}
              small.js: {}
              starts-with.js: {}
              strike.js: {}
              sub.js: {}
              substr.js: {}
              sup.js: {}
              to-well-formed.js: {}
              trim-end.js: {}
              trim-left.js: {}
              trim-right.js: {}
              trim-start.js: {}
              trim.js: {}
          structured-clone.js: {}
          suppressed-error.js: {}
          symbol:
            async-dispose.js: {}
            async-iterator.js: {}
            custom-matcher.js: {}
            description.js: {}
            dispose.js: {}
            for.js: {}
            has-instance.js: {}
            index.js: {}
            is-concat-spreadable.js: {}
            is-registered-symbol.js: {}
            is-registered.js: {}
            is-well-known-symbol.js: {}
            is-well-known.js: {}
            iterator.js: {}
            key-for.js: {}
            match-all.js: {}
            match.js: {}
            matcher.js: {}
            metadata-key.js: {}
            metadata.js: {}
            observable.js: {}
            pattern-match.js: {}
            replace-all.js: {}
            replace.js: {}
            search.js: {}
            species.js: {}
            split.js: {}
            to-primitive.js: {}
            to-string-tag.js: {}
            unscopables.js: {}
          typed-array:
            at.js: {}
            copy-within.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter-out.js: {}
            filter-reject.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            float32-array.js: {}
            float64-array.js: {}
            for-each.js: {}
            from-async.js: {}
            from-base64.js: {}
            from-hex.js: {}
            from.js: {}
            group-by.js: {}
            includes.js: {}
            index-of.js: {}
            index.js: {}
            int16-array.js: {}
            int32-array.js: {}
            int8-array.js: {}
            iterator.js: {}
            join.js: {}
            keys.js: {}
            last-index-of.js: {}
            map.js: {}
            methods.js: {}
            of.js: {}
            reduce-right.js: {}
            reduce.js: {}
            reverse.js: {}
            set.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            subarray.js: {}
            to-base64.js: {}
            to-hex.js: {}
            to-locale-string.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-spliced.js: {}
            to-string.js: {}
            uint16-array.js: {}
            uint32-array.js: {}
            uint8-array.js: {}
            uint8-clamped-array.js: {}
            unique-by.js: {}
            values.js: {}
            with.js: {}
          unescape.js: {}
          url:
            can-parse.js: {}
            index.js: {}
            parse.js: {}
            to-json.js: {}
          url-search-params:
            index.js: {}
          weak-map:
            delete-all.js: {}
            emplace.js: {}
            from.js: {}
            index.js: {}
            of.js: {}
            upsert.js: {}
          weak-set:
            add-all.js: {}
            delete-all.js: {}
            from.js: {}
            index.js: {}
            of.js: {}
        index.js: {}
        internals:
          README.md: {}
          a-callable.js: {}
          a-constructor.js: {}
          a-data-view.js: {}
          a-map.js: {}
          a-possible-prototype.js: {}
          a-set.js: {}
          a-string.js: {}
          a-weak-map.js: {}
          a-weak-set.js: {}
          add-disposable-resource.js: {}
          add-to-unscopables.js: {}
          advance-string-index.js: {}
          an-instance.js: {}
          an-object-or-undefined.js: {}
          an-object.js: {}
          an-uint8-array.js: {}
          array-buffer-basic-detection.js: {}
          array-buffer-byte-length.js: {}
          array-buffer-is-detached.js: {}
          array-buffer-non-extensible.js: {}
          array-buffer-transfer.js: {}
          array-buffer-view-core.js: {}
          array-buffer.js: {}
          array-copy-within.js: {}
          array-fill.js: {}
          array-for-each.js: {}
          array-from-async.js: {}
          array-from-constructor-and-list.js: {}
          array-from.js: {}
          array-group-to-map.js: {}
          array-group.js: {}
          array-includes.js: {}
          array-iteration-from-last.js: {}
          array-iteration.js: {}
          array-last-index-of.js: {}
          array-method-has-species-support.js: {}
          array-method-is-strict.js: {}
          array-reduce.js: {}
          array-set-length.js: {}
          array-slice.js: {}
          array-sort.js: {}
          array-species-constructor.js: {}
          array-species-create.js: {}
          array-to-reversed.js: {}
          array-unique-by.js: {}
          array-with.js: {}
          async-from-sync-iterator.js: {}
          async-iterator-close.js: {}
          async-iterator-create-proxy.js: {}
          async-iterator-indexed.js: {}
          async-iterator-iteration.js: {}
          async-iterator-map.js: {}
          async-iterator-prototype.js: {}
          async-iterator-wrap.js: {}
          base64-map.js: {}
          call-with-safe-iteration-closing.js: {}
          caller.js: {}
          check-correctness-of-iteration.js: {}
          classof-raw.js: {}
          classof.js: {}
          collection-from.js: {}
          collection-of.js: {}
          collection-strong.js: {}
          collection-weak.js: {}
          collection.js: {}
          composite-key.js: {}
          copy-constructor-properties.js: {}
          correct-is-regexp-logic.js: {}
          correct-prototype-getter.js: {}
          create-html.js: {}
          create-iter-result-object.js: {}
          create-non-enumerable-property.js: {}
          create-property-descriptor.js: {}
          create-property.js: {}
          date-to-iso-string.js: {}
          date-to-primitive.js: {}
          define-built-in-accessor.js: {}
          define-built-in.js: {}
          define-built-ins.js: {}
          define-global-property.js: {}
          delete-property-or-throw.js: {}
          descriptors.js: {}
          detach-transferable.js: {}
          document-create-element.js: {}
          does-not-exceed-safe-integer.js: {}
          dom-exception-constants.js: {}
          dom-iterables.js: {}
          dom-token-list-prototype.js: {}
          engine-ff-version.js: {}
          engine-is-browser.js: {}
          engine-is-bun.js: {}
          engine-is-deno.js: {}
          engine-is-ie-or-edge.js: {}
          engine-is-ios-pebble.js: {}
          engine-is-ios.js: {}
          engine-is-node.js: {}
          engine-is-webos-webkit.js: {}
          engine-user-agent.js: {}
          engine-v8-version.js: {}
          engine-webkit-version.js: {}
          entry-unbind.js: {}
          entry-virtual.js: {}
          enum-bug-keys.js: {}
          error-stack-clear.js: {}
          error-stack-install.js: {}
          error-stack-installable.js: {}
          error-to-string.js: {}
          export.js: {}
          fails.js: {}
          fix-regexp-well-known-symbol-logic.js: {}
          flatten-into-array.js: {}
          freezing.js: {}
          function-apply.js: {}
          function-bind-context.js: {}
          function-bind-native.js: {}
          function-bind.js: {}
          function-call.js: {}
          function-demethodize.js: {}
          function-name.js: {}
          function-uncurry-this-accessor.js: {}
          function-uncurry-this-clause.js: {}
          function-uncurry-this.js: {}
          get-alphabet-option.js: {}
          get-async-iterator-flattenable.js: {}
          get-async-iterator.js: {}
          get-built-in-prototype-method.js: {}
          get-built-in.js: {}
          get-iterator-direct.js: {}
          get-iterator-flattenable.js: {}
          get-iterator-method.js: {}
          get-iterator.js: {}
          get-json-replacer-function.js: {}
          get-method.js: {}
          get-set-record.js: {}
          get-substitution.js: {}
          global.js: {}
          has-own-property.js: {}
          hidden-keys.js: {}
          host-report-errors.js: {}
          html.js: {}
          ie8-dom-define.js: {}
          ieee754.js: {}
          indexed-object.js: {}
          inherit-if-required.js: {}
          inspect-source.js: {}
          install-error-cause.js: {}
          internal-metadata.js: {}
          internal-state.js: {}
          is-array-iterator-method.js: {}
          is-array.js: {}
          is-big-int-array.js: {}
          is-callable.js: {}
          is-constructor.js: {}
          is-data-descriptor.js: {}
          is-forced.js: {}
          is-integral-number.js: {}
          is-iterable.js: {}
          is-null-or-undefined.js: {}
          is-object.js: {}
          is-possible-prototype.js: {}
          is-pure.js: {}
          is-raw-json.js: {}
          is-regexp.js: {}
          is-symbol.js: {}
          iterate-simple.js: {}
          iterate.js: {}
          iterator-close.js: {}
          iterator-create-constructor.js: {}
          iterator-create-proxy.js: {}
          iterator-define.js: {}
          iterator-indexed.js: {}
          iterator-map.js: {}
          iterators-core.js: {}
          iterators.js: {}
          length-of-array-like.js: {}
          make-built-in.js: {}
          map-helpers.js: {}
          map-iterate.js: {}
          map-upsert.js: {}
          math-expm1.js: {}
          math-f16round.js: {}
          math-float-round.js: {}
          math-fround.js: {}
          math-log10.js: {}
          math-log1p.js: {}
          math-scale.js: {}
          math-sign.js: {}
          math-trunc.js: {}
          microtask.js: {}
          native-raw-json.js: {}
          new-promise-capability.js: {}
          normalize-string-argument.js: {}
          not-a-nan.js: {}
          not-a-regexp.js: {}
          number-is-finite.js: {}
          number-parse-float.js: {}
          number-parse-int.js: {}
          numeric-range-iterator.js: {}
          object-assign.js: {}
          object-create.js: {}
          object-define-properties.js: {}
          object-define-property.js: {}
          object-get-own-property-descriptor.js: {}
          object-get-own-property-names-external.js: {}
          object-get-own-property-names.js: {}
          object-get-own-property-symbols.js: {}
          object-get-prototype-of.js: {}
          object-is-extensible.js: {}
          object-is-prototype-of.js: {}
          object-iterator.js: {}
          object-keys-internal.js: {}
          object-keys.js: {}
          object-property-is-enumerable.js: {}
          object-prototype-accessors-forced.js: {}
          object-set-prototype-of.js: {}
          object-to-array.js: {}
          object-to-string.js: {}
          ordinary-to-primitive.js: {}
          own-keys.js: {}
          parse-json-string.js: {}
          path.js: {}
          perform.js: {}
          promise-constructor-detection.js: {}
          promise-native-constructor.js: {}
          promise-resolve.js: {}
          promise-statics-incorrect-iteration.js: {}
          proxy-accessor.js: {}
          queue.js: {}
          reflect-metadata.js: {}
          regexp-exec-abstract.js: {}
          regexp-exec.js: {}
          regexp-flags.js: {}
          regexp-get-flags.js: {}
          regexp-sticky-helpers.js: {}
          regexp-unsupported-dot-all.js: {}
          regexp-unsupported-ncg.js: {}
          require-object-coercible.js: {}
          safe-get-built-in.js: {}
          same-value-zero.js: {}
          same-value.js: {}
          schedulers-fix.js: {}
          set-clone.js: {}
          set-difference.js: {}
          set-helpers.js: {}
          set-intersection.js: {}
          set-is-disjoint-from.js: {}
          set-is-subset-of.js: {}
          set-is-superset-of.js: {}
          set-iterate.js: {}
          set-method-accept-set-like.js: {}
          set-size.js: {}
          set-species.js: {}
          set-symmetric-difference.js: {}
          set-to-string-tag.js: {}
          set-union.js: {}
          shared-key.js: {}
          shared-store.js: {}
          shared.js: {}
          species-constructor.js: {}
          string-cooked.js: {}
          string-html-forced.js: {}
          string-multibyte.js: {}
          string-pad-webkit-bug.js: {}
          string-pad.js: {}
          string-parse.js: {}
          string-punycode-to-ascii.js: {}
          string-repeat.js: {}
          string-trim-end.js: {}
          string-trim-forced.js: {}
          string-trim-start.js: {}
          string-trim.js: {}
          structured-clone-proper-transfer.js: {}
          symbol-constructor-detection.js: {}
          symbol-define-to-primitive.js: {}
          symbol-is-registered.js: {}
          symbol-is-well-known.js: {}
          symbol-registry-detection.js: {}
          task.js: {}
          this-number-value.js: {}
          to-absolute-index.js: {}
          to-big-int.js: {}
          to-index.js: {}
          to-indexed-object.js: {}
          to-integer-or-infinity.js: {}
          to-length.js: {}
          to-object.js: {}
          to-offset.js: {}
          to-positive-integer.js: {}
          to-primitive.js: {}
          to-property-key.js: {}
          to-set-like.js: {}
          to-string-tag-support.js: {}
          to-string.js: {}
          to-uint8-clamped.js: {}
          try-node-require.js: {}
          try-to-string.js: {}
          typed-array-constructor.js: {}
          typed-array-constructors-require-wrappers.js: {}
          typed-array-from-species-and-list.js: {}
          typed-array-from.js: {}
          typed-array-species-constructor.js: {}
          uid.js: {}
          url-constructor-detection.js: {}
          use-symbol-as-uid.js: {}
          v8-prototype-define-bug.js: {}
          validate-arguments-length.js: {}
          weak-map-basic-detection.js: {}
          weak-map-helpers.js: {}
          weak-set-helpers.js: {}
          well-known-symbol-define.js: {}
          well-known-symbol-wrapped.js: {}
          well-known-symbol.js: {}
          whitespaces.js: {}
          wrap-error-constructor-with-cause.js: {}
        modules:
          README.md: {}
          es.aggregate-error.cause.js: {}
          es.aggregate-error.constructor.js: {}
          es.aggregate-error.js: {}
          es.array-buffer.constructor.js: {}
          es.array-buffer.detached.js: {}
          es.array-buffer.is-view.js: {}
          es.array-buffer.slice.js: {}
          es.array-buffer.transfer-to-fixed-length.js: {}
          es.array-buffer.transfer.js: {}
          es.array.at.js: {}
          es.array.concat.js: {}
          es.array.copy-within.js: {}
          es.array.every.js: {}
          es.array.fill.js: {}
          es.array.filter.js: {}
          es.array.find-index.js: {}
          es.array.find-last-index.js: {}
          es.array.find-last.js: {}
          es.array.find.js: {}
          es.array.flat-map.js: {}
          es.array.flat.js: {}
          es.array.for-each.js: {}
          es.array.from.js: {}
          es.array.includes.js: {}
          es.array.index-of.js: {}
          es.array.is-array.js: {}
          es.array.iterator.js: {}
          es.array.join.js: {}
          es.array.last-index-of.js: {}
          es.array.map.js: {}
          es.array.of.js: {}
          es.array.push.js: {}
          es.array.reduce-right.js: {}
          es.array.reduce.js: {}
          es.array.reverse.js: {}
          es.array.slice.js: {}
          es.array.some.js: {}
          es.array.sort.js: {}
          es.array.species.js: {}
          es.array.splice.js: {}
          es.array.to-reversed.js: {}
          es.array.to-sorted.js: {}
          es.array.to-spliced.js: {}
          es.array.unscopables.flat-map.js: {}
          es.array.unscopables.flat.js: {}
          es.array.unshift.js: {}
          es.array.with.js: {}
          es.data-view.constructor.js: {}
          es.data-view.js: {}
          es.date.get-year.js: {}
          es.date.now.js: {}
          es.date.set-year.js: {}
          es.date.to-gmt-string.js: {}
          es.date.to-iso-string.js: {}
          es.date.to-json.js: {}
          es.date.to-primitive.js: {}
          es.date.to-string.js: {}
          es.error.cause.js: {}
          es.error.to-string.js: {}
          es.escape.js: {}
          es.function.bind.js: {}
          es.function.has-instance.js: {}
          es.function.name.js: {}
          es.global-this.js: {}
          es.json.stringify.js: {}
          es.json.to-string-tag.js: {}
          es.map.constructor.js: {}
          es.map.group-by.js: {}
          es.map.js: {}
          es.math.acosh.js: {}
          es.math.asinh.js: {}
          es.math.atanh.js: {}
          es.math.cbrt.js: {}
          es.math.clz32.js: {}
          es.math.cosh.js: {}
          es.math.expm1.js: {}
          es.math.fround.js: {}
          es.math.hypot.js: {}
          es.math.imul.js: {}
          es.math.log10.js: {}
          es.math.log1p.js: {}
          es.math.log2.js: {}
          es.math.sign.js: {}
          es.math.sinh.js: {}
          es.math.tanh.js: {}
          es.math.to-string-tag.js: {}
          es.math.trunc.js: {}
          es.number.constructor.js: {}
          es.number.epsilon.js: {}
          es.number.is-finite.js: {}
          es.number.is-integer.js: {}
          es.number.is-nan.js: {}
          es.number.is-safe-integer.js: {}
          es.number.max-safe-integer.js: {}
          es.number.min-safe-integer.js: {}
          es.number.parse-float.js: {}
          es.number.parse-int.js: {}
          es.number.to-exponential.js: {}
          es.number.to-fixed.js: {}
          es.number.to-precision.js: {}
          es.object.assign.js: {}
          es.object.create.js: {}
          es.object.define-getter.js: {}
          es.object.define-properties.js: {}
          es.object.define-property.js: {}
          es.object.define-setter.js: {}
          es.object.entries.js: {}
          es.object.freeze.js: {}
          es.object.from-entries.js: {}
          es.object.get-own-property-descriptor.js: {}
          es.object.get-own-property-descriptors.js: {}
          es.object.get-own-property-names.js: {}
          es.object.get-own-property-symbols.js: {}
          es.object.get-prototype-of.js: {}
          es.object.group-by.js: {}
          es.object.has-own.js: {}
          es.object.is-extensible.js: {}
          es.object.is-frozen.js: {}
          es.object.is-sealed.js: {}
          es.object.is.js: {}
          es.object.keys.js: {}
          es.object.lookup-getter.js: {}
          es.object.lookup-setter.js: {}
          es.object.prevent-extensions.js: {}
          es.object.proto.js: {}
          es.object.seal.js: {}
          es.object.set-prototype-of.js: {}
          es.object.to-string.js: {}
          es.object.values.js: {}
          es.parse-float.js: {}
          es.parse-int.js: {}
          es.promise.all-settled.js: {}
          es.promise.all.js: {}
          es.promise.any.js: {}
          es.promise.catch.js: {}
          es.promise.constructor.js: {}
          es.promise.finally.js: {}
          es.promise.js: {}
          es.promise.race.js: {}
          es.promise.reject.js: {}
          es.promise.resolve.js: {}
          es.promise.with-resolvers.js: {}
          es.reflect.apply.js: {}
          es.reflect.construct.js: {}
          es.reflect.define-property.js: {}
          es.reflect.delete-property.js: {}
          es.reflect.get-own-property-descriptor.js: {}
          es.reflect.get-prototype-of.js: {}
          es.reflect.get.js: {}
          es.reflect.has.js: {}
          es.reflect.is-extensible.js: {}
          es.reflect.own-keys.js: {}
          es.reflect.prevent-extensions.js: {}
          es.reflect.set-prototype-of.js: {}
          es.reflect.set.js: {}
          es.reflect.to-string-tag.js: {}
          es.regexp.constructor.js: {}
          es.regexp.dot-all.js: {}
          es.regexp.exec.js: {}
          es.regexp.flags.js: {}
          es.regexp.sticky.js: {}
          es.regexp.test.js: {}
          es.regexp.to-string.js: {}
          es.set.constructor.js: {}
          es.set.difference.v2.js: {}
          es.set.intersection.v2.js: {}
          es.set.is-disjoint-from.v2.js: {}
          es.set.is-subset-of.v2.js: {}
          es.set.is-superset-of.v2.js: {}
          es.set.js: {}
          es.set.symmetric-difference.v2.js: {}
          es.set.union.v2.js: {}
          es.string.anchor.js: {}
          es.string.at-alternative.js: {}
          es.string.big.js: {}
          es.string.blink.js: {}
          es.string.bold.js: {}
          es.string.code-point-at.js: {}
          es.string.ends-with.js: {}
          es.string.fixed.js: {}
          es.string.fontcolor.js: {}
          es.string.fontsize.js: {}
          es.string.from-code-point.js: {}
          es.string.includes.js: {}
          es.string.is-well-formed.js: {}
          es.string.italics.js: {}
          es.string.iterator.js: {}
          es.string.link.js: {}
          es.string.match-all.js: {}
          es.string.match.js: {}
          es.string.pad-end.js: {}
          es.string.pad-start.js: {}
          es.string.raw.js: {}
          es.string.repeat.js: {}
          es.string.replace-all.js: {}
          es.string.replace.js: {}
          es.string.search.js: {}
          es.string.small.js: {}
          es.string.split.js: {}
          es.string.starts-with.js: {}
          es.string.strike.js: {}
          es.string.sub.js: {}
          es.string.substr.js: {}
          es.string.sup.js: {}
          es.string.to-well-formed.js: {}
          es.string.trim-end.js: {}
          es.string.trim-left.js: {}
          es.string.trim-right.js: {}
          es.string.trim-start.js: {}
          es.string.trim.js: {}
          es.symbol.async-iterator.js: {}
          es.symbol.constructor.js: {}
          es.symbol.description.js: {}
          es.symbol.for.js: {}
          es.symbol.has-instance.js: {}
          es.symbol.is-concat-spreadable.js: {}
          es.symbol.iterator.js: {}
          es.symbol.js: {}
          es.symbol.key-for.js: {}
          es.symbol.match-all.js: {}
          es.symbol.match.js: {}
          es.symbol.replace.js: {}
          es.symbol.search.js: {}
          es.symbol.species.js: {}
          es.symbol.split.js: {}
          es.symbol.to-primitive.js: {}
          es.symbol.to-string-tag.js: {}
          es.symbol.unscopables.js: {}
          es.typed-array.at.js: {}
          es.typed-array.copy-within.js: {}
          es.typed-array.every.js: {}
          es.typed-array.fill.js: {}
          es.typed-array.filter.js: {}
          es.typed-array.find-index.js: {}
          es.typed-array.find-last-index.js: {}
          es.typed-array.find-last.js: {}
          es.typed-array.find.js: {}
          es.typed-array.float32-array.js: {}
          es.typed-array.float64-array.js: {}
          es.typed-array.for-each.js: {}
          es.typed-array.from.js: {}
          es.typed-array.includes.js: {}
          es.typed-array.index-of.js: {}
          es.typed-array.int16-array.js: {}
          es.typed-array.int32-array.js: {}
          es.typed-array.int8-array.js: {}
          es.typed-array.iterator.js: {}
          es.typed-array.join.js: {}
          es.typed-array.last-index-of.js: {}
          es.typed-array.map.js: {}
          es.typed-array.of.js: {}
          es.typed-array.reduce-right.js: {}
          es.typed-array.reduce.js: {}
          es.typed-array.reverse.js: {}
          es.typed-array.set.js: {}
          es.typed-array.slice.js: {}
          es.typed-array.some.js: {}
          es.typed-array.sort.js: {}
          es.typed-array.subarray.js: {}
          es.typed-array.to-locale-string.js: {}
          es.typed-array.to-reversed.js: {}
          es.typed-array.to-sorted.js: {}
          es.typed-array.to-string.js: {}
          es.typed-array.uint16-array.js: {}
          es.typed-array.uint32-array.js: {}
          es.typed-array.uint8-array.js: {}
          es.typed-array.uint8-clamped-array.js: {}
          es.typed-array.with.js: {}
          es.unescape.js: {}
          es.weak-map.constructor.js: {}
          es.weak-map.js: {}
          es.weak-set.constructor.js: {}
          es.weak-set.js: {}
          esnext.aggregate-error.js: {}
          esnext.array-buffer.detached.js: {}
          esnext.array-buffer.transfer-to-fixed-length.js: {}
          esnext.array-buffer.transfer.js: {}
          esnext.array.at.js: {}
          esnext.array.filter-out.js: {}
          esnext.array.filter-reject.js: {}
          esnext.array.find-last-index.js: {}
          esnext.array.find-last.js: {}
          esnext.array.from-async.js: {}
          esnext.array.group-by-to-map.js: {}
          esnext.array.group-by.js: {}
          esnext.array.group-to-map.js: {}
          esnext.array.group.js: {}
          esnext.array.is-template-object.js: {}
          esnext.array.last-index.js: {}
          esnext.array.last-item.js: {}
          esnext.array.to-reversed.js: {}
          esnext.array.to-sorted.js: {}
          esnext.array.to-spliced.js: {}
          esnext.array.unique-by.js: {}
          esnext.array.with.js: {}
          esnext.async-disposable-stack.constructor.js: {}
          esnext.async-iterator.as-indexed-pairs.js: {}
          esnext.async-iterator.async-dispose.js: {}
          esnext.async-iterator.constructor.js: {}
          esnext.async-iterator.drop.js: {}
          esnext.async-iterator.every.js: {}
          esnext.async-iterator.filter.js: {}
          esnext.async-iterator.find.js: {}
          esnext.async-iterator.flat-map.js: {}
          esnext.async-iterator.for-each.js: {}
          esnext.async-iterator.from.js: {}
          esnext.async-iterator.indexed.js: {}
          esnext.async-iterator.map.js: {}
          esnext.async-iterator.reduce.js: {}
          esnext.async-iterator.some.js: {}
          esnext.async-iterator.take.js: {}
          esnext.async-iterator.to-array.js: {}
          esnext.bigint.range.js: {}
          esnext.composite-key.js: {}
          esnext.composite-symbol.js: {}
          esnext.data-view.get-float16.js: {}
          esnext.data-view.get-uint8-clamped.js: {}
          esnext.data-view.set-float16.js: {}
          esnext.data-view.set-uint8-clamped.js: {}
          esnext.disposable-stack.constructor.js: {}
          esnext.function.demethodize.js: {}
          esnext.function.is-callable.js: {}
          esnext.function.is-constructor.js: {}
          esnext.function.metadata.js: {}
          esnext.function.un-this.js: {}
          esnext.global-this.js: {}
          esnext.iterator.as-indexed-pairs.js: {}
          esnext.iterator.constructor.js: {}
          esnext.iterator.dispose.js: {}
          esnext.iterator.drop.js: {}
          esnext.iterator.every.js: {}
          esnext.iterator.filter.js: {}
          esnext.iterator.find.js: {}
          esnext.iterator.flat-map.js: {}
          esnext.iterator.for-each.js: {}
          esnext.iterator.from.js: {}
          esnext.iterator.indexed.js: {}
          esnext.iterator.map.js: {}
          esnext.iterator.range.js: {}
          esnext.iterator.reduce.js: {}
          esnext.iterator.some.js: {}
          esnext.iterator.take.js: {}
          esnext.iterator.to-array.js: {}
          esnext.iterator.to-async.js: {}
          esnext.json.is-raw-json.js: {}
          esnext.json.parse.js: {}
          esnext.json.raw-json.js: {}
          esnext.map.delete-all.js: {}
          esnext.map.emplace.js: {}
          esnext.map.every.js: {}
          esnext.map.filter.js: {}
          esnext.map.find-key.js: {}
          esnext.map.find.js: {}
          esnext.map.from.js: {}
          esnext.map.group-by.js: {}
          esnext.map.includes.js: {}
          esnext.map.key-by.js: {}
          esnext.map.key-of.js: {}
          esnext.map.map-keys.js: {}
          esnext.map.map-values.js: {}
          esnext.map.merge.js: {}
          esnext.map.of.js: {}
          esnext.map.reduce.js: {}
          esnext.map.some.js: {}
          esnext.map.update-or-insert.js: {}
          esnext.map.update.js: {}
          esnext.map.upsert.js: {}
          esnext.math.clamp.js: {}
          esnext.math.deg-per-rad.js: {}
          esnext.math.degrees.js: {}
          esnext.math.f16round.js: {}
          esnext.math.fscale.js: {}
          esnext.math.iaddh.js: {}
          esnext.math.imulh.js: {}
          esnext.math.isubh.js: {}
          esnext.math.rad-per-deg.js: {}
          esnext.math.radians.js: {}
          esnext.math.scale.js: {}
          esnext.math.seeded-prng.js: {}
          esnext.math.signbit.js: {}
          esnext.math.sum-precise.js: {}
          esnext.math.umulh.js: {}
          esnext.number.from-string.js: {}
          esnext.number.range.js: {}
          esnext.object.group-by.js: {}
          esnext.object.has-own.js: {}
          esnext.object.iterate-entries.js: {}
          esnext.object.iterate-keys.js: {}
          esnext.object.iterate-values.js: {}
          esnext.observable.constructor.js: {}
          esnext.observable.from.js: {}
          esnext.observable.js: {}
          esnext.observable.of.js: {}
          esnext.promise.all-settled.js: {}
          esnext.promise.any.js: {}
          esnext.promise.try.js: {}
          esnext.promise.with-resolvers.js: {}
          esnext.reflect.define-metadata.js: {}
          esnext.reflect.delete-metadata.js: {}
          esnext.reflect.get-metadata-keys.js: {}
          esnext.reflect.get-metadata.js: {}
          esnext.reflect.get-own-metadata-keys.js: {}
          esnext.reflect.get-own-metadata.js: {}
          esnext.reflect.has-metadata.js: {}
          esnext.reflect.has-own-metadata.js: {}
          esnext.reflect.metadata.js: {}
          esnext.regexp.escape.js: {}
          esnext.set.add-all.js: {}
          esnext.set.delete-all.js: {}
          esnext.set.difference.js: {}
          esnext.set.difference.v2.js: {}
          esnext.set.every.js: {}
          esnext.set.filter.js: {}
          esnext.set.find.js: {}
          esnext.set.from.js: {}
          esnext.set.intersection.js: {}
          esnext.set.intersection.v2.js: {}
          esnext.set.is-disjoint-from.js: {}
          esnext.set.is-disjoint-from.v2.js: {}
          esnext.set.is-subset-of.js: {}
          esnext.set.is-subset-of.v2.js: {}
          esnext.set.is-superset-of.js: {}
          esnext.set.is-superset-of.v2.js: {}
          esnext.set.join.js: {}
          esnext.set.map.js: {}
          esnext.set.of.js: {}
          esnext.set.reduce.js: {}
          esnext.set.some.js: {}
          esnext.set.symmetric-difference.js: {}
          esnext.set.symmetric-difference.v2.js: {}
          esnext.set.union.js: {}
          esnext.set.union.v2.js: {}
          esnext.string.at-alternative.js: {}
          esnext.string.at.js: {}
          esnext.string.code-points.js: {}
          esnext.string.cooked.js: {}
          esnext.string.dedent.js: {}
          esnext.string.is-well-formed.js: {}
          esnext.string.match-all.js: {}
          esnext.string.replace-all.js: {}
          esnext.string.to-well-formed.js: {}
          esnext.suppressed-error.constructor.js: {}
          esnext.symbol.async-dispose.js: {}
          esnext.symbol.custom-matcher.js: {}
          esnext.symbol.dispose.js: {}
          esnext.symbol.is-registered-symbol.js: {}
          esnext.symbol.is-registered.js: {}
          esnext.symbol.is-well-known-symbol.js: {}
          esnext.symbol.is-well-known.js: {}
          esnext.symbol.matcher.js: {}
          esnext.symbol.metadata-key.js: {}
          esnext.symbol.metadata.js: {}
          esnext.symbol.observable.js: {}
          esnext.symbol.pattern-match.js: {}
          esnext.symbol.replace-all.js: {}
          esnext.typed-array.at.js: {}
          esnext.typed-array.filter-out.js: {}
          esnext.typed-array.filter-reject.js: {}
          esnext.typed-array.find-last-index.js: {}
          esnext.typed-array.find-last.js: {}
          esnext.typed-array.from-async.js: {}
          esnext.typed-array.group-by.js: {}
          esnext.typed-array.to-reversed.js: {}
          esnext.typed-array.to-sorted.js: {}
          esnext.typed-array.to-spliced.js: {}
          esnext.typed-array.unique-by.js: {}
          esnext.typed-array.with.js: {}
          esnext.uint8-array.from-base64.js: {}
          esnext.uint8-array.from-hex.js: {}
          esnext.uint8-array.to-base64.js: {}
          esnext.uint8-array.to-hex.js: {}
          esnext.weak-map.delete-all.js: {}
          esnext.weak-map.emplace.js: {}
          esnext.weak-map.from.js: {}
          esnext.weak-map.of.js: {}
          esnext.weak-map.upsert.js: {}
          esnext.weak-set.add-all.js: {}
          esnext.weak-set.delete-all.js: {}
          esnext.weak-set.from.js: {}
          esnext.weak-set.of.js: {}
          web.atob.js: {}
          web.btoa.js: {}
          web.clear-immediate.js: {}
          web.dom-collections.for-each.js: {}
          web.dom-collections.iterator.js: {}
          web.dom-exception.constructor.js: {}
          web.dom-exception.stack.js: {}
          web.dom-exception.to-string-tag.js: {}
          web.immediate.js: {}
          web.queue-microtask.js: {}
          web.self.js: {}
          web.set-immediate.js: {}
          web.set-interval.js: {}
          web.set-timeout.js: {}
          web.structured-clone.js: {}
          web.timers.js: {}
          web.url-search-params.constructor.js: {}
          web.url-search-params.delete.js: {}
          web.url-search-params.has.js: {}
          web.url-search-params.js: {}
          web.url-search-params.size.js: {}
          web.url.can-parse.js: {}
          web.url.constructor.js: {}
          web.url.js: {}
          web.url.parse.js: {}
          web.url.to-json.js: {}
        package.json: {}
        postinstall.js: {}
        proposals:
          accessible-object-hasownproperty.js: {}
          array-buffer-base64.js: {}
          array-buffer-transfer.js: {}
          array-filtering-stage-1.js: {}
          array-filtering.js: {}
          array-find-from-last.js: {}
          array-flat-map.js: {}
          array-from-async-stage-2.js: {}
          array-from-async.js: {}
          array-grouping-stage-3-2.js: {}
          array-grouping-stage-3.js: {}
          array-grouping-v2.js: {}
          array-grouping.js: {}
          array-includes.js: {}
          array-is-template-object.js: {}
          array-last.js: {}
          array-unique.js: {}
          async-explicit-resource-management.js: {}
          async-iteration.js: {}
          async-iterator-helpers.js: {}
          change-array-by-copy-stage-4.js: {}
          change-array-by-copy.js: {}
          collection-methods.js: {}
          collection-of-from.js: {}
          data-view-get-set-uint8-clamped.js: {}
          decorator-metadata-v2.js: {}
          decorator-metadata.js: {}
          decorators.js: {}
          efficient-64-bit-arithmetic.js: {}
          error-cause.js: {}
          explicit-resource-management.js: {}
          extractors.js: {}
          float16.js: {}
          function-demethodize.js: {}
          function-is-callable-is-constructor.js: {}
          function-un-this.js: {}
          global-this.js: {}
          index.js: {}
          iterator-helpers-stage-3-2.js: {}
          iterator-helpers-stage-3.js: {}
          iterator-helpers.js: {}
          iterator-range.js: {}
          json-parse-with-source.js: {}
          keys-composition.js: {}
          map-update-or-insert.js: {}
          map-upsert-stage-2.js: {}
          map-upsert.js: {}
          math-extensions.js: {}
          math-signbit.js: {}
          math-sum.js: {}
          number-from-string.js: {}
          number-range.js: {}
          object-from-entries.js: {}
          object-getownpropertydescriptors.js: {}
          object-iteration.js: {}
          object-values-entries.js: {}
          observable.js: {}
          pattern-matching-v2.js: {}
          pattern-matching.js: {}
          promise-all-settled.js: {}
          promise-any.js: {}
          promise-finally.js: {}
          promise-try.js: {}
          promise-with-resolvers.js: {}
          reflect-metadata.js: {}
          regexp-dotall-flag.js: {}
          regexp-escaping.js: {}
          regexp-named-groups.js: {}
          relative-indexing-method.js: {}
          seeded-random.js: {}
          set-methods-v2.js: {}
          set-methods.js: {}
          string-at.js: {}
          string-code-points.js: {}
          string-cooked.js: {}
          string-dedent.js: {}
          string-left-right-trim.js: {}
          string-match-all.js: {}
          string-padding.js: {}
          string-replace-all-stage-4.js: {}
          string-replace-all.js: {}
          symbol-description.js: {}
          symbol-predicates-v2.js: {}
          symbol-predicates.js: {}
          url.js: {}
          using-statement.js: {}
          well-formed-stringify.js: {}
          well-formed-unicode-strings.js: {}
        stable:
          README.md: {}
          aggregate-error.js: {}
          array:
            at.js: {}
            concat.js: {}
            copy-within.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            flat-map.js: {}
            flat.js: {}
            for-each.js: {}
            from.js: {}
            includes.js: {}
            index-of.js: {}
            index.js: {}
            is-array.js: {}
            iterator.js: {}
            join.js: {}
            keys.js: {}
            last-index-of.js: {}
            map.js: {}
            of.js: {}
            push.js: {}
            reduce-right.js: {}
            reduce.js: {}
            reverse.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            splice.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-spliced.js: {}
            unshift.js: {}
            values.js: {}
            virtual:
              at.js: {}
              concat.js: {}
              copy-within.js: {}
              entries.js: {}
              every.js: {}
              fill.js: {}
              filter.js: {}
              find-index.js: {}
              find-last-index.js: {}
              find-last.js: {}
              find.js: {}
              flat-map.js: {}
              flat.js: {}
              for-each.js: {}
              includes.js: {}
              index-of.js: {}
              index.js: {}
              iterator.js: {}
              join.js: {}
              keys.js: {}
              last-index-of.js: {}
              map.js: {}
              push.js: {}
              reduce-right.js: {}
              reduce.js: {}
              reverse.js: {}
              slice.js: {}
              some.js: {}
              sort.js: {}
              splice.js: {}
              to-reversed.js: {}
              to-sorted.js: {}
              to-spliced.js: {}
              unshift.js: {}
              values.js: {}
              with.js: {}
            with.js: {}
          array-buffer:
            constructor.js: {}
            detached.js: {}
            index.js: {}
            is-view.js: {}
            slice.js: {}
            transfer-to-fixed-length.js: {}
            transfer.js: {}
          atob.js: {}
          btoa.js: {}
          clear-immediate.js: {}
          data-view:
            index.js: {}
          date:
            get-year.js: {}
            index.js: {}
            now.js: {}
            set-year.js: {}
            to-gmt-string.js: {}
            to-iso-string.js: {}
            to-json.js: {}
            to-primitive.js: {}
            to-string.js: {}
          dom-collections:
            for-each.js: {}
            index.js: {}
            iterator.js: {}
          dom-exception:
            constructor.js: {}
            index.js: {}
            to-string-tag.js: {}
          error:
            constructor.js: {}
            index.js: {}
            to-string.js: {}
          escape.js: {}
          function:
            bind.js: {}
            has-instance.js: {}
            index.js: {}
            name.js: {}
            virtual:
              bind.js: {}
              index.js: {}
          get-iterator-method.js: {}
          get-iterator.js: {}
          global-this.js: {}
          index.js: {}
          instance:
            at.js: {}
            bind.js: {}
            code-point-at.js: {}
            concat.js: {}
            copy-within.js: {}
            ends-with.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            flags.js: {}
            flat-map.js: {}
            flat.js: {}
            for-each.js: {}
            includes.js: {}
            index-of.js: {}
            is-well-formed.js: {}
            keys.js: {}
            last-index-of.js: {}
            map.js: {}
            match-all.js: {}
            pad-end.js: {}
            pad-start.js: {}
            push.js: {}
            reduce-right.js: {}
            reduce.js: {}
            repeat.js: {}
            replace-all.js: {}
            reverse.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            splice.js: {}
            starts-with.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-spliced.js: {}
            to-well-formed.js: {}
            trim-end.js: {}
            trim-left.js: {}
            trim-right.js: {}
            trim-start.js: {}
            trim.js: {}
            unshift.js: {}
            values.js: {}
            with.js: {}
          is-iterable.js: {}
          json:
            index.js: {}
            stringify.js: {}
            to-string-tag.js: {}
          map:
            group-by.js: {}
            index.js: {}
          math:
            acosh.js: {}
            asinh.js: {}
            atanh.js: {}
            cbrt.js: {}
            clz32.js: {}
            cosh.js: {}
            expm1.js: {}
            fround.js: {}
            hypot.js: {}
            imul.js: {}
            index.js: {}
            log10.js: {}
            log1p.js: {}
            log2.js: {}
            sign.js: {}
            sinh.js: {}
            tanh.js: {}
            to-string-tag.js: {}
            trunc.js: {}
          number:
            constructor.js: {}
            epsilon.js: {}
            index.js: {}
            is-finite.js: {}
            is-integer.js: {}
            is-nan.js: {}
            is-safe-integer.js: {}
            max-safe-integer.js: {}
            min-safe-integer.js: {}
            parse-float.js: {}
            parse-int.js: {}
            to-exponential.js: {}
            to-fixed.js: {}
            to-precision.js: {}
            virtual:
              index.js: {}
              to-exponential.js: {}
              to-fixed.js: {}
              to-precision.js: {}
          object:
            assign.js: {}
            create.js: {}
            define-getter.js: {}
            define-properties.js: {}
            define-property.js: {}
            define-setter.js: {}
            entries.js: {}
            freeze.js: {}
            from-entries.js: {}
            get-own-property-descriptor.js: {}
            get-own-property-descriptors.js: {}
            get-own-property-names.js: {}
            get-own-property-symbols.js: {}
            get-prototype-of.js: {}
            group-by.js: {}
            has-own.js: {}
            index.js: {}
            is-extensible.js: {}
            is-frozen.js: {}
            is-sealed.js: {}
            is.js: {}
            keys.js: {}
            lookup-getter.js: {}
            lookup-setter.js: {}
            prevent-extensions.js: {}
            proto.js: {}
            seal.js: {}
            set-prototype-of.js: {}
            to-string.js: {}
            values.js: {}
          parse-float.js: {}
          parse-int.js: {}
          promise:
            all-settled.js: {}
            any.js: {}
            finally.js: {}
            index.js: {}
            with-resolvers.js: {}
          queue-microtask.js: {}
          reflect:
            apply.js: {}
            construct.js: {}
            define-property.js: {}
            delete-property.js: {}
            get-own-property-descriptor.js: {}
            get-prototype-of.js: {}
            get.js: {}
            has.js: {}
            index.js: {}
            is-extensible.js: {}
            own-keys.js: {}
            prevent-extensions.js: {}
            set-prototype-of.js: {}
            set.js: {}
            to-string-tag.js: {}
          regexp:
            constructor.js: {}
            dot-all.js: {}
            flags.js: {}
            index.js: {}
            match.js: {}
            replace.js: {}
            search.js: {}
            split.js: {}
            sticky.js: {}
            test.js: {}
            to-string.js: {}
          self.js: {}
          set:
            difference.js: {}
            index.js: {}
            intersection.js: {}
            is-disjoint-from.js: {}
            is-subset-of.js: {}
            is-superset-of.js: {}
            symmetric-difference.js: {}
            union.js: {}
          set-immediate.js: {}
          set-interval.js: {}
          set-timeout.js: {}
          string:
            anchor.js: {}
            at.js: {}
            big.js: {}
            blink.js: {}
            bold.js: {}
            code-point-at.js: {}
            ends-with.js: {}
            fixed.js: {}
            fontcolor.js: {}
            fontsize.js: {}
            from-code-point.js: {}
            includes.js: {}
            index.js: {}
            is-well-formed.js: {}
            italics.js: {}
            iterator.js: {}
            link.js: {}
            match-all.js: {}
            match.js: {}
            pad-end.js: {}
            pad-start.js: {}
            raw.js: {}
            repeat.js: {}
            replace-all.js: {}
            replace.js: {}
            search.js: {}
            small.js: {}
            split.js: {}
            starts-with.js: {}
            strike.js: {}
            sub.js: {}
            substr.js: {}
            sup.js: {}
            to-well-formed.js: {}
            trim-end.js: {}
            trim-left.js: {}
            trim-right.js: {}
            trim-start.js: {}
            trim.js: {}
            virtual:
              anchor.js: {}
              at.js: {}
              big.js: {}
              blink.js: {}
              bold.js: {}
              code-point-at.js: {}
              ends-with.js: {}
              fixed.js: {}
              fontcolor.js: {}
              fontsize.js: {}
              includes.js: {}
              index.js: {}
              is-well-formed.js: {}
              italics.js: {}
              iterator.js: {}
              link.js: {}
              match-all.js: {}
              pad-end.js: {}
              pad-start.js: {}
              repeat.js: {}
              replace-all.js: {}
              small.js: {}
              starts-with.js: {}
              strike.js: {}
              sub.js: {}
              substr.js: {}
              sup.js: {}
              to-well-formed.js: {}
              trim-end.js: {}
              trim-left.js: {}
              trim-right.js: {}
              trim-start.js: {}
              trim.js: {}
          structured-clone.js: {}
          symbol:
            async-iterator.js: {}
            description.js: {}
            for.js: {}
            has-instance.js: {}
            index.js: {}
            is-concat-spreadable.js: {}
            iterator.js: {}
            key-for.js: {}
            match-all.js: {}
            match.js: {}
            replace.js: {}
            search.js: {}
            species.js: {}
            split.js: {}
            to-primitive.js: {}
            to-string-tag.js: {}
            unscopables.js: {}
          typed-array:
            at.js: {}
            copy-within.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            float32-array.js: {}
            float64-array.js: {}
            for-each.js: {}
            from.js: {}
            includes.js: {}
            index-of.js: {}
            index.js: {}
            int16-array.js: {}
            int32-array.js: {}
            int8-array.js: {}
            iterator.js: {}
            join.js: {}
            keys.js: {}
            last-index-of.js: {}
            map.js: {}
            methods.js: {}
            of.js: {}
            reduce-right.js: {}
            reduce.js: {}
            reverse.js: {}
            set.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            subarray.js: {}
            to-locale-string.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-string.js: {}
            uint16-array.js: {}
            uint32-array.js: {}
            uint8-array.js: {}
            uint8-clamped-array.js: {}
            values.js: {}
            with.js: {}
          unescape.js: {}
          url:
            can-parse.js: {}
            index.js: {}
            parse.js: {}
            to-json.js: {}
          url-search-params:
            index.js: {}
          weak-map:
            index.js: {}
          weak-set:
            index.js: {}
        stage:
          0.js: {}
          1.js: {}
          2.7.js: {}
          2.js: {}
          3.js: {}
          4.js: {}
          README.md: {}
          index.js: {}
          pre.js: {}
        web:
          README.md: {}
          dom-collections.js: {}
          dom-exception.js: {}
          immediate.js: {}
          index.js: {}
          queue-microtask.js: {}
          structured-clone.js: {}
          timers.js: {}
          url-search-params.js: {}
          url.js: {}
      core-js-compat:
        LICENSE: {}
        README.md: {}
        compat.d.ts: {}
        compat.js: {}
        data.json: {}
        entries.json: {}
        external.json: {}
        get-modules-list-for-target-version.d.ts: {}
        get-modules-list-for-target-version.js: {}
        helpers.js: {}
        index.d.ts: {}
        index.js: {}
        modules-by-versions.json: {}
        modules.json: {}
        package.json: {}
        shared.d.ts: {}
        targets-parser.js: {}
      core-js-pure:
        LICENSE: {}
        README.md: {}
        actual:
          README.md: {}
          aggregate-error.js: {}
          array:
            at.js: {}
            concat.js: {}
            copy-within.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            flat-map.js: {}
            flat.js: {}
            for-each.js: {}
            from-async.js: {}
            from.js: {}
            group-by-to-map.js: {}
            group-by.js: {}
            group-to-map.js: {}
            group.js: {}
            includes.js: {}
            index-of.js: {}
            index.js: {}
            is-array.js: {}
            iterator.js: {}
            join.js: {}
            keys.js: {}
            last-index-of.js: {}
            map.js: {}
            of.js: {}
            push.js: {}
            reduce-right.js: {}
            reduce.js: {}
            reverse.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            splice.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-spliced.js: {}
            unshift.js: {}
            values.js: {}
            virtual:
              at.js: {}
              concat.js: {}
              copy-within.js: {}
              entries.js: {}
              every.js: {}
              fill.js: {}
              filter.js: {}
              find-index.js: {}
              find-last-index.js: {}
              find-last.js: {}
              find.js: {}
              flat-map.js: {}
              flat.js: {}
              for-each.js: {}
              group-by-to-map.js: {}
              group-by.js: {}
              group-to-map.js: {}
              group.js: {}
              includes.js: {}
              index-of.js: {}
              index.js: {}
              iterator.js: {}
              join.js: {}
              keys.js: {}
              last-index-of.js: {}
              map.js: {}
              push.js: {}
              reduce-right.js: {}
              reduce.js: {}
              reverse.js: {}
              slice.js: {}
              some.js: {}
              sort.js: {}
              splice.js: {}
              to-reversed.js: {}
              to-sorted.js: {}
              to-spliced.js: {}
              unshift.js: {}
              values.js: {}
              with.js: {}
            with.js: {}
          array-buffer:
            constructor.js: {}
            detached.js: {}
            index.js: {}
            is-view.js: {}
            slice.js: {}
            transfer-to-fixed-length.js: {}
            transfer.js: {}
          async-disposable-stack:
            constructor.js: {}
            index.js: {}
          async-iterator:
            async-dispose.js: {}
            drop.js: {}
            every.js: {}
            filter.js: {}
            find.js: {}
            flat-map.js: {}
            for-each.js: {}
            from.js: {}
            index.js: {}
            map.js: {}
            reduce.js: {}
            some.js: {}
            take.js: {}
            to-array.js: {}
          atob.js: {}
          btoa.js: {}
          clear-immediate.js: {}
          data-view:
            get-float16.js: {}
            index.js: {}
            set-float16.js: {}
          date:
            get-year.js: {}
            index.js: {}
            now.js: {}
            set-year.js: {}
            to-gmt-string.js: {}
            to-iso-string.js: {}
            to-json.js: {}
            to-primitive.js: {}
            to-string.js: {}
          disposable-stack:
            constructor.js: {}
            index.js: {}
          dom-collections:
            for-each.js: {}
            index.js: {}
            iterator.js: {}
          dom-exception:
            constructor.js: {}
            index.js: {}
            to-string-tag.js: {}
          error:
            constructor.js: {}
            index.js: {}
            to-string.js: {}
          escape.js: {}
          function:
            bind.js: {}
            has-instance.js: {}
            index.js: {}
            metadata.js: {}
            name.js: {}
            virtual:
              bind.js: {}
              index.js: {}
          get-iterator-method.js: {}
          get-iterator.js: {}
          global-this.js: {}
          index.js: {}
          instance:
            at.js: {}
            bind.js: {}
            code-point-at.js: {}
            concat.js: {}
            copy-within.js: {}
            ends-with.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            flags.js: {}
            flat-map.js: {}
            flat.js: {}
            for-each.js: {}
            group-by-to-map.js: {}
            group-by.js: {}
            group-to-map.js: {}
            group.js: {}
            includes.js: {}
            index-of.js: {}
            is-well-formed.js: {}
            keys.js: {}
            last-index-of.js: {}
            map.js: {}
            match-all.js: {}
            pad-end.js: {}
            pad-start.js: {}
            push.js: {}
            reduce-right.js: {}
            reduce.js: {}
            repeat.js: {}
            replace-all.js: {}
            reverse.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            splice.js: {}
            starts-with.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-spliced.js: {}
            to-well-formed.js: {}
            trim-end.js: {}
            trim-left.js: {}
            trim-right.js: {}
            trim-start.js: {}
            trim.js: {}
            unshift.js: {}
            values.js: {}
            with.js: {}
          is-iterable.js: {}
          iterator:
            dispose.js: {}
            drop.js: {}
            every.js: {}
            filter.js: {}
            find.js: {}
            flat-map.js: {}
            for-each.js: {}
            from.js: {}
            index.js: {}
            map.js: {}
            reduce.js: {}
            some.js: {}
            take.js: {}
            to-array.js: {}
            to-async.js: {}
          json:
            index.js: {}
            is-raw-json.js: {}
            parse.js: {}
            raw-json.js: {}
            stringify.js: {}
            to-string-tag.js: {}
          map:
            group-by.js: {}
            index.js: {}
          math:
            acosh.js: {}
            asinh.js: {}
            atanh.js: {}
            cbrt.js: {}
            clz32.js: {}
            cosh.js: {}
            expm1.js: {}
            f16round.js: {}
            fround.js: {}
            hypot.js: {}
            imul.js: {}
            index.js: {}
            log10.js: {}
            log1p.js: {}
            log2.js: {}
            sign.js: {}
            sinh.js: {}
            tanh.js: {}
            to-string-tag.js: {}
            trunc.js: {}
          number:
            constructor.js: {}
            epsilon.js: {}
            index.js: {}
            is-finite.js: {}
            is-integer.js: {}
            is-nan.js: {}
            is-safe-integer.js: {}
            max-safe-integer.js: {}
            min-safe-integer.js: {}
            parse-float.js: {}
            parse-int.js: {}
            to-exponential.js: {}
            to-fixed.js: {}
            to-precision.js: {}
            virtual:
              index.js: {}
              to-exponential.js: {}
              to-fixed.js: {}
              to-precision.js: {}
          object:
            assign.js: {}
            create.js: {}
            define-getter.js: {}
            define-properties.js: {}
            define-property.js: {}
            define-setter.js: {}
            entries.js: {}
            freeze.js: {}
            from-entries.js: {}
            get-own-property-descriptor.js: {}
            get-own-property-descriptors.js: {}
            get-own-property-names.js: {}
            get-own-property-symbols.js: {}
            get-prototype-of.js: {}
            group-by.js: {}
            has-own.js: {}
            index.js: {}
            is-extensible.js: {}
            is-frozen.js: {}
            is-sealed.js: {}
            is.js: {}
            keys.js: {}
            lookup-getter.js: {}
            lookup-setter.js: {}
            prevent-extensions.js: {}
            proto.js: {}
            seal.js: {}
            set-prototype-of.js: {}
            to-string.js: {}
            values.js: {}
          parse-float.js: {}
          parse-int.js: {}
          promise:
            all-settled.js: {}
            any.js: {}
            finally.js: {}
            index.js: {}
            with-resolvers.js: {}
          queue-microtask.js: {}
          reflect:
            apply.js: {}
            construct.js: {}
            define-property.js: {}
            delete-property.js: {}
            get-own-property-descriptor.js: {}
            get-prototype-of.js: {}
            get.js: {}
            has.js: {}
            index.js: {}
            is-extensible.js: {}
            own-keys.js: {}
            prevent-extensions.js: {}
            set-prototype-of.js: {}
            set.js: {}
            to-string-tag.js: {}
          regexp:
            constructor.js: {}
            dot-all.js: {}
            flags.js: {}
            index.js: {}
            match.js: {}
            replace.js: {}
            search.js: {}
            split.js: {}
            sticky.js: {}
            test.js: {}
            to-string.js: {}
          self.js: {}
          set:
            difference.js: {}
            index.js: {}
            intersection.js: {}
            is-disjoint-from.js: {}
            is-subset-of.js: {}
            is-superset-of.js: {}
            symmetric-difference.js: {}
            union.js: {}
          set-immediate.js: {}
          set-interval.js: {}
          set-timeout.js: {}
          string:
            anchor.js: {}
            at.js: {}
            big.js: {}
            blink.js: {}
            bold.js: {}
            code-point-at.js: {}
            ends-with.js: {}
            fixed.js: {}
            fontcolor.js: {}
            fontsize.js: {}
            from-code-point.js: {}
            includes.js: {}
            index.js: {}
            is-well-formed.js: {}
            italics.js: {}
            iterator.js: {}
            link.js: {}
            match-all.js: {}
            match.js: {}
            pad-end.js: {}
            pad-start.js: {}
            raw.js: {}
            repeat.js: {}
            replace-all.js: {}
            replace.js: {}
            search.js: {}
            small.js: {}
            split.js: {}
            starts-with.js: {}
            strike.js: {}
            sub.js: {}
            substr.js: {}
            sup.js: {}
            to-well-formed.js: {}
            trim-end.js: {}
            trim-left.js: {}
            trim-right.js: {}
            trim-start.js: {}
            trim.js: {}
            virtual:
              anchor.js: {}
              at.js: {}
              big.js: {}
              blink.js: {}
              bold.js: {}
              code-point-at.js: {}
              ends-with.js: {}
              fixed.js: {}
              fontcolor.js: {}
              fontsize.js: {}
              includes.js: {}
              index.js: {}
              is-well-formed.js: {}
              italics.js: {}
              iterator.js: {}
              link.js: {}
              match-all.js: {}
              pad-end.js: {}
              pad-start.js: {}
              repeat.js: {}
              replace-all.js: {}
              small.js: {}
              starts-with.js: {}
              strike.js: {}
              sub.js: {}
              substr.js: {}
              sup.js: {}
              to-well-formed.js: {}
              trim-end.js: {}
              trim-left.js: {}
              trim-right.js: {}
              trim-start.js: {}
              trim.js: {}
          structured-clone.js: {}
          suppressed-error.js: {}
          symbol:
            async-dispose.js: {}
            async-iterator.js: {}
            description.js: {}
            dispose.js: {}
            for.js: {}
            has-instance.js: {}
            index.js: {}
            is-concat-spreadable.js: {}
            iterator.js: {}
            key-for.js: {}
            match-all.js: {}
            match.js: {}
            metadata.js: {}
            replace.js: {}
            search.js: {}
            species.js: {}
            split.js: {}
            to-primitive.js: {}
            to-string-tag.js: {}
            unscopables.js: {}
          typed-array:
            at.js: {}
            copy-within.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            float32-array.js: {}
            float64-array.js: {}
            for-each.js: {}
            from-base64.js: {}
            from-hex.js: {}
            from.js: {}
            includes.js: {}
            index-of.js: {}
            index.js: {}
            int16-array.js: {}
            int32-array.js: {}
            int8-array.js: {}
            iterator.js: {}
            join.js: {}
            keys.js: {}
            last-index-of.js: {}
            map.js: {}
            methods.js: {}
            of.js: {}
            reduce-right.js: {}
            reduce.js: {}
            reverse.js: {}
            set.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            subarray.js: {}
            to-base64.js: {}
            to-hex.js: {}
            to-locale-string.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-spliced.js: {}
            to-string.js: {}
            uint16-array.js: {}
            uint32-array.js: {}
            uint8-array.js: {}
            uint8-clamped-array.js: {}
            values.js: {}
            with.js: {}
          unescape.js: {}
          url:
            can-parse.js: {}
            index.js: {}
            parse.js: {}
            to-json.js: {}
          url-search-params:
            index.js: {}
          weak-map:
            index.js: {}
          weak-set:
            index.js: {}
        configurator.js: {}
        es:
          README.md: {}
          aggregate-error.js: {}
          array:
            at.js: {}
            concat.js: {}
            copy-within.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            flat-map.js: {}
            flat.js: {}
            for-each.js: {}
            from.js: {}
            includes.js: {}
            index-of.js: {}
            index.js: {}
            is-array.js: {}
            iterator.js: {}
            join.js: {}
            keys.js: {}
            last-index-of.js: {}
            map.js: {}
            of.js: {}
            push.js: {}
            reduce-right.js: {}
            reduce.js: {}
            reverse.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            splice.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-spliced.js: {}
            unshift.js: {}
            values.js: {}
            virtual:
              at.js: {}
              concat.js: {}
              copy-within.js: {}
              entries.js: {}
              every.js: {}
              fill.js: {}
              filter.js: {}
              find-index.js: {}
              find-last-index.js: {}
              find-last.js: {}
              find.js: {}
              flat-map.js: {}
              flat.js: {}
              for-each.js: {}
              includes.js: {}
              index-of.js: {}
              index.js: {}
              iterator.js: {}
              join.js: {}
              keys.js: {}
              last-index-of.js: {}
              map.js: {}
              push.js: {}
              reduce-right.js: {}
              reduce.js: {}
              reverse.js: {}
              slice.js: {}
              some.js: {}
              sort.js: {}
              splice.js: {}
              to-reversed.js: {}
              to-sorted.js: {}
              to-spliced.js: {}
              unshift.js: {}
              values.js: {}
              with.js: {}
            with.js: {}
          array-buffer:
            constructor.js: {}
            detached.js: {}
            index.js: {}
            is-view.js: {}
            slice.js: {}
            transfer-to-fixed-length.js: {}
            transfer.js: {}
          data-view:
            index.js: {}
          date:
            get-year.js: {}
            index.js: {}
            now.js: {}
            set-year.js: {}
            to-gmt-string.js: {}
            to-iso-string.js: {}
            to-json.js: {}
            to-primitive.js: {}
            to-string.js: {}
          error:
            constructor.js: {}
            index.js: {}
            to-string.js: {}
          escape.js: {}
          function:
            bind.js: {}
            has-instance.js: {}
            index.js: {}
            name.js: {}
            virtual:
              bind.js: {}
              index.js: {}
          get-iterator-method.js: {}
          get-iterator.js: {}
          global-this.js: {}
          index.js: {}
          instance:
            at.js: {}
            bind.js: {}
            code-point-at.js: {}
            concat.js: {}
            copy-within.js: {}
            ends-with.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            flags.js: {}
            flat-map.js: {}
            flat.js: {}
            for-each.js: {}
            includes.js: {}
            index-of.js: {}
            is-well-formed.js: {}
            keys.js: {}
            last-index-of.js: {}
            map.js: {}
            match-all.js: {}
            pad-end.js: {}
            pad-start.js: {}
            push.js: {}
            reduce-right.js: {}
            reduce.js: {}
            repeat.js: {}
            replace-all.js: {}
            reverse.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            splice.js: {}
            starts-with.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-spliced.js: {}
            to-well-formed.js: {}
            trim-end.js: {}
            trim-left.js: {}
            trim-right.js: {}
            trim-start.js: {}
            trim.js: {}
            unshift.js: {}
            values.js: {}
            with.js: {}
          is-iterable.js: {}
          json:
            index.js: {}
            stringify.js: {}
            to-string-tag.js: {}
          map:
            group-by.js: {}
            index.js: {}
          math:
            acosh.js: {}
            asinh.js: {}
            atanh.js: {}
            cbrt.js: {}
            clz32.js: {}
            cosh.js: {}
            expm1.js: {}
            fround.js: {}
            hypot.js: {}
            imul.js: {}
            index.js: {}
            log10.js: {}
            log1p.js: {}
            log2.js: {}
            sign.js: {}
            sinh.js: {}
            tanh.js: {}
            to-string-tag.js: {}
            trunc.js: {}
          number:
            constructor.js: {}
            epsilon.js: {}
            index.js: {}
            is-finite.js: {}
            is-integer.js: {}
            is-nan.js: {}
            is-safe-integer.js: {}
            max-safe-integer.js: {}
            min-safe-integer.js: {}
            parse-float.js: {}
            parse-int.js: {}
            to-exponential.js: {}
            to-fixed.js: {}
            to-precision.js: {}
            virtual:
              index.js: {}
              to-exponential.js: {}
              to-fixed.js: {}
              to-precision.js: {}
          object:
            assign.js: {}
            create.js: {}
            define-getter.js: {}
            define-properties.js: {}
            define-property.js: {}
            define-setter.js: {}
            entries.js: {}
            freeze.js: {}
            from-entries.js: {}
            get-own-property-descriptor.js: {}
            get-own-property-descriptors.js: {}
            get-own-property-names.js: {}
            get-own-property-symbols.js: {}
            get-prototype-of.js: {}
            group-by.js: {}
            has-own.js: {}
            index.js: {}
            is-extensible.js: {}
            is-frozen.js: {}
            is-sealed.js: {}
            is.js: {}
            keys.js: {}
            lookup-getter.js: {}
            lookup-setter.js: {}
            prevent-extensions.js: {}
            proto.js: {}
            seal.js: {}
            set-prototype-of.js: {}
            to-string.js: {}
            values.js: {}
          parse-float.js: {}
          parse-int.js: {}
          promise:
            all-settled.js: {}
            any.js: {}
            finally.js: {}
            index.js: {}
            with-resolvers.js: {}
          reflect:
            apply.js: {}
            construct.js: {}
            define-property.js: {}
            delete-property.js: {}
            get-own-property-descriptor.js: {}
            get-prototype-of.js: {}
            get.js: {}
            has.js: {}
            index.js: {}
            is-extensible.js: {}
            own-keys.js: {}
            prevent-extensions.js: {}
            set-prototype-of.js: {}
            set.js: {}
            to-string-tag.js: {}
          regexp:
            constructor.js: {}
            dot-all.js: {}
            flags.js: {}
            index.js: {}
            match.js: {}
            replace.js: {}
            search.js: {}
            split.js: {}
            sticky.js: {}
            test.js: {}
            to-string.js: {}
          set:
            difference.js: {}
            index.js: {}
            intersection.js: {}
            is-disjoint-from.js: {}
            is-subset-of.js: {}
            is-superset-of.js: {}
            symmetric-difference.js: {}
            union.js: {}
          string:
            anchor.js: {}
            at.js: {}
            big.js: {}
            blink.js: {}
            bold.js: {}
            code-point-at.js: {}
            ends-with.js: {}
            fixed.js: {}
            fontcolor.js: {}
            fontsize.js: {}
            from-code-point.js: {}
            includes.js: {}
            index.js: {}
            is-well-formed.js: {}
            italics.js: {}
            iterator.js: {}
            link.js: {}
            match-all.js: {}
            match.js: {}
            pad-end.js: {}
            pad-start.js: {}
            raw.js: {}
            repeat.js: {}
            replace-all.js: {}
            replace.js: {}
            search.js: {}
            small.js: {}
            split.js: {}
            starts-with.js: {}
            strike.js: {}
            sub.js: {}
            substr.js: {}
            sup.js: {}
            to-well-formed.js: {}
            trim-end.js: {}
            trim-left.js: {}
            trim-right.js: {}
            trim-start.js: {}
            trim.js: {}
            virtual:
              anchor.js: {}
              at.js: {}
              big.js: {}
              blink.js: {}
              bold.js: {}
              code-point-at.js: {}
              ends-with.js: {}
              fixed.js: {}
              fontcolor.js: {}
              fontsize.js: {}
              includes.js: {}
              index.js: {}
              is-well-formed.js: {}
              italics.js: {}
              iterator.js: {}
              link.js: {}
              match-all.js: {}
              pad-end.js: {}
              pad-start.js: {}
              repeat.js: {}
              replace-all.js: {}
              small.js: {}
              starts-with.js: {}
              strike.js: {}
              sub.js: {}
              substr.js: {}
              sup.js: {}
              to-well-formed.js: {}
              trim-end.js: {}
              trim-left.js: {}
              trim-right.js: {}
              trim-start.js: {}
              trim.js: {}
          symbol:
            async-iterator.js: {}
            description.js: {}
            for.js: {}
            has-instance.js: {}
            index.js: {}
            is-concat-spreadable.js: {}
            iterator.js: {}
            key-for.js: {}
            match-all.js: {}
            match.js: {}
            replace.js: {}
            search.js: {}
            species.js: {}
            split.js: {}
            to-primitive.js: {}
            to-string-tag.js: {}
            unscopables.js: {}
          typed-array:
            at.js: {}
            copy-within.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            float32-array.js: {}
            float64-array.js: {}
            for-each.js: {}
            from.js: {}
            includes.js: {}
            index-of.js: {}
            index.js: {}
            int16-array.js: {}
            int32-array.js: {}
            int8-array.js: {}
            iterator.js: {}
            join.js: {}
            keys.js: {}
            last-index-of.js: {}
            map.js: {}
            methods.js: {}
            of.js: {}
            reduce-right.js: {}
            reduce.js: {}
            reverse.js: {}
            set.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            subarray.js: {}
            to-locale-string.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-string.js: {}
            uint16-array.js: {}
            uint32-array.js: {}
            uint8-array.js: {}
            uint8-clamped-array.js: {}
            values.js: {}
            with.js: {}
          unescape.js: {}
          weak-map:
            index.js: {}
          weak-set:
            index.js: {}
        features:
          aggregate-error.js: {}
          array:
            at.js: {}
            concat.js: {}
            copy-within.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter-out.js: {}
            filter-reject.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            flat-map.js: {}
            flat.js: {}
            for-each.js: {}
            from-async.js: {}
            from.js: {}
            group-by-to-map.js: {}
            group-by.js: {}
            group-to-map.js: {}
            group.js: {}
            includes.js: {}
            index-of.js: {}
            index.js: {}
            is-array.js: {}
            is-template-object.js: {}
            iterator.js: {}
            join.js: {}
            keys.js: {}
            last-index-of.js: {}
            last-index.js: {}
            last-item.js: {}
            map.js: {}
            of.js: {}
            push.js: {}
            reduce-right.js: {}
            reduce.js: {}
            reverse.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            splice.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-spliced.js: {}
            unique-by.js: {}
            unshift.js: {}
            values.js: {}
            virtual:
              at.js: {}
              concat.js: {}
              copy-within.js: {}
              entries.js: {}
              every.js: {}
              fill.js: {}
              filter-out.js: {}
              filter-reject.js: {}
              filter.js: {}
              find-index.js: {}
              find-last-index.js: {}
              find-last.js: {}
              find.js: {}
              flat-map.js: {}
              flat.js: {}
              for-each.js: {}
              group-by-to-map.js: {}
              group-by.js: {}
              group-to-map.js: {}
              group.js: {}
              includes.js: {}
              index-of.js: {}
              index.js: {}
              iterator.js: {}
              join.js: {}
              keys.js: {}
              last-index-of.js: {}
              map.js: {}
              push.js: {}
              reduce-right.js: {}
              reduce.js: {}
              reverse.js: {}
              slice.js: {}
              some.js: {}
              sort.js: {}
              splice.js: {}
              to-reversed.js: {}
              to-sorted.js: {}
              to-spliced.js: {}
              unique-by.js: {}
              unshift.js: {}
              values.js: {}
              with.js: {}
            with.js: {}
          array-buffer:
            constructor.js: {}
            detached.js: {}
            index.js: {}
            is-view.js: {}
            slice.js: {}
            transfer-to-fixed-length.js: {}
            transfer.js: {}
          async-disposable-stack:
            constructor.js: {}
            index.js: {}
          async-iterator:
            as-indexed-pairs.js: {}
            async-dispose.js: {}
            drop.js: {}
            every.js: {}
            filter.js: {}
            find.js: {}
            flat-map.js: {}
            for-each.js: {}
            from.js: {}
            index.js: {}
            indexed.js: {}
            map.js: {}
            reduce.js: {}
            some.js: {}
            take.js: {}
            to-array.js: {}
          atob.js: {}
          bigint:
            index.js: {}
            range.js: {}
          btoa.js: {}
          clear-immediate.js: {}
          composite-key.js: {}
          composite-symbol.js: {}
          data-view:
            get-float16.js: {}
            get-uint8-clamped.js: {}
            index.js: {}
            set-float16.js: {}
            set-uint8-clamped.js: {}
          date:
            get-year.js: {}
            index.js: {}
            now.js: {}
            set-year.js: {}
            to-gmt-string.js: {}
            to-iso-string.js: {}
            to-json.js: {}
            to-primitive.js: {}
            to-string.js: {}
          disposable-stack:
            constructor.js: {}
            index.js: {}
          dom-collections:
            for-each.js: {}
            index.js: {}
            iterator.js: {}
          dom-exception:
            constructor.js: {}
            index.js: {}
            to-string-tag.js: {}
          error:
            constructor.js: {}
            index.js: {}
            to-string.js: {}
          escape.js: {}
          function:
            bind.js: {}
            demethodize.js: {}
            has-instance.js: {}
            index.js: {}
            is-callable.js: {}
            is-constructor.js: {}
            metadata.js: {}
            name.js: {}
            un-this.js: {}
            virtual:
              bind.js: {}
              demethodize.js: {}
              index.js: {}
              un-this.js: {}
          get-iterator-method.js: {}
          get-iterator.js: {}
          global-this.js: {}
          index.js: {}
          instance:
            at.js: {}
            bind.js: {}
            code-point-at.js: {}
            code-points.js: {}
            concat.js: {}
            copy-within.js: {}
            demethodize.js: {}
            ends-with.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter-out.js: {}
            filter-reject.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            flags.js: {}
            flat-map.js: {}
            flat.js: {}
            for-each.js: {}
            group-by-to-map.js: {}
            group-by.js: {}
            group-to-map.js: {}
            group.js: {}
            includes.js: {}
            index-of.js: {}
            is-well-formed.js: {}
            keys.js: {}
            last-index-of.js: {}
            map.js: {}
            match-all.js: {}
            pad-end.js: {}
            pad-start.js: {}
            push.js: {}
            reduce-right.js: {}
            reduce.js: {}
            repeat.js: {}
            replace-all.js: {}
            reverse.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            splice.js: {}
            starts-with.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-spliced.js: {}
            to-well-formed.js: {}
            trim-end.js: {}
            trim-left.js: {}
            trim-right.js: {}
            trim-start.js: {}
            trim.js: {}
            un-this.js: {}
            unique-by.js: {}
            unshift.js: {}
            values.js: {}
            with.js: {}
          is-iterable.js: {}
          iterator:
            as-indexed-pairs.js: {}
            dispose.js: {}
            drop.js: {}
            every.js: {}
            filter.js: {}
            find.js: {}
            flat-map.js: {}
            for-each.js: {}
            from.js: {}
            index.js: {}
            indexed.js: {}
            map.js: {}
            range.js: {}
            reduce.js: {}
            some.js: {}
            take.js: {}
            to-array.js: {}
            to-async.js: {}
          json:
            index.js: {}
            is-raw-json.js: {}
            parse.js: {}
            raw-json.js: {}
            stringify.js: {}
            to-string-tag.js: {}
          map:
            delete-all.js: {}
            emplace.js: {}
            every.js: {}
            filter.js: {}
            find-key.js: {}
            find.js: {}
            from.js: {}
            group-by.js: {}
            includes.js: {}
            index.js: {}
            key-by.js: {}
            key-of.js: {}
            map-keys.js: {}
            map-values.js: {}
            merge.js: {}
            of.js: {}
            reduce.js: {}
            some.js: {}
            update-or-insert.js: {}
            update.js: {}
            upsert.js: {}
          math:
            acosh.js: {}
            asinh.js: {}
            atanh.js: {}
            cbrt.js: {}
            clamp.js: {}
            clz32.js: {}
            cosh.js: {}
            deg-per-rad.js: {}
            degrees.js: {}
            expm1.js: {}
            f16round.js: {}
            fround.js: {}
            fscale.js: {}
            hypot.js: {}
            iaddh.js: {}
            imul.js: {}
            imulh.js: {}
            index.js: {}
            isubh.js: {}
            log10.js: {}
            log1p.js: {}
            log2.js: {}
            rad-per-deg.js: {}
            radians.js: {}
            scale.js: {}
            seeded-prng.js: {}
            sign.js: {}
            signbit.js: {}
            sinh.js: {}
            sum-precise.js: {}
            tanh.js: {}
            to-string-tag.js: {}
            trunc.js: {}
            umulh.js: {}
          number:
            constructor.js: {}
            epsilon.js: {}
            from-string.js: {}
            index.js: {}
            is-finite.js: {}
            is-integer.js: {}
            is-nan.js: {}
            is-safe-integer.js: {}
            max-safe-integer.js: {}
            min-safe-integer.js: {}
            parse-float.js: {}
            parse-int.js: {}
            range.js: {}
            to-exponential.js: {}
            to-fixed.js: {}
            to-precision.js: {}
            virtual:
              index.js: {}
              to-exponential.js: {}
              to-fixed.js: {}
              to-precision.js: {}
          object:
            assign.js: {}
            create.js: {}
            define-getter.js: {}
            define-properties.js: {}
            define-property.js: {}
            define-setter.js: {}
            entries.js: {}
            freeze.js: {}
            from-entries.js: {}
            get-own-property-descriptor.js: {}
            get-own-property-descriptors.js: {}
            get-own-property-names.js: {}
            get-own-property-symbols.js: {}
            get-prototype-of.js: {}
            group-by.js: {}
            has-own.js: {}
            index.js: {}
            is-extensible.js: {}
            is-frozen.js: {}
            is-sealed.js: {}
            is.js: {}
            iterate-entries.js: {}
            iterate-keys.js: {}
            iterate-values.js: {}
            keys.js: {}
            lookup-getter.js: {}
            lookup-setter.js: {}
            prevent-extensions.js: {}
            proto.js: {}
            seal.js: {}
            set-prototype-of.js: {}
            to-string.js: {}
            values.js: {}
          observable:
            index.js: {}
          parse-float.js: {}
          parse-int.js: {}
          promise:
            all-settled.js: {}
            any.js: {}
            finally.js: {}
            index.js: {}
            try.js: {}
            with-resolvers.js: {}
          queue-microtask.js: {}
          reflect:
            apply.js: {}
            construct.js: {}
            define-metadata.js: {}
            define-property.js: {}
            delete-metadata.js: {}
            delete-property.js: {}
            get-metadata-keys.js: {}
            get-metadata.js: {}
            get-own-metadata-keys.js: {}
            get-own-metadata.js: {}
            get-own-property-descriptor.js: {}
            get-prototype-of.js: {}
            get.js: {}
            has-metadata.js: {}
            has-own-metadata.js: {}
            has.js: {}
            index.js: {}
            is-extensible.js: {}
            metadata.js: {}
            own-keys.js: {}
            prevent-extensions.js: {}
            set-prototype-of.js: {}
            set.js: {}
            to-string-tag.js: {}
          regexp:
            constructor.js: {}
            dot-all.js: {}
            escape.js: {}
            flags.js: {}
            index.js: {}
            match.js: {}
            replace.js: {}
            search.js: {}
            split.js: {}
            sticky.js: {}
            test.js: {}
            to-string.js: {}
          self.js: {}
          set:
            add-all.js: {}
            delete-all.js: {}
            difference.js: {}
            every.js: {}
            filter.js: {}
            find.js: {}
            from.js: {}
            index.js: {}
            intersection.js: {}
            is-disjoint-from.js: {}
            is-subset-of.js: {}
            is-superset-of.js: {}
            join.js: {}
            map.js: {}
            of.js: {}
            reduce.js: {}
            some.js: {}
            symmetric-difference.js: {}
            union.js: {}
          set-immediate.js: {}
          set-interval.js: {}
          set-timeout.js: {}
          string:
            anchor.js: {}
            at.js: {}
            big.js: {}
            blink.js: {}
            bold.js: {}
            code-point-at.js: {}
            code-points.js: {}
            cooked.js: {}
            dedent.js: {}
            ends-with.js: {}
            fixed.js: {}
            fontcolor.js: {}
            fontsize.js: {}
            from-code-point.js: {}
            includes.js: {}
            index.js: {}
            is-well-formed.js: {}
            italics.js: {}
            iterator.js: {}
            link.js: {}
            match-all.js: {}
            match.js: {}
            pad-end.js: {}
            pad-start.js: {}
            raw.js: {}
            repeat.js: {}
            replace-all.js: {}
            replace.js: {}
            search.js: {}
            small.js: {}
            split.js: {}
            starts-with.js: {}
            strike.js: {}
            sub.js: {}
            substr.js: {}
            sup.js: {}
            to-well-formed.js: {}
            trim-end.js: {}
            trim-left.js: {}
            trim-right.js: {}
            trim-start.js: {}
            trim.js: {}
            virtual:
              anchor.js: {}
              at.js: {}
              big.js: {}
              blink.js: {}
              bold.js: {}
              code-point-at.js: {}
              code-points.js: {}
              ends-with.js: {}
              fixed.js: {}
              fontcolor.js: {}
              fontsize.js: {}
              includes.js: {}
              index.js: {}
              is-well-formed.js: {}
              italics.js: {}
              iterator.js: {}
              link.js: {}
              match-all.js: {}
              pad-end.js: {}
              pad-start.js: {}
              repeat.js: {}
              replace-all.js: {}
              small.js: {}
              starts-with.js: {}
              strike.js: {}
              sub.js: {}
              substr.js: {}
              sup.js: {}
              to-well-formed.js: {}
              trim-end.js: {}
              trim-left.js: {}
              trim-right.js: {}
              trim-start.js: {}
              trim.js: {}
          structured-clone.js: {}
          suppressed-error.js: {}
          symbol:
            async-dispose.js: {}
            async-iterator.js: {}
            custom-matcher.js: {}
            description.js: {}
            dispose.js: {}
            for.js: {}
            has-instance.js: {}
            index.js: {}
            is-concat-spreadable.js: {}
            is-registered-symbol.js: {}
            is-registered.js: {}
            is-well-known-symbol.js: {}
            is-well-known.js: {}
            iterator.js: {}
            key-for.js: {}
            match-all.js: {}
            match.js: {}
            matcher.js: {}
            metadata-key.js: {}
            metadata.js: {}
            observable.js: {}
            pattern-match.js: {}
            replace-all.js: {}
            replace.js: {}
            search.js: {}
            species.js: {}
            split.js: {}
            to-primitive.js: {}
            to-string-tag.js: {}
            unscopables.js: {}
          typed-array:
            at.js: {}
            copy-within.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter-out.js: {}
            filter-reject.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            float32-array.js: {}
            float64-array.js: {}
            for-each.js: {}
            from-async.js: {}
            from-base64.js: {}
            from-hex.js: {}
            from.js: {}
            group-by.js: {}
            includes.js: {}
            index-of.js: {}
            index.js: {}
            int16-array.js: {}
            int32-array.js: {}
            int8-array.js: {}
            iterator.js: {}
            join.js: {}
            keys.js: {}
            last-index-of.js: {}
            map.js: {}
            methods.js: {}
            of.js: {}
            reduce-right.js: {}
            reduce.js: {}
            reverse.js: {}
            set.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            subarray.js: {}
            to-base64.js: {}
            to-hex.js: {}
            to-locale-string.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-spliced.js: {}
            to-string.js: {}
            uint16-array.js: {}
            uint32-array.js: {}
            uint8-array.js: {}
            uint8-clamped-array.js: {}
            unique-by.js: {}
            values.js: {}
            with.js: {}
          unescape.js: {}
          url:
            can-parse.js: {}
            index.js: {}
            parse.js: {}
            to-json.js: {}
          url-search-params:
            index.js: {}
          weak-map:
            delete-all.js: {}
            emplace.js: {}
            from.js: {}
            index.js: {}
            of.js: {}
            upsert.js: {}
          weak-set:
            add-all.js: {}
            delete-all.js: {}
            from.js: {}
            index.js: {}
            of.js: {}
        full:
          README.md: {}
          aggregate-error.js: {}
          array:
            at.js: {}
            concat.js: {}
            copy-within.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter-out.js: {}
            filter-reject.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            flat-map.js: {}
            flat.js: {}
            for-each.js: {}
            from-async.js: {}
            from.js: {}
            group-by-to-map.js: {}
            group-by.js: {}
            group-to-map.js: {}
            group.js: {}
            includes.js: {}
            index-of.js: {}
            index.js: {}
            is-array.js: {}
            is-template-object.js: {}
            iterator.js: {}
            join.js: {}
            keys.js: {}
            last-index-of.js: {}
            last-index.js: {}
            last-item.js: {}
            map.js: {}
            of.js: {}
            push.js: {}
            reduce-right.js: {}
            reduce.js: {}
            reverse.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            splice.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-spliced.js: {}
            unique-by.js: {}
            unshift.js: {}
            values.js: {}
            virtual:
              at.js: {}
              concat.js: {}
              copy-within.js: {}
              entries.js: {}
              every.js: {}
              fill.js: {}
              filter-out.js: {}
              filter-reject.js: {}
              filter.js: {}
              find-index.js: {}
              find-last-index.js: {}
              find-last.js: {}
              find.js: {}
              flat-map.js: {}
              flat.js: {}
              for-each.js: {}
              group-by-to-map.js: {}
              group-by.js: {}
              group-to-map.js: {}
              group.js: {}
              includes.js: {}
              index-of.js: {}
              index.js: {}
              iterator.js: {}
              join.js: {}
              keys.js: {}
              last-index-of.js: {}
              map.js: {}
              push.js: {}
              reduce-right.js: {}
              reduce.js: {}
              reverse.js: {}
              slice.js: {}
              some.js: {}
              sort.js: {}
              splice.js: {}
              to-reversed.js: {}
              to-sorted.js: {}
              to-spliced.js: {}
              unique-by.js: {}
              unshift.js: {}
              values.js: {}
              with.js: {}
            with.js: {}
          array-buffer:
            constructor.js: {}
            detached.js: {}
            index.js: {}
            is-view.js: {}
            slice.js: {}
            transfer-to-fixed-length.js: {}
            transfer.js: {}
          async-disposable-stack:
            constructor.js: {}
            index.js: {}
          async-iterator:
            as-indexed-pairs.js: {}
            async-dispose.js: {}
            drop.js: {}
            every.js: {}
            filter.js: {}
            find.js: {}
            flat-map.js: {}
            for-each.js: {}
            from.js: {}
            index.js: {}
            indexed.js: {}
            map.js: {}
            reduce.js: {}
            some.js: {}
            take.js: {}
            to-array.js: {}
          atob.js: {}
          bigint:
            index.js: {}
            range.js: {}
          btoa.js: {}
          clear-immediate.js: {}
          composite-key.js: {}
          composite-symbol.js: {}
          data-view:
            get-float16.js: {}
            get-uint8-clamped.js: {}
            index.js: {}
            set-float16.js: {}
            set-uint8-clamped.js: {}
          date:
            get-year.js: {}
            index.js: {}
            now.js: {}
            set-year.js: {}
            to-gmt-string.js: {}
            to-iso-string.js: {}
            to-json.js: {}
            to-primitive.js: {}
            to-string.js: {}
          disposable-stack:
            constructor.js: {}
            index.js: {}
          dom-collections:
            for-each.js: {}
            index.js: {}
            iterator.js: {}
          dom-exception:
            constructor.js: {}
            index.js: {}
            to-string-tag.js: {}
          error:
            constructor.js: {}
            index.js: {}
            to-string.js: {}
          escape.js: {}
          function:
            bind.js: {}
            demethodize.js: {}
            has-instance.js: {}
            index.js: {}
            is-callable.js: {}
            is-constructor.js: {}
            metadata.js: {}
            name.js: {}
            un-this.js: {}
            virtual:
              bind.js: {}
              demethodize.js: {}
              index.js: {}
              un-this.js: {}
          get-iterator-method.js: {}
          get-iterator.js: {}
          global-this.js: {}
          index.js: {}
          instance:
            at.js: {}
            bind.js: {}
            code-point-at.js: {}
            code-points.js: {}
            concat.js: {}
            copy-within.js: {}
            demethodize.js: {}
            ends-with.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter-out.js: {}
            filter-reject.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            flags.js: {}
            flat-map.js: {}
            flat.js: {}
            for-each.js: {}
            group-by-to-map.js: {}
            group-by.js: {}
            group-to-map.js: {}
            group.js: {}
            includes.js: {}
            index-of.js: {}
            is-well-formed.js: {}
            keys.js: {}
            last-index-of.js: {}
            map.js: {}
            match-all.js: {}
            pad-end.js: {}
            pad-start.js: {}
            push.js: {}
            reduce-right.js: {}
            reduce.js: {}
            repeat.js: {}
            replace-all.js: {}
            reverse.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            splice.js: {}
            starts-with.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-spliced.js: {}
            to-well-formed.js: {}
            trim-end.js: {}
            trim-left.js: {}
            trim-right.js: {}
            trim-start.js: {}
            trim.js: {}
            un-this.js: {}
            unique-by.js: {}
            unshift.js: {}
            values.js: {}
            with.js: {}
          is-iterable.js: {}
          iterator:
            as-indexed-pairs.js: {}
            dispose.js: {}
            drop.js: {}
            every.js: {}
            filter.js: {}
            find.js: {}
            flat-map.js: {}
            for-each.js: {}
            from.js: {}
            index.js: {}
            indexed.js: {}
            map.js: {}
            range.js: {}
            reduce.js: {}
            some.js: {}
            take.js: {}
            to-array.js: {}
            to-async.js: {}
          json:
            index.js: {}
            is-raw-json.js: {}
            parse.js: {}
            raw-json.js: {}
            stringify.js: {}
            to-string-tag.js: {}
          map:
            delete-all.js: {}
            emplace.js: {}
            every.js: {}
            filter.js: {}
            find-key.js: {}
            find.js: {}
            from.js: {}
            group-by.js: {}
            includes.js: {}
            index.js: {}
            key-by.js: {}
            key-of.js: {}
            map-keys.js: {}
            map-values.js: {}
            merge.js: {}
            of.js: {}
            reduce.js: {}
            some.js: {}
            update-or-insert.js: {}
            update.js: {}
            upsert.js: {}
          math:
            acosh.js: {}
            asinh.js: {}
            atanh.js: {}
            cbrt.js: {}
            clamp.js: {}
            clz32.js: {}
            cosh.js: {}
            deg-per-rad.js: {}
            degrees.js: {}
            expm1.js: {}
            f16round.js: {}
            fround.js: {}
            fscale.js: {}
            hypot.js: {}
            iaddh.js: {}
            imul.js: {}
            imulh.js: {}
            index.js: {}
            isubh.js: {}
            log10.js: {}
            log1p.js: {}
            log2.js: {}
            rad-per-deg.js: {}
            radians.js: {}
            scale.js: {}
            seeded-prng.js: {}
            sign.js: {}
            signbit.js: {}
            sinh.js: {}
            sum-precise.js: {}
            tanh.js: {}
            to-string-tag.js: {}
            trunc.js: {}
            umulh.js: {}
          number:
            constructor.js: {}
            epsilon.js: {}
            from-string.js: {}
            index.js: {}
            is-finite.js: {}
            is-integer.js: {}
            is-nan.js: {}
            is-safe-integer.js: {}
            max-safe-integer.js: {}
            min-safe-integer.js: {}
            parse-float.js: {}
            parse-int.js: {}
            range.js: {}
            to-exponential.js: {}
            to-fixed.js: {}
            to-precision.js: {}
            virtual:
              index.js: {}
              to-exponential.js: {}
              to-fixed.js: {}
              to-precision.js: {}
          object:
            assign.js: {}
            create.js: {}
            define-getter.js: {}
            define-properties.js: {}
            define-property.js: {}
            define-setter.js: {}
            entries.js: {}
            freeze.js: {}
            from-entries.js: {}
            get-own-property-descriptor.js: {}
            get-own-property-descriptors.js: {}
            get-own-property-names.js: {}
            get-own-property-symbols.js: {}
            get-prototype-of.js: {}
            group-by.js: {}
            has-own.js: {}
            index.js: {}
            is-extensible.js: {}
            is-frozen.js: {}
            is-sealed.js: {}
            is.js: {}
            iterate-entries.js: {}
            iterate-keys.js: {}
            iterate-values.js: {}
            keys.js: {}
            lookup-getter.js: {}
            lookup-setter.js: {}
            prevent-extensions.js: {}
            proto.js: {}
            seal.js: {}
            set-prototype-of.js: {}
            to-string.js: {}
            values.js: {}
          observable:
            index.js: {}
          parse-float.js: {}
          parse-int.js: {}
          promise:
            all-settled.js: {}
            any.js: {}
            finally.js: {}
            index.js: {}
            try.js: {}
            with-resolvers.js: {}
          queue-microtask.js: {}
          reflect:
            apply.js: {}
            construct.js: {}
            define-metadata.js: {}
            define-property.js: {}
            delete-metadata.js: {}
            delete-property.js: {}
            get-metadata-keys.js: {}
            get-metadata.js: {}
            get-own-metadata-keys.js: {}
            get-own-metadata.js: {}
            get-own-property-descriptor.js: {}
            get-prototype-of.js: {}
            get.js: {}
            has-metadata.js: {}
            has-own-metadata.js: {}
            has.js: {}
            index.js: {}
            is-extensible.js: {}
            metadata.js: {}
            own-keys.js: {}
            prevent-extensions.js: {}
            set-prototype-of.js: {}
            set.js: {}
            to-string-tag.js: {}
          regexp:
            constructor.js: {}
            dot-all.js: {}
            escape.js: {}
            flags.js: {}
            index.js: {}
            match.js: {}
            replace.js: {}
            search.js: {}
            split.js: {}
            sticky.js: {}
            test.js: {}
            to-string.js: {}
          self.js: {}
          set:
            add-all.js: {}
            delete-all.js: {}
            difference.js: {}
            every.js: {}
            filter.js: {}
            find.js: {}
            from.js: {}
            index.js: {}
            intersection.js: {}
            is-disjoint-from.js: {}
            is-subset-of.js: {}
            is-superset-of.js: {}
            join.js: {}
            map.js: {}
            of.js: {}
            reduce.js: {}
            some.js: {}
            symmetric-difference.js: {}
            union.js: {}
          set-immediate.js: {}
          set-interval.js: {}
          set-timeout.js: {}
          string:
            anchor.js: {}
            at.js: {}
            big.js: {}
            blink.js: {}
            bold.js: {}
            code-point-at.js: {}
            code-points.js: {}
            cooked.js: {}
            dedent.js: {}
            ends-with.js: {}
            fixed.js: {}
            fontcolor.js: {}
            fontsize.js: {}
            from-code-point.js: {}
            includes.js: {}
            index.js: {}
            is-well-formed.js: {}
            italics.js: {}
            iterator.js: {}
            link.js: {}
            match-all.js: {}
            match.js: {}
            pad-end.js: {}
            pad-start.js: {}
            raw.js: {}
            repeat.js: {}
            replace-all.js: {}
            replace.js: {}
            search.js: {}
            small.js: {}
            split.js: {}
            starts-with.js: {}
            strike.js: {}
            sub.js: {}
            substr.js: {}
            sup.js: {}
            to-well-formed.js: {}
            trim-end.js: {}
            trim-left.js: {}
            trim-right.js: {}
            trim-start.js: {}
            trim.js: {}
            virtual:
              anchor.js: {}
              at.js: {}
              big.js: {}
              blink.js: {}
              bold.js: {}
              code-point-at.js: {}
              code-points.js: {}
              ends-with.js: {}
              fixed.js: {}
              fontcolor.js: {}
              fontsize.js: {}
              includes.js: {}
              index.js: {}
              is-well-formed.js: {}
              italics.js: {}
              iterator.js: {}
              link.js: {}
              match-all.js: {}
              pad-end.js: {}
              pad-start.js: {}
              repeat.js: {}
              replace-all.js: {}
              small.js: {}
              starts-with.js: {}
              strike.js: {}
              sub.js: {}
              substr.js: {}
              sup.js: {}
              to-well-formed.js: {}
              trim-end.js: {}
              trim-left.js: {}
              trim-right.js: {}
              trim-start.js: {}
              trim.js: {}
          structured-clone.js: {}
          suppressed-error.js: {}
          symbol:
            async-dispose.js: {}
            async-iterator.js: {}
            custom-matcher.js: {}
            description.js: {}
            dispose.js: {}
            for.js: {}
            has-instance.js: {}
            index.js: {}
            is-concat-spreadable.js: {}
            is-registered-symbol.js: {}
            is-registered.js: {}
            is-well-known-symbol.js: {}
            is-well-known.js: {}
            iterator.js: {}
            key-for.js: {}
            match-all.js: {}
            match.js: {}
            matcher.js: {}
            metadata-key.js: {}
            metadata.js: {}
            observable.js: {}
            pattern-match.js: {}
            replace-all.js: {}
            replace.js: {}
            search.js: {}
            species.js: {}
            split.js: {}
            to-primitive.js: {}
            to-string-tag.js: {}
            unscopables.js: {}
          typed-array:
            at.js: {}
            copy-within.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter-out.js: {}
            filter-reject.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            float32-array.js: {}
            float64-array.js: {}
            for-each.js: {}
            from-async.js: {}
            from-base64.js: {}
            from-hex.js: {}
            from.js: {}
            group-by.js: {}
            includes.js: {}
            index-of.js: {}
            index.js: {}
            int16-array.js: {}
            int32-array.js: {}
            int8-array.js: {}
            iterator.js: {}
            join.js: {}
            keys.js: {}
            last-index-of.js: {}
            map.js: {}
            methods.js: {}
            of.js: {}
            reduce-right.js: {}
            reduce.js: {}
            reverse.js: {}
            set.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            subarray.js: {}
            to-base64.js: {}
            to-hex.js: {}
            to-locale-string.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-spliced.js: {}
            to-string.js: {}
            uint16-array.js: {}
            uint32-array.js: {}
            uint8-array.js: {}
            uint8-clamped-array.js: {}
            unique-by.js: {}
            values.js: {}
            with.js: {}
          unescape.js: {}
          url:
            can-parse.js: {}
            index.js: {}
            parse.js: {}
            to-json.js: {}
          url-search-params:
            index.js: {}
          weak-map:
            delete-all.js: {}
            emplace.js: {}
            from.js: {}
            index.js: {}
            of.js: {}
            upsert.js: {}
          weak-set:
            add-all.js: {}
            delete-all.js: {}
            from.js: {}
            index.js: {}
            of.js: {}
        index.js: {}
        internals:
          README.md: {}
          a-callable.js: {}
          a-constructor.js: {}
          a-data-view.js: {}
          a-map.js: {}
          a-possible-prototype.js: {}
          a-set.js: {}
          a-string.js: {}
          a-weak-map.js: {}
          a-weak-set.js: {}
          add-disposable-resource.js: {}
          add-to-unscopables.js: {}
          advance-string-index.js: {}
          an-instance.js: {}
          an-object-or-undefined.js: {}
          an-object.js: {}
          an-uint8-array.js: {}
          array-buffer-basic-detection.js: {}
          array-buffer-byte-length.js: {}
          array-buffer-is-detached.js: {}
          array-buffer-non-extensible.js: {}
          array-buffer-transfer.js: {}
          array-buffer-view-core.js: {}
          array-buffer.js: {}
          array-copy-within.js: {}
          array-fill.js: {}
          array-for-each.js: {}
          array-from-async.js: {}
          array-from-constructor-and-list.js: {}
          array-from.js: {}
          array-group-to-map.js: {}
          array-group.js: {}
          array-includes.js: {}
          array-iteration-from-last.js: {}
          array-iteration.js: {}
          array-last-index-of.js: {}
          array-method-has-species-support.js: {}
          array-method-is-strict.js: {}
          array-reduce.js: {}
          array-set-length.js: {}
          array-slice.js: {}
          array-sort.js: {}
          array-species-constructor.js: {}
          array-species-create.js: {}
          array-to-reversed.js: {}
          array-unique-by.js: {}
          array-with.js: {}
          async-from-sync-iterator.js: {}
          async-iterator-close.js: {}
          async-iterator-create-proxy.js: {}
          async-iterator-indexed.js: {}
          async-iterator-iteration.js: {}
          async-iterator-map.js: {}
          async-iterator-prototype.js: {}
          async-iterator-wrap.js: {}
          base64-map.js: {}
          call-with-safe-iteration-closing.js: {}
          caller.js: {}
          check-correctness-of-iteration.js: {}
          classof-raw.js: {}
          classof.js: {}
          collection-from.js: {}
          collection-of.js: {}
          collection-strong.js: {}
          collection-weak.js: {}
          collection.js: {}
          composite-key.js: {}
          copy-constructor-properties.js: {}
          correct-is-regexp-logic.js: {}
          correct-prototype-getter.js: {}
          create-html.js: {}
          create-iter-result-object.js: {}
          create-non-enumerable-property.js: {}
          create-property-descriptor.js: {}
          create-property.js: {}
          date-to-iso-string.js: {}
          date-to-primitive.js: {}
          define-built-in-accessor.js: {}
          define-built-in.js: {}
          define-built-ins.js: {}
          define-global-property.js: {}
          delete-property-or-throw.js: {}
          descriptors.js: {}
          detach-transferable.js: {}
          document-create-element.js: {}
          does-not-exceed-safe-integer.js: {}
          dom-exception-constants.js: {}
          dom-iterables.js: {}
          dom-token-list-prototype.js: {}
          engine-ff-version.js: {}
          engine-is-browser.js: {}
          engine-is-bun.js: {}
          engine-is-deno.js: {}
          engine-is-ie-or-edge.js: {}
          engine-is-ios-pebble.js: {}
          engine-is-ios.js: {}
          engine-is-node.js: {}
          engine-is-webos-webkit.js: {}
          engine-user-agent.js: {}
          engine-v8-version.js: {}
          engine-webkit-version.js: {}
          entry-unbind.js: {}
          entry-virtual.js: {}
          enum-bug-keys.js: {}
          error-stack-clear.js: {}
          error-stack-install.js: {}
          error-stack-installable.js: {}
          error-to-string.js: {}
          export.js: {}
          fails.js: {}
          fix-regexp-well-known-symbol-logic.js: {}
          flatten-into-array.js: {}
          freezing.js: {}
          function-apply.js: {}
          function-bind-context.js: {}
          function-bind-native.js: {}
          function-bind.js: {}
          function-call.js: {}
          function-demethodize.js: {}
          function-name.js: {}
          function-uncurry-this-accessor.js: {}
          function-uncurry-this-clause.js: {}
          function-uncurry-this.js: {}
          get-alphabet-option.js: {}
          get-async-iterator-flattenable.js: {}
          get-async-iterator.js: {}
          get-built-in-prototype-method.js: {}
          get-built-in.js: {}
          get-iterator-direct.js: {}
          get-iterator-flattenable.js: {}
          get-iterator-method.js: {}
          get-iterator.js: {}
          get-json-replacer-function.js: {}
          get-method.js: {}
          get-set-record.js: {}
          get-substitution.js: {}
          global.js: {}
          has-own-property.js: {}
          hidden-keys.js: {}
          host-report-errors.js: {}
          html.js: {}
          ie8-dom-define.js: {}
          ieee754.js: {}
          indexed-object.js: {}
          inherit-if-required.js: {}
          inspect-source.js: {}
          install-error-cause.js: {}
          internal-metadata.js: {}
          internal-state.js: {}
          is-array-iterator-method.js: {}
          is-array.js: {}
          is-big-int-array.js: {}
          is-callable.js: {}
          is-constructor.js: {}
          is-data-descriptor.js: {}
          is-forced.js: {}
          is-integral-number.js: {}
          is-iterable.js: {}
          is-null-or-undefined.js: {}
          is-object.js: {}
          is-possible-prototype.js: {}
          is-pure.js: {}
          is-raw-json.js: {}
          is-regexp.js: {}
          is-symbol.js: {}
          iterate-simple.js: {}
          iterate.js: {}
          iterator-close.js: {}
          iterator-create-constructor.js: {}
          iterator-create-proxy.js: {}
          iterator-define.js: {}
          iterator-indexed.js: {}
          iterator-map.js: {}
          iterators-core.js: {}
          iterators.js: {}
          length-of-array-like.js: {}
          make-built-in.js: {}
          map-helpers.js: {}
          map-iterate.js: {}
          map-upsert.js: {}
          math-expm1.js: {}
          math-f16round.js: {}
          math-float-round.js: {}
          math-fround.js: {}
          math-log10.js: {}
          math-log1p.js: {}
          math-scale.js: {}
          math-sign.js: {}
          math-trunc.js: {}
          microtask.js: {}
          native-raw-json.js: {}
          new-promise-capability.js: {}
          normalize-string-argument.js: {}
          not-a-nan.js: {}
          not-a-regexp.js: {}
          number-is-finite.js: {}
          number-parse-float.js: {}
          number-parse-int.js: {}
          numeric-range-iterator.js: {}
          object-assign.js: {}
          object-create.js: {}
          object-define-properties.js: {}
          object-define-property.js: {}
          object-get-own-property-descriptor.js: {}
          object-get-own-property-names-external.js: {}
          object-get-own-property-names.js: {}
          object-get-own-property-symbols.js: {}
          object-get-prototype-of.js: {}
          object-is-extensible.js: {}
          object-is-prototype-of.js: {}
          object-iterator.js: {}
          object-keys-internal.js: {}
          object-keys.js: {}
          object-property-is-enumerable.js: {}
          object-prototype-accessors-forced.js: {}
          object-set-prototype-of.js: {}
          object-to-array.js: {}
          object-to-string.js: {}
          ordinary-to-primitive.js: {}
          own-keys.js: {}
          parse-json-string.js: {}
          path.js: {}
          perform.js: {}
          promise-constructor-detection.js: {}
          promise-native-constructor.js: {}
          promise-resolve.js: {}
          promise-statics-incorrect-iteration.js: {}
          proxy-accessor.js: {}
          queue.js: {}
          reflect-metadata.js: {}
          regexp-exec-abstract.js: {}
          regexp-exec.js: {}
          regexp-flags.js: {}
          regexp-get-flags.js: {}
          regexp-sticky-helpers.js: {}
          regexp-unsupported-dot-all.js: {}
          regexp-unsupported-ncg.js: {}
          require-object-coercible.js: {}
          safe-get-built-in.js: {}
          same-value-zero.js: {}
          same-value.js: {}
          schedulers-fix.js: {}
          set-clone.js: {}
          set-difference.js: {}
          set-helpers.js: {}
          set-intersection.js: {}
          set-is-disjoint-from.js: {}
          set-is-subset-of.js: {}
          set-is-superset-of.js: {}
          set-iterate.js: {}
          set-method-accept-set-like.js: {}
          set-size.js: {}
          set-species.js: {}
          set-symmetric-difference.js: {}
          set-to-string-tag.js: {}
          set-union.js: {}
          shared-key.js: {}
          shared-store.js: {}
          shared.js: {}
          species-constructor.js: {}
          string-cooked.js: {}
          string-html-forced.js: {}
          string-multibyte.js: {}
          string-pad-webkit-bug.js: {}
          string-pad.js: {}
          string-parse.js: {}
          string-punycode-to-ascii.js: {}
          string-repeat.js: {}
          string-trim-end.js: {}
          string-trim-forced.js: {}
          string-trim-start.js: {}
          string-trim.js: {}
          structured-clone-proper-transfer.js: {}
          symbol-constructor-detection.js: {}
          symbol-define-to-primitive.js: {}
          symbol-is-registered.js: {}
          symbol-is-well-known.js: {}
          symbol-registry-detection.js: {}
          task.js: {}
          this-number-value.js: {}
          to-absolute-index.js: {}
          to-big-int.js: {}
          to-index.js: {}
          to-indexed-object.js: {}
          to-integer-or-infinity.js: {}
          to-length.js: {}
          to-object.js: {}
          to-offset.js: {}
          to-positive-integer.js: {}
          to-primitive.js: {}
          to-property-key.js: {}
          to-set-like.js: {}
          to-string-tag-support.js: {}
          to-string.js: {}
          to-uint8-clamped.js: {}
          try-node-require.js: {}
          try-to-string.js: {}
          typed-array-constructor.js: {}
          typed-array-constructors-require-wrappers.js: {}
          typed-array-from-species-and-list.js: {}
          typed-array-from.js: {}
          typed-array-species-constructor.js: {}
          uid.js: {}
          url-constructor-detection.js: {}
          use-symbol-as-uid.js: {}
          v8-prototype-define-bug.js: {}
          validate-arguments-length.js: {}
          weak-map-basic-detection.js: {}
          weak-map-helpers.js: {}
          weak-set-helpers.js: {}
          well-known-symbol-define.js: {}
          well-known-symbol-wrapped.js: {}
          well-known-symbol.js: {}
          whitespaces.js: {}
          wrap-error-constructor-with-cause.js: {}
        modules:
          README.md: {}
          es.aggregate-error.cause.js: {}
          es.aggregate-error.constructor.js: {}
          es.aggregate-error.js: {}
          es.array-buffer.constructor.js: {}
          es.array-buffer.detached.js: {}
          es.array-buffer.is-view.js: {}
          es.array-buffer.slice.js: {}
          es.array-buffer.transfer-to-fixed-length.js: {}
          es.array-buffer.transfer.js: {}
          es.array.at.js: {}
          es.array.concat.js: {}
          es.array.copy-within.js: {}
          es.array.every.js: {}
          es.array.fill.js: {}
          es.array.filter.js: {}
          es.array.find-index.js: {}
          es.array.find-last-index.js: {}
          es.array.find-last.js: {}
          es.array.find.js: {}
          es.array.flat-map.js: {}
          es.array.flat.js: {}
          es.array.for-each.js: {}
          es.array.from.js: {}
          es.array.includes.js: {}
          es.array.index-of.js: {}
          es.array.is-array.js: {}
          es.array.iterator.js: {}
          es.array.join.js: {}
          es.array.last-index-of.js: {}
          es.array.map.js: {}
          es.array.of.js: {}
          es.array.push.js: {}
          es.array.reduce-right.js: {}
          es.array.reduce.js: {}
          es.array.reverse.js: {}
          es.array.slice.js: {}
          es.array.some.js: {}
          es.array.sort.js: {}
          es.array.species.js: {}
          es.array.splice.js: {}
          es.array.to-reversed.js: {}
          es.array.to-sorted.js: {}
          es.array.to-spliced.js: {}
          es.array.unscopables.flat-map.js: {}
          es.array.unscopables.flat.js: {}
          es.array.unshift.js: {}
          es.array.with.js: {}
          es.data-view.constructor.js: {}
          es.data-view.js: {}
          es.date.get-year.js: {}
          es.date.now.js: {}
          es.date.set-year.js: {}
          es.date.to-gmt-string.js: {}
          es.date.to-iso-string.js: {}
          es.date.to-json.js: {}
          es.date.to-primitive.js: {}
          es.date.to-string.js: {}
          es.error.cause.js: {}
          es.error.to-string.js: {}
          es.escape.js: {}
          es.function.bind.js: {}
          es.function.has-instance.js: {}
          es.function.name.js: {}
          es.global-this.js: {}
          es.json.stringify.js: {}
          es.json.to-string-tag.js: {}
          es.map.constructor.js: {}
          es.map.group-by.js: {}
          es.map.js: {}
          es.math.acosh.js: {}
          es.math.asinh.js: {}
          es.math.atanh.js: {}
          es.math.cbrt.js: {}
          es.math.clz32.js: {}
          es.math.cosh.js: {}
          es.math.expm1.js: {}
          es.math.fround.js: {}
          es.math.hypot.js: {}
          es.math.imul.js: {}
          es.math.log10.js: {}
          es.math.log1p.js: {}
          es.math.log2.js: {}
          es.math.sign.js: {}
          es.math.sinh.js: {}
          es.math.tanh.js: {}
          es.math.to-string-tag.js: {}
          es.math.trunc.js: {}
          es.number.constructor.js: {}
          es.number.epsilon.js: {}
          es.number.is-finite.js: {}
          es.number.is-integer.js: {}
          es.number.is-nan.js: {}
          es.number.is-safe-integer.js: {}
          es.number.max-safe-integer.js: {}
          es.number.min-safe-integer.js: {}
          es.number.parse-float.js: {}
          es.number.parse-int.js: {}
          es.number.to-exponential.js: {}
          es.number.to-fixed.js: {}
          es.number.to-precision.js: {}
          es.object.assign.js: {}
          es.object.create.js: {}
          es.object.define-getter.js: {}
          es.object.define-properties.js: {}
          es.object.define-property.js: {}
          es.object.define-setter.js: {}
          es.object.entries.js: {}
          es.object.freeze.js: {}
          es.object.from-entries.js: {}
          es.object.get-own-property-descriptor.js: {}
          es.object.get-own-property-descriptors.js: {}
          es.object.get-own-property-names.js: {}
          es.object.get-own-property-symbols.js: {}
          es.object.get-prototype-of.js: {}
          es.object.group-by.js: {}
          es.object.has-own.js: {}
          es.object.is-extensible.js: {}
          es.object.is-frozen.js: {}
          es.object.is-sealed.js: {}
          es.object.is.js: {}
          es.object.keys.js: {}
          es.object.lookup-getter.js: {}
          es.object.lookup-setter.js: {}
          es.object.prevent-extensions.js: {}
          es.object.proto.js: {}
          es.object.seal.js: {}
          es.object.set-prototype-of.js: {}
          es.object.to-string.js: {}
          es.object.values.js: {}
          es.parse-float.js: {}
          es.parse-int.js: {}
          es.promise.all-settled.js: {}
          es.promise.all.js: {}
          es.promise.any.js: {}
          es.promise.catch.js: {}
          es.promise.constructor.js: {}
          es.promise.finally.js: {}
          es.promise.js: {}
          es.promise.race.js: {}
          es.promise.reject.js: {}
          es.promise.resolve.js: {}
          es.promise.with-resolvers.js: {}
          es.reflect.apply.js: {}
          es.reflect.construct.js: {}
          es.reflect.define-property.js: {}
          es.reflect.delete-property.js: {}
          es.reflect.get-own-property-descriptor.js: {}
          es.reflect.get-prototype-of.js: {}
          es.reflect.get.js: {}
          es.reflect.has.js: {}
          es.reflect.is-extensible.js: {}
          es.reflect.own-keys.js: {}
          es.reflect.prevent-extensions.js: {}
          es.reflect.set-prototype-of.js: {}
          es.reflect.set.js: {}
          es.reflect.to-string-tag.js: {}
          es.regexp.constructor.js: {}
          es.regexp.dot-all.js: {}
          es.regexp.exec.js: {}
          es.regexp.flags.js: {}
          es.regexp.sticky.js: {}
          es.regexp.test.js: {}
          es.regexp.to-string.js: {}
          es.set.constructor.js: {}
          es.set.difference.v2.js: {}
          es.set.intersection.v2.js: {}
          es.set.is-disjoint-from.v2.js: {}
          es.set.is-subset-of.v2.js: {}
          es.set.is-superset-of.v2.js: {}
          es.set.js: {}
          es.set.symmetric-difference.v2.js: {}
          es.set.union.v2.js: {}
          es.string.anchor.js: {}
          es.string.at-alternative.js: {}
          es.string.big.js: {}
          es.string.blink.js: {}
          es.string.bold.js: {}
          es.string.code-point-at.js: {}
          es.string.ends-with.js: {}
          es.string.fixed.js: {}
          es.string.fontcolor.js: {}
          es.string.fontsize.js: {}
          es.string.from-code-point.js: {}
          es.string.includes.js: {}
          es.string.is-well-formed.js: {}
          es.string.italics.js: {}
          es.string.iterator.js: {}
          es.string.link.js: {}
          es.string.match-all.js: {}
          es.string.match.js: {}
          es.string.pad-end.js: {}
          es.string.pad-start.js: {}
          es.string.raw.js: {}
          es.string.repeat.js: {}
          es.string.replace-all.js: {}
          es.string.replace.js: {}
          es.string.search.js: {}
          es.string.small.js: {}
          es.string.split.js: {}
          es.string.starts-with.js: {}
          es.string.strike.js: {}
          es.string.sub.js: {}
          es.string.substr.js: {}
          es.string.sup.js: {}
          es.string.to-well-formed.js: {}
          es.string.trim-end.js: {}
          es.string.trim-left.js: {}
          es.string.trim-right.js: {}
          es.string.trim-start.js: {}
          es.string.trim.js: {}
          es.symbol.async-iterator.js: {}
          es.symbol.constructor.js: {}
          es.symbol.description.js: {}
          es.symbol.for.js: {}
          es.symbol.has-instance.js: {}
          es.symbol.is-concat-spreadable.js: {}
          es.symbol.iterator.js: {}
          es.symbol.js: {}
          es.symbol.key-for.js: {}
          es.symbol.match-all.js: {}
          es.symbol.match.js: {}
          es.symbol.replace.js: {}
          es.symbol.search.js: {}
          es.symbol.species.js: {}
          es.symbol.split.js: {}
          es.symbol.to-primitive.js: {}
          es.symbol.to-string-tag.js: {}
          es.symbol.unscopables.js: {}
          es.typed-array.at.js: {}
          es.typed-array.copy-within.js: {}
          es.typed-array.every.js: {}
          es.typed-array.fill.js: {}
          es.typed-array.filter.js: {}
          es.typed-array.find-index.js: {}
          es.typed-array.find-last-index.js: {}
          es.typed-array.find-last.js: {}
          es.typed-array.find.js: {}
          es.typed-array.float32-array.js: {}
          es.typed-array.float64-array.js: {}
          es.typed-array.for-each.js: {}
          es.typed-array.from.js: {}
          es.typed-array.includes.js: {}
          es.typed-array.index-of.js: {}
          es.typed-array.int16-array.js: {}
          es.typed-array.int32-array.js: {}
          es.typed-array.int8-array.js: {}
          es.typed-array.iterator.js: {}
          es.typed-array.join.js: {}
          es.typed-array.last-index-of.js: {}
          es.typed-array.map.js: {}
          es.typed-array.of.js: {}
          es.typed-array.reduce-right.js: {}
          es.typed-array.reduce.js: {}
          es.typed-array.reverse.js: {}
          es.typed-array.set.js: {}
          es.typed-array.slice.js: {}
          es.typed-array.some.js: {}
          es.typed-array.sort.js: {}
          es.typed-array.subarray.js: {}
          es.typed-array.to-locale-string.js: {}
          es.typed-array.to-reversed.js: {}
          es.typed-array.to-sorted.js: {}
          es.typed-array.to-string.js: {}
          es.typed-array.uint16-array.js: {}
          es.typed-array.uint32-array.js: {}
          es.typed-array.uint8-array.js: {}
          es.typed-array.uint8-clamped-array.js: {}
          es.typed-array.with.js: {}
          es.unescape.js: {}
          es.weak-map.constructor.js: {}
          es.weak-map.js: {}
          es.weak-set.constructor.js: {}
          es.weak-set.js: {}
          esnext.aggregate-error.js: {}
          esnext.array-buffer.detached.js: {}
          esnext.array-buffer.transfer-to-fixed-length.js: {}
          esnext.array-buffer.transfer.js: {}
          esnext.array.at.js: {}
          esnext.array.filter-out.js: {}
          esnext.array.filter-reject.js: {}
          esnext.array.find-last-index.js: {}
          esnext.array.find-last.js: {}
          esnext.array.from-async.js: {}
          esnext.array.group-by-to-map.js: {}
          esnext.array.group-by.js: {}
          esnext.array.group-to-map.js: {}
          esnext.array.group.js: {}
          esnext.array.is-template-object.js: {}
          esnext.array.last-index.js: {}
          esnext.array.last-item.js: {}
          esnext.array.to-reversed.js: {}
          esnext.array.to-sorted.js: {}
          esnext.array.to-spliced.js: {}
          esnext.array.unique-by.js: {}
          esnext.array.with.js: {}
          esnext.async-disposable-stack.constructor.js: {}
          esnext.async-iterator.as-indexed-pairs.js: {}
          esnext.async-iterator.async-dispose.js: {}
          esnext.async-iterator.constructor.js: {}
          esnext.async-iterator.drop.js: {}
          esnext.async-iterator.every.js: {}
          esnext.async-iterator.filter.js: {}
          esnext.async-iterator.find.js: {}
          esnext.async-iterator.flat-map.js: {}
          esnext.async-iterator.for-each.js: {}
          esnext.async-iterator.from.js: {}
          esnext.async-iterator.indexed.js: {}
          esnext.async-iterator.map.js: {}
          esnext.async-iterator.reduce.js: {}
          esnext.async-iterator.some.js: {}
          esnext.async-iterator.take.js: {}
          esnext.async-iterator.to-array.js: {}
          esnext.bigint.range.js: {}
          esnext.composite-key.js: {}
          esnext.composite-symbol.js: {}
          esnext.data-view.get-float16.js: {}
          esnext.data-view.get-uint8-clamped.js: {}
          esnext.data-view.set-float16.js: {}
          esnext.data-view.set-uint8-clamped.js: {}
          esnext.disposable-stack.constructor.js: {}
          esnext.function.demethodize.js: {}
          esnext.function.is-callable.js: {}
          esnext.function.is-constructor.js: {}
          esnext.function.metadata.js: {}
          esnext.function.un-this.js: {}
          esnext.global-this.js: {}
          esnext.iterator.as-indexed-pairs.js: {}
          esnext.iterator.constructor.js: {}
          esnext.iterator.dispose.js: {}
          esnext.iterator.drop.js: {}
          esnext.iterator.every.js: {}
          esnext.iterator.filter.js: {}
          esnext.iterator.find.js: {}
          esnext.iterator.flat-map.js: {}
          esnext.iterator.for-each.js: {}
          esnext.iterator.from.js: {}
          esnext.iterator.indexed.js: {}
          esnext.iterator.map.js: {}
          esnext.iterator.range.js: {}
          esnext.iterator.reduce.js: {}
          esnext.iterator.some.js: {}
          esnext.iterator.take.js: {}
          esnext.iterator.to-array.js: {}
          esnext.iterator.to-async.js: {}
          esnext.json.is-raw-json.js: {}
          esnext.json.parse.js: {}
          esnext.json.raw-json.js: {}
          esnext.map.delete-all.js: {}
          esnext.map.emplace.js: {}
          esnext.map.every.js: {}
          esnext.map.filter.js: {}
          esnext.map.find-key.js: {}
          esnext.map.find.js: {}
          esnext.map.from.js: {}
          esnext.map.group-by.js: {}
          esnext.map.includes.js: {}
          esnext.map.key-by.js: {}
          esnext.map.key-of.js: {}
          esnext.map.map-keys.js: {}
          esnext.map.map-values.js: {}
          esnext.map.merge.js: {}
          esnext.map.of.js: {}
          esnext.map.reduce.js: {}
          esnext.map.some.js: {}
          esnext.map.update-or-insert.js: {}
          esnext.map.update.js: {}
          esnext.map.upsert.js: {}
          esnext.math.clamp.js: {}
          esnext.math.deg-per-rad.js: {}
          esnext.math.degrees.js: {}
          esnext.math.f16round.js: {}
          esnext.math.fscale.js: {}
          esnext.math.iaddh.js: {}
          esnext.math.imulh.js: {}
          esnext.math.isubh.js: {}
          esnext.math.rad-per-deg.js: {}
          esnext.math.radians.js: {}
          esnext.math.scale.js: {}
          esnext.math.seeded-prng.js: {}
          esnext.math.signbit.js: {}
          esnext.math.sum-precise.js: {}
          esnext.math.umulh.js: {}
          esnext.number.from-string.js: {}
          esnext.number.range.js: {}
          esnext.object.group-by.js: {}
          esnext.object.has-own.js: {}
          esnext.object.iterate-entries.js: {}
          esnext.object.iterate-keys.js: {}
          esnext.object.iterate-values.js: {}
          esnext.observable.constructor.js: {}
          esnext.observable.from.js: {}
          esnext.observable.js: {}
          esnext.observable.of.js: {}
          esnext.promise.all-settled.js: {}
          esnext.promise.any.js: {}
          esnext.promise.try.js: {}
          esnext.promise.with-resolvers.js: {}
          esnext.reflect.define-metadata.js: {}
          esnext.reflect.delete-metadata.js: {}
          esnext.reflect.get-metadata-keys.js: {}
          esnext.reflect.get-metadata.js: {}
          esnext.reflect.get-own-metadata-keys.js: {}
          esnext.reflect.get-own-metadata.js: {}
          esnext.reflect.has-metadata.js: {}
          esnext.reflect.has-own-metadata.js: {}
          esnext.reflect.metadata.js: {}
          esnext.regexp.escape.js: {}
          esnext.set.add-all.js: {}
          esnext.set.delete-all.js: {}
          esnext.set.difference.js: {}
          esnext.set.difference.v2.js: {}
          esnext.set.every.js: {}
          esnext.set.filter.js: {}
          esnext.set.find.js: {}
          esnext.set.from.js: {}
          esnext.set.intersection.js: {}
          esnext.set.intersection.v2.js: {}
          esnext.set.is-disjoint-from.js: {}
          esnext.set.is-disjoint-from.v2.js: {}
          esnext.set.is-subset-of.js: {}
          esnext.set.is-subset-of.v2.js: {}
          esnext.set.is-superset-of.js: {}
          esnext.set.is-superset-of.v2.js: {}
          esnext.set.join.js: {}
          esnext.set.map.js: {}
          esnext.set.of.js: {}
          esnext.set.reduce.js: {}
          esnext.set.some.js: {}
          esnext.set.symmetric-difference.js: {}
          esnext.set.symmetric-difference.v2.js: {}
          esnext.set.union.js: {}
          esnext.set.union.v2.js: {}
          esnext.string.at-alternative.js: {}
          esnext.string.at.js: {}
          esnext.string.code-points.js: {}
          esnext.string.cooked.js: {}
          esnext.string.dedent.js: {}
          esnext.string.is-well-formed.js: {}
          esnext.string.match-all.js: {}
          esnext.string.replace-all.js: {}
          esnext.string.to-well-formed.js: {}
          esnext.suppressed-error.constructor.js: {}
          esnext.symbol.async-dispose.js: {}
          esnext.symbol.custom-matcher.js: {}
          esnext.symbol.dispose.js: {}
          esnext.symbol.is-registered-symbol.js: {}
          esnext.symbol.is-registered.js: {}
          esnext.symbol.is-well-known-symbol.js: {}
          esnext.symbol.is-well-known.js: {}
          esnext.symbol.matcher.js: {}
          esnext.symbol.metadata-key.js: {}
          esnext.symbol.metadata.js: {}
          esnext.symbol.observable.js: {}
          esnext.symbol.pattern-match.js: {}
          esnext.symbol.replace-all.js: {}
          esnext.typed-array.at.js: {}
          esnext.typed-array.filter-out.js: {}
          esnext.typed-array.filter-reject.js: {}
          esnext.typed-array.find-last-index.js: {}
          esnext.typed-array.find-last.js: {}
          esnext.typed-array.from-async.js: {}
          esnext.typed-array.group-by.js: {}
          esnext.typed-array.to-reversed.js: {}
          esnext.typed-array.to-sorted.js: {}
          esnext.typed-array.to-spliced.js: {}
          esnext.typed-array.unique-by.js: {}
          esnext.typed-array.with.js: {}
          esnext.uint8-array.from-base64.js: {}
          esnext.uint8-array.from-hex.js: {}
          esnext.uint8-array.to-base64.js: {}
          esnext.uint8-array.to-hex.js: {}
          esnext.weak-map.delete-all.js: {}
          esnext.weak-map.emplace.js: {}
          esnext.weak-map.from.js: {}
          esnext.weak-map.of.js: {}
          esnext.weak-map.upsert.js: {}
          esnext.weak-set.add-all.js: {}
          esnext.weak-set.delete-all.js: {}
          esnext.weak-set.from.js: {}
          esnext.weak-set.of.js: {}
          web.atob.js: {}
          web.btoa.js: {}
          web.clear-immediate.js: {}
          web.dom-collections.for-each.js: {}
          web.dom-collections.iterator.js: {}
          web.dom-exception.constructor.js: {}
          web.dom-exception.stack.js: {}
          web.dom-exception.to-string-tag.js: {}
          web.immediate.js: {}
          web.queue-microtask.js: {}
          web.self.js: {}
          web.set-immediate.js: {}
          web.set-interval.js: {}
          web.set-timeout.js: {}
          web.structured-clone.js: {}
          web.timers.js: {}
          web.url-search-params.constructor.js: {}
          web.url-search-params.delete.js: {}
          web.url-search-params.has.js: {}
          web.url-search-params.js: {}
          web.url-search-params.size.js: {}
          web.url.can-parse.js: {}
          web.url.constructor.js: {}
          web.url.js: {}
          web.url.parse.js: {}
          web.url.to-json.js: {}
        package.json: {}
        postinstall.js: {}
        proposals:
          accessible-object-hasownproperty.js: {}
          array-buffer-base64.js: {}
          array-buffer-transfer.js: {}
          array-filtering-stage-1.js: {}
          array-filtering.js: {}
          array-find-from-last.js: {}
          array-flat-map.js: {}
          array-from-async-stage-2.js: {}
          array-from-async.js: {}
          array-grouping-stage-3-2.js: {}
          array-grouping-stage-3.js: {}
          array-grouping-v2.js: {}
          array-grouping.js: {}
          array-includes.js: {}
          array-is-template-object.js: {}
          array-last.js: {}
          array-unique.js: {}
          async-explicit-resource-management.js: {}
          async-iteration.js: {}
          async-iterator-helpers.js: {}
          change-array-by-copy-stage-4.js: {}
          change-array-by-copy.js: {}
          collection-methods.js: {}
          collection-of-from.js: {}
          data-view-get-set-uint8-clamped.js: {}
          decorator-metadata-v2.js: {}
          decorator-metadata.js: {}
          decorators.js: {}
          efficient-64-bit-arithmetic.js: {}
          error-cause.js: {}
          explicit-resource-management.js: {}
          extractors.js: {}
          float16.js: {}
          function-demethodize.js: {}
          function-is-callable-is-constructor.js: {}
          function-un-this.js: {}
          global-this.js: {}
          index.js: {}
          iterator-helpers-stage-3-2.js: {}
          iterator-helpers-stage-3.js: {}
          iterator-helpers.js: {}
          iterator-range.js: {}
          json-parse-with-source.js: {}
          keys-composition.js: {}
          map-update-or-insert.js: {}
          map-upsert-stage-2.js: {}
          map-upsert.js: {}
          math-extensions.js: {}
          math-signbit.js: {}
          math-sum.js: {}
          number-from-string.js: {}
          number-range.js: {}
          object-from-entries.js: {}
          object-getownpropertydescriptors.js: {}
          object-iteration.js: {}
          object-values-entries.js: {}
          observable.js: {}
          pattern-matching-v2.js: {}
          pattern-matching.js: {}
          promise-all-settled.js: {}
          promise-any.js: {}
          promise-finally.js: {}
          promise-try.js: {}
          promise-with-resolvers.js: {}
          reflect-metadata.js: {}
          regexp-dotall-flag.js: {}
          regexp-escaping.js: {}
          regexp-named-groups.js: {}
          relative-indexing-method.js: {}
          seeded-random.js: {}
          set-methods-v2.js: {}
          set-methods.js: {}
          string-at.js: {}
          string-code-points.js: {}
          string-cooked.js: {}
          string-dedent.js: {}
          string-left-right-trim.js: {}
          string-match-all.js: {}
          string-padding.js: {}
          string-replace-all-stage-4.js: {}
          string-replace-all.js: {}
          symbol-description.js: {}
          symbol-predicates-v2.js: {}
          symbol-predicates.js: {}
          url.js: {}
          using-statement.js: {}
          well-formed-stringify.js: {}
          well-formed-unicode-strings.js: {}
        stable:
          README.md: {}
          aggregate-error.js: {}
          array:
            at.js: {}
            concat.js: {}
            copy-within.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            flat-map.js: {}
            flat.js: {}
            for-each.js: {}
            from.js: {}
            includes.js: {}
            index-of.js: {}
            index.js: {}
            is-array.js: {}
            iterator.js: {}
            join.js: {}
            keys.js: {}
            last-index-of.js: {}
            map.js: {}
            of.js: {}
            push.js: {}
            reduce-right.js: {}
            reduce.js: {}
            reverse.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            splice.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-spliced.js: {}
            unshift.js: {}
            values.js: {}
            virtual:
              at.js: {}
              concat.js: {}
              copy-within.js: {}
              entries.js: {}
              every.js: {}
              fill.js: {}
              filter.js: {}
              find-index.js: {}
              find-last-index.js: {}
              find-last.js: {}
              find.js: {}
              flat-map.js: {}
              flat.js: {}
              for-each.js: {}
              includes.js: {}
              index-of.js: {}
              index.js: {}
              iterator.js: {}
              join.js: {}
              keys.js: {}
              last-index-of.js: {}
              map.js: {}
              push.js: {}
              reduce-right.js: {}
              reduce.js: {}
              reverse.js: {}
              slice.js: {}
              some.js: {}
              sort.js: {}
              splice.js: {}
              to-reversed.js: {}
              to-sorted.js: {}
              to-spliced.js: {}
              unshift.js: {}
              values.js: {}
              with.js: {}
            with.js: {}
          array-buffer:
            constructor.js: {}
            detached.js: {}
            index.js: {}
            is-view.js: {}
            slice.js: {}
            transfer-to-fixed-length.js: {}
            transfer.js: {}
          atob.js: {}
          btoa.js: {}
          clear-immediate.js: {}
          data-view:
            index.js: {}
          date:
            get-year.js: {}
            index.js: {}
            now.js: {}
            set-year.js: {}
            to-gmt-string.js: {}
            to-iso-string.js: {}
            to-json.js: {}
            to-primitive.js: {}
            to-string.js: {}
          dom-collections:
            for-each.js: {}
            index.js: {}
            iterator.js: {}
          dom-exception:
            constructor.js: {}
            index.js: {}
            to-string-tag.js: {}
          error:
            constructor.js: {}
            index.js: {}
            to-string.js: {}
          escape.js: {}
          function:
            bind.js: {}
            has-instance.js: {}
            index.js: {}
            name.js: {}
            virtual:
              bind.js: {}
              index.js: {}
          get-iterator-method.js: {}
          get-iterator.js: {}
          global-this.js: {}
          index.js: {}
          instance:
            at.js: {}
            bind.js: {}
            code-point-at.js: {}
            concat.js: {}
            copy-within.js: {}
            ends-with.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            flags.js: {}
            flat-map.js: {}
            flat.js: {}
            for-each.js: {}
            includes.js: {}
            index-of.js: {}
            is-well-formed.js: {}
            keys.js: {}
            last-index-of.js: {}
            map.js: {}
            match-all.js: {}
            pad-end.js: {}
            pad-start.js: {}
            push.js: {}
            reduce-right.js: {}
            reduce.js: {}
            repeat.js: {}
            replace-all.js: {}
            reverse.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            splice.js: {}
            starts-with.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-spliced.js: {}
            to-well-formed.js: {}
            trim-end.js: {}
            trim-left.js: {}
            trim-right.js: {}
            trim-start.js: {}
            trim.js: {}
            unshift.js: {}
            values.js: {}
            with.js: {}
          is-iterable.js: {}
          json:
            index.js: {}
            stringify.js: {}
            to-string-tag.js: {}
          map:
            group-by.js: {}
            index.js: {}
          math:
            acosh.js: {}
            asinh.js: {}
            atanh.js: {}
            cbrt.js: {}
            clz32.js: {}
            cosh.js: {}
            expm1.js: {}
            fround.js: {}
            hypot.js: {}
            imul.js: {}
            index.js: {}
            log10.js: {}
            log1p.js: {}
            log2.js: {}
            sign.js: {}
            sinh.js: {}
            tanh.js: {}
            to-string-tag.js: {}
            trunc.js: {}
          number:
            constructor.js: {}
            epsilon.js: {}
            index.js: {}
            is-finite.js: {}
            is-integer.js: {}
            is-nan.js: {}
            is-safe-integer.js: {}
            max-safe-integer.js: {}
            min-safe-integer.js: {}
            parse-float.js: {}
            parse-int.js: {}
            to-exponential.js: {}
            to-fixed.js: {}
            to-precision.js: {}
            virtual:
              index.js: {}
              to-exponential.js: {}
              to-fixed.js: {}
              to-precision.js: {}
          object:
            assign.js: {}
            create.js: {}
            define-getter.js: {}
            define-properties.js: {}
            define-property.js: {}
            define-setter.js: {}
            entries.js: {}
            freeze.js: {}
            from-entries.js: {}
            get-own-property-descriptor.js: {}
            get-own-property-descriptors.js: {}
            get-own-property-names.js: {}
            get-own-property-symbols.js: {}
            get-prototype-of.js: {}
            group-by.js: {}
            has-own.js: {}
            index.js: {}
            is-extensible.js: {}
            is-frozen.js: {}
            is-sealed.js: {}
            is.js: {}
            keys.js: {}
            lookup-getter.js: {}
            lookup-setter.js: {}
            prevent-extensions.js: {}
            proto.js: {}
            seal.js: {}
            set-prototype-of.js: {}
            to-string.js: {}
            values.js: {}
          parse-float.js: {}
          parse-int.js: {}
          promise:
            all-settled.js: {}
            any.js: {}
            finally.js: {}
            index.js: {}
            with-resolvers.js: {}
          queue-microtask.js: {}
          reflect:
            apply.js: {}
            construct.js: {}
            define-property.js: {}
            delete-property.js: {}
            get-own-property-descriptor.js: {}
            get-prototype-of.js: {}
            get.js: {}
            has.js: {}
            index.js: {}
            is-extensible.js: {}
            own-keys.js: {}
            prevent-extensions.js: {}
            set-prototype-of.js: {}
            set.js: {}
            to-string-tag.js: {}
          regexp:
            constructor.js: {}
            dot-all.js: {}
            flags.js: {}
            index.js: {}
            match.js: {}
            replace.js: {}
            search.js: {}
            split.js: {}
            sticky.js: {}
            test.js: {}
            to-string.js: {}
          self.js: {}
          set:
            difference.js: {}
            index.js: {}
            intersection.js: {}
            is-disjoint-from.js: {}
            is-subset-of.js: {}
            is-superset-of.js: {}
            symmetric-difference.js: {}
            union.js: {}
          set-immediate.js: {}
          set-interval.js: {}
          set-timeout.js: {}
          string:
            anchor.js: {}
            at.js: {}
            big.js: {}
            blink.js: {}
            bold.js: {}
            code-point-at.js: {}
            ends-with.js: {}
            fixed.js: {}
            fontcolor.js: {}
            fontsize.js: {}
            from-code-point.js: {}
            includes.js: {}
            index.js: {}
            is-well-formed.js: {}
            italics.js: {}
            iterator.js: {}
            link.js: {}
            match-all.js: {}
            match.js: {}
            pad-end.js: {}
            pad-start.js: {}
            raw.js: {}
            repeat.js: {}
            replace-all.js: {}
            replace.js: {}
            search.js: {}
            small.js: {}
            split.js: {}
            starts-with.js: {}
            strike.js: {}
            sub.js: {}
            substr.js: {}
            sup.js: {}
            to-well-formed.js: {}
            trim-end.js: {}
            trim-left.js: {}
            trim-right.js: {}
            trim-start.js: {}
            trim.js: {}
            virtual:
              anchor.js: {}
              at.js: {}
              big.js: {}
              blink.js: {}
              bold.js: {}
              code-point-at.js: {}
              ends-with.js: {}
              fixed.js: {}
              fontcolor.js: {}
              fontsize.js: {}
              includes.js: {}
              index.js: {}
              is-well-formed.js: {}
              italics.js: {}
              iterator.js: {}
              link.js: {}
              match-all.js: {}
              pad-end.js: {}
              pad-start.js: {}
              repeat.js: {}
              replace-all.js: {}
              small.js: {}
              starts-with.js: {}
              strike.js: {}
              sub.js: {}
              substr.js: {}
              sup.js: {}
              to-well-formed.js: {}
              trim-end.js: {}
              trim-left.js: {}
              trim-right.js: {}
              trim-start.js: {}
              trim.js: {}
          structured-clone.js: {}
          symbol:
            async-iterator.js: {}
            description.js: {}
            for.js: {}
            has-instance.js: {}
            index.js: {}
            is-concat-spreadable.js: {}
            iterator.js: {}
            key-for.js: {}
            match-all.js: {}
            match.js: {}
            replace.js: {}
            search.js: {}
            species.js: {}
            split.js: {}
            to-primitive.js: {}
            to-string-tag.js: {}
            unscopables.js: {}
          typed-array:
            at.js: {}
            copy-within.js: {}
            entries.js: {}
            every.js: {}
            fill.js: {}
            filter.js: {}
            find-index.js: {}
            find-last-index.js: {}
            find-last.js: {}
            find.js: {}
            float32-array.js: {}
            float64-array.js: {}
            for-each.js: {}
            from.js: {}
            includes.js: {}
            index-of.js: {}
            index.js: {}
            int16-array.js: {}
            int32-array.js: {}
            int8-array.js: {}
            iterator.js: {}
            join.js: {}
            keys.js: {}
            last-index-of.js: {}
            map.js: {}
            methods.js: {}
            of.js: {}
            reduce-right.js: {}
            reduce.js: {}
            reverse.js: {}
            set.js: {}
            slice.js: {}
            some.js: {}
            sort.js: {}
            subarray.js: {}
            to-locale-string.js: {}
            to-reversed.js: {}
            to-sorted.js: {}
            to-string.js: {}
            uint16-array.js: {}
            uint32-array.js: {}
            uint8-array.js: {}
            uint8-clamped-array.js: {}
            values.js: {}
            with.js: {}
          unescape.js: {}
          url:
            can-parse.js: {}
            index.js: {}
            parse.js: {}
            to-json.js: {}
          url-search-params:
            index.js: {}
          weak-map:
            index.js: {}
          weak-set:
            index.js: {}
        stage:
          0.js: {}
          1.js: {}
          2.7.js: {}
          2.js: {}
          3.js: {}
          4.js: {}
          README.md: {}
          index.js: {}
          pre.js: {}
        web:
          README.md: {}
          dom-collections.js: {}
          dom-exception.js: {}
          immediate.js: {}
          index.js: {}
          queue-microtask.js: {}
          structured-clone.js: {}
          timers.js: {}
          url-search-params.js: {}
          url.js: {}
      core-util-is:
        LICENSE: {}
        README.md: {}
        lib:
          util.js: {}
        package.json: {}
      cosmiconfig:
        LICENSE: {}
        README.md: {}
        dist:
          Explorer.d.ts: {}
          Explorer.d.ts.map: {}
          Explorer.js: {}
          Explorer.js.map: {}
          ExplorerBase.d.ts: {}
          ExplorerBase.d.ts.map: {}
          ExplorerBase.js: {}
          ExplorerBase.js.map: {}
          ExplorerSync.d.ts: {}
          ExplorerSync.d.ts.map: {}
          ExplorerSync.js: {}
          ExplorerSync.js.map: {}
          cacheWrapper.d.ts: {}
          cacheWrapper.d.ts.map: {}
          cacheWrapper.js: {}
          cacheWrapper.js.map: {}
          getDirectory.d.ts: {}
          getDirectory.d.ts.map: {}
          getDirectory.js: {}
          getDirectory.js.map: {}
          getPropertyByPath.d.ts: {}
          getPropertyByPath.d.ts.map: {}
          getPropertyByPath.js: {}
          getPropertyByPath.js.map: {}
          index.d.ts: {}
          index.d.ts.map: {}
          index.js: {}
          index.js.map: {}
          loaders.d.ts: {}
          loaders.d.ts.map: {}
          loaders.js: {}
          loaders.js.map: {}
          readFile.d.ts: {}
          readFile.d.ts.map: {}
          readFile.js: {}
          readFile.js.map: {}
          types.d.ts: {}
          types.d.ts.map: {}
          types.js: {}
          types.js.map: {}
        package.json: {}
      croner:
        LICENSE: {}
        README.md: {}
        SECURITY.md: {}
        croner.png: {}
        dist:
          croner.cjs: {}
          croner.min.js: {}
          croner.min.js.map: {}
          croner.min.mjs: {}
          croner.min.mjs.map: {}
        package.json: {}
        src:
          croner.js: {}
          croner.single.js: {}
          date.js: {}
          pattern.js: {}
          timezone.js: {}
        types:
          croner.d.ts: {}
          croner.single.d.ts: {}
          date.d.ts: {}
          pattern.d.ts: {}
          timezone.d.ts: {}
      cross-spawn:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        lib:
          enoent.js: {}
          parse.js: {}
          util:
            escape.js: {}
            readShebang.js: {}
            resolveCommand.js: {}
        package.json: {}
      crypto-random-string:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      css-blank-pseudo:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        browser.js: {}
        dist:
          browser-global.js: {}
          browser-global.js.map: {}
          browser.cjs: {}
          browser.cjs.map: {}
          browser.mjs: {}
          browser.mjs.map: {}
          cli.cjs: {}
          index.cjs: {}
          index.mjs: {}
        package.json: {}
      css-declaration-sorter:
        dist:
          main.cjs: {}
        license.md: {}
        orders:
          alphabetical.mjs: {}
          concentric-css.mjs: {}
          smacss.mjs: {}
        package.json: {}
        readme.md: {}
        src:
          bubble-sort.mjs: {}
          main.d.ts: {}
          main.mjs: {}
          shorthand-data.mjs: {}
      css-has-pseudo:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        browser.js: {}
        dist:
          browser-global.js: {}
          browser-global.js.map: {}
          browser.cjs: {}
          browser.cjs.map: {}
          browser.mjs: {}
          browser.mjs.map: {}
          cli.cjs: {}
          index.cjs: {}
          index.mjs: {}
        package.json: {}
      css-loader:
        LICENSE: {}
        README.md: {}
        dist:
          cjs.js: {}
          index.js: {}
          options.json: {}
          plugins:
            index.js: {}
            postcss-icss-parser.js: {}
            postcss-import-parser.js: {}
            postcss-url-parser.js: {}
          runtime:
            api.js: {}
            getUrl.js: {}
            noSourceMaps.js: {}
            sourceMaps.js: {}
          utils.js: {}
        package.json: {}
      css-minimizer-webpack-plugin:
        LICENSE: {}
        README.md: {}
        dist:
          index.js: {}
          minify.js: {}
          options.json: {}
          utils.js: {}
        node_modules:
          ajv:
            .runkit_example.js: {}
            LICENSE: {}
            README.md: {}
            dist:
              2019.d.ts: {}
              2019.js: {}
              2019.js.map: {}
              2020.d.ts: {}
              2020.js: {}
              2020.js.map: {}
              ajv.d.ts: {}
              ajv.js: {}
              ajv.js.map: {}
              compile:
                codegen:
                  code.d.ts: {}
                  code.js: {}
                  code.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  scope.d.ts: {}
                  scope.js: {}
                  scope.js.map: {}
                errors.d.ts: {}
                errors.js: {}
                errors.js.map: {}
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                jtd:
                  parse.d.ts: {}
                  parse.js: {}
                  parse.js.map: {}
                  serialize.d.ts: {}
                  serialize.js: {}
                  serialize.js.map: {}
                  types.d.ts: {}
                  types.js: {}
                  types.js.map: {}
                names.d.ts: {}
                names.js: {}
                names.js.map: {}
                ref_error.d.ts: {}
                ref_error.js: {}
                ref_error.js.map: {}
                resolve.d.ts: {}
                resolve.js: {}
                resolve.js.map: {}
                rules.d.ts: {}
                rules.js: {}
                rules.js.map: {}
                util.d.ts: {}
                util.js: {}
                util.js.map: {}
                validate:
                  applicability.d.ts: {}
                  applicability.js: {}
                  applicability.js.map: {}
                  boolSchema.d.ts: {}
                  boolSchema.js: {}
                  boolSchema.js.map: {}
                  dataType.d.ts: {}
                  dataType.js: {}
                  dataType.js.map: {}
                  defaults.d.ts: {}
                  defaults.js: {}
                  defaults.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  keyword.d.ts: {}
                  keyword.js: {}
                  keyword.js.map: {}
                  subschema.d.ts: {}
                  subschema.js: {}
                  subschema.js.map: {}
              core.d.ts: {}
              core.js: {}
              core.js.map: {}
              jtd.d.ts: {}
              jtd.js: {}
              jtd.js.map: {}
              refs:
                data.json: {}
                json-schema-2019-09:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format.json: {}
                    meta-data.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-2020-12:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format-annotation.json: {}
                    meta-data.json: {}
                    unevaluated.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-draft-06.json: {}
                json-schema-draft-07.json: {}
                json-schema-secure.json: {}
                jtd-schema.d.ts: {}
                jtd-schema.js: {}
                jtd-schema.js.map: {}
              runtime:
                equal.d.ts: {}
                equal.js: {}
                equal.js.map: {}
                parseJson.d.ts: {}
                parseJson.js: {}
                parseJson.js.map: {}
                quote.d.ts: {}
                quote.js: {}
                quote.js.map: {}
                re2.d.ts: {}
                re2.js: {}
                re2.js.map: {}
                timestamp.d.ts: {}
                timestamp.js: {}
                timestamp.js.map: {}
                ucs2length.d.ts: {}
                ucs2length.js: {}
                ucs2length.js.map: {}
                uri.d.ts: {}
                uri.js: {}
                uri.js.map: {}
                validation_error.d.ts: {}
                validation_error.js: {}
                validation_error.js.map: {}
              standalone:
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                instance.d.ts: {}
                instance.js: {}
                instance.js.map: {}
              types:
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                json-schema.d.ts: {}
                json-schema.js: {}
                json-schema.js.map: {}
                jtd-schema.d.ts: {}
                jtd-schema.js: {}
                jtd-schema.js.map: {}
              vocabularies:
                applicator:
                  additionalItems.d.ts: {}
                  additionalItems.js: {}
                  additionalItems.js.map: {}
                  additionalProperties.d.ts: {}
                  additionalProperties.js: {}
                  additionalProperties.js.map: {}
                  allOf.d.ts: {}
                  allOf.js: {}
                  allOf.js.map: {}
                  anyOf.d.ts: {}
                  anyOf.js: {}
                  anyOf.js.map: {}
                  contains.d.ts: {}
                  contains.js: {}
                  contains.js.map: {}
                  dependencies.d.ts: {}
                  dependencies.js: {}
                  dependencies.js.map: {}
                  dependentSchemas.d.ts: {}
                  dependentSchemas.js: {}
                  dependentSchemas.js.map: {}
                  if.d.ts: {}
                  if.js: {}
                  if.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  items.d.ts: {}
                  items.js: {}
                  items.js.map: {}
                  items2020.d.ts: {}
                  items2020.js: {}
                  items2020.js.map: {}
                  not.d.ts: {}
                  not.js: {}
                  not.js.map: {}
                  oneOf.d.ts: {}
                  oneOf.js: {}
                  oneOf.js.map: {}
                  patternProperties.d.ts: {}
                  patternProperties.js: {}
                  patternProperties.js.map: {}
                  prefixItems.d.ts: {}
                  prefixItems.js: {}
                  prefixItems.js.map: {}
                  properties.d.ts: {}
                  properties.js: {}
                  properties.js.map: {}
                  propertyNames.d.ts: {}
                  propertyNames.js: {}
                  propertyNames.js.map: {}
                  thenElse.d.ts: {}
                  thenElse.js: {}
                  thenElse.js.map: {}
                code.d.ts: {}
                code.js: {}
                code.js.map: {}
                core:
                  id.d.ts: {}
                  id.js: {}
                  id.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  ref.d.ts: {}
                  ref.js: {}
                  ref.js.map: {}
                discriminator:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  types.d.ts: {}
                  types.js: {}
                  types.js.map: {}
                draft2020.d.ts: {}
                draft2020.js: {}
                draft2020.js.map: {}
                draft7.d.ts: {}
                draft7.js: {}
                draft7.js.map: {}
                dynamic:
                  dynamicAnchor.d.ts: {}
                  dynamicAnchor.js: {}
                  dynamicAnchor.js.map: {}
                  dynamicRef.d.ts: {}
                  dynamicRef.js: {}
                  dynamicRef.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  recursiveAnchor.d.ts: {}
                  recursiveAnchor.js: {}
                  recursiveAnchor.js.map: {}
                  recursiveRef.d.ts: {}
                  recursiveRef.js: {}
                  recursiveRef.js.map: {}
                errors.d.ts: {}
                errors.js: {}
                errors.js.map: {}
                format:
                  format.d.ts: {}
                  format.js: {}
                  format.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                jtd:
                  discriminator.d.ts: {}
                  discriminator.js: {}
                  discriminator.js.map: {}
                  elements.d.ts: {}
                  elements.js: {}
                  elements.js.map: {}
                  enum.d.ts: {}
                  enum.js: {}
                  enum.js.map: {}
                  error.d.ts: {}
                  error.js: {}
                  error.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  metadata.d.ts: {}
                  metadata.js: {}
                  metadata.js.map: {}
                  nullable.d.ts: {}
                  nullable.js: {}
                  nullable.js.map: {}
                  optionalProperties.d.ts: {}
                  optionalProperties.js: {}
                  optionalProperties.js.map: {}
                  properties.d.ts: {}
                  properties.js: {}
                  properties.js.map: {}
                  ref.d.ts: {}
                  ref.js: {}
                  ref.js.map: {}
                  type.d.ts: {}
                  type.js: {}
                  type.js.map: {}
                  union.d.ts: {}
                  union.js: {}
                  union.js.map: {}
                  values.d.ts: {}
                  values.js: {}
                  values.js.map: {}
                metadata.d.ts: {}
                metadata.js: {}
                metadata.js.map: {}
                next.d.ts: {}
                next.js: {}
                next.js.map: {}
                unevaluated:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  unevaluatedItems.d.ts: {}
                  unevaluatedItems.js: {}
                  unevaluatedItems.js.map: {}
                  unevaluatedProperties.d.ts: {}
                  unevaluatedProperties.js: {}
                  unevaluatedProperties.js.map: {}
                validation:
                  const.d.ts: {}
                  const.js: {}
                  const.js.map: {}
                  dependentRequired.d.ts: {}
                  dependentRequired.js: {}
                  dependentRequired.js.map: {}
                  enum.d.ts: {}
                  enum.js: {}
                  enum.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  limitContains.d.ts: {}
                  limitContains.js: {}
                  limitContains.js.map: {}
                  limitItems.d.ts: {}
                  limitItems.js: {}
                  limitItems.js.map: {}
                  limitLength.d.ts: {}
                  limitLength.js: {}
                  limitLength.js.map: {}
                  limitNumber.d.ts: {}
                  limitNumber.js: {}
                  limitNumber.js.map: {}
                  limitProperties.d.ts: {}
                  limitProperties.js: {}
                  limitProperties.js.map: {}
                  multipleOf.d.ts: {}
                  multipleOf.js: {}
                  multipleOf.js.map: {}
                  pattern.d.ts: {}
                  pattern.js: {}
                  pattern.js.map: {}
                  required.d.ts: {}
                  required.js: {}
                  required.js.map: {}
                  uniqueItems.d.ts: {}
                  uniqueItems.js: {}
                  uniqueItems.js.map: {}
            lib:
              2019.ts: {}
              2020.ts: {}
              ajv.ts: {}
              compile:
                codegen:
                  code.ts: {}
                  index.ts: {}
                  scope.ts: {}
                errors.ts: {}
                index.ts: {}
                jtd:
                  parse.ts: {}
                  serialize.ts: {}
                  types.ts: {}
                names.ts: {}
                ref_error.ts: {}
                resolve.ts: {}
                rules.ts: {}
                util.ts: {}
                validate:
                  applicability.ts: {}
                  boolSchema.ts: {}
                  dataType.ts: {}
                  defaults.ts: {}
                  index.ts: {}
                  keyword.ts: {}
                  subschema.ts: {}
              core.ts: {}
              jtd.ts: {}
              refs:
                data.json: {}
                json-schema-2019-09:
                  index.ts: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format.json: {}
                    meta-data.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-2020-12:
                  index.ts: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format-annotation.json: {}
                    meta-data.json: {}
                    unevaluated.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-draft-06.json: {}
                json-schema-draft-07.json: {}
                json-schema-secure.json: {}
                jtd-schema.ts: {}
              runtime:
                equal.ts: {}
                parseJson.ts: {}
                quote.ts: {}
                re2.ts: {}
                timestamp.ts: {}
                ucs2length.ts: {}
                uri.ts: {}
                validation_error.ts: {}
              standalone:
                index.ts: {}
                instance.ts: {}
              types:
                index.ts: {}
                json-schema.ts: {}
                jtd-schema.ts: {}
              vocabularies:
                applicator:
                  additionalItems.ts: {}
                  additionalProperties.ts: {}
                  allOf.ts: {}
                  anyOf.ts: {}
                  contains.ts: {}
                  dependencies.ts: {}
                  dependentSchemas.ts: {}
                  if.ts: {}
                  index.ts: {}
                  items.ts: {}
                  items2020.ts: {}
                  not.ts: {}
                  oneOf.ts: {}
                  patternProperties.ts: {}
                  prefixItems.ts: {}
                  properties.ts: {}
                  propertyNames.ts: {}
                  thenElse.ts: {}
                code.ts: {}
                core:
                  id.ts: {}
                  index.ts: {}
                  ref.ts: {}
                discriminator:
                  index.ts: {}
                  types.ts: {}
                draft2020.ts: {}
                draft7.ts: {}
                dynamic:
                  dynamicAnchor.ts: {}
                  dynamicRef.ts: {}
                  index.ts: {}
                  recursiveAnchor.ts: {}
                  recursiveRef.ts: {}
                errors.ts: {}
                format:
                  format.ts: {}
                  index.ts: {}
                jtd:
                  discriminator.ts: {}
                  elements.ts: {}
                  enum.ts: {}
                  error.ts: {}
                  index.ts: {}
                  metadata.ts: {}
                  nullable.ts: {}
                  optionalProperties.ts: {}
                  properties.ts: {}
                  ref.ts: {}
                  type.ts: {}
                  union.ts: {}
                  values.ts: {}
                metadata.ts: {}
                next.ts: {}
                unevaluated:
                  index.ts: {}
                  unevaluatedItems.ts: {}
                  unevaluatedProperties.ts: {}
                validation:
                  const.ts: {}
                  dependentRequired.ts: {}
                  enum.ts: {}
                  index.ts: {}
                  limitContains.ts: {}
                  limitItems.ts: {}
                  limitLength.ts: {}
                  limitNumber.ts: {}
                  limitProperties.ts: {}
                  multipleOf.ts: {}
                  pattern.ts: {}
                  required.ts: {}
                  uniqueItems.ts: {}
            package.json: {}
          ajv-keywords:
            LICENSE: {}
            README.md: {}
            dist:
              definitions:
                _range.d.ts: {}
                _range.js: {}
                _range.js.map: {}
                _required.d.ts: {}
                _required.js: {}
                _required.js.map: {}
                _types.d.ts: {}
                _types.js: {}
                _types.js.map: {}
                _util.d.ts: {}
                _util.js: {}
                _util.js.map: {}
                allRequired.d.ts: {}
                allRequired.js: {}
                allRequired.js.map: {}
                anyRequired.d.ts: {}
                anyRequired.js: {}
                anyRequired.js.map: {}
                deepProperties.d.ts: {}
                deepProperties.js: {}
                deepProperties.js.map: {}
                deepRequired.d.ts: {}
                deepRequired.js: {}
                deepRequired.js.map: {}
                dynamicDefaults.d.ts: {}
                dynamicDefaults.js: {}
                dynamicDefaults.js.map: {}
                exclusiveRange.d.ts: {}
                exclusiveRange.js: {}
                exclusiveRange.js.map: {}
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                instanceof.d.ts: {}
                instanceof.js: {}
                instanceof.js.map: {}
                oneRequired.d.ts: {}
                oneRequired.js: {}
                oneRequired.js.map: {}
                patternRequired.d.ts: {}
                patternRequired.js: {}
                patternRequired.js.map: {}
                prohibited.d.ts: {}
                prohibited.js: {}
                prohibited.js.map: {}
                range.d.ts: {}
                range.js: {}
                range.js.map: {}
                regexp.d.ts: {}
                regexp.js: {}
                regexp.js.map: {}
                select.d.ts: {}
                select.js: {}
                select.js.map: {}
                transform.d.ts: {}
                transform.js: {}
                transform.js.map: {}
                typeof.d.ts: {}
                typeof.js: {}
                typeof.js.map: {}
                uniqueItemProperties.d.ts: {}
                uniqueItemProperties.js: {}
                uniqueItemProperties.js.map: {}
              index.d.ts: {}
              index.js: {}
              index.js.map: {}
              keywords:
                allRequired.d.ts: {}
                allRequired.js: {}
                allRequired.js.map: {}
                anyRequired.d.ts: {}
                anyRequired.js: {}
                anyRequired.js.map: {}
                deepProperties.d.ts: {}
                deepProperties.js: {}
                deepProperties.js.map: {}
                deepRequired.d.ts: {}
                deepRequired.js: {}
                deepRequired.js.map: {}
                dynamicDefaults.d.ts: {}
                dynamicDefaults.js: {}
                dynamicDefaults.js.map: {}
                exclusiveRange.d.ts: {}
                exclusiveRange.js: {}
                exclusiveRange.js.map: {}
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                instanceof.d.ts: {}
                instanceof.js: {}
                instanceof.js.map: {}
                oneRequired.d.ts: {}
                oneRequired.js: {}
                oneRequired.js.map: {}
                patternRequired.d.ts: {}
                patternRequired.js: {}
                patternRequired.js.map: {}
                prohibited.d.ts: {}
                prohibited.js: {}
                prohibited.js.map: {}
                range.d.ts: {}
                range.js: {}
                range.js.map: {}
                regexp.d.ts: {}
                regexp.js: {}
                regexp.js.map: {}
                select.d.ts: {}
                select.js: {}
                select.js.map: {}
                transform.d.ts: {}
                transform.js: {}
                transform.js.map: {}
                typeof.d.ts: {}
                typeof.js: {}
                typeof.js.map: {}
                uniqueItemProperties.d.ts: {}
                uniqueItemProperties.js: {}
                uniqueItemProperties.js.map: {}
            package.json: {}
            src:
              definitions:
                _range.ts: {}
                _required.ts: {}
                _types.ts: {}
                _util.ts: {}
                allRequired.ts: {}
                anyRequired.ts: {}
                deepProperties.ts: {}
                deepRequired.ts: {}
                dynamicDefaults.ts: {}
                exclusiveRange.ts: {}
                index.ts: {}
                instanceof.ts: {}
                oneRequired.ts: {}
                patternRequired.ts: {}
                prohibited.ts: {}
                range.ts: {}
                regexp.ts: {}
                select.ts: {}
                transform.ts: {}
                typeof.ts: {}
                uniqueItemProperties.ts: {}
              index.ts: {}
              keywords:
                allRequired.ts: {}
                anyRequired.ts: {}
                deepProperties.ts: {}
                deepRequired.ts: {}
                dynamicDefaults.ts: {}
                exclusiveRange.ts: {}
                index.ts: {}
                instanceof.ts: {}
                oneRequired.ts: {}
                patternRequired.ts: {}
                prohibited.ts: {}
                range.ts: {}
                regexp.ts: {}
                select.ts: {}
                transform.ts: {}
                typeof.ts: {}
                uniqueItemProperties.ts: {}
          json-schema-traverse:
            .eslintrc.yml: {}
            .github:
              FUNDING.yml: {}
              workflows:
                build.yml: {}
                publish.yml: {}
            LICENSE: {}
            README.md: {}
            index.d.ts: {}
            index.js: {}
            package.json: {}
            spec:
              .eslintrc.yml: {}
              fixtures:
                schema.js: {}
              index.spec.js: {}
          schema-utils:
            LICENSE: {}
            README.md: {}
            declarations:
              ValidationError.d.ts: {}
              index.d.ts: {}
              keywords:
                absolutePath.d.ts: {}
                undefinedAsNull.d.ts: {}
              util:
                Range.d.ts: {}
                hints.d.ts: {}
                memorize.d.ts: {}
              validate.d.ts: {}
            dist:
              ValidationError.js: {}
              index.js: {}
              keywords:
                absolutePath.js: {}
                undefinedAsNull.js: {}
              util:
                Range.js: {}
                hints.js: {}
                memorize.js: {}
              validate.js: {}
            package.json: {}
          source-map:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            dist:
              source-map.debug.js: {}
              source-map.js: {}
              source-map.min.js: {}
              source-map.min.js.map: {}
            lib:
              array-set.js: {}
              base64-vlq.js: {}
              base64.js: {}
              binary-search.js: {}
              mapping-list.js: {}
              quick-sort.js: {}
              source-map-consumer.js: {}
              source-map-generator.js: {}
              source-node.js: {}
              util.js: {}
            package.json: {}
            source-map.d.ts: {}
            source-map.js: {}
        package.json: {}
        types:
          index.d.ts: {}
          minify.d.ts: {}
          utils.d.ts: {}
      css-prefers-color-scheme:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        browser.js: {}
        browser.min.js: {}
        dist:
          browser-global.js: {}
          browser-global.js.map: {}
          browser.cjs: {}
          browser.cjs.map: {}
          browser.mjs: {}
          browser.mjs.map: {}
          cli.cjs: {}
          index.cjs: {}
          index.mjs: {}
        package.json: {}
      css-select:
        LICENSE: {}
        README.md: {}
        lib:
          attributes.d.ts: {}
          attributes.d.ts.map: {}
          attributes.js: {}
          compile.d.ts: {}
          compile.d.ts.map: {}
          compile.js: {}
          general.d.ts: {}
          general.d.ts.map: {}
          general.js: {}
          index.d.ts: {}
          index.d.ts.map: {}
          index.js: {}
          procedure.d.ts: {}
          procedure.d.ts.map: {}
          procedure.js: {}
          pseudo-selectors:
            aliases.d.ts: {}
            aliases.d.ts.map: {}
            aliases.js: {}
            filters.d.ts: {}
            filters.d.ts.map: {}
            filters.js: {}
            index.d.ts: {}
            index.d.ts.map: {}
            index.js: {}
            pseudos.d.ts: {}
            pseudos.d.ts.map: {}
            pseudos.js: {}
            subselects.d.ts: {}
            subselects.d.ts.map: {}
            subselects.js: {}
          sort.d.ts: {}
          sort.d.ts.map: {}
          sort.js: {}
          types.d.ts: {}
          types.d.ts.map: {}
          types.js: {}
        package.json: {}
      css-select-base-adapter:
        .gitattributes: {}
        LICENSE: {}
        index.js: {}
        package.json: {}
        readme.md: {}
        test:
          data.js: {}
          implementation.js: {}
          index.js: {}
      css-tree:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        data:
          index.js: {}
          patch.json: {}
        dist:
          csstree.js: {}
          csstree.min.js: {}
          default-syntax.json: {}
        lib:
          common:
            List.js: {}
            OffsetToLocation.js: {}
            SyntaxError.js: {}
            TokenStream.js: {}
            adopt-buffer.js: {}
          convertor:
            create.js: {}
            index.js: {}
          definition-syntax:
            SyntaxError.js: {}
            generate.js: {}
            index.js: {}
            parse.js: {}
            tokenizer.js: {}
            walk.js: {}
          generator:
            create.js: {}
            index.js: {}
            sourceMap.js: {}
          index.js: {}
          lexer:
            Lexer.js: {}
            error.js: {}
            generic-an-plus-b.js: {}
            generic-urange.js: {}
            generic.js: {}
            index.js: {}
            match-graph.js: {}
            match.js: {}
            prepare-tokens.js: {}
            search.js: {}
            structure.js: {}
            trace.js: {}
          parser:
            create.js: {}
            index.js: {}
            sequence.js: {}
          syntax:
            atrule:
              font-face.js: {}
              import.js: {}
              index.js: {}
              media.js: {}
              page.js: {}
              supports.js: {}
            config:
              lexer.js: {}
              mix.js: {}
              parser.js: {}
              walker.js: {}
            create.js: {}
            function:
              element.js: {}
              expression.js: {}
              var.js: {}
            index.js: {}
            node:
              AnPlusB.js: {}
              Atrule.js: {}
              AtrulePrelude.js: {}
              AttributeSelector.js: {}
              Block.js: {}
              Brackets.js: {}
              CDC.js: {}
              CDO.js: {}
              ClassSelector.js: {}
              Combinator.js: {}
              Comment.js: {}
              Declaration.js: {}
              DeclarationList.js: {}
              Dimension.js: {}
              Function.js: {}
              HexColor.js: {}
              IdSelector.js: {}
              Identifier.js: {}
              MediaFeature.js: {}
              MediaQuery.js: {}
              MediaQueryList.js: {}
              Nth.js: {}
              Number.js: {}
              Operator.js: {}
              Parentheses.js: {}
              Percentage.js: {}
              PseudoClassSelector.js: {}
              PseudoElementSelector.js: {}
              Ratio.js: {}
              Raw.js: {}
              Rule.js: {}
              Selector.js: {}
              SelectorList.js: {}
              String.js: {}
              StyleSheet.js: {}
              TypeSelector.js: {}
              UnicodeRange.js: {}
              Url.js: {}
              Value.js: {}
              WhiteSpace.js: {}
              index.js: {}
            pseudo:
              common:
                nth.js: {}
                nthWithOfClause.js: {}
                selectorList.js: {}
              dir.js: {}
              has.js: {}
              index.js: {}
              lang.js: {}
              matches.js: {}
              not.js: {}
              nth-child.js: {}
              nth-last-child.js: {}
              nth-last-of-type.js: {}
              nth-of-type.js: {}
              slotted.js: {}
            scope:
              atrulePrelude.js: {}
              default.js: {}
              index.js: {}
              selector.js: {}
              value.js: {}
          tokenizer:
            char-code-definitions.js: {}
            const.js: {}
            index.js: {}
            utils.js: {}
          utils:
            clone.js: {}
            createCustomError.js: {}
            names.js: {}
          walker:
            create.js: {}
            index.js: {}
        node_modules:
          source-map:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            dist:
              source-map.debug.js: {}
              source-map.js: {}
              source-map.min.js: {}
              source-map.min.js.map: {}
            lib:
              array-set.js: {}
              base64-vlq.js: {}
              base64.js: {}
              binary-search.js: {}
              mapping-list.js: {}
              quick-sort.js: {}
              source-map-consumer.js: {}
              source-map-generator.js: {}
              source-node.js: {}
              util.js: {}
            package.json: {}
            source-map.d.ts: {}
            source-map.js: {}
        package.json: {}
      css-what:
        LICENSE: {}
        lib:
          commonjs:
            index.d.ts: {}
            index.d.ts.map: {}
            index.js: {}
            parse.d.ts: {}
            parse.d.ts.map: {}
            parse.js: {}
            stringify.d.ts: {}
            stringify.d.ts.map: {}
            stringify.js: {}
            types.d.ts: {}
            types.d.ts.map: {}
            types.js: {}
          es:
            index.d.ts: {}
            index.d.ts.map: {}
            index.js: {}
            parse.d.ts: {}
            parse.d.ts.map: {}
            parse.js: {}
            stringify.d.ts: {}
            stringify.d.ts.map: {}
            stringify.js: {}
            types.d.ts: {}
            types.d.ts.map: {}
            types.js: {}
        package.json: {}
        readme.md: {}
      css.escape:
        LICENSE-MIT.txt: {}
        README.md: {}
        css.escape.js: {}
        package.json: {}
      cssdb:
        LICENSE.md: {}
        README.md: {}
        cssdb.json: {}
        cssdb.mjs: {}
        package.json: {}
      cssesc:
        LICENSE-MIT.txt: {}
        README.md: {}
        bin:
          cssesc: {}
        cssesc.js: {}
        man:
          cssesc.1: {}
        package.json: {}
      cssnano:
        LICENSE-MIT: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
          postcss-discard-comments:
            tsconfig.tsbuildinfo: {}
          postcss-discard-empty:
            tsconfig.tsbuildinfo: {}
          postcss-normalize-whitespace:
            tsconfig.tsbuildinfo: {}
        types:
          index.d.ts: {}
      cssnano-preset-default:
        LICENSE-MIT: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
        types:
          index.d.ts: {}
      cssnano-utils:
        LICENSE: {}
        README.md: {}
        package.json: {}
        src:
          getArguments.js: {}
          index.js: {}
          rawCache.js: {}
          sameParent.js: {}
        types:
          getArguments.d.ts: {}
          index.d.ts: {}
          rawCache.d.ts: {}
          sameParent.d.ts: {}
      csso:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        dist:
          csso.js: {}
          csso.min.js: {}
        lib:
          clean:
            Atrule.js: {}
            Comment.js: {}
            Declaration.js: {}
            Raw.js: {}
            Rule.js: {}
            TypeSelector.js: {}
            WhiteSpace.js: {}
            index.js: {}
            utils.js: {}
          compress.js: {}
          index.js: {}
          replace:
            Atrule.js: {}
            AttributeSelector.js: {}
            Dimension.js: {}
            Number.js: {}
            Percentage.js: {}
            String.js: {}
            Url.js: {}
            Value.js: {}
            atrule:
              keyframes.js: {}
            color.js: {}
            index.js: {}
            property:
              background.js: {}
              border.js: {}
              font-weight.js: {}
              font.js: {}
          restructure:
            1-mergeAtrule.js: {}
            2-initialMergeRuleset.js: {}
            3-disjoinRuleset.js: {}
            4-restructShorthand.js: {}
            6-restructBlock.js: {}
            7-mergeRuleset.js: {}
            8-restructRuleset.js: {}
            index.js: {}
            prepare:
              createDeclarationIndexer.js: {}
              index.js: {}
              processSelector.js: {}
              specificity.js: {}
            utils.js: {}
          usage.js: {}
        node_modules:
          css-tree:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            data:
              index.js: {}
              patch.json: {}
            dist:
              csstree.js: {}
              csstree.min.js: {}
            lib:
              common:
                List.js: {}
                OffsetToLocation.js: {}
                SyntaxError.js: {}
                TokenStream.js: {}
                adopt-buffer.js: {}
              convertor:
                create.js: {}
                index.js: {}
              definition-syntax:
                SyntaxError.js: {}
                generate.js: {}
                index.js: {}
                parse.js: {}
                tokenizer.js: {}
                walk.js: {}
              generator:
                create.js: {}
                index.js: {}
                sourceMap.js: {}
              index.js: {}
              lexer:
                Lexer.js: {}
                error.js: {}
                generic-an-plus-b.js: {}
                generic-urange.js: {}
                generic.js: {}
                index.js: {}
                match-graph.js: {}
                match.js: {}
                prepare-tokens.js: {}
                search.js: {}
                structure.js: {}
                trace.js: {}
              parser:
                create.js: {}
                index.js: {}
                sequence.js: {}
              syntax:
                atrule:
                  font-face.js: {}
                  import.js: {}
                  index.js: {}
                  media.js: {}
                  page.js: {}
                  supports.js: {}
                config:
                  lexer.js: {}
                  mix.js: {}
                  parser.js: {}
                  walker.js: {}
                create.js: {}
                function:
                  expression.js: {}
                  var.js: {}
                index.js: {}
                node:
                  AnPlusB.js: {}
                  Atrule.js: {}
                  AtrulePrelude.js: {}
                  AttributeSelector.js: {}
                  Block.js: {}
                  Brackets.js: {}
                  CDC.js: {}
                  CDO.js: {}
                  ClassSelector.js: {}
                  Combinator.js: {}
                  Comment.js: {}
                  Declaration.js: {}
                  DeclarationList.js: {}
                  Dimension.js: {}
                  Function.js: {}
                  Hash.js: {}
                  IdSelector.js: {}
                  Identifier.js: {}
                  MediaFeature.js: {}
                  MediaQuery.js: {}
                  MediaQueryList.js: {}
                  Nth.js: {}
                  Number.js: {}
                  Operator.js: {}
                  Parentheses.js: {}
                  Percentage.js: {}
                  PseudoClassSelector.js: {}
                  PseudoElementSelector.js: {}
                  Ratio.js: {}
                  Raw.js: {}
                  Rule.js: {}
                  Selector.js: {}
                  SelectorList.js: {}
                  String.js: {}
                  StyleSheet.js: {}
                  TypeSelector.js: {}
                  UnicodeRange.js: {}
                  Url.js: {}
                  Value.js: {}
                  WhiteSpace.js: {}
                  index.js: {}
                pseudo:
                  common:
                    nth.js: {}
                    nthWithOfClause.js: {}
                    selectorList.js: {}
                  dir.js: {}
                  has.js: {}
                  index.js: {}
                  lang.js: {}
                  matches.js: {}
                  not.js: {}
                  nth-child.js: {}
                  nth-last-child.js: {}
                  nth-last-of-type.js: {}
                  nth-of-type.js: {}
                  slotted.js: {}
                scope:
                  atrulePrelude.js: {}
                  default.js: {}
                  index.js: {}
                  selector.js: {}
                  value.js: {}
              tokenizer:
                char-code-definitions.js: {}
                const.js: {}
                index.js: {}
                utils.js: {}
              utils:
                clone.js: {}
                createCustomError.js: {}
                names.js: {}
              walker:
                create.js: {}
                index.js: {}
            package.json: {}
          mdn-data:
            LICENSE: {}
            README.md: {}
            api:
              index.js: {}
              inheritance.json: {}
              inheritance.schema.json: {}
            css:
              at-rules.json: {}
              at-rules.schema.json: {}
              definitions.json: {}
              index.js: {}
              properties.json: {}
              properties.schema.json: {}
              selectors.json: {}
              selectors.schema.json: {}
              syntaxes.json: {}
              syntaxes.schema.json: {}
              types.json: {}
              types.schema.json: {}
              units.json: {}
              units.schema.json: {}
            index.js: {}
            l10n:
              css.json: {}
              index.js: {}
            package.json: {}
          source-map:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            dist:
              source-map.debug.js: {}
              source-map.js: {}
              source-map.min.js: {}
              source-map.min.js.map: {}
            lib:
              array-set.js: {}
              base64-vlq.js: {}
              base64.js: {}
              binary-search.js: {}
              mapping-list.js: {}
              quick-sort.js: {}
              source-map-consumer.js: {}
              source-map-generator.js: {}
              source-node.js: {}
              util.js: {}
            package.json: {}
            source-map.d.ts: {}
            source-map.js: {}
        package.json: {}
      cssom:
        LICENSE.txt: {}
        README.mdown: {}
        lib:
          CSSDocumentRule.js: {}
          CSSFontFaceRule.js: {}
          CSSHostRule.js: {}
          CSSImportRule.js: {}
          CSSKeyframeRule.js: {}
          CSSKeyframesRule.js: {}
          CSSMediaRule.js: {}
          CSSOM.js: {}
          CSSRule.js: {}
          CSSStyleDeclaration.js: {}
          CSSStyleRule.js: {}
          CSSStyleSheet.js: {}
          CSSSupportsRule.js: {}
          CSSValue.js: {}
          CSSValueExpression.js: {}
          MatcherList.js: {}
          MediaList.js: {}
          StyleSheet.js: {}
          clone.js: {}
          index.js: {}
          parse.js: {}
        package.json: {}
      cssstyle:
        LICENSE: {}
        README.md: {}
        lib:
          CSSStyleDeclaration.js: {}
          CSSStyleDeclaration.test.js: {}
          allExtraProperties.js: {}
          allProperties.js: {}
          allWebkitProperties.js: {}
          constants.js: {}
          implementedProperties.js: {}
          named_colors.json: {}
          parsers.js: {}
          parsers.test.js: {}
          properties:
            azimuth.js: {}
            background.js: {}
            backgroundAttachment.js: {}
            backgroundColor.js: {}
            backgroundImage.js: {}
            backgroundPosition.js: {}
            backgroundRepeat.js: {}
            border.js: {}
            borderBottom.js: {}
            borderBottomColor.js: {}
            borderBottomStyle.js: {}
            borderBottomWidth.js: {}
            borderCollapse.js: {}
            borderColor.js: {}
            borderLeft.js: {}
            borderLeftColor.js: {}
            borderLeftStyle.js: {}
            borderLeftWidth.js: {}
            borderRight.js: {}
            borderRightColor.js: {}
            borderRightStyle.js: {}
            borderRightWidth.js: {}
            borderSpacing.js: {}
            borderStyle.js: {}
            borderTop.js: {}
            borderTopColor.js: {}
            borderTopStyle.js: {}
            borderTopWidth.js: {}
            borderWidth.js: {}
            bottom.js: {}
            clear.js: {}
            clip.js: {}
            color.js: {}
            cssFloat.js: {}
            flex.js: {}
            flexBasis.js: {}
            flexGrow.js: {}
            flexShrink.js: {}
            float.js: {}
            floodColor.js: {}
            font.js: {}
            fontFamily.js: {}
            fontSize.js: {}
            fontStyle.js: {}
            fontVariant.js: {}
            fontWeight.js: {}
            height.js: {}
            left.js: {}
            lightingColor.js: {}
            lineHeight.js: {}
            margin.js: {}
            marginBottom.js: {}
            marginLeft.js: {}
            marginRight.js: {}
            marginTop.js: {}
            opacity.js: {}
            outlineColor.js: {}
            padding.js: {}
            paddingBottom.js: {}
            paddingLeft.js: {}
            paddingRight.js: {}
            paddingTop.js: {}
            right.js: {}
            stopColor.js: {}
            textLineThroughColor.js: {}
            textOverlineColor.js: {}
            textUnderlineColor.js: {}
            top.js: {}
            webkitBorderAfterColor.js: {}
            webkitBorderBeforeColor.js: {}
            webkitBorderEndColor.js: {}
            webkitBorderStartColor.js: {}
            webkitColumnRuleColor.js: {}
            webkitMatchNearestMailBlockquoteColor.js: {}
            webkitTapHighlightColor.js: {}
            webkitTextEmphasisColor.js: {}
            webkitTextFillColor.js: {}
            webkitTextStrokeColor.js: {}
            width.js: {}
          properties.js: {}
          utils:
            colorSpace.js: {}
            getBasicPropertyDescriptor.js: {}
        node_modules:
          cssom:
            LICENSE.txt: {}
            README.mdown: {}
            lib:
              CSSDocumentRule.js: {}
              CSSFontFaceRule.js: {}
              CSSHostRule.js: {}
              CSSImportRule.js: {}
              CSSKeyframeRule.js: {}
              CSSKeyframesRule.js: {}
              CSSMediaRule.js: {}
              CSSOM.js: {}
              CSSRule.js: {}
              CSSStyleDeclaration.js: {}
              CSSStyleRule.js: {}
              CSSStyleSheet.js: {}
              CSSSupportsRule.js: {}
              CSSValue.js: {}
              CSSValueExpression.js: {}
              MatcherList.js: {}
              MediaList.js: {}
              StyleSheet.js: {}
              clone.js: {}
              index.js: {}
              parse.js: {}
            package.json: {}
        package.json: {}
      csstype:
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js.flow: {}
        package.json: {}
      culvert:
        LICENSE: {}
        README.md: {}
        channel.js: {}
        consume.js: {}
        package.json: {}
      damerau-levenshtein:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        scripts:
          update-changelog.sh: {}
        test:
          test.js: {}
      data-uri-to-buffer:
        LICENSE: {}
        README.md: {}
        dist:
          common.d.ts: {}
          common.d.ts.map: {}
          common.js: {}
          common.js.map: {}
          index.d.ts: {}
          index.d.ts.map: {}
          index.js: {}
          index.js.map: {}
          node.d.ts: {}
          node.d.ts.map: {}
          node.js: {}
          node.js.map: {}
        package.json: {}
      data-urls:
        LICENSE.txt: {}
        README.md: {}
        lib:
          parser.js: {}
          utils.js: {}
        package.json: {}
      data-view-buffer:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      data-view-byte-length:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      data-view-byte-offset:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      dayjs:
        .editorconfig: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        dayjs.min.js: {}
        esm:
          constant.js: {}
          index.d.ts: {}
          index.js: {}
          locale:
            af.js: {}
            am.js: {}
            ar-dz.js: {}
            ar-iq.js: {}
            ar-kw.js: {}
            ar-ly.js: {}
            ar-ma.js: {}
            ar-sa.js: {}
            ar-tn.js: {}
            ar.js: {}
            az.js: {}
            be.js: {}
            bg.js: {}
            bi.js: {}
            bm.js: {}
            bn-bd.js: {}
            bn.js: {}
            bo.js: {}
            br.js: {}
            bs.js: {}
            ca.js: {}
            cs.js: {}
            cv.js: {}
            cy.js: {}
            da.js: {}
            de-at.js: {}
            de-ch.js: {}
            de.js: {}
            dv.js: {}
            el.js: {}
            en-au.js: {}
            en-ca.js: {}
            en-gb.js: {}
            en-ie.js: {}
            en-il.js: {}
            en-in.js: {}
            en-nz.js: {}
            en-sg.js: {}
            en-tt.js: {}
            en.js: {}
            eo.js: {}
            es-do.js: {}
            es-mx.js: {}
            es-pr.js: {}
            es-us.js: {}
            es.js: {}
            et.js: {}
            eu.js: {}
            fa.js: {}
            fi.js: {}
            fo.js: {}
            fr-ca.js: {}
            fr-ch.js: {}
            fr.js: {}
            fy.js: {}
            ga.js: {}
            gd.js: {}
            gl.js: {}
            gom-latn.js: {}
            gu.js: {}
            he.js: {}
            hi.js: {}
            hr.js: {}
            ht.js: {}
            hu.js: {}
            hy-am.js: {}
            id.js: {}
            index.d.ts: {}
            is.js: {}
            it-ch.js: {}
            it.js: {}
            ja.js: {}
            jv.js: {}
            ka.js: {}
            kk.js: {}
            km.js: {}
            kn.js: {}
            ko.js: {}
            ku.js: {}
            ky.js: {}
            lb.js: {}
            lo.js: {}
            lt.js: {}
            lv.js: {}
            me.js: {}
            mi.js: {}
            mk.js: {}
            ml.js: {}
            mn.js: {}
            mr.js: {}
            ms-my.js: {}
            ms.js: {}
            mt.js: {}
            my.js: {}
            nb.js: {}
            ne.js: {}
            nl-be.js: {}
            nl.js: {}
            nn.js: {}
            oc-lnc.js: {}
            pa-in.js: {}
            pl.js: {}
            pt-br.js: {}
            pt.js: {}
            rn.js: {}
            ro.js: {}
            ru.js: {}
            rw.js: {}
            sd.js: {}
            se.js: {}
            si.js: {}
            sk.js: {}
            sl.js: {}
            sq.js: {}
            sr-cyrl.js: {}
            sr.js: {}
            ss.js: {}
            sv-fi.js: {}
            sv.js: {}
            sw.js: {}
            ta.js: {}
            te.js: {}
            tet.js: {}
            tg.js: {}
            th.js: {}
            tk.js: {}
            tl-ph.js: {}
            tlh.js: {}
            tr.js: {}
            types.d.ts: {}
            tzl.js: {}
            tzm-latn.js: {}
            tzm.js: {}
            ug-cn.js: {}
            uk.js: {}
            ur.js: {}
            uz-latn.js: {}
            uz.js: {}
            vi.js: {}
            x-pseudo.js: {}
            yo.js: {}
            zh-cn.js: {}
            zh-hk.js: {}
            zh-tw.js: {}
            zh.js: {}
          plugin:
            advancedFormat:
              index.d.ts: {}
              index.js: {}
            arraySupport:
              index.d.ts: {}
              index.js: {}
            badMutable:
              index.d.ts: {}
              index.js: {}
            bigIntSupport:
              index.d.ts: {}
              index.js: {}
            buddhistEra:
              index.d.ts: {}
              index.js: {}
            calendar:
              index.d.ts: {}
              index.js: {}
            customParseFormat:
              index.d.ts: {}
              index.js: {}
            dayOfYear:
              index.d.ts: {}
              index.js: {}
            devHelper:
              index.d.ts: {}
              index.js: {}
            duration:
              index.d.ts: {}
              index.js: {}
            isBetween:
              index.d.ts: {}
              index.js: {}
            isLeapYear:
              index.d.ts: {}
              index.js: {}
            isMoment:
              index.d.ts: {}
              index.js: {}
            isSameOrAfter:
              index.d.ts: {}
              index.js: {}
            isSameOrBefore:
              index.d.ts: {}
              index.js: {}
            isToday:
              index.d.ts: {}
              index.js: {}
            isTomorrow:
              index.d.ts: {}
              index.js: {}
            isYesterday:
              index.d.ts: {}
              index.js: {}
            isoWeek:
              index.d.ts: {}
              index.js: {}
            isoWeeksInYear:
              index.d.ts: {}
              index.js: {}
            localeData:
              index.d.ts: {}
              index.js: {}
            localizedFormat:
              index.d.ts: {}
              index.js: {}
              utils.js: {}
            minMax:
              index.d.ts: {}
              index.js: {}
            objectSupport:
              index.d.ts: {}
              index.js: {}
            pluralGetSet:
              index.d.ts: {}
              index.js: {}
            preParsePostFormat:
              index.d.ts: {}
              index.js: {}
            quarterOfYear:
              index.d.ts: {}
              index.js: {}
            relativeTime:
              index.d.ts: {}
              index.js: {}
            timezone:
              index.d.ts: {}
              index.js: {}
            toArray:
              index.d.ts: {}
              index.js: {}
            toObject:
              index.d.ts: {}
              index.js: {}
            updateLocale:
              index.d.ts: {}
              index.js: {}
            utc:
              index.d.ts: {}
              index.js: {}
            weekOfYear:
              index.d.ts: {}
              index.js: {}
            weekYear:
              index.d.ts: {}
              index.js: {}
            weekday:
              index.d.ts: {}
              index.js: {}
          utils.js: {}
        index.d.ts: {}
        locale:
          af.js: {}
          am.js: {}
          ar-dz.js: {}
          ar-iq.js: {}
          ar-kw.js: {}
          ar-ly.js: {}
          ar-ma.js: {}
          ar-sa.js: {}
          ar-tn.js: {}
          ar.js: {}
          az.js: {}
          be.js: {}
          bg.js: {}
          bi.js: {}
          bm.js: {}
          bn-bd.js: {}
          bn.js: {}
          bo.js: {}
          br.js: {}
          bs.js: {}
          ca.js: {}
          cs.js: {}
          cv.js: {}
          cy.js: {}
          da.js: {}
          de-at.js: {}
          de-ch.js: {}
          de.js: {}
          dv.js: {}
          el.js: {}
          en-au.js: {}
          en-ca.js: {}
          en-gb.js: {}
          en-ie.js: {}
          en-il.js: {}
          en-in.js: {}
          en-nz.js: {}
          en-sg.js: {}
          en-tt.js: {}
          en.js: {}
          eo.js: {}
          es-do.js: {}
          es-mx.js: {}
          es-pr.js: {}
          es-us.js: {}
          es.js: {}
          et.js: {}
          eu.js: {}
          fa.js: {}
          fi.js: {}
          fo.js: {}
          fr-ca.js: {}
          fr-ch.js: {}
          fr.js: {}
          fy.js: {}
          ga.js: {}
          gd.js: {}
          gl.js: {}
          gom-latn.js: {}
          gu.js: {}
          he.js: {}
          hi.js: {}
          hr.js: {}
          ht.js: {}
          hu.js: {}
          hy-am.js: {}
          id.js: {}
          index.d.ts: {}
          is.js: {}
          it-ch.js: {}
          it.js: {}
          ja.js: {}
          jv.js: {}
          ka.js: {}
          kk.js: {}
          km.js: {}
          kn.js: {}
          ko.js: {}
          ku.js: {}
          ky.js: {}
          lb.js: {}
          lo.js: {}
          lt.js: {}
          lv.js: {}
          me.js: {}
          mi.js: {}
          mk.js: {}
          ml.js: {}
          mn.js: {}
          mr.js: {}
          ms-my.js: {}
          ms.js: {}
          mt.js: {}
          my.js: {}
          nb.js: {}
          ne.js: {}
          nl-be.js: {}
          nl.js: {}
          nn.js: {}
          oc-lnc.js: {}
          pa-in.js: {}
          pl.js: {}
          pt-br.js: {}
          pt.js: {}
          rn.js: {}
          ro.js: {}
          ru.js: {}
          rw.js: {}
          sd.js: {}
          se.js: {}
          si.js: {}
          sk.js: {}
          sl.js: {}
          sq.js: {}
          sr-cyrl.js: {}
          sr.js: {}
          ss.js: {}
          sv-fi.js: {}
          sv.js: {}
          sw.js: {}
          ta.js: {}
          te.js: {}
          tet.js: {}
          tg.js: {}
          th.js: {}
          tk.js: {}
          tl-ph.js: {}
          tlh.js: {}
          tr.js: {}
          types.d.ts: {}
          tzl.js: {}
          tzm-latn.js: {}
          tzm.js: {}
          ug-cn.js: {}
          uk.js: {}
          ur.js: {}
          uz-latn.js: {}
          uz.js: {}
          vi.js: {}
          x-pseudo.js: {}
          yo.js: {}
          zh-cn.js: {}
          zh-hk.js: {}
          zh-tw.js: {}
          zh.js: {}
        locale.json: {}
        package.json: {}
        plugin:
          advancedFormat.d.ts: {}
          advancedFormat.js: {}
          arraySupport.d.ts: {}
          arraySupport.js: {}
          badMutable.d.ts: {}
          badMutable.js: {}
          bigIntSupport.d.ts: {}
          bigIntSupport.js: {}
          buddhistEra.d.ts: {}
          buddhistEra.js: {}
          calendar.d.ts: {}
          calendar.js: {}
          customParseFormat.d.ts: {}
          customParseFormat.js: {}
          dayOfYear.d.ts: {}
          dayOfYear.js: {}
          devHelper.d.ts: {}
          devHelper.js: {}
          duration.d.ts: {}
          duration.js: {}
          isBetween.d.ts: {}
          isBetween.js: {}
          isLeapYear.d.ts: {}
          isLeapYear.js: {}
          isMoment.d.ts: {}
          isMoment.js: {}
          isSameOrAfter.d.ts: {}
          isSameOrAfter.js: {}
          isSameOrBefore.d.ts: {}
          isSameOrBefore.js: {}
          isToday.d.ts: {}
          isToday.js: {}
          isTomorrow.d.ts: {}
          isTomorrow.js: {}
          isYesterday.d.ts: {}
          isYesterday.js: {}
          isoWeek.d.ts: {}
          isoWeek.js: {}
          isoWeeksInYear.d.ts: {}
          isoWeeksInYear.js: {}
          localeData.d.ts: {}
          localeData.js: {}
          localizedFormat.d.ts: {}
          localizedFormat.js: {}
          minMax.d.ts: {}
          minMax.js: {}
          objectSupport.d.ts: {}
          objectSupport.js: {}
          pluralGetSet.d.ts: {}
          pluralGetSet.js: {}
          preParsePostFormat.d.ts: {}
          preParsePostFormat.js: {}
          quarterOfYear.d.ts: {}
          quarterOfYear.js: {}
          relativeTime.d.ts: {}
          relativeTime.js: {}
          timezone.d.ts: {}
          timezone.js: {}
          toArray.d.ts: {}
          toArray.js: {}
          toObject.d.ts: {}
          toObject.js: {}
          updateLocale.d.ts: {}
          updateLocale.js: {}
          utc.d.ts: {}
          utc.js: {}
          weekOfYear.d.ts: {}
          weekOfYear.js: {}
          weekYear.d.ts: {}
          weekYear.js: {}
          weekday.d.ts: {}
          weekday.js: {}
      debug:
        LICENSE: {}
        README.md: {}
        package.json: {}
        src:
          browser.js: {}
          common.js: {}
          index.js: {}
          node.js: {}
      decimal.js:
        LICENCE.md: {}
        README.md: {}
        decimal.d.ts: {}
        decimal.js: {}
        decimal.mjs: {}
        package.json: {}
      decode-named-character-reference:
        index.d.ts: {}
        index.dom.d.ts: {}
        index.dom.js: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      dedent:
        LICENSE: {}
        README.md: {}
        dist:
          dedent.js: {}
        package.json: {}
      deep-equal:
        .editorconfig: {}
        .eslintrc: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        assert.js: {}
        example:
          cmp.js: {}
        index.js: {}
        package.json: {}
        readme.markdown: {}
        test:
          _tape.js: {}
          cmp.js: {}
      deep-is:
        .travis.yml: {}
        LICENSE: {}
        README.markdown: {}
        example:
          cmp.js: {}
        index.js: {}
        package.json: {}
        test:
          NaN.js: {}
          cmp.js: {}
          neg-vs-pos-0.js: {}
      deepmerge:
        .editorconfig: {}
        .eslintcache: {}
        changelog.md: {}
        dist:
          cjs.js: {}
          umd.js: {}
        index.d.ts: {}
        index.js: {}
        license.txt: {}
        package.json: {}
        readme.md: {}
        rollup.config.js: {}
      default-gateway:
        LICENSE: {}
        README.md: {}
        android.js: {}
        darwin.js: {}
        freebsd.js: {}
        ibmi.js: {}
        index.js: {}
        linux.js: {}
        openbsd.js: {}
        package.json: {}
        sunos.js: {}
        win32.js: {}
      define-data-property:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      define-lazy-prop:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      define-properties:
        .editorconfig: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      degenerator:
        README.md: {}
        dist:
          compile.d.ts: {}
          compile.d.ts.map: {}
          compile.js: {}
          compile.js.map: {}
          degenerator.d.ts: {}
          degenerator.d.ts.map: {}
          degenerator.js: {}
          degenerator.js.map: {}
          index.d.ts: {}
          index.d.ts.map: {}
          index.js: {}
          index.js.map: {}
        package.json: {}
      delayed-stream:
        .npmignore: {}
        License: {}
        Makefile: {}
        Readme.md: {}
        lib:
          delayed_stream.js: {}
        package.json: {}
      depd:
        History.md: {}
        LICENSE: {}
        Readme.md: {}
        index.js: {}
        lib:
          browser:
            index.js: {}
        package.json: {}
      dequal:
        dist:
          index.js: {}
          index.min.js: {}
          index.mjs: {}
        index.d.ts: {}
        license: {}
        lite:
          index.d.ts: {}
          index.js: {}
          index.min.js: {}
          index.mjs: {}
        package.json: {}
        readme.md: {}
      destroy:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      detect-newline:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      detect-node:
        LICENSE: {}
        Readme.md: {}
        browser.js: {}
        index.esm.js: {}
        index.js: {}
        package.json: {}
      detect-port-alt:
        .eslintignore: {}
        .eslintrc: {}
        .vscode:
          settings.json: {}
        CONTRIBUTING.md: {}
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        appveyor.yml: {}
        bin:
          detect-port: {}
        index.js: {}
        lib:
          detect-port.js: {}
        logo.png: {}
        node_modules:
          debug:
            .coveralls.yml: {}
            .eslintrc: {}
            .npmignore: {}
            .travis.yml: {}
            CHANGELOG.md: {}
            LICENSE: {}
            Makefile: {}
            README.md: {}
            component.json: {}
            karma.conf.js: {}
            node.js: {}
            package.json: {}
            src:
              browser.js: {}
              debug.js: {}
              index.js: {}
              inspector-log.js: {}
              node.js: {}
          ms:
            index.js: {}
            license.md: {}
            package.json: {}
            readme.md: {}
        package.json: {}
      devlop:
        lib:
          default.js: {}
          development.d.ts: {}
          development.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      didyoumean:
        LICENSE: {}
        README.md: {}
        didYouMean-1.2.1.js: {}
        didYouMean-1.2.1.min.js: {}
        package.json: {}
      diff-sequences:
        LICENSE: {}
        README.md: {}
        build:
          index.d.ts: {}
          index.js: {}
        package.json: {}
        perf:
          example.md: {}
          index.js: {}
      dir-glob:
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      dlv:
        README.md: {}
        dist:
          dlv.es.js: {}
          dlv.es.js.map: {}
          dlv.js: {}
          dlv.js.map: {}
          dlv.umd.js: {}
          dlv.umd.js.map: {}
        index.js: {}
        package.json: {}
      dns-packet:
        LICENSE: {}
        README.md: {}
        classes.js: {}
        index.js: {}
        opcodes.js: {}
        optioncodes.js: {}
        package.json: {}
        rcodes.js: {}
        types.js: {}
      doctrine:
        CHANGELOG.md: {}
        LICENSE: {}
        LICENSE.closure-compiler: {}
        LICENSE.esprima: {}
        README.md: {}
        lib:
          doctrine.js: {}
          typed.js: {}
          utility.js: {}
        package.json: {}
      dom-accessibility-api:
        .browserslistrc: {}
        LICENSE.md: {}
        README.md: {}
        dist:
          accessible-description.d.ts: {}
          accessible-description.d.ts.map: {}
          accessible-description.js: {}
          accessible-description.js.map: {}
          accessible-description.mjs: {}
          accessible-description.mjs.map: {}
          accessible-name-and-description.d.ts: {}
          accessible-name-and-description.d.ts.map: {}
          accessible-name-and-description.js: {}
          accessible-name-and-description.js.map: {}
          accessible-name-and-description.mjs: {}
          accessible-name-and-description.mjs.map: {}
          accessible-name.d.ts: {}
          accessible-name.d.ts.map: {}
          accessible-name.js: {}
          accessible-name.js.map: {}
          accessible-name.mjs: {}
          accessible-name.mjs.map: {}
          getRole.d.ts: {}
          getRole.d.ts.map: {}
          getRole.js: {}
          getRole.js.map: {}
          getRole.mjs: {}
          getRole.mjs.map: {}
          index.d.ts: {}
          index.d.ts.map: {}
          index.js: {}
          index.js.map: {}
          index.mjs: {}
          index.mjs.map: {}
          is-inaccessible.d.ts: {}
          is-inaccessible.d.ts.map: {}
          is-inaccessible.js: {}
          is-inaccessible.js.map: {}
          is-inaccessible.mjs: {}
          is-inaccessible.mjs.map: {}
          polyfills:
            SetLike.d.ts: {}
            SetLike.d.ts.map: {}
            SetLike.js: {}
            SetLike.js.map: {}
            SetLike.mjs: {}
            SetLike.mjs.map: {}
            array.from.d.ts: {}
            array.from.d.ts.map: {}
            array.from.js: {}
            array.from.js.map: {}
            array.from.mjs: {}
            array.from.mjs.map: {}
            iterator.d.js: {}
            iterator.d.js.map: {}
            iterator.d.mjs: {}
            iterator.d.mjs.map: {}
          util.d.ts: {}
          util.d.ts.map: {}
          util.js: {}
          util.js.map: {}
          util.mjs: {}
          util.mjs.map: {}
        package.json: {}
      dom-converter:
        LICENSE: {}
        README.md: {}
        lib:
          domConverter.js: {}
          domToMarkup.js: {}
          objectToSaneObject.js: {}
          saneObjectToDom.js: {}
        package.json: {}
      dom-helpers:
        LICENSE: {}
        README.md: {}
        activeElement:
          package.json: {}
        addClass:
          package.json: {}
        addEventListener:
          package.json: {}
        animate:
          package.json: {}
        animationFrame:
          package.json: {}
        attribute:
          package.json: {}
        camelize:
          package.json: {}
        camelizeStyle:
          package.json: {}
        canUseDOM:
          package.json: {}
        childElements:
          package.json: {}
        childNodes:
          package.json: {}
        cjs:
          activeElement.d.ts: {}
          activeElement.js: {}
          addClass.d.ts: {}
          addClass.js: {}
          addEventListener.d.ts: {}
          addEventListener.js: {}
          animate.d.ts: {}
          animate.js: {}
          animationFrame.d.ts: {}
          animationFrame.js: {}
          attribute.d.ts: {}
          attribute.js: {}
          camelize.d.ts: {}
          camelize.js: {}
          camelizeStyle.d.ts: {}
          camelizeStyle.js: {}
          canUseDOM.d.ts: {}
          canUseDOM.js: {}
          childElements.d.ts: {}
          childElements.js: {}
          childNodes.d.ts: {}
          childNodes.js: {}
          clear.d.ts: {}
          clear.js: {}
          closest.d.ts: {}
          closest.js: {}
          collectElements.d.ts: {}
          collectElements.js: {}
          collectSiblings.d.ts: {}
          collectSiblings.js: {}
          contains.d.ts: {}
          contains.js: {}
          css.d.ts: {}
          css.js: {}
          filterEventHandler.d.ts: {}
          filterEventHandler.js: {}
          getComputedStyle.d.ts: {}
          getComputedStyle.js: {}
          getScrollAccessor.d.ts: {}
          getScrollAccessor.js: {}
          hasClass.d.ts: {}
          hasClass.js: {}
          height.d.ts: {}
          height.js: {}
          hyphenate.d.ts: {}
          hyphenate.js: {}
          hyphenateStyle.d.ts: {}
          hyphenateStyle.js: {}
          index.d.ts: {}
          index.js: {}
          insertAfter.d.ts: {}
          insertAfter.js: {}
          isDocument.d.ts: {}
          isDocument.js: {}
          isInput.d.ts: {}
          isInput.js: {}
          isTransform.d.ts: {}
          isTransform.js: {}
          isVisible.d.ts: {}
          isVisible.js: {}
          isWindow.d.ts: {}
          isWindow.js: {}
          listen.d.ts: {}
          listen.js: {}
          matches.d.ts: {}
          matches.js: {}
          nextUntil.d.ts: {}
          nextUntil.js: {}
          offset.d.ts: {}
          offset.js: {}
          offsetParent.d.ts: {}
          offsetParent.js: {}
          ownerDocument.d.ts: {}
          ownerDocument.js: {}
          ownerWindow.d.ts: {}
          ownerWindow.js: {}
          parents.d.ts: {}
          parents.js: {}
          position.d.ts: {}
          position.js: {}
          prepend.d.ts: {}
          prepend.js: {}
          querySelectorAll.d.ts: {}
          querySelectorAll.js: {}
          remove.d.ts: {}
          remove.js: {}
          removeClass.d.ts: {}
          removeClass.js: {}
          removeEventListener.d.ts: {}
          removeEventListener.js: {}
          scrollLeft.d.ts: {}
          scrollLeft.js: {}
          scrollParent.d.ts: {}
          scrollParent.js: {}
          scrollTo.d.ts: {}
          scrollTo.js: {}
          scrollTop.d.ts: {}
          scrollTop.js: {}
          scrollbarSize.d.ts: {}
          scrollbarSize.js: {}
          siblings.d.ts: {}
          siblings.js: {}
          text.d.ts: {}
          text.js: {}
          toggleClass.d.ts: {}
          toggleClass.js: {}
          transitionEnd.d.ts: {}
          transitionEnd.js: {}
          triggerEvent.d.ts: {}
          triggerEvent.js: {}
          types.d.ts: {}
          width.d.ts: {}
          width.js: {}
        clear:
          package.json: {}
        closest:
          package.json: {}
        collectElements:
          package.json: {}
        collectSiblings:
          package.json: {}
        contains:
          package.json: {}
        css:
          package.json: {}
        esm:
          activeElement.d.ts: {}
          activeElement.js: {}
          addClass.d.ts: {}
          addClass.js: {}
          addEventListener.d.ts: {}
          addEventListener.js: {}
          animate.d.ts: {}
          animate.js: {}
          animationFrame.d.ts: {}
          animationFrame.js: {}
          attribute.d.ts: {}
          attribute.js: {}
          camelize.d.ts: {}
          camelize.js: {}
          camelizeStyle.d.ts: {}
          camelizeStyle.js: {}
          canUseDOM.d.ts: {}
          canUseDOM.js: {}
          childElements.d.ts: {}
          childElements.js: {}
          childNodes.d.ts: {}
          childNodes.js: {}
          clear.d.ts: {}
          clear.js: {}
          closest.d.ts: {}
          closest.js: {}
          collectElements.d.ts: {}
          collectElements.js: {}
          collectSiblings.d.ts: {}
          collectSiblings.js: {}
          contains.d.ts: {}
          contains.js: {}
          css.d.ts: {}
          css.js: {}
          filterEventHandler.d.ts: {}
          filterEventHandler.js: {}
          getComputedStyle.d.ts: {}
          getComputedStyle.js: {}
          getScrollAccessor.d.ts: {}
          getScrollAccessor.js: {}
          hasClass.d.ts: {}
          hasClass.js: {}
          height.d.ts: {}
          height.js: {}
          hyphenate.d.ts: {}
          hyphenate.js: {}
          hyphenateStyle.d.ts: {}
          hyphenateStyle.js: {}
          index.d.ts: {}
          index.js: {}
          insertAfter.d.ts: {}
          insertAfter.js: {}
          isDocument.d.ts: {}
          isDocument.js: {}
          isInput.d.ts: {}
          isInput.js: {}
          isTransform.d.ts: {}
          isTransform.js: {}
          isVisible.d.ts: {}
          isVisible.js: {}
          isWindow.d.ts: {}
          isWindow.js: {}
          listen.d.ts: {}
          listen.js: {}
          matches.d.ts: {}
          matches.js: {}
          nextUntil.d.ts: {}
          nextUntil.js: {}
          offset.d.ts: {}
          offset.js: {}
          offsetParent.d.ts: {}
          offsetParent.js: {}
          ownerDocument.d.ts: {}
          ownerDocument.js: {}
          ownerWindow.d.ts: {}
          ownerWindow.js: {}
          parents.d.ts: {}
          parents.js: {}
          position.d.ts: {}
          position.js: {}
          prepend.d.ts: {}
          prepend.js: {}
          querySelectorAll.d.ts: {}
          querySelectorAll.js: {}
          remove.d.ts: {}
          remove.js: {}
          removeClass.d.ts: {}
          removeClass.js: {}
          removeEventListener.d.ts: {}
          removeEventListener.js: {}
          scrollLeft.d.ts: {}
          scrollLeft.js: {}
          scrollParent.d.ts: {}
          scrollParent.js: {}
          scrollTo.d.ts: {}
          scrollTo.js: {}
          scrollTop.d.ts: {}
          scrollTop.js: {}
          scrollbarSize.d.ts: {}
          scrollbarSize.js: {}
          siblings.d.ts: {}
          siblings.js: {}
          text.d.ts: {}
          text.js: {}
          toggleClass.d.ts: {}
          toggleClass.js: {}
          transitionEnd.d.ts: {}
          transitionEnd.js: {}
          triggerEvent.d.ts: {}
          triggerEvent.js: {}
          types.d.ts: {}
          width.d.ts: {}
          width.js: {}
        filterEventHandler:
          package.json: {}
        getComputedStyle:
          package.json: {}
        getScrollAccessor:
          package.json: {}
        hasClass:
          package.json: {}
        height:
          package.json: {}
        hyphenate:
          package.json: {}
        hyphenateStyle:
          package.json: {}
        insertAfter:
          package.json: {}
        isDocument:
          package.json: {}
        isInput:
          package.json: {}
        isTransform:
          package.json: {}
        isVisible:
          package.json: {}
        isWindow:
          package.json: {}
        listen:
          package.json: {}
        matches:
          package.json: {}
        nextUntil:
          package.json: {}
        offset:
          package.json: {}
        offsetParent:
          package.json: {}
        ownerDocument:
          package.json: {}
        ownerWindow:
          package.json: {}
        package.json: {}
        parents:
          package.json: {}
        position:
          package.json: {}
        prepend:
          package.json: {}
        querySelectorAll:
          package.json: {}
        remove:
          package.json: {}
        removeClass:
          package.json: {}
        removeEventListener:
          package.json: {}
        scrollLeft:
          package.json: {}
        scrollParent:
          package.json: {}
        scrollTo:
          package.json: {}
        scrollTop:
          package.json: {}
        scrollbarSize:
          package.json: {}
        siblings:
          package.json: {}
        text:
          package.json: {}
        toggleClass:
          package.json: {}
        transitionEnd:
          package.json: {}
        triggerEvent:
          package.json: {}
        width:
          package.json: {}
      dom-serializer:
        LICENSE: {}
        README.md: {}
        lib:
          esm:
            foreignNames.d.ts: {}
            foreignNames.d.ts.map: {}
            foreignNames.js: {}
            index.d.ts: {}
            index.d.ts.map: {}
            index.js: {}
            package.json: {}
          foreignNames.d.ts: {}
          foreignNames.d.ts.map: {}
          foreignNames.js: {}
          index.d.ts: {}
          index.d.ts.map: {}
          index.js: {}
        package.json: {}
      domelementtype:
        LICENSE: {}
        lib:
          esm:
            index.d.ts: {}
            index.d.ts.map: {}
            index.js: {}
            package.json: {}
          index.d.ts: {}
          index.d.ts.map: {}
          index.js: {}
        package.json: {}
        readme.md: {}
      domexception:
        LICENSE.txt: {}
        README.md: {}
        index.js: {}
        lib:
          DOMException-impl.js: {}
          DOMException.js: {}
          legacy-error-codes.json: {}
          utils.js: {}
        node_modules:
          webidl-conversions:
            LICENSE.md: {}
            README.md: {}
            lib:
              index.js: {}
            package.json: {}
        package.json: {}
        webidl2js-wrapper.js: {}
      domhandler:
        LICENSE: {}
        lib:
          index.d.ts: {}
          index.d.ts.map: {}
          index.js: {}
          node.d.ts: {}
          node.d.ts.map: {}
          node.js: {}
        package.json: {}
        readme.md: {}
      domutils:
        LICENSE: {}
        lib:
          feeds.d.ts: {}
          feeds.d.ts.map: {}
          feeds.js: {}
          helpers.d.ts: {}
          helpers.d.ts.map: {}
          helpers.js: {}
          index.d.ts: {}
          index.d.ts.map: {}
          index.js: {}
          legacy.d.ts: {}
          legacy.d.ts.map: {}
          legacy.js: {}
          manipulation.d.ts: {}
          manipulation.d.ts.map: {}
          manipulation.js: {}
          querying.d.ts: {}
          querying.d.ts.map: {}
          querying.js: {}
          stringify.d.ts: {}
          stringify.d.ts.map: {}
          stringify.js: {}
          traversal.d.ts: {}
          traversal.d.ts.map: {}
          traversal.js: {}
        package.json: {}
        readme.md: {}
      dot-case:
        LICENSE: {}
        README.md: {}
        dist:
          index.d.ts: {}
          index.js: {}
          index.js.map: {}
          index.spec.d.ts: {}
          index.spec.js: {}
          index.spec.js.map: {}
        dist.es2015:
          index.d.ts: {}
          index.js: {}
          index.js.map: {}
          index.spec.d.ts: {}
          index.spec.js: {}
          index.spec.js.map: {}
        package.json: {}
      dotenv:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        config.js: {}
        lib:
          cli-options.js: {}
          env-options.js: {}
          main.js: {}
        package.json: {}
        types:
          index.d.ts: {}
          test.ts: {}
          tsconfig.json: {}
          tslint.json: {}
      dotenv-expand:
        LICENSE: {}
        README.md: {}
        dotenv-expand.png: {}
        index.d.ts: {}
        lib:
          main.js: {}
        package.json: {}
      duplexer:
        .travis.yml: {}
        LICENCE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      eastasianwidth:
        README.md: {}
        eastasianwidth.js: {}
        package.json: {}
      ee-first:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      ejs:
        LICENSE: {}
        README.md: {}
        bin:
          cli.js: {}
        ejs.js: {}
        ejs.min.js: {}
        jakefile.js: {}
        lib:
          ejs.js: {}
          utils.js: {}
        package.json: {}
        usage.txt: {}
      electron-to-chromium:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        chromium-versions.js: {}
        chromium-versions.json: {}
        full-chromium-versions.js: {}
        full-chromium-versions.json: {}
        full-versions.js: {}
        full-versions.json: {}
        index.js: {}
        package.json: {}
        versions.js: {}
        versions.json: {}
      emitter-listener:
        .travis.yml: {}
        README.md: {}
        listener.js: {}
        package.json: {}
        test:
          basic.tap.js: {}
      emittery:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      emoji-regex:
        LICENSE-MIT.txt: {}
        README.md: {}
        RGI_Emoji.d.ts: {}
        RGI_Emoji.js: {}
        es2015:
          RGI_Emoji.d.ts: {}
          RGI_Emoji.js: {}
          index.d.ts: {}
          index.js: {}
          text.d.ts: {}
          text.js: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        text.d.ts: {}
        text.js: {}
      emojis-list:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        index.js: {}
        package.json: {}
      encodeurl:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      engine.io-client:
        LICENSE: {}
        README.md: {}
        build:
          cjs:
            browser-entrypoint.d.ts: {}
            browser-entrypoint.js: {}
            contrib:
              has-cors.d.ts: {}
              has-cors.js: {}
              parseqs.d.ts: {}
              parseqs.js: {}
              parseuri.d.ts: {}
              parseuri.js: {}
              yeast.d.ts: {}
              yeast.js: {}
            globalThis.browser.d.ts: {}
            globalThis.browser.js: {}
            globalThis.d.ts: {}
            globalThis.js: {}
            index.d.ts: {}
            index.js: {}
            package.json: {}
            socket.d.ts: {}
            socket.js: {}
            transport.d.ts: {}
            transport.js: {}
            transports:
              index.d.ts: {}
              index.js: {}
              polling.d.ts: {}
              polling.js: {}
              websocket-constructor.browser.d.ts: {}
              websocket-constructor.browser.js: {}
              websocket-constructor.d.ts: {}
              websocket-constructor.js: {}
              websocket.d.ts: {}
              websocket.js: {}
              webtransport.d.ts: {}
              webtransport.js: {}
              xmlhttprequest.browser.d.ts: {}
              xmlhttprequest.browser.js: {}
              xmlhttprequest.d.ts: {}
              xmlhttprequest.js: {}
            util.d.ts: {}
            util.js: {}
          esm:
            browser-entrypoint.d.ts: {}
            browser-entrypoint.js: {}
            contrib:
              has-cors.d.ts: {}
              has-cors.js: {}
              parseqs.d.ts: {}
              parseqs.js: {}
              parseuri.d.ts: {}
              parseuri.js: {}
              yeast.d.ts: {}
              yeast.js: {}
            globalThis.browser.d.ts: {}
            globalThis.browser.js: {}
            globalThis.d.ts: {}
            globalThis.js: {}
            index.d.ts: {}
            index.js: {}
            package.json: {}
            socket.d.ts: {}
            socket.js: {}
            transport.d.ts: {}
            transport.js: {}
            transports:
              index.d.ts: {}
              index.js: {}
              polling.d.ts: {}
              polling.js: {}
              websocket-constructor.browser.d.ts: {}
              websocket-constructor.browser.js: {}
              websocket-constructor.d.ts: {}
              websocket-constructor.js: {}
              websocket.d.ts: {}
              websocket.js: {}
              webtransport.d.ts: {}
              webtransport.js: {}
              xmlhttprequest.browser.d.ts: {}
              xmlhttprequest.browser.js: {}
              xmlhttprequest.d.ts: {}
              xmlhttprequest.js: {}
            util.d.ts: {}
            util.js: {}
          esm-debug:
            browser-entrypoint.d.ts: {}
            browser-entrypoint.js: {}
            contrib:
              has-cors.d.ts: {}
              has-cors.js: {}
              parseqs.d.ts: {}
              parseqs.js: {}
              parseuri.d.ts: {}
              parseuri.js: {}
              yeast.d.ts: {}
              yeast.js: {}
            globalThis.browser.d.ts: {}
            globalThis.browser.js: {}
            globalThis.d.ts: {}
            globalThis.js: {}
            index.d.ts: {}
            index.js: {}
            package.json: {}
            socket.d.ts: {}
            socket.js: {}
            transport.d.ts: {}
            transport.js: {}
            transports:
              index.d.ts: {}
              index.js: {}
              polling.d.ts: {}
              polling.js: {}
              websocket-constructor.browser.d.ts: {}
              websocket-constructor.browser.js: {}
              websocket-constructor.d.ts: {}
              websocket-constructor.js: {}
              websocket.d.ts: {}
              websocket.js: {}
              webtransport.d.ts: {}
              webtransport.js: {}
              xmlhttprequest.browser.d.ts: {}
              xmlhttprequest.browser.js: {}
              xmlhttprequest.d.ts: {}
              xmlhttprequest.js: {}
            util.d.ts: {}
            util.js: {}
        dist:
          engine.io.esm.min.js: {}
          engine.io.esm.min.js.map: {}
          engine.io.js: {}
          engine.io.js.map: {}
          engine.io.min.js: {}
          engine.io.min.js.map: {}
        node_modules:
          ws:
            LICENSE: {}
            README.md: {}
            browser.js: {}
            index.js: {}
            lib:
              buffer-util.js: {}
              constants.js: {}
              event-target.js: {}
              extension.js: {}
              limiter.js: {}
              permessage-deflate.js: {}
              receiver.js: {}
              sender.js: {}
              stream.js: {}
              subprotocol.js: {}
              validation.js: {}
              websocket-server.js: {}
              websocket.js: {}
            package.json: {}
            wrapper.mjs: {}
        package.json: {}
      engine.io-parser:
        LICENSE: {}
        Readme.md: {}
        build:
          cjs:
            commons.d.ts: {}
            commons.js: {}
            contrib:
              base64-arraybuffer.d.ts: {}
              base64-arraybuffer.js: {}
            decodePacket.browser.d.ts: {}
            decodePacket.browser.js: {}
            decodePacket.d.ts: {}
            decodePacket.js: {}
            encodePacket.browser.d.ts: {}
            encodePacket.browser.js: {}
            encodePacket.d.ts: {}
            encodePacket.js: {}
            index.d.ts: {}
            index.js: {}
            package.json: {}
          esm:
            commons.d.ts: {}
            commons.js: {}
            contrib:
              base64-arraybuffer.d.ts: {}
              base64-arraybuffer.js: {}
            decodePacket.browser.d.ts: {}
            decodePacket.browser.js: {}
            decodePacket.d.ts: {}
            decodePacket.js: {}
            encodePacket.browser.d.ts: {}
            encodePacket.browser.js: {}
            encodePacket.d.ts: {}
            encodePacket.js: {}
            index.d.ts: {}
            index.js: {}
            package.json: {}
        package.json: {}
      enhanced-resolve:
        LICENSE: {}
        README.md: {}
        lib:
          AliasFieldPlugin.js: {}
          AliasPlugin.js: {}
          AppendPlugin.js: {}
          CachedInputFileSystem.js: {}
          CloneBasenamePlugin.js: {}
          ConditionalPlugin.js: {}
          DescriptionFilePlugin.js: {}
          DescriptionFileUtils.js: {}
          DirectoryExistsPlugin.js: {}
          ExportsFieldPlugin.js: {}
          ExtensionAliasPlugin.js: {}
          FileExistsPlugin.js: {}
          ImportsFieldPlugin.js: {}
          JoinRequestPartPlugin.js: {}
          JoinRequestPlugin.js: {}
          LogInfoPlugin.js: {}
          MainFieldPlugin.js: {}
          ModulesInHierachicDirectoriesPlugin.js: {}
          ModulesInHierarchicalDirectoriesPlugin.js: {}
          ModulesInRootPlugin.js: {}
          NextPlugin.js: {}
          ParsePlugin.js: {}
          PnpPlugin.js: {}
          Resolver.js: {}
          ResolverFactory.js: {}
          RestrictionsPlugin.js: {}
          ResultPlugin.js: {}
          RootsPlugin.js: {}
          SelfReferencePlugin.js: {}
          SymlinkPlugin.js: {}
          SyncAsyncFileSystemDecorator.js: {}
          TryNextPlugin.js: {}
          UnsafeCachePlugin.js: {}
          UseFilePlugin.js: {}
          createInnerContext.js: {}
          forEachBail.js: {}
          getInnerRequest.js: {}
          getPaths.js: {}
          index.js: {}
          util:
            entrypoints.js: {}
            identifier.js: {}
            module-browser.js: {}
            path.js: {}
            process-browser.js: {}
        package.json: {}
        types.d.ts: {}
      enquirer:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        lib:
          ansi.js: {}
          combos.js: {}
          completer.js: {}
          interpolate.js: {}
          keypress.js: {}
          placeholder.js: {}
          prompt.js: {}
          prompts:
            autocomplete.js: {}
            basicauth.js: {}
            confirm.js: {}
            editable.js: {}
            form.js: {}
            index.js: {}
            input.js: {}
            invisible.js: {}
            list.js: {}
            multiselect.js: {}
            numeral.js: {}
            password.js: {}
            quiz.js: {}
            scale.js: {}
            select.js: {}
            snippet.js: {}
            sort.js: {}
            survey.js: {}
            text.js: {}
            toggle.js: {}
          render.js: {}
          roles.js: {}
          state.js: {}
          styles.js: {}
          symbols.js: {}
          theme.js: {}
          timer.js: {}
          types:
            array.js: {}
            auth.js: {}
            boolean.js: {}
            index.js: {}
            number.js: {}
            string.js: {}
          utils.js: {}
        package.json: {}
      entities:
        LICENSE: {}
        lib:
          decode.d.ts: {}
          decode.d.ts.map: {}
          decode.js: {}
          decode_codepoint.d.ts: {}
          decode_codepoint.d.ts.map: {}
          decode_codepoint.js: {}
          encode.d.ts: {}
          encode.d.ts.map: {}
          encode.js: {}
          index.d.ts: {}
          index.d.ts.map: {}
          index.js: {}
          maps:
            decode.json: {}
            entities.json: {}
            legacy.json: {}
            xml.json: {}
        package.json: {}
        readme.md: {}
      error-ex:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      error-stack-parser:
        LICENSE: {}
        README.md: {}
        dist:
          error-stack-parser.js: {}
          error-stack-parser.min.js: {}
          error-stack-parser.min.js.map: {}
        error-stack-parser.d.ts: {}
        error-stack-parser.js: {}
        package.json: {}
      es-abstract:
        .editorconfig: {}
        .eslintrc: {}
        .nycrc: {}
        '2015':
          AbstractEqualityComparison.js: {}
          AbstractRelationalComparison.js: {}
          AdvanceStringIndex.js: {}
          ArrayCreate.js: {}
          ArraySetLength.js: {}
          ArraySpeciesCreate.js: {}
          Call.js: {}
          CanonicalNumericIndexString.js: {}
          Canonicalize.js: {}
          CharacterRange.js: {}
          CompletePropertyDescriptor.js: {}
          CompletionRecord.js: {}
          CreateDataProperty.js: {}
          CreateDataPropertyOrThrow.js: {}
          CreateHTML.js: {}
          CreateIterResultObject.js: {}
          CreateListFromArrayLike.js: {}
          CreateMethodProperty.js: {}
          DateFromTime.js: {}
          Day.js: {}
          DayFromYear.js: {}
          DayWithinYear.js: {}
          DaysInYear.js: {}
          DefinePropertyOrThrow.js: {}
          DeletePropertyOrThrow.js: {}
          DetachArrayBuffer.js: {}
          EnumerableOwnNames.js: {}
          FromPropertyDescriptor.js: {}
          Get.js: {}
          GetGlobalObject.js: {}
          GetIterator.js: {}
          GetMethod.js: {}
          GetOwnPropertyKeys.js: {}
          GetPrototypeFromConstructor.js: {}
          GetSubstitution.js: {}
          GetV.js: {}
          GetValueFromBuffer.js: {}
          HasOwnProperty.js: {}
          HasProperty.js: {}
          HourFromTime.js: {}
          InLeapYear.js: {}
          InstanceofOperator.js: {}
          IntegerIndexedElementGet.js: {}
          IntegerIndexedElementSet.js: {}
          InternalizeJSONProperty.js: {}
          Invoke.js: {}
          IsAccessorDescriptor.js: {}
          IsArray.js: {}
          IsCallable.js: {}
          IsCompatiblePropertyDescriptor.js: {}
          IsConcatSpreadable.js: {}
          IsConstructor.js: {}
          IsDataDescriptor.js: {}
          IsDetachedBuffer.js: {}
          IsExtensible.js: {}
          IsGenericDescriptor.js: {}
          IsInteger.js: {}
          IsPromise.js: {}
          IsPropertyDescriptor.js: {}
          IsPropertyKey.js: {}
          IsRegExp.js: {}
          IsWordChar.js: {}
          IteratorClose.js: {}
          IteratorComplete.js: {}
          IteratorNext.js: {}
          IteratorStep.js: {}
          IteratorValue.js: {}
          MakeDate.js: {}
          MakeDay.js: {}
          MakeTime.js: {}
          MinFromTime.js: {}
          MonthFromTime.js: {}
          NewPromiseCapability.js: {}
          NormalCompletion.js: {}
          ObjectCreate.js: {}
          ObjectDefineProperties.js: {}
          OrdinaryCreateFromConstructor.js: {}
          OrdinaryDefineOwnProperty.js: {}
          OrdinaryGetOwnProperty.js: {}
          OrdinaryHasInstance.js: {}
          OrdinaryHasProperty.js: {}
          QuoteJSONString.js: {}
          RegExpCreate.js: {}
          RegExpExec.js: {}
          RequireObjectCoercible.js: {}
          SameValue.js: {}
          SameValueZero.js: {}
          SecFromTime.js: {}
          Set.js: {}
          SetFunctionName.js: {}
          SetIntegrityLevel.js: {}
          SetValueInBuffer.js: {}
          SpeciesConstructor.js: {}
          SplitMatch.js: {}
          StrictEqualityComparison.js: {}
          StringCreate.js: {}
          StringGetIndexProperty.js: {}
          SymbolDescriptiveString.js: {}
          TestIntegrityLevel.js: {}
          TimeClip.js: {}
          TimeFromYear.js: {}
          TimeWithinDay.js: {}
          ToBoolean.js: {}
          ToDateString.js: {}
          ToInt16.js: {}
          ToInt32.js: {}
          ToInt8.js: {}
          ToInteger.js: {}
          ToLength.js: {}
          ToNumber.js: {}
          ToObject.js: {}
          ToPrimitive.js: {}
          ToPropertyDescriptor.js: {}
          ToPropertyKey.js: {}
          ToString.js: {}
          ToUint16.js: {}
          ToUint32.js: {}
          ToUint8.js: {}
          ToUint8Clamp.js: {}
          Type.js: {}
          ValidateAndApplyPropertyDescriptor.js: {}
          ValidateTypedArray.js: {}
          WeekDay.js: {}
          YearFromTime.js: {}
          abs.js: {}
          floor.js: {}
          max.js: {}
          min.js: {}
          modulo.js: {}
          msFromTime.js: {}
          tables:
            typed-array-objects.js: {}
          thisBooleanValue.js: {}
          thisNumberValue.js: {}
          thisStringValue.js: {}
          thisTimeValue.js: {}
        '2016':
          AbstractEqualityComparison.js: {}
          AbstractRelationalComparison.js: {}
          AdvanceStringIndex.js: {}
          ArrayCreate.js: {}
          ArraySetLength.js: {}
          ArraySpeciesCreate.js: {}
          Call.js: {}
          CanonicalNumericIndexString.js: {}
          Canonicalize.js: {}
          CharacterRange.js: {}
          CompletePropertyDescriptor.js: {}
          CompletionRecord.js: {}
          CreateDataProperty.js: {}
          CreateDataPropertyOrThrow.js: {}
          CreateHTML.js: {}
          CreateIterResultObject.js: {}
          CreateListFromArrayLike.js: {}
          CreateMethodProperty.js: {}
          DateFromTime.js: {}
          Day.js: {}
          DayFromYear.js: {}
          DayWithinYear.js: {}
          DaysInYear.js: {}
          DefinePropertyOrThrow.js: {}
          DeletePropertyOrThrow.js: {}
          DetachArrayBuffer.js: {}
          EnumerableOwnNames.js: {}
          FromPropertyDescriptor.js: {}
          Get.js: {}
          GetGlobalObject.js: {}
          GetIterator.js: {}
          GetMethod.js: {}
          GetOwnPropertyKeys.js: {}
          GetPrototypeFromConstructor.js: {}
          GetSubstitution.js: {}
          GetV.js: {}
          GetValueFromBuffer.js: {}
          HasOwnProperty.js: {}
          HasProperty.js: {}
          HourFromTime.js: {}
          InLeapYear.js: {}
          InstanceofOperator.js: {}
          IntegerIndexedElementGet.js: {}
          IntegerIndexedElementSet.js: {}
          InternalizeJSONProperty.js: {}
          Invoke.js: {}
          IsAccessorDescriptor.js: {}
          IsArray.js: {}
          IsCallable.js: {}
          IsCompatiblePropertyDescriptor.js: {}
          IsConcatSpreadable.js: {}
          IsConstructor.js: {}
          IsDataDescriptor.js: {}
          IsDetachedBuffer.js: {}
          IsExtensible.js: {}
          IsGenericDescriptor.js: {}
          IsInteger.js: {}
          IsPromise.js: {}
          IsPropertyDescriptor.js: {}
          IsPropertyKey.js: {}
          IsRegExp.js: {}
          IsWordChar.js: {}
          IterableToArrayLike.js: {}
          IteratorClose.js: {}
          IteratorComplete.js: {}
          IteratorNext.js: {}
          IteratorStep.js: {}
          IteratorValue.js: {}
          MakeDate.js: {}
          MakeDay.js: {}
          MakeTime.js: {}
          MinFromTime.js: {}
          MonthFromTime.js: {}
          NewPromiseCapability.js: {}
          NormalCompletion.js: {}
          ObjectCreate.js: {}
          ObjectDefineProperties.js: {}
          OrdinaryCreateFromConstructor.js: {}
          OrdinaryDefineOwnProperty.js: {}
          OrdinaryGetOwnProperty.js: {}
          OrdinaryGetPrototypeOf.js: {}
          OrdinaryHasInstance.js: {}
          OrdinaryHasProperty.js: {}
          OrdinarySetPrototypeOf.js: {}
          QuoteJSONString.js: {}
          RegExpCreate.js: {}
          RegExpExec.js: {}
          RequireObjectCoercible.js: {}
          SameValue.js: {}
          SameValueNonNumber.js: {}
          SameValueZero.js: {}
          SecFromTime.js: {}
          Set.js: {}
          SetFunctionName.js: {}
          SetIntegrityLevel.js: {}
          SetValueInBuffer.js: {}
          SpeciesConstructor.js: {}
          SplitMatch.js: {}
          StrictEqualityComparison.js: {}
          StringCreate.js: {}
          SymbolDescriptiveString.js: {}
          TestIntegrityLevel.js: {}
          TimeClip.js: {}
          TimeFromYear.js: {}
          TimeWithinDay.js: {}
          ToBoolean.js: {}
          ToDateString.js: {}
          ToInt16.js: {}
          ToInt32.js: {}
          ToInt8.js: {}
          ToInteger.js: {}
          ToLength.js: {}
          ToNumber.js: {}
          ToObject.js: {}
          ToPrimitive.js: {}
          ToPropertyDescriptor.js: {}
          ToPropertyKey.js: {}
          ToString.js: {}
          ToUint16.js: {}
          ToUint32.js: {}
          ToUint8.js: {}
          ToUint8Clamp.js: {}
          Type.js: {}
          TypedArrayCreate.js: {}
          TypedArraySpeciesCreate.js: {}
          UTF16Decode.js: {}
          UTF16Encoding.js: {}
          ValidateAndApplyPropertyDescriptor.js: {}
          ValidateTypedArray.js: {}
          WeekDay.js: {}
          YearFromTime.js: {}
          abs.js: {}
          floor.js: {}
          max.js: {}
          min.js: {}
          modulo.js: {}
          msFromTime.js: {}
          tables:
            typed-array-objects.js: {}
          thisBooleanValue.js: {}
          thisNumberValue.js: {}
          thisStringValue.js: {}
          thisTimeValue.js: {}
        '2017':
          AbstractEqualityComparison.js: {}
          AbstractRelationalComparison.js: {}
          AdvanceStringIndex.js: {}
          ArrayCreate.js: {}
          ArraySetLength.js: {}
          ArraySpeciesCreate.js: {}
          Call.js: {}
          CanonicalNumericIndexString.js: {}
          Canonicalize.js: {}
          CharacterRange.js: {}
          CompletePropertyDescriptor.js: {}
          CompletionRecord.js: {}
          CreateDataProperty.js: {}
          CreateDataPropertyOrThrow.js: {}
          CreateHTML.js: {}
          CreateIterResultObject.js: {}
          CreateListFromArrayLike.js: {}
          CreateMethodProperty.js: {}
          DateFromTime.js: {}
          Day.js: {}
          DayFromYear.js: {}
          DayWithinYear.js: {}
          DaysInYear.js: {}
          DefinePropertyOrThrow.js: {}
          DeletePropertyOrThrow.js: {}
          DetachArrayBuffer.js: {}
          EnumerableOwnProperties.js: {}
          FromPropertyDescriptor.js: {}
          Get.js: {}
          GetGlobalObject.js: {}
          GetIterator.js: {}
          GetMethod.js: {}
          GetOwnPropertyKeys.js: {}
          GetPrototypeFromConstructor.js: {}
          GetSubstitution.js: {}
          GetV.js: {}
          GetValueFromBuffer.js: {}
          HasOwnProperty.js: {}
          HasProperty.js: {}
          HourFromTime.js: {}
          InLeapYear.js: {}
          InstanceofOperator.js: {}
          IntegerIndexedElementGet.js: {}
          IntegerIndexedElementSet.js: {}
          InternalizeJSONProperty.js: {}
          Invoke.js: {}
          IsAccessorDescriptor.js: {}
          IsArray.js: {}
          IsCallable.js: {}
          IsCompatiblePropertyDescriptor.js: {}
          IsConcatSpreadable.js: {}
          IsConstructor.js: {}
          IsDataDescriptor.js: {}
          IsDetachedBuffer.js: {}
          IsExtensible.js: {}
          IsGenericDescriptor.js: {}
          IsInteger.js: {}
          IsPromise.js: {}
          IsPropertyDescriptor.js: {}
          IsPropertyKey.js: {}
          IsRegExp.js: {}
          IsSharedArrayBuffer.js: {}
          IsWordChar.js: {}
          IterableToList.js: {}
          IteratorClose.js: {}
          IteratorComplete.js: {}
          IteratorNext.js: {}
          IteratorStep.js: {}
          IteratorValue.js: {}
          MakeDate.js: {}
          MakeDay.js: {}
          MakeTime.js: {}
          MinFromTime.js: {}
          MonthFromTime.js: {}
          NewPromiseCapability.js: {}
          NormalCompletion.js: {}
          NumberToRawBytes.js: {}
          ObjectCreate.js: {}
          ObjectDefineProperties.js: {}
          OrdinaryCreateFromConstructor.js: {}
          OrdinaryDefineOwnProperty.js: {}
          OrdinaryGetOwnProperty.js: {}
          OrdinaryGetPrototypeOf.js: {}
          OrdinaryHasInstance.js: {}
          OrdinaryHasProperty.js: {}
          OrdinarySetPrototypeOf.js: {}
          OrdinaryToPrimitive.js: {}
          QuoteJSONString.js: {}
          RawBytesToNumber.js: {}
          RegExpCreate.js: {}
          RegExpExec.js: {}
          RequireObjectCoercible.js: {}
          SameValue.js: {}
          SameValueNonNumber.js: {}
          SameValueZero.js: {}
          SecFromTime.js: {}
          Set.js: {}
          SetFunctionName.js: {}
          SetIntegrityLevel.js: {}
          SetValueInBuffer.js: {}
          SpeciesConstructor.js: {}
          SplitMatch.js: {}
          StrictEqualityComparison.js: {}
          StringCreate.js: {}
          StringGetOwnProperty.js: {}
          SymbolDescriptiveString.js: {}
          TestIntegrityLevel.js: {}
          TimeClip.js: {}
          TimeFromYear.js: {}
          TimeWithinDay.js: {}
          ToBoolean.js: {}
          ToDateString.js: {}
          ToIndex.js: {}
          ToInt16.js: {}
          ToInt32.js: {}
          ToInt8.js: {}
          ToInteger.js: {}
          ToLength.js: {}
          ToNumber.js: {}
          ToObject.js: {}
          ToPrimitive.js: {}
          ToPropertyDescriptor.js: {}
          ToPropertyKey.js: {}
          ToString.js: {}
          ToUint16.js: {}
          ToUint32.js: {}
          ToUint8.js: {}
          ToUint8Clamp.js: {}
          Type.js: {}
          TypedArrayCreate.js: {}
          TypedArraySpeciesCreate.js: {}
          UTF16Decode.js: {}
          UTF16Encoding.js: {}
          ValidateAndApplyPropertyDescriptor.js: {}
          ValidateAtomicAccess.js: {}
          ValidateTypedArray.js: {}
          WeekDay.js: {}
          WordCharacters.js: {}
          YearFromTime.js: {}
          abs.js: {}
          floor.js: {}
          max.js: {}
          min.js: {}
          modulo.js: {}
          msFromTime.js: {}
          tables:
            typed-array-objects.js: {}
          thisBooleanValue.js: {}
          thisNumberValue.js: {}
          thisStringValue.js: {}
          thisTimeValue.js: {}
        '2018':
          AbstractEqualityComparison.js: {}
          AbstractRelationalComparison.js: {}
          AdvanceStringIndex.js: {}
          ArrayCreate.js: {}
          ArraySetLength.js: {}
          ArraySpeciesCreate.js: {}
          AsyncIteratorClose.js: {}
          Call.js: {}
          CanonicalNumericIndexString.js: {}
          Canonicalize.js: {}
          CharacterRange.js: {}
          CompletePropertyDescriptor.js: {}
          CompletionRecord.js: {}
          CopyDataProperties.js: {}
          CreateAsyncFromSyncIterator.js: {}
          CreateDataProperty.js: {}
          CreateDataPropertyOrThrow.js: {}
          CreateHTML.js: {}
          CreateIterResultObject.js: {}
          CreateListFromArrayLike.js: {}
          CreateMethodProperty.js: {}
          DateFromTime.js: {}
          DateString.js: {}
          Day.js: {}
          DayFromYear.js: {}
          DayWithinYear.js: {}
          DaysInYear.js: {}
          DefinePropertyOrThrow.js: {}
          DeletePropertyOrThrow.js: {}
          DetachArrayBuffer.js: {}
          EnumerableOwnPropertyNames.js: {}
          FromPropertyDescriptor.js: {}
          Get.js: {}
          GetGlobalObject.js: {}
          GetIterator.js: {}
          GetMethod.js: {}
          GetOwnPropertyKeys.js: {}
          GetPrototypeFromConstructor.js: {}
          GetSubstitution.js: {}
          GetV.js: {}
          GetValueFromBuffer.js: {}
          HasOwnProperty.js: {}
          HasProperty.js: {}
          HourFromTime.js: {}
          InLeapYear.js: {}
          InstanceofOperator.js: {}
          IntegerIndexedElementGet.js: {}
          IntegerIndexedElementSet.js: {}
          InternalizeJSONProperty.js: {}
          Invoke.js: {}
          IsAccessorDescriptor.js: {}
          IsArray.js: {}
          IsCallable.js: {}
          IsCompatiblePropertyDescriptor.js: {}
          IsConcatSpreadable.js: {}
          IsConstructor.js: {}
          IsDataDescriptor.js: {}
          IsDetachedBuffer.js: {}
          IsExtensible.js: {}
          IsGenericDescriptor.js: {}
          IsInteger.js: {}
          IsPromise.js: {}
          IsPropertyKey.js: {}
          IsRegExp.js: {}
          IsSharedArrayBuffer.js: {}
          IsStringPrefix.js: {}
          IsWordChar.js: {}
          IterableToList.js: {}
          IteratorClose.js: {}
          IteratorComplete.js: {}
          IteratorNext.js: {}
          IteratorStep.js: {}
          IteratorValue.js: {}
          MakeDate.js: {}
          MakeDay.js: {}
          MakeTime.js: {}
          MinFromTime.js: {}
          MonthFromTime.js: {}
          NewPromiseCapability.js: {}
          NormalCompletion.js: {}
          NumberToRawBytes.js: {}
          NumberToString.js: {}
          ObjectCreate.js: {}
          ObjectDefineProperties.js: {}
          OrdinaryCreateFromConstructor.js: {}
          OrdinaryDefineOwnProperty.js: {}
          OrdinaryGetOwnProperty.js: {}
          OrdinaryGetPrototypeOf.js: {}
          OrdinaryHasInstance.js: {}
          OrdinaryHasProperty.js: {}
          OrdinarySetPrototypeOf.js: {}
          OrdinaryToPrimitive.js: {}
          PromiseResolve.js: {}
          QuoteJSONString.js: {}
          RawBytesToNumber.js: {}
          RegExpCreate.js: {}
          RegExpExec.js: {}
          RequireObjectCoercible.js: {}
          SameValue.js: {}
          SameValueNonNumber.js: {}
          SameValueZero.js: {}
          SecFromTime.js: {}
          Set.js: {}
          SetFunctionLength.js: {}
          SetFunctionName.js: {}
          SetIntegrityLevel.js: {}
          SetValueInBuffer.js: {}
          SpeciesConstructor.js: {}
          SplitMatch.js: {}
          StrictEqualityComparison.js: {}
          StringCreate.js: {}
          StringGetOwnProperty.js: {}
          SymbolDescriptiveString.js: {}
          TestIntegrityLevel.js: {}
          ThrowCompletion.js: {}
          TimeClip.js: {}
          TimeFromYear.js: {}
          TimeString.js: {}
          TimeWithinDay.js: {}
          TimeZoneString.js: {}
          ToBoolean.js: {}
          ToDateString.js: {}
          ToIndex.js: {}
          ToInt16.js: {}
          ToInt32.js: {}
          ToInt8.js: {}
          ToInteger.js: {}
          ToLength.js: {}
          ToNumber.js: {}
          ToObject.js: {}
          ToPrimitive.js: {}
          ToPropertyDescriptor.js: {}
          ToPropertyKey.js: {}
          ToString.js: {}
          ToUint16.js: {}
          ToUint32.js: {}
          ToUint8.js: {}
          ToUint8Clamp.js: {}
          Type.js: {}
          TypedArrayCreate.js: {}
          TypedArraySpeciesCreate.js: {}
          UTF16Decode.js: {}
          UTF16Encoding.js: {}
          UnicodeEscape.js: {}
          ValidateAndApplyPropertyDescriptor.js: {}
          ValidateAtomicAccess.js: {}
          ValidateTypedArray.js: {}
          WeekDay.js: {}
          WordCharacters.js: {}
          YearFromTime.js: {}
          abs.js: {}
          floor.js: {}
          max.js: {}
          min.js: {}
          modulo.js: {}
          msFromTime.js: {}
          tables:
            typed-array-objects.js: {}
          thisBooleanValue.js: {}
          thisNumberValue.js: {}
          thisStringValue.js: {}
          thisSymbolValue.js: {}
          thisTimeValue.js: {}
        '2019':
          AbstractEqualityComparison.js: {}
          AbstractRelationalComparison.js: {}
          AddEntriesFromIterable.js: {}
          AdvanceStringIndex.js: {}
          ArrayCreate.js: {}
          ArraySetLength.js: {}
          ArraySpeciesCreate.js: {}
          AsyncFromSyncIteratorContinuation.js: {}
          AsyncIteratorClose.js: {}
          Call.js: {}
          CanonicalNumericIndexString.js: {}
          Canonicalize.js: {}
          CharacterRange.js: {}
          CompletePropertyDescriptor.js: {}
          CompletionRecord.js: {}
          CopyDataProperties.js: {}
          CreateAsyncFromSyncIterator.js: {}
          CreateDataProperty.js: {}
          CreateDataPropertyOrThrow.js: {}
          CreateHTML.js: {}
          CreateIterResultObject.js: {}
          CreateListFromArrayLike.js: {}
          CreateMethodProperty.js: {}
          DateFromTime.js: {}
          DateString.js: {}
          Day.js: {}
          DayFromYear.js: {}
          DayWithinYear.js: {}
          DaysInYear.js: {}
          DefinePropertyOrThrow.js: {}
          DeletePropertyOrThrow.js: {}
          DetachArrayBuffer.js: {}
          EnumerableOwnPropertyNames.js: {}
          FlattenIntoArray.js: {}
          FromPropertyDescriptor.js: {}
          Get.js: {}
          GetGlobalObject.js: {}
          GetIterator.js: {}
          GetMethod.js: {}
          GetOwnPropertyKeys.js: {}
          GetPrototypeFromConstructor.js: {}
          GetSubstitution.js: {}
          GetV.js: {}
          GetValueFromBuffer.js: {}
          HasOwnProperty.js: {}
          HasProperty.js: {}
          HourFromTime.js: {}
          InLeapYear.js: {}
          InstanceofOperator.js: {}
          IntegerIndexedElementGet.js: {}
          IntegerIndexedElementSet.js: {}
          InternalizeJSONProperty.js: {}
          Invoke.js: {}
          IsAccessorDescriptor.js: {}
          IsArray.js: {}
          IsCallable.js: {}
          IsCompatiblePropertyDescriptor.js: {}
          IsConcatSpreadable.js: {}
          IsConstructor.js: {}
          IsDataDescriptor.js: {}
          IsDetachedBuffer.js: {}
          IsExtensible.js: {}
          IsGenericDescriptor.js: {}
          IsInteger.js: {}
          IsPromise.js: {}
          IsPropertyKey.js: {}
          IsRegExp.js: {}
          IsSharedArrayBuffer.js: {}
          IsStringPrefix.js: {}
          IsWordChar.js: {}
          IterableToList.js: {}
          IteratorClose.js: {}
          IteratorComplete.js: {}
          IteratorNext.js: {}
          IteratorStep.js: {}
          IteratorValue.js: {}
          MakeDate.js: {}
          MakeDay.js: {}
          MakeTime.js: {}
          MinFromTime.js: {}
          MonthFromTime.js: {}
          NewPromiseCapability.js: {}
          NormalCompletion.js: {}
          NumberToRawBytes.js: {}
          NumberToString.js: {}
          ObjectCreate.js: {}
          ObjectDefineProperties.js: {}
          OrdinaryCreateFromConstructor.js: {}
          OrdinaryDefineOwnProperty.js: {}
          OrdinaryGetOwnProperty.js: {}
          OrdinaryGetPrototypeOf.js: {}
          OrdinaryHasInstance.js: {}
          OrdinaryHasProperty.js: {}
          OrdinarySetPrototypeOf.js: {}
          OrdinaryToPrimitive.js: {}
          PromiseResolve.js: {}
          QuoteJSONString.js: {}
          RawBytesToNumber.js: {}
          RegExpCreate.js: {}
          RegExpExec.js: {}
          RequireObjectCoercible.js: {}
          SameValue.js: {}
          SameValueNonNumber.js: {}
          SameValueZero.js: {}
          SecFromTime.js: {}
          Set.js: {}
          SetFunctionLength.js: {}
          SetFunctionName.js: {}
          SetIntegrityLevel.js: {}
          SetValueInBuffer.js: {}
          SpeciesConstructor.js: {}
          SplitMatch.js: {}
          StrictEqualityComparison.js: {}
          StringCreate.js: {}
          StringGetOwnProperty.js: {}
          SymbolDescriptiveString.js: {}
          TestIntegrityLevel.js: {}
          ThrowCompletion.js: {}
          TimeClip.js: {}
          TimeFromYear.js: {}
          TimeString.js: {}
          TimeWithinDay.js: {}
          TimeZoneString.js: {}
          ToBoolean.js: {}
          ToDateString.js: {}
          ToIndex.js: {}
          ToInt16.js: {}
          ToInt32.js: {}
          ToInt8.js: {}
          ToInteger.js: {}
          ToLength.js: {}
          ToNumber.js: {}
          ToObject.js: {}
          ToPrimitive.js: {}
          ToPropertyDescriptor.js: {}
          ToPropertyKey.js: {}
          ToString.js: {}
          ToUint16.js: {}
          ToUint32.js: {}
          ToUint8.js: {}
          ToUint8Clamp.js: {}
          TrimString.js: {}
          Type.js: {}
          TypedArrayCreate.js: {}
          TypedArraySpeciesCreate.js: {}
          UTF16Decode.js: {}
          UTF16Encoding.js: {}
          UnicodeEscape.js: {}
          ValidateAndApplyPropertyDescriptor.js: {}
          ValidateAtomicAccess.js: {}
          ValidateTypedArray.js: {}
          WeekDay.js: {}
          WordCharacters.js: {}
          YearFromTime.js: {}
          abs.js: {}
          floor.js: {}
          max.js: {}
          min.js: {}
          modulo.js: {}
          msFromTime.js: {}
          tables:
            typed-array-objects.js: {}
          thisBooleanValue.js: {}
          thisNumberValue.js: {}
          thisStringValue.js: {}
          thisSymbolValue.js: {}
          thisTimeValue.js: {}
        '2020':
          AbstractEqualityComparison.js: {}
          AbstractRelationalComparison.js: {}
          AddEntriesFromIterable.js: {}
          AdvanceStringIndex.js: {}
          ArrayCreate.js: {}
          ArraySetLength.js: {}
          ArraySpeciesCreate.js: {}
          AsyncFromSyncIteratorContinuation.js: {}
          AsyncIteratorClose.js: {}
          BigInt:
            add.js: {}
            bitwiseAND.js: {}
            bitwiseNOT.js: {}
            bitwiseOR.js: {}
            bitwiseXOR.js: {}
            divide.js: {}
            equal.js: {}
            exponentiate.js: {}
            index.js: {}
            leftShift.js: {}
            lessThan.js: {}
            multiply.js: {}
            remainder.js: {}
            sameValue.js: {}
            sameValueZero.js: {}
            signedRightShift.js: {}
            subtract.js: {}
            toString.js: {}
            unaryMinus.js: {}
            unsignedRightShift.js: {}
          BigIntBitwiseOp.js: {}
          BinaryAnd.js: {}
          BinaryOr.js: {}
          BinaryXor.js: {}
          Call.js: {}
          CanonicalNumericIndexString.js: {}
          Canonicalize.js: {}
          CharacterRange.js: {}
          CodePointAt.js: {}
          CompletePropertyDescriptor.js: {}
          CompletionRecord.js: {}
          CopyDataProperties.js: {}
          CreateAsyncFromSyncIterator.js: {}
          CreateDataProperty.js: {}
          CreateDataPropertyOrThrow.js: {}
          CreateHTML.js: {}
          CreateIterResultObject.js: {}
          CreateListFromArrayLike.js: {}
          CreateMethodProperty.js: {}
          CreateRegExpStringIterator.js: {}
          DateFromTime.js: {}
          DateString.js: {}
          Day.js: {}
          DayFromYear.js: {}
          DayWithinYear.js: {}
          DaysInYear.js: {}
          DefinePropertyOrThrow.js: {}
          DeletePropertyOrThrow.js: {}
          DetachArrayBuffer.js: {}
          EnumerableOwnPropertyNames.js: {}
          FlattenIntoArray.js: {}
          FromPropertyDescriptor.js: {}
          Get.js: {}
          GetGlobalObject.js: {}
          GetIterator.js: {}
          GetMethod.js: {}
          GetOwnPropertyKeys.js: {}
          GetPrototypeFromConstructor.js: {}
          GetSubstitution.js: {}
          GetV.js: {}
          GetValueFromBuffer.js: {}
          HasOwnProperty.js: {}
          HasProperty.js: {}
          HourFromTime.js: {}
          InLeapYear.js: {}
          InstanceofOperator.js: {}
          IntegerIndexedElementGet.js: {}
          IntegerIndexedElementSet.js: {}
          InternalizeJSONProperty.js: {}
          Invoke.js: {}
          IsAccessorDescriptor.js: {}
          IsArray.js: {}
          IsBigIntElementType.js: {}
          IsCallable.js: {}
          IsCompatiblePropertyDescriptor.js: {}
          IsConcatSpreadable.js: {}
          IsConstructor.js: {}
          IsDataDescriptor.js: {}
          IsDetachedBuffer.js: {}
          IsExtensible.js: {}
          IsGenericDescriptor.js: {}
          IsInteger.js: {}
          IsNoTearConfiguration.js: {}
          IsNonNegativeInteger.js: {}
          IsPromise.js: {}
          IsPropertyKey.js: {}
          IsRegExp.js: {}
          IsSharedArrayBuffer.js: {}
          IsStringPrefix.js: {}
          IsUnclampedIntegerElementType.js: {}
          IsUnsignedElementType.js: {}
          IsValidIntegerIndex.js: {}
          IsWordChar.js: {}
          IterableToList.js: {}
          IteratorClose.js: {}
          IteratorComplete.js: {}
          IteratorNext.js: {}
          IteratorStep.js: {}
          IteratorValue.js: {}
          LengthOfArrayLike.js: {}
          MakeDate.js: {}
          MakeDay.js: {}
          MakeTime.js: {}
          MinFromTime.js: {}
          MonthFromTime.js: {}
          NewPromiseCapability.js: {}
          NormalCompletion.js: {}
          Number:
            add.js: {}
            bitwiseAND.js: {}
            bitwiseNOT.js: {}
            bitwiseOR.js: {}
            bitwiseXOR.js: {}
            divide.js: {}
            equal.js: {}
            exponentiate.js: {}
            index.js: {}
            leftShift.js: {}
            lessThan.js: {}
            multiply.js: {}
            remainder.js: {}
            sameValue.js: {}
            sameValueZero.js: {}
            signedRightShift.js: {}
            subtract.js: {}
            toString.js: {}
            unaryMinus.js: {}
            unsignedRightShift.js: {}
          NumberBitwiseOp.js: {}
          NumberToBigInt.js: {}
          NumericToRawBytes.js: {}
          ObjectDefineProperties.js: {}
          OrdinaryCreateFromConstructor.js: {}
          OrdinaryDefineOwnProperty.js: {}
          OrdinaryGetOwnProperty.js: {}
          OrdinaryGetPrototypeOf.js: {}
          OrdinaryHasInstance.js: {}
          OrdinaryHasProperty.js: {}
          OrdinaryObjectCreate.js: {}
          OrdinarySetPrototypeOf.js: {}
          OrdinaryToPrimitive.js: {}
          PromiseResolve.js: {}
          QuoteJSONString.js: {}
          RawBytesToNumeric.js: {}
          RegExpCreate.js: {}
          RegExpExec.js: {}
          RequireObjectCoercible.js: {}
          SameValue.js: {}
          SameValueNonNumeric.js: {}
          SameValueZero.js: {}
          SecFromTime.js: {}
          Set.js: {}
          SetFunctionLength.js: {}
          SetFunctionName.js: {}
          SetIntegrityLevel.js: {}
          SetValueInBuffer.js: {}
          SpeciesConstructor.js: {}
          SplitMatch.js: {}
          StrictEqualityComparison.js: {}
          StringCreate.js: {}
          StringGetOwnProperty.js: {}
          StringPad.js: {}
          StringToBigInt.js: {}
          SymbolDescriptiveString.js: {}
          TestIntegrityLevel.js: {}
          ThrowCompletion.js: {}
          TimeClip.js: {}
          TimeFromYear.js: {}
          TimeString.js: {}
          TimeWithinDay.js: {}
          TimeZoneString.js: {}
          ToBigInt.js: {}
          ToBigInt64.js: {}
          ToBigUint64.js: {}
          ToBoolean.js: {}
          ToDateString.js: {}
          ToIndex.js: {}
          ToInt16.js: {}
          ToInt32.js: {}
          ToInt8.js: {}
          ToInteger.js: {}
          ToLength.js: {}
          ToNumber.js: {}
          ToNumeric.js: {}
          ToObject.js: {}
          ToPrimitive.js: {}
          ToPropertyDescriptor.js: {}
          ToPropertyKey.js: {}
          ToString.js: {}
          ToUint16.js: {}
          ToUint32.js: {}
          ToUint8.js: {}
          ToUint8Clamp.js: {}
          TrimString.js: {}
          Type.js: {}
          TypedArrayCreate.js: {}
          TypedArraySpeciesCreate.js: {}
          UTF16DecodeString.js: {}
          UTF16DecodeSurrogatePair.js: {}
          UTF16Encoding.js: {}
          UnicodeEscape.js: {}
          ValidateAndApplyPropertyDescriptor.js: {}
          ValidateAtomicAccess.js: {}
          ValidateTypedArray.js: {}
          WeekDay.js: {}
          WordCharacters.js: {}
          YearFromTime.js: {}
          abs.js: {}
          floor.js: {}
          max.js: {}
          min.js: {}
          modulo.js: {}
          msFromTime.js: {}
          tables:
            typed-array-objects.js: {}
          thisBigIntValue.js: {}
          thisBooleanValue.js: {}
          thisNumberValue.js: {}
          thisStringValue.js: {}
          thisSymbolValue.js: {}
          thisTimeValue.js: {}
        '2021':
          AbstractEqualityComparison.js: {}
          AbstractRelationalComparison.js: {}
          AddEntriesFromIterable.js: {}
          AddToKeptObjects.js: {}
          AdvanceStringIndex.js: {}
          ApplyStringOrNumericBinaryOperator.js: {}
          ArrayCreate.js: {}
          ArraySetLength.js: {}
          ArraySpeciesCreate.js: {}
          AsyncFromSyncIteratorContinuation.js: {}
          AsyncIteratorClose.js: {}
          BigInt:
            add.js: {}
            bitwiseAND.js: {}
            bitwiseNOT.js: {}
            bitwiseOR.js: {}
            bitwiseXOR.js: {}
            divide.js: {}
            equal.js: {}
            exponentiate.js: {}
            index.js: {}
            leftShift.js: {}
            lessThan.js: {}
            multiply.js: {}
            remainder.js: {}
            sameValue.js: {}
            sameValueZero.js: {}
            signedRightShift.js: {}
            subtract.js: {}
            toString.js: {}
            unaryMinus.js: {}
            unsignedRightShift.js: {}
          BigIntBitwiseOp.js: {}
          BinaryAnd.js: {}
          BinaryOr.js: {}
          BinaryXor.js: {}
          ByteListBitwiseOp.js: {}
          ByteListEqual.js: {}
          Call.js: {}
          CanonicalNumericIndexString.js: {}
          Canonicalize.js: {}
          CharacterRange.js: {}
          ClearKeptObjects.js: {}
          CloneArrayBuffer.js: {}
          CodePointAt.js: {}
          CodePointsToString.js: {}
          CompletePropertyDescriptor.js: {}
          CompletionRecord.js: {}
          CopyDataProperties.js: {}
          CreateAsyncFromSyncIterator.js: {}
          CreateDataProperty.js: {}
          CreateDataPropertyOrThrow.js: {}
          CreateHTML.js: {}
          CreateIterResultObject.js: {}
          CreateListFromArrayLike.js: {}
          CreateMethodProperty.js: {}
          CreateRegExpStringIterator.js: {}
          DateFromTime.js: {}
          DateString.js: {}
          Day.js: {}
          DayFromYear.js: {}
          DayWithinYear.js: {}
          DaysInYear.js: {}
          DefinePropertyOrThrow.js: {}
          DeletePropertyOrThrow.js: {}
          DetachArrayBuffer.js: {}
          EnumerableOwnPropertyNames.js: {}
          FlattenIntoArray.js: {}
          FromPropertyDescriptor.js: {}
          Get.js: {}
          GetGlobalObject.js: {}
          GetIterator.js: {}
          GetMethod.js: {}
          GetOwnPropertyKeys.js: {}
          GetPromiseResolve.js: {}
          GetPrototypeFromConstructor.js: {}
          GetSubstitution.js: {}
          GetV.js: {}
          GetValueFromBuffer.js: {}
          HasOwnProperty.js: {}
          HasProperty.js: {}
          HourFromTime.js: {}
          InLeapYear.js: {}
          InstanceofOperator.js: {}
          IntegerIndexedElementGet.js: {}
          IntegerIndexedElementSet.js: {}
          InternalizeJSONProperty.js: {}
          Invoke.js: {}
          IsAccessorDescriptor.js: {}
          IsArray.js: {}
          IsBigIntElementType.js: {}
          IsCallable.js: {}
          IsCompatiblePropertyDescriptor.js: {}
          IsConcatSpreadable.js: {}
          IsConstructor.js: {}
          IsDataDescriptor.js: {}
          IsDetachedBuffer.js: {}
          IsExtensible.js: {}
          IsGenericDescriptor.js: {}
          IsIntegralNumber.js: {}
          IsNoTearConfiguration.js: {}
          IsPromise.js: {}
          IsPropertyKey.js: {}
          IsRegExp.js: {}
          IsSharedArrayBuffer.js: {}
          IsStringPrefix.js: {}
          IsUnclampedIntegerElementType.js: {}
          IsUnsignedElementType.js: {}
          IsValidIntegerIndex.js: {}
          IsWordChar.js: {}
          IterableToList.js: {}
          IteratorClose.js: {}
          IteratorComplete.js: {}
          IteratorNext.js: {}
          IteratorStep.js: {}
          IteratorValue.js: {}
          LengthOfArrayLike.js: {}
          MakeDate.js: {}
          MakeDay.js: {}
          MakeTime.js: {}
          MinFromTime.js: {}
          MonthFromTime.js: {}
          NewPromiseCapability.js: {}
          NormalCompletion.js: {}
          Number:
            add.js: {}
            bitwiseAND.js: {}
            bitwiseNOT.js: {}
            bitwiseOR.js: {}
            bitwiseXOR.js: {}
            divide.js: {}
            equal.js: {}
            exponentiate.js: {}
            index.js: {}
            leftShift.js: {}
            lessThan.js: {}
            multiply.js: {}
            remainder.js: {}
            sameValue.js: {}
            sameValueZero.js: {}
            signedRightShift.js: {}
            subtract.js: {}
            toString.js: {}
            unaryMinus.js: {}
            unsignedRightShift.js: {}
          NumberBitwiseOp.js: {}
          NumberToBigInt.js: {}
          NumericToRawBytes.js: {}
          ObjectDefineProperties.js: {}
          OrdinaryCreateFromConstructor.js: {}
          OrdinaryDefineOwnProperty.js: {}
          OrdinaryGetOwnProperty.js: {}
          OrdinaryGetPrototypeOf.js: {}
          OrdinaryHasInstance.js: {}
          OrdinaryHasProperty.js: {}
          OrdinaryObjectCreate.js: {}
          OrdinarySetPrototypeOf.js: {}
          OrdinaryToPrimitive.js: {}
          PromiseResolve.js: {}
          QuoteJSONString.js: {}
          RawBytesToNumeric.js: {}
          RegExpCreate.js: {}
          RegExpExec.js: {}
          RequireObjectCoercible.js: {}
          SameValue.js: {}
          SameValueNonNumeric.js: {}
          SameValueZero.js: {}
          SecFromTime.js: {}
          Set.js: {}
          SetFunctionLength.js: {}
          SetFunctionName.js: {}
          SetIntegrityLevel.js: {}
          SetTypedArrayFromArrayLike.js: {}
          SetTypedArrayFromTypedArray.js: {}
          SetValueInBuffer.js: {}
          SpeciesConstructor.js: {}
          SplitMatch.js: {}
          StrictEqualityComparison.js: {}
          StringCreate.js: {}
          StringGetOwnProperty.js: {}
          StringIndexOf.js: {}
          StringPad.js: {}
          StringToBigInt.js: {}
          StringToCodePoints.js: {}
          SymbolDescriptiveString.js: {}
          TestIntegrityLevel.js: {}
          ThrowCompletion.js: {}
          TimeClip.js: {}
          TimeFromYear.js: {}
          TimeString.js: {}
          TimeWithinDay.js: {}
          TimeZoneString.js: {}
          ToBigInt.js: {}
          ToBigInt64.js: {}
          ToBigUint64.js: {}
          ToBoolean.js: {}
          ToDateString.js: {}
          ToIndex.js: {}
          ToInt16.js: {}
          ToInt32.js: {}
          ToInt8.js: {}
          ToIntegerOrInfinity.js: {}
          ToLength.js: {}
          ToNumber.js: {}
          ToNumeric.js: {}
          ToObject.js: {}
          ToPrimitive.js: {}
          ToPropertyDescriptor.js: {}
          ToPropertyKey.js: {}
          ToString.js: {}
          ToUint16.js: {}
          ToUint32.js: {}
          ToUint8.js: {}
          ToUint8Clamp.js: {}
          TrimString.js: {}
          Type.js: {}
          TypedArrayCreate.js: {}
          TypedArraySpeciesCreate.js: {}
          UTF16EncodeCodePoint.js: {}
          UTF16SurrogatePairToCodePoint.js: {}
          UnicodeEscape.js: {}
          ValidateAndApplyPropertyDescriptor.js: {}
          ValidateAtomicAccess.js: {}
          ValidateIntegerTypedArray.js: {}
          ValidateTypedArray.js: {}
          WeakRefDeref.js: {}
          WeekDay.js: {}
          WordCharacters.js: {}
          YearFromTime.js: {}
          abs.js: {}
          clamp.js: {}
          floor.js: {}
          max.js: {}
          min.js: {}
          modulo.js: {}
          msFromTime.js: {}
          substring.js: {}
          tables:
            typed-array-objects.js: {}
          thisBigIntValue.js: {}
          thisBooleanValue.js: {}
          thisNumberValue.js: {}
          thisStringValue.js: {}
          thisSymbolValue.js: {}
          thisTimeValue.js: {}
        '2022':
          AddEntriesFromIterable.js: {}
          AddToKeptObjects.js: {}
          AdvanceStringIndex.js: {}
          ApplyStringOrNumericBinaryOperator.js: {}
          ArrayCreate.js: {}
          ArraySetLength.js: {}
          ArraySpeciesCreate.js: {}
          AsyncFromSyncIteratorContinuation.js: {}
          AsyncIteratorClose.js: {}
          BigInt:
            add.js: {}
            bitwiseAND.js: {}
            bitwiseNOT.js: {}
            bitwiseOR.js: {}
            bitwiseXOR.js: {}
            divide.js: {}
            equal.js: {}
            exponentiate.js: {}
            index.js: {}
            leftShift.js: {}
            lessThan.js: {}
            multiply.js: {}
            remainder.js: {}
            sameValue.js: {}
            sameValueZero.js: {}
            signedRightShift.js: {}
            subtract.js: {}
            toString.js: {}
            unaryMinus.js: {}
            unsignedRightShift.js: {}
          BigIntBitwiseOp.js: {}
          BinaryAnd.js: {}
          BinaryOr.js: {}
          BinaryXor.js: {}
          ByteListBitwiseOp.js: {}
          ByteListEqual.js: {}
          Call.js: {}
          CanonicalNumericIndexString.js: {}
          Canonicalize.js: {}
          CharacterRange.js: {}
          ClearKeptObjects.js: {}
          CloneArrayBuffer.js: {}
          CodePointAt.js: {}
          CodePointsToString.js: {}
          CompletePropertyDescriptor.js: {}
          CompletionRecord.js: {}
          CopyDataProperties.js: {}
          CreateAsyncFromSyncIterator.js: {}
          CreateDataProperty.js: {}
          CreateDataPropertyOrThrow.js: {}
          CreateHTML.js: {}
          CreateIterResultObject.js: {}
          CreateListFromArrayLike.js: {}
          CreateMethodProperty.js: {}
          CreateNonEnumerableDataPropertyOrThrow.js: {}
          CreateRegExpStringIterator.js: {}
          DateFromTime.js: {}
          DateString.js: {}
          Day.js: {}
          DayFromYear.js: {}
          DayWithinYear.js: {}
          DaysInYear.js: {}
          DefineMethodProperty.js: {}
          DefinePropertyOrThrow.js: {}
          DeletePropertyOrThrow.js: {}
          DetachArrayBuffer.js: {}
          EnumerableOwnPropertyNames.js: {}
          FlattenIntoArray.js: {}
          FromPropertyDescriptor.js: {}
          Get.js: {}
          GetGlobalObject.js: {}
          GetIterator.js: {}
          GetMatchIndexPair.js: {}
          GetMatchString.js: {}
          GetMethod.js: {}
          GetOwnPropertyKeys.js: {}
          GetPromiseResolve.js: {}
          GetPrototypeFromConstructor.js: {}
          GetStringIndex.js: {}
          GetSubstitution.js: {}
          GetV.js: {}
          GetValueFromBuffer.js: {}
          HasOwnProperty.js: {}
          HasProperty.js: {}
          HourFromTime.js: {}
          InLeapYear.js: {}
          InstallErrorCause.js: {}
          InstanceofOperator.js: {}
          IntegerIndexedElementGet.js: {}
          IntegerIndexedElementSet.js: {}
          InternalizeJSONProperty.js: {}
          Invoke.js: {}
          IsAccessorDescriptor.js: {}
          IsArray.js: {}
          IsBigIntElementType.js: {}
          IsCallable.js: {}
          IsCompatiblePropertyDescriptor.js: {}
          IsConcatSpreadable.js: {}
          IsConstructor.js: {}
          IsDataDescriptor.js: {}
          IsDetachedBuffer.js: {}
          IsExtensible.js: {}
          IsGenericDescriptor.js: {}
          IsIntegralNumber.js: {}
          IsLessThan.js: {}
          IsLooselyEqual.js: {}
          IsNoTearConfiguration.js: {}
          IsPromise.js: {}
          IsPropertyKey.js: {}
          IsRegExp.js: {}
          IsSharedArrayBuffer.js: {}
          IsStrictlyEqual.js: {}
          IsStringPrefix.js: {}
          IsStringWellFormedUnicode.js: {}
          IsUnclampedIntegerElementType.js: {}
          IsUnsignedElementType.js: {}
          IsValidIntegerIndex.js: {}
          IsWordChar.js: {}
          IterableToList.js: {}
          IteratorClose.js: {}
          IteratorComplete.js: {}
          IteratorNext.js: {}
          IteratorStep.js: {}
          IteratorValue.js: {}
          LengthOfArrayLike.js: {}
          MakeDate.js: {}
          MakeDay.js: {}
          MakeMatchIndicesIndexPairArray.js: {}
          MakeTime.js: {}
          MinFromTime.js: {}
          MonthFromTime.js: {}
          NewPromiseCapability.js: {}
          NormalCompletion.js: {}
          Number:
            add.js: {}
            bitwiseAND.js: {}
            bitwiseNOT.js: {}
            bitwiseOR.js: {}
            bitwiseXOR.js: {}
            divide.js: {}
            equal.js: {}
            exponentiate.js: {}
            index.js: {}
            leftShift.js: {}
            lessThan.js: {}
            multiply.js: {}
            remainder.js: {}
            sameValue.js: {}
            sameValueZero.js: {}
            signedRightShift.js: {}
            subtract.js: {}
            toString.js: {}
            unaryMinus.js: {}
            unsignedRightShift.js: {}
          NumberBitwiseOp.js: {}
          NumberToBigInt.js: {}
          NumericToRawBytes.js: {}
          ObjectDefineProperties.js: {}
          OrdinaryCreateFromConstructor.js: {}
          OrdinaryDefineOwnProperty.js: {}
          OrdinaryGetOwnProperty.js: {}
          OrdinaryGetPrototypeOf.js: {}
          OrdinaryHasInstance.js: {}
          OrdinaryHasProperty.js: {}
          OrdinaryObjectCreate.js: {}
          OrdinarySetPrototypeOf.js: {}
          OrdinaryToPrimitive.js: {}
          PromiseResolve.js: {}
          QuoteJSONString.js: {}
          RawBytesToNumeric.js: {}
          RegExpCreate.js: {}
          RegExpExec.js: {}
          RegExpHasFlag.js: {}
          RequireObjectCoercible.js: {}
          SameValue.js: {}
          SameValueNonNumeric.js: {}
          SameValueZero.js: {}
          SecFromTime.js: {}
          Set.js: {}
          SetFunctionLength.js: {}
          SetFunctionName.js: {}
          SetIntegrityLevel.js: {}
          SetTypedArrayFromArrayLike.js: {}
          SetTypedArrayFromTypedArray.js: {}
          SetValueInBuffer.js: {}
          SortIndexedProperties.js: {}
          SpeciesConstructor.js: {}
          StringCreate.js: {}
          StringGetOwnProperty.js: {}
          StringIndexOf.js: {}
          StringPad.js: {}
          StringToBigInt.js: {}
          StringToCodePoints.js: {}
          StringToNumber.js: {}
          SymbolDescriptiveString.js: {}
          TestIntegrityLevel.js: {}
          ThrowCompletion.js: {}
          TimeClip.js: {}
          TimeFromYear.js: {}
          TimeString.js: {}
          TimeWithinDay.js: {}
          TimeZoneString.js: {}
          ToBigInt.js: {}
          ToBigInt64.js: {}
          ToBigUint64.js: {}
          ToBoolean.js: {}
          ToDateString.js: {}
          ToIndex.js: {}
          ToInt16.js: {}
          ToInt32.js: {}
          ToInt8.js: {}
          ToIntegerOrInfinity.js: {}
          ToLength.js: {}
          ToNumber.js: {}
          ToNumeric.js: {}
          ToObject.js: {}
          ToPrimitive.js: {}
          ToPropertyDescriptor.js: {}
          ToPropertyKey.js: {}
          ToString.js: {}
          ToUint16.js: {}
          ToUint32.js: {}
          ToUint8.js: {}
          ToUint8Clamp.js: {}
          ToZeroPaddedDecimalString.js: {}
          TrimString.js: {}
          Type.js: {}
          TypedArrayCreate.js: {}
          TypedArrayElementSize.js: {}
          TypedArrayElementType.js: {}
          TypedArraySpeciesCreate.js: {}
          UTF16EncodeCodePoint.js: {}
          UTF16SurrogatePairToCodePoint.js: {}
          UnicodeEscape.js: {}
          ValidateAndApplyPropertyDescriptor.js: {}
          ValidateAtomicAccess.js: {}
          ValidateIntegerTypedArray.js: {}
          ValidateTypedArray.js: {}
          WeakRefDeref.js: {}
          WeekDay.js: {}
          WordCharacters.js: {}
          YearFromTime.js: {}
          abs.js: {}
          clamp.js: {}
          floor.js: {}
          max.js: {}
          min.js: {}
          modulo.js: {}
          msFromTime.js: {}
          substring.js: {}
          tables:
            typed-array-objects.js: {}
          thisBigIntValue.js: {}
          thisBooleanValue.js: {}
          thisNumberValue.js: {}
          thisStringValue.js: {}
          thisSymbolValue.js: {}
          thisTimeValue.js: {}
        '2023':
          AddEntriesFromIterable.js: {}
          AddToKeptObjects.js: {}
          AdvanceStringIndex.js: {}
          ApplyStringOrNumericBinaryOperator.js: {}
          ArrayCreate.js: {}
          ArraySetLength.js: {}
          ArraySpeciesCreate.js: {}
          AsyncFromSyncIteratorContinuation.js: {}
          AsyncIteratorClose.js: {}
          BigInt:
            add.js: {}
            bitwiseAND.js: {}
            bitwiseNOT.js: {}
            bitwiseOR.js: {}
            bitwiseXOR.js: {}
            divide.js: {}
            equal.js: {}
            exponentiate.js: {}
            index.js: {}
            leftShift.js: {}
            lessThan.js: {}
            multiply.js: {}
            remainder.js: {}
            signedRightShift.js: {}
            subtract.js: {}
            toString.js: {}
            unaryMinus.js: {}
            unsignedRightShift.js: {}
          BigIntBitwiseOp.js: {}
          BinaryAnd.js: {}
          BinaryOr.js: {}
          BinaryXor.js: {}
          ByteListBitwiseOp.js: {}
          ByteListEqual.js: {}
          Call.js: {}
          CanBeHeldWeakly.js: {}
          CanonicalNumericIndexString.js: {}
          Canonicalize.js: {}
          CharacterRange.js: {}
          ClearKeptObjects.js: {}
          CloneArrayBuffer.js: {}
          CodePointAt.js: {}
          CodePointsToString.js: {}
          CompareArrayElements.js: {}
          CompareTypedArrayElements.js: {}
          CompletePropertyDescriptor.js: {}
          CompletionRecord.js: {}
          CopyDataProperties.js: {}
          CreateAsyncFromSyncIterator.js: {}
          CreateDataProperty.js: {}
          CreateDataPropertyOrThrow.js: {}
          CreateHTML.js: {}
          CreateIterResultObject.js: {}
          CreateListFromArrayLike.js: {}
          CreateMethodProperty.js: {}
          CreateNonEnumerableDataPropertyOrThrow.js: {}
          CreateRegExpStringIterator.js: {}
          DateFromTime.js: {}
          DateString.js: {}
          Day.js: {}
          DayFromYear.js: {}
          DayWithinYear.js: {}
          DaysInYear.js: {}
          DefaultTimeZone.js: {}
          DefineMethodProperty.js: {}
          DefinePropertyOrThrow.js: {}
          DeletePropertyOrThrow.js: {}
          DetachArrayBuffer.js: {}
          EnumerableOwnProperties.js: {}
          FindViaPredicate.js: {}
          FlattenIntoArray.js: {}
          FromPropertyDescriptor.js: {}
          Get.js: {}
          GetGlobalObject.js: {}
          GetIterator.js: {}
          GetIteratorFromMethod.js: {}
          GetMatchIndexPair.js: {}
          GetMatchString.js: {}
          GetMethod.js: {}
          GetOwnPropertyKeys.js: {}
          GetPromiseResolve.js: {}
          GetPrototypeFromConstructor.js: {}
          GetStringIndex.js: {}
          GetSubstitution.js: {}
          GetV.js: {}
          GetValueFromBuffer.js: {}
          HasOwnProperty.js: {}
          HasProperty.js: {}
          HourFromTime.js: {}
          InLeapYear.js: {}
          InstallErrorCause.js: {}
          InstanceofOperator.js: {}
          IntegerIndexedElementGet.js: {}
          IntegerIndexedElementSet.js: {}
          InternalizeJSONProperty.js: {}
          Invoke.js: {}
          IsAccessorDescriptor.js: {}
          IsArray.js: {}
          IsBigIntElementType.js: {}
          IsCallable.js: {}
          IsCompatiblePropertyDescriptor.js: {}
          IsConcatSpreadable.js: {}
          IsConstructor.js: {}
          IsDataDescriptor.js: {}
          IsDetachedBuffer.js: {}
          IsExtensible.js: {}
          IsGenericDescriptor.js: {}
          IsIntegralNumber.js: {}
          IsLessThan.js: {}
          IsLooselyEqual.js: {}
          IsNoTearConfiguration.js: {}
          IsPromise.js: {}
          IsPropertyKey.js: {}
          IsRegExp.js: {}
          IsSharedArrayBuffer.js: {}
          IsStrictlyEqual.js: {}
          IsStringWellFormedUnicode.js: {}
          IsUnclampedIntegerElementType.js: {}
          IsUnsignedElementType.js: {}
          IsValidIntegerIndex.js: {}
          IsWordChar.js: {}
          IteratorClose.js: {}
          IteratorComplete.js: {}
          IteratorNext.js: {}
          IteratorStep.js: {}
          IteratorToList.js: {}
          IteratorValue.js: {}
          KeyForSymbol.js: {}
          LengthOfArrayLike.js: {}
          MakeDate.js: {}
          MakeDay.js: {}
          MakeMatchIndicesIndexPairArray.js: {}
          MakeTime.js: {}
          MinFromTime.js: {}
          MonthFromTime.js: {}
          NewPromiseCapability.js: {}
          NormalCompletion.js: {}
          Number:
            add.js: {}
            bitwiseAND.js: {}
            bitwiseNOT.js: {}
            bitwiseOR.js: {}
            bitwiseXOR.js: {}
            divide.js: {}
            equal.js: {}
            exponentiate.js: {}
            index.js: {}
            leftShift.js: {}
            lessThan.js: {}
            multiply.js: {}
            remainder.js: {}
            sameValue.js: {}
            sameValueZero.js: {}
            signedRightShift.js: {}
            subtract.js: {}
            toString.js: {}
            unaryMinus.js: {}
            unsignedRightShift.js: {}
          NumberBitwiseOp.js: {}
          NumberToBigInt.js: {}
          NumericToRawBytes.js: {}
          ObjectDefineProperties.js: {}
          OrdinaryCreateFromConstructor.js: {}
          OrdinaryDefineOwnProperty.js: {}
          OrdinaryGetOwnProperty.js: {}
          OrdinaryGetPrototypeOf.js: {}
          OrdinaryHasInstance.js: {}
          OrdinaryHasProperty.js: {}
          OrdinaryObjectCreate.js: {}
          OrdinarySetPrototypeOf.js: {}
          OrdinaryToPrimitive.js: {}
          ParseHexOctet.js: {}
          PromiseResolve.js: {}
          QuoteJSONString.js: {}
          RawBytesToNumeric.js: {}
          RegExpCreate.js: {}
          RegExpExec.js: {}
          RegExpHasFlag.js: {}
          RequireObjectCoercible.js: {}
          SameValue.js: {}
          SameValueNonNumber.js: {}
          SameValueZero.js: {}
          SecFromTime.js: {}
          Set.js: {}
          SetFunctionLength.js: {}
          SetFunctionName.js: {}
          SetIntegrityLevel.js: {}
          SetTypedArrayFromArrayLike.js: {}
          SetTypedArrayFromTypedArray.js: {}
          SetValueInBuffer.js: {}
          SortIndexedProperties.js: {}
          SpeciesConstructor.js: {}
          StringCreate.js: {}
          StringGetOwnProperty.js: {}
          StringIndexOf.js: {}
          StringPad.js: {}
          StringToBigInt.js: {}
          StringToCodePoints.js: {}
          StringToNumber.js: {}
          SymbolDescriptiveString.js: {}
          TestIntegrityLevel.js: {}
          ThrowCompletion.js: {}
          TimeClip.js: {}
          TimeFromYear.js: {}
          TimeString.js: {}
          TimeWithinDay.js: {}
          TimeZoneString.js: {}
          ToBigInt.js: {}
          ToBigInt64.js: {}
          ToBigUint64.js: {}
          ToBoolean.js: {}
          ToDateString.js: {}
          ToIndex.js: {}
          ToInt16.js: {}
          ToInt32.js: {}
          ToInt8.js: {}
          ToIntegerOrInfinity.js: {}
          ToLength.js: {}
          ToNumber.js: {}
          ToNumeric.js: {}
          ToObject.js: {}
          ToPrimitive.js: {}
          ToPropertyDescriptor.js: {}
          ToPropertyKey.js: {}
          ToString.js: {}
          ToUint16.js: {}
          ToUint32.js: {}
          ToUint8.js: {}
          ToUint8Clamp.js: {}
          ToZeroPaddedDecimalString.js: {}
          TrimString.js: {}
          Type.js: {}
          TypedArrayCreate.js: {}
          TypedArrayCreateSameType.js: {}
          TypedArrayElementSize.js: {}
          TypedArrayElementType.js: {}
          TypedArraySpeciesCreate.js: {}
          UTF16EncodeCodePoint.js: {}
          UTF16SurrogatePairToCodePoint.js: {}
          UnicodeEscape.js: {}
          ValidateAndApplyPropertyDescriptor.js: {}
          ValidateAtomicAccess.js: {}
          ValidateIntegerTypedArray.js: {}
          ValidateTypedArray.js: {}
          WeakRefDeref.js: {}
          WeekDay.js: {}
          WordCharacters.js: {}
          YearFromTime.js: {}
          abs.js: {}
          clamp.js: {}
          floor.js: {}
          max.js: {}
          min.js: {}
          modulo.js: {}
          msFromTime.js: {}
          substring.js: {}
          tables:
            typed-array-objects.js: {}
          thisBigIntValue.js: {}
          thisBooleanValue.js: {}
          thisNumberValue.js: {}
          thisStringValue.js: {}
          thisSymbolValue.js: {}
          thisTimeValue.js: {}
          truncate.js: {}
        '2024':
          AddEntriesFromIterable.js: {}
          AddToKeptObjects.js: {}
          AddValueToKeyedGroup.js: {}
          AdvanceStringIndex.js: {}
          ApplyStringOrNumericBinaryOperator.js: {}
          ArrayBufferByteLength.js: {}
          ArrayBufferCopyAndDetach.js: {}
          ArrayCreate.js: {}
          ArraySetLength.js: {}
          ArraySpeciesCreate.js: {}
          AsyncFromSyncIteratorContinuation.js: {}
          AsyncIteratorClose.js: {}
          BigInt:
            add.js: {}
            bitwiseAND.js: {}
            bitwiseNOT.js: {}
            bitwiseOR.js: {}
            bitwiseXOR.js: {}
            divide.js: {}
            equal.js: {}
            exponentiate.js: {}
            index.js: {}
            leftShift.js: {}
            lessThan.js: {}
            multiply.js: {}
            remainder.js: {}
            signedRightShift.js: {}
            subtract.js: {}
            toString.js: {}
            unaryMinus.js: {}
            unsignedRightShift.js: {}
          BigIntBitwiseOp.js: {}
          BinaryAnd.js: {}
          BinaryOr.js: {}
          BinaryXor.js: {}
          ByteListBitwiseOp.js: {}
          ByteListEqual.js: {}
          Call.js: {}
          CanBeHeldWeakly.js: {}
          CanonicalNumericIndexString.js: {}
          Canonicalize.js: {}
          CharacterRange.js: {}
          ClearKeptObjects.js: {}
          CloneArrayBuffer.js: {}
          CodePointAt.js: {}
          CodePointsToString.js: {}
          CompareArrayElements.js: {}
          CompareTypedArrayElements.js: {}
          CompletePropertyDescriptor.js: {}
          CompletionRecord.js: {}
          CopyDataProperties.js: {}
          CreateAsyncFromSyncIterator.js: {}
          CreateDataProperty.js: {}
          CreateDataPropertyOrThrow.js: {}
          CreateHTML.js: {}
          CreateIterResultObject.js: {}
          CreateListFromArrayLike.js: {}
          CreateNonEnumerableDataPropertyOrThrow.js: {}
          CreateRegExpStringIterator.js: {}
          DateFromTime.js: {}
          DateString.js: {}
          Day.js: {}
          DayFromYear.js: {}
          DayWithinYear.js: {}
          DaysInYear.js: {}
          DefineMethodProperty.js: {}
          DefinePropertyOrThrow.js: {}
          DeletePropertyOrThrow.js: {}
          DetachArrayBuffer.js: {}
          EnumerableOwnProperties.js: {}
          FindViaPredicate.js: {}
          FlattenIntoArray.js: {}
          FromPropertyDescriptor.js: {}
          Get.js: {}
          GetArrayBufferMaxByteLengthOption.js: {}
          GetGlobalObject.js: {}
          GetIterator.js: {}
          GetIteratorFromMethod.js: {}
          GetMatchIndexPair.js: {}
          GetMatchString.js: {}
          GetMethod.js: {}
          GetOwnPropertyKeys.js: {}
          GetPromiseResolve.js: {}
          GetPrototypeFromConstructor.js: {}
          GetStringIndex.js: {}
          GetSubstitution.js: {}
          GetV.js: {}
          GetValueFromBuffer.js: {}
          GetViewByteLength.js: {}
          GroupBy.js: {}
          HasEitherUnicodeFlag.js: {}
          HasOwnProperty.js: {}
          HasProperty.js: {}
          HourFromTime.js: {}
          InLeapYear.js: {}
          InstallErrorCause.js: {}
          InstanceofOperator.js: {}
          InternalizeJSONProperty.js: {}
          Invoke.js: {}
          IsAccessorDescriptor.js: {}
          IsArray.js: {}
          IsArrayBufferViewOutOfBounds.js: {}
          IsBigIntElementType.js: {}
          IsCallable.js: {}
          IsCompatiblePropertyDescriptor.js: {}
          IsConcatSpreadable.js: {}
          IsConstructor.js: {}
          IsDataDescriptor.js: {}
          IsDetachedBuffer.js: {}
          IsExtensible.js: {}
          IsFixedLengthArrayBuffer.js: {}
          IsGenericDescriptor.js: {}
          IsIntegralNumber.js: {}
          IsLessThan.js: {}
          IsLooselyEqual.js: {}
          IsNoTearConfiguration.js: {}
          IsPromise.js: {}
          IsPropertyKey.js: {}
          IsRegExp.js: {}
          IsSharedArrayBuffer.js: {}
          IsStrictlyEqual.js: {}
          IsStringWellFormedUnicode.js: {}
          IsTypedArrayOutOfBounds.js: {}
          IsUnclampedIntegerElementType.js: {}
          IsUnsignedElementType.js: {}
          IsValidIntegerIndex.js: {}
          IsViewOutOfBounds.js: {}
          IsWordChar.js: {}
          IteratorClose.js: {}
          IteratorComplete.js: {}
          IteratorNext.js: {}
          IteratorStep.js: {}
          IteratorStepValue.js: {}
          IteratorToList.js: {}
          IteratorValue.js: {}
          KeyForSymbol.js: {}
          LengthOfArrayLike.js: {}
          MakeDataViewWithBufferWitnessRecord.js: {}
          MakeDate.js: {}
          MakeDay.js: {}
          MakeFullYear.js: {}
          MakeMatchIndicesIndexPairArray.js: {}
          MakeTime.js: {}
          MakeTypedArrayWithBufferWitnessRecord.js: {}
          MinFromTime.js: {}
          MonthFromTime.js: {}
          NewPromiseCapability.js: {}
          NormalCompletion.js: {}
          Number:
            add.js: {}
            bitwiseAND.js: {}
            bitwiseNOT.js: {}
            bitwiseOR.js: {}
            bitwiseXOR.js: {}
            divide.js: {}
            equal.js: {}
            exponentiate.js: {}
            index.js: {}
            leftShift.js: {}
            lessThan.js: {}
            multiply.js: {}
            remainder.js: {}
            sameValue.js: {}
            sameValueZero.js: {}
            signedRightShift.js: {}
            subtract.js: {}
            toString.js: {}
            unaryMinus.js: {}
            unsignedRightShift.js: {}
          NumberBitwiseOp.js: {}
          NumberToBigInt.js: {}
          NumericToRawBytes.js: {}
          ObjectDefineProperties.js: {}
          OrdinaryCreateFromConstructor.js: {}
          OrdinaryDefineOwnProperty.js: {}
          OrdinaryGetOwnProperty.js: {}
          OrdinaryGetPrototypeOf.js: {}
          OrdinaryHasInstance.js: {}
          OrdinaryHasProperty.js: {}
          OrdinaryObjectCreate.js: {}
          OrdinarySetPrototypeOf.js: {}
          OrdinaryToPrimitive.js: {}
          ParseHexOctet.js: {}
          PromiseResolve.js: {}
          QuoteJSONString.js: {}
          RawBytesToNumeric.js: {}
          RegExpCreate.js: {}
          RegExpExec.js: {}
          RegExpHasFlag.js: {}
          RequireObjectCoercible.js: {}
          SameValue.js: {}
          SameValueNonNumber.js: {}
          SameValueZero.js: {}
          SecFromTime.js: {}
          Set.js: {}
          SetFunctionLength.js: {}
          SetFunctionName.js: {}
          SetIntegrityLevel.js: {}
          SetTypedArrayFromArrayLike.js: {}
          SetTypedArrayFromTypedArray.js: {}
          SetValueInBuffer.js: {}
          SortIndexedProperties.js: {}
          SpeciesConstructor.js: {}
          StringCreate.js: {}
          StringGetOwnProperty.js: {}
          StringIndexOf.js: {}
          StringPad.js: {}
          StringPaddingBuiltinsImpl.js: {}
          StringToBigInt.js: {}
          StringToCodePoints.js: {}
          StringToNumber.js: {}
          SymbolDescriptiveString.js: {}
          SystemTimeZoneIdentifier.js: {}
          TestIntegrityLevel.js: {}
          ThisBigIntValue.js: {}
          ThisBooleanValue.js: {}
          ThisNumberValue.js: {}
          ThisStringValue.js: {}
          ThisSymbolValue.js: {}
          ThrowCompletion.js: {}
          TimeClip.js: {}
          TimeFromYear.js: {}
          TimeString.js: {}
          TimeWithinDay.js: {}
          TimeZoneString.js: {}
          ToBigInt.js: {}
          ToBigInt64.js: {}
          ToBigUint64.js: {}
          ToBoolean.js: {}
          ToDateString.js: {}
          ToIndex.js: {}
          ToInt16.js: {}
          ToInt32.js: {}
          ToInt8.js: {}
          ToIntegerOrInfinity.js: {}
          ToLength.js: {}
          ToNumber.js: {}
          ToNumeric.js: {}
          ToObject.js: {}
          ToPrimitive.js: {}
          ToPropertyDescriptor.js: {}
          ToPropertyKey.js: {}
          ToString.js: {}
          ToUint16.js: {}
          ToUint32.js: {}
          ToUint8.js: {}
          ToUint8Clamp.js: {}
          ToZeroPaddedDecimalString.js: {}
          TrimString.js: {}
          Type.js: {}
          TypedArrayByteLength.js: {}
          TypedArrayCreateFromConstructor.js: {}
          TypedArrayCreateSameType.js: {}
          TypedArrayElementSize.js: {}
          TypedArrayElementType.js: {}
          TypedArrayGetElement.js: {}
          TypedArrayLength.js: {}
          TypedArraySetElement.js: {}
          TypedArraySpeciesCreate.js: {}
          UTF16EncodeCodePoint.js: {}
          UTF16SurrogatePairToCodePoint.js: {}
          UnicodeEscape.js: {}
          ValidateAndApplyPropertyDescriptor.js: {}
          ValidateAtomicAccess.js: {}
          ValidateAtomicAccessOnIntegerTypedArray.js: {}
          ValidateIntegerTypedArray.js: {}
          ValidateTypedArray.js: {}
          WeakRefDeref.js: {}
          WeekDay.js: {}
          WordCharacters.js: {}
          YearFromTime.js: {}
          abs.js: {}
          clamp.js: {}
          floor.js: {}
          max.js: {}
          min.js: {}
          modulo.js: {}
          msFromTime.js: {}
          substring.js: {}
          tables:
            typed-array-objects.js: {}
          truncate.js: {}
        '5':
          AbstractEqualityComparison.js: {}
          AbstractRelationalComparison.js: {}
          Canonicalize.js: {}
          CheckObjectCoercible.js: {}
          DateFromTime.js: {}
          Day.js: {}
          DayFromYear.js: {}
          DayWithinYear.js: {}
          DaysInYear.js: {}
          FromPropertyDescriptor.js: {}
          HourFromTime.js: {}
          InLeapYear.js: {}
          IsAccessorDescriptor.js: {}
          IsCallable.js: {}
          IsDataDescriptor.js: {}
          IsGenericDescriptor.js: {}
          IsPropertyDescriptor.js: {}
          MakeDate.js: {}
          MakeDay.js: {}
          MakeTime.js: {}
          MinFromTime.js: {}
          MonthFromTime.js: {}
          SameValue.js: {}
          SecFromTime.js: {}
          StrictEqualityComparison.js: {}
          TimeClip.js: {}
          TimeFromYear.js: {}
          TimeWithinDay.js: {}
          ToBoolean.js: {}
          ToInt32.js: {}
          ToInteger.js: {}
          ToNumber.js: {}
          ToObject.js: {}
          ToPrimitive.js: {}
          ToPropertyDescriptor.js: {}
          ToString.js: {}
          ToUint16.js: {}
          ToUint32.js: {}
          Type.js: {}
          WeekDay.js: {}
          YearFromTime.js: {}
          abs.js: {}
          floor.js: {}
          modulo.js: {}
          msFromTime.js: {}
        CHANGELOG.md: {}
        GetIntrinsic.js: {}
        LICENSE: {}
        README.md: {}
        es2015.js: {}
        es2016.js: {}
        es2017.js: {}
        es2018.js: {}
        es2019.js: {}
        es2020.js: {}
        es2021.js: {}
        es2022.js: {}
        es2023.js: {}
        es2024.js: {}
        es5.js: {}
        es6.js: {}
        es7.js: {}
        helpers:
          DefineOwnProperty.js: {}
          IsArray.js: {}
          OwnPropertyKeys.js: {}
          assertRecord.js: {}
          assign.js: {}
          bytesAsFloat32.js: {}
          bytesAsFloat64.js: {}
          bytesAsInteger.js: {}
          callBind.js: {}
          callBound.js: {}
          caseFolding.json: {}
          defaultEndianness.js: {}
          every.js: {}
          forEach.js: {}
          fractionToBinaryString.js: {}
          fromPropertyDescriptor.js: {}
          getInferredName.js: {}
          getIteratorMethod.js: {}
          getOwnPropertyDescriptor.js: {}
          getProto.js: {}
          getSymbolDescription.js: {}
          intToBinaryString.js: {}
          integerToNBytes.js: {}
          isAbstractClosure.js: {}
          isByteValue.js: {}
          isCodePoint.js: {}
          isFinite.js: {}
          isFullyPopulatedPropertyDescriptor.js: {}
          isInteger.js: {}
          isLeadingSurrogate.js: {}
          isLineTerminator.js: {}
          isNaN.js: {}
          isNegativeZero.js: {}
          isPrefixOf.js: {}
          isPrimitive.js: {}
          isSamePropertyDescriptor.js: {}
          isStringOrHole.js: {}
          isStringOrUndefined.js: {}
          isTrailingSurrogate.js: {}
          maxSafeInteger.js: {}
          maxValue.js: {}
          mod.js: {}
          modBigInt.js: {}
          padTimeComponent.js: {}
          records:
            async-generator-request-record.js: {}
            data-view-with-buffer-witness-record.js: {}
            iterator-record.js: {}
            match-record.js: {}
            promise-capability-record.js: {}
            property-descriptor.js: {}
            regexp-record.js: {}
            typed-array-with-buffer-witness-record.js: {}
          reduce.js: {}
          regexTester.js: {}
          setProto.js: {}
          sign.js: {}
          some.js: {}
          timeConstants.js: {}
          typedArrayConstructors.js: {}
          valueToFloat32Bytes.js: {}
          valueToFloat64Bytes.js: {}
        index.js: {}
        operations:
          .eslintrc: {}
          2015.js: {}
          2016.js: {}
          2017.js: {}
          2018.js: {}
          2019.js: {}
          2020.js: {}
          2021.js: {}
          2022.js: {}
          2023.js: {}
          2024.js: {}
          build-unicode.mjs: {}
        package.json: {}
      es-array-method-boxes-properly:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      es-define-property:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      es-errors:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        eval.d.ts: {}
        eval.js: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        range.d.ts: {}
        range.js: {}
        ref.d.ts: {}
        ref.js: {}
        syntax.d.ts: {}
        syntax.js: {}
        test:
          index.js: {}
        tsconfig.json: {}
        type.d.ts: {}
        type.js: {}
        uri.d.ts: {}
        uri.js: {}
      es-get-iterator:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        node.js: {}
        node.mjs: {}
        package.json: {}
        test:
          core-js.js: {}
          es6-shim.js: {}
          index.js: {}
          node.js: {}
          node.mjs: {}
      es-iterator-helpers:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        Iterator:
          auto.js: {}
          implementation.js: {}
          index.js: {}
          polyfill.js: {}
          shim.js: {}
        Iterator.from:
          auto.js: {}
          implementation.js: {}
          index.js: {}
          polyfill.js: {}
          shim.js: {}
        Iterator.prototype:
          auto.js: {}
          implementation.js: {}
          index.js: {}
          polyfill.js: {}
          shim.js: {}
        Iterator.prototype.constructor:
          auto.js: {}
          implementation.js: {}
          index.js: {}
          polyfill.js: {}
          shim.js: {}
        Iterator.prototype.drop:
          auto.js: {}
          implementation.js: {}
          index.js: {}
          polyfill.js: {}
          shim.js: {}
        Iterator.prototype.every:
          auto.js: {}
          implementation.js: {}
          index.js: {}
          polyfill.js: {}
          shim.js: {}
        Iterator.prototype.filter:
          auto.js: {}
          implementation.js: {}
          index.js: {}
          polyfill.js: {}
          shim.js: {}
        Iterator.prototype.find:
          auto.js: {}
          implementation.js: {}
          index.js: {}
          polyfill.js: {}
          shim.js: {}
        Iterator.prototype.flatMap:
          auto.js: {}
          implementation.js: {}
          index.js: {}
          polyfill.js: {}
          shim.js: {}
        Iterator.prototype.forEach:
          auto.js: {}
          implementation.js: {}
          index.js: {}
          polyfill.js: {}
          shim.js: {}
        Iterator.prototype.map:
          auto.js: {}
          implementation.js: {}
          index.js: {}
          polyfill.js: {}
          shim.js: {}
        Iterator.prototype.reduce:
          auto.js: {}
          implementation.js: {}
          index.js: {}
          polyfill.js: {}
          shim.js: {}
        Iterator.prototype.some:
          auto.js: {}
          implementation.js: {}
          index.js: {}
          polyfill.js: {}
          shim.js: {}
        Iterator.prototype.take:
          auto.js: {}
          implementation.js: {}
          index.js: {}
          polyfill.js: {}
          shim.js: {}
        Iterator.prototype.toArray:
          auto.js: {}
          implementation.js: {}
          index.js: {}
          polyfill.js: {}
          shim.js: {}
        IteratorHelperPrototype:
          index.js: {}
        LICENSE: {}
        README.md: {}
        WrapForValidIteratorPrototype:
          index.js: {}
        aos:
          CreateIteratorFromClosure.js: {}
          GeneratorResume.js: {}
          GeneratorResumeAbrupt.js: {}
          GeneratorStart.js: {}
          GeneratorValidate.js: {}
          GetIteratorDirect.js: {}
          GetIteratorFlattenable.js: {}
          IteratorClose.js: {}
          IteratorStepValue.js: {}
        auto.js: {}
        index.json: {}
        package.json: {}
        shim.js: {}
        test:
          Iterator.from.js: {}
          Iterator.js: {}
          Iterator.prototype.constructor.js: {}
          Iterator.prototype.drop.js: {}
          Iterator.prototype.every.js: {}
          Iterator.prototype.filter.js: {}
          Iterator.prototype.find.js: {}
          Iterator.prototype.flatMap.js: {}
          Iterator.prototype.forEach.js: {}
          Iterator.prototype.js: {}
          Iterator.prototype.map.js: {}
          Iterator.prototype.reduce.js: {}
          Iterator.prototype.some.js: {}
          Iterator.prototype.take.js: {}
          Iterator.prototype.toArray.js: {}
          helpers:
            testIterator.js: {}
          implementation.js: {}
          index.js: {}
          shimmed.js: {}
          tests.js: {}
      es-module-lexer:
        LICENSE: {}
        README.md: {}
        dist:
          lexer.asm.js: {}
          lexer.cjs: {}
          lexer.js: {}
        lexer.js: {}
        package.json: {}
        types:
          lexer.d.ts: {}
      es-object-atoms:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        RequireObjectCoercible.d.ts: {}
        RequireObjectCoercible.js: {}
        ToObject.d.ts: {}
        ToObject.js: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      es-set-tostringtag:
        .eslintrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      es-shim-unscopables:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
          with.js: {}
      es-to-primitive:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .travis.yml: {}
        CHANGELOG.md: {}
        LICENSE: {}
        Makefile: {}
        README.md: {}
        es2015.js: {}
        es5.js: {}
        es6.js: {}
        helpers:
          isPrimitive.js: {}
        index.js: {}
        package.json: {}
        test:
          es2015.js: {}
          es5.js: {}
          es6.js: {}
          index.js: {}
      escalade:
        dist:
          index.js: {}
          index.mjs: {}
        index.d.ts: {}
        license: {}
        package.json: {}
        readme.md: {}
        sync:
          index.d.ts: {}
          index.js: {}
          index.mjs: {}
      escape-html:
        LICENSE: {}
        Readme.md: {}
        index.js: {}
        package.json: {}
      escape-string-regexp:
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      escodegen:
        LICENSE.BSD: {}
        README.md: {}
        bin:
          escodegen.js: {}
          esgenerate.js: {}
        escodegen.js: {}
        node_modules:
          source-map:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            dist:
              source-map.debug.js: {}
              source-map.js: {}
              source-map.min.js: {}
              source-map.min.js.map: {}
            lib:
              array-set.js: {}
              base64-vlq.js: {}
              base64.js: {}
              binary-search.js: {}
              mapping-list.js: {}
              quick-sort.js: {}
              source-map-consumer.js: {}
              source-map-generator.js: {}
              source-node.js: {}
              util.js: {}
            package.json: {}
            source-map.d.ts: {}
            source-map.js: {}
        package.json: {}
      eslint:
        LICENSE: {}
        README.md: {}
        bin:
          eslint.js: {}
        conf:
          config-schema.js: {}
          default-cli-options.js: {}
          globals.js: {}
          replacements.json: {}
          rule-type-list.json: {}
        lib:
          api.js: {}
          cli-engine:
            cli-engine.js: {}
            file-enumerator.js: {}
            formatters:
              checkstyle.js: {}
              compact.js: {}
              formatters-meta.json: {}
              html.js: {}
              jslint-xml.js: {}
              json-with-metadata.js: {}
              json.js: {}
              junit.js: {}
              stylish.js: {}
              tap.js: {}
              unix.js: {}
              visualstudio.js: {}
            hash.js: {}
            index.js: {}
            lint-result-cache.js: {}
            load-rules.js: {}
            xml-escape.js: {}
          cli.js: {}
          config:
            default-config.js: {}
            flat-config-array.js: {}
            flat-config-helpers.js: {}
            flat-config-schema.js: {}
            rule-validator.js: {}
          eslint:
            eslint-helpers.js: {}
            eslint.js: {}
            flat-eslint.js: {}
            index.js: {}
          linter:
            apply-disable-directives.js: {}
            code-path-analysis:
              code-path-analyzer.js: {}
              code-path-segment.js: {}
              code-path-state.js: {}
              code-path.js: {}
              debug-helpers.js: {}
              fork-context.js: {}
              id-generator.js: {}
            config-comment-parser.js: {}
            index.js: {}
            interpolate.js: {}
            linter.js: {}
            node-event-generator.js: {}
            report-translator.js: {}
            rule-fixer.js: {}
            rules.js: {}
            safe-emitter.js: {}
            source-code-fixer.js: {}
            timing.js: {}
          options.js: {}
          rule-tester:
            flat-rule-tester.js: {}
            index.js: {}
            rule-tester.js: {}
          rules:
            accessor-pairs.js: {}
            array-bracket-newline.js: {}
            array-bracket-spacing.js: {}
            array-callback-return.js: {}
            array-element-newline.js: {}
            arrow-body-style.js: {}
            arrow-parens.js: {}
            arrow-spacing.js: {}
            block-scoped-var.js: {}
            block-spacing.js: {}
            brace-style.js: {}
            callback-return.js: {}
            camelcase.js: {}
            capitalized-comments.js: {}
            class-methods-use-this.js: {}
            comma-dangle.js: {}
            comma-spacing.js: {}
            comma-style.js: {}
            complexity.js: {}
            computed-property-spacing.js: {}
            consistent-return.js: {}
            consistent-this.js: {}
            constructor-super.js: {}
            curly.js: {}
            default-case-last.js: {}
            default-case.js: {}
            default-param-last.js: {}
            dot-location.js: {}
            dot-notation.js: {}
            eol-last.js: {}
            eqeqeq.js: {}
            for-direction.js: {}
            func-call-spacing.js: {}
            func-name-matching.js: {}
            func-names.js: {}
            func-style.js: {}
            function-call-argument-newline.js: {}
            function-paren-newline.js: {}
            generator-star-spacing.js: {}
            getter-return.js: {}
            global-require.js: {}
            grouped-accessor-pairs.js: {}
            guard-for-in.js: {}
            handle-callback-err.js: {}
            id-blacklist.js: {}
            id-denylist.js: {}
            id-length.js: {}
            id-match.js: {}
            implicit-arrow-linebreak.js: {}
            indent-legacy.js: {}
            indent.js: {}
            index.js: {}
            init-declarations.js: {}
            jsx-quotes.js: {}
            key-spacing.js: {}
            keyword-spacing.js: {}
            line-comment-position.js: {}
            linebreak-style.js: {}
            lines-around-comment.js: {}
            lines-around-directive.js: {}
            lines-between-class-members.js: {}
            logical-assignment-operators.js: {}
            max-classes-per-file.js: {}
            max-depth.js: {}
            max-len.js: {}
            max-lines-per-function.js: {}
            max-lines.js: {}
            max-nested-callbacks.js: {}
            max-params.js: {}
            max-statements-per-line.js: {}
            max-statements.js: {}
            multiline-comment-style.js: {}
            multiline-ternary.js: {}
            new-cap.js: {}
            new-parens.js: {}
            newline-after-var.js: {}
            newline-before-return.js: {}
            newline-per-chained-call.js: {}
            no-alert.js: {}
            no-array-constructor.js: {}
            no-async-promise-executor.js: {}
            no-await-in-loop.js: {}
            no-bitwise.js: {}
            no-buffer-constructor.js: {}
            no-caller.js: {}
            no-case-declarations.js: {}
            no-catch-shadow.js: {}
            no-class-assign.js: {}
            no-compare-neg-zero.js: {}
            no-cond-assign.js: {}
            no-confusing-arrow.js: {}
            no-console.js: {}
            no-const-assign.js: {}
            no-constant-binary-expression.js: {}
            no-constant-condition.js: {}
            no-constructor-return.js: {}
            no-continue.js: {}
            no-control-regex.js: {}
            no-debugger.js: {}
            no-delete-var.js: {}
            no-div-regex.js: {}
            no-dupe-args.js: {}
            no-dupe-class-members.js: {}
            no-dupe-else-if.js: {}
            no-dupe-keys.js: {}
            no-duplicate-case.js: {}
            no-duplicate-imports.js: {}
            no-else-return.js: {}
            no-empty-character-class.js: {}
            no-empty-function.js: {}
            no-empty-pattern.js: {}
            no-empty-static-block.js: {}
            no-empty.js: {}
            no-eq-null.js: {}
            no-eval.js: {}
            no-ex-assign.js: {}
            no-extend-native.js: {}
            no-extra-bind.js: {}
            no-extra-boolean-cast.js: {}
            no-extra-label.js: {}
            no-extra-parens.js: {}
            no-extra-semi.js: {}
            no-fallthrough.js: {}
            no-floating-decimal.js: {}
            no-func-assign.js: {}
            no-global-assign.js: {}
            no-implicit-coercion.js: {}
            no-implicit-globals.js: {}
            no-implied-eval.js: {}
            no-import-assign.js: {}
            no-inline-comments.js: {}
            no-inner-declarations.js: {}
            no-invalid-regexp.js: {}
            no-invalid-this.js: {}
            no-irregular-whitespace.js: {}
            no-iterator.js: {}
            no-label-var.js: {}
            no-labels.js: {}
            no-lone-blocks.js: {}
            no-lonely-if.js: {}
            no-loop-func.js: {}
            no-loss-of-precision.js: {}
            no-magic-numbers.js: {}
            no-misleading-character-class.js: {}
            no-mixed-operators.js: {}
            no-mixed-requires.js: {}
            no-mixed-spaces-and-tabs.js: {}
            no-multi-assign.js: {}
            no-multi-spaces.js: {}
            no-multi-str.js: {}
            no-multiple-empty-lines.js: {}
            no-native-reassign.js: {}
            no-negated-condition.js: {}
            no-negated-in-lhs.js: {}
            no-nested-ternary.js: {}
            no-new-func.js: {}
            no-new-native-nonconstructor.js: {}
            no-new-object.js: {}
            no-new-require.js: {}
            no-new-symbol.js: {}
            no-new-wrappers.js: {}
            no-new.js: {}
            no-nonoctal-decimal-escape.js: {}
            no-obj-calls.js: {}
            no-object-constructor.js: {}
            no-octal-escape.js: {}
            no-octal.js: {}
            no-param-reassign.js: {}
            no-path-concat.js: {}
            no-plusplus.js: {}
            no-process-env.js: {}
            no-process-exit.js: {}
            no-promise-executor-return.js: {}
            no-proto.js: {}
            no-prototype-builtins.js: {}
            no-redeclare.js: {}
            no-regex-spaces.js: {}
            no-restricted-exports.js: {}
            no-restricted-globals.js: {}
            no-restricted-imports.js: {}
            no-restricted-modules.js: {}
            no-restricted-properties.js: {}
            no-restricted-syntax.js: {}
            no-return-assign.js: {}
            no-return-await.js: {}
            no-script-url.js: {}
            no-self-assign.js: {}
            no-self-compare.js: {}
            no-sequences.js: {}
            no-setter-return.js: {}
            no-shadow-restricted-names.js: {}
            no-shadow.js: {}
            no-spaced-func.js: {}
            no-sparse-arrays.js: {}
            no-sync.js: {}
            no-tabs.js: {}
            no-template-curly-in-string.js: {}
            no-ternary.js: {}
            no-this-before-super.js: {}
            no-throw-literal.js: {}
            no-trailing-spaces.js: {}
            no-undef-init.js: {}
            no-undef.js: {}
            no-undefined.js: {}
            no-underscore-dangle.js: {}
            no-unexpected-multiline.js: {}
            no-unmodified-loop-condition.js: {}
            no-unneeded-ternary.js: {}
            no-unreachable-loop.js: {}
            no-unreachable.js: {}
            no-unsafe-finally.js: {}
            no-unsafe-negation.js: {}
            no-unsafe-optional-chaining.js: {}
            no-unused-expressions.js: {}
            no-unused-labels.js: {}
            no-unused-private-class-members.js: {}
            no-unused-vars.js: {}
            no-use-before-define.js: {}
            no-useless-backreference.js: {}
            no-useless-call.js: {}
            no-useless-catch.js: {}
            no-useless-computed-key.js: {}
            no-useless-concat.js: {}
            no-useless-constructor.js: {}
            no-useless-escape.js: {}
            no-useless-rename.js: {}
            no-useless-return.js: {}
            no-var.js: {}
            no-void.js: {}
            no-warning-comments.js: {}
            no-whitespace-before-property.js: {}
            no-with.js: {}
            nonblock-statement-body-position.js: {}
            object-curly-newline.js: {}
            object-curly-spacing.js: {}
            object-property-newline.js: {}
            object-shorthand.js: {}
            one-var-declaration-per-line.js: {}
            one-var.js: {}
            operator-assignment.js: {}
            operator-linebreak.js: {}
            padded-blocks.js: {}
            padding-line-between-statements.js: {}
            prefer-arrow-callback.js: {}
            prefer-const.js: {}
            prefer-destructuring.js: {}
            prefer-exponentiation-operator.js: {}
            prefer-named-capture-group.js: {}
            prefer-numeric-literals.js: {}
            prefer-object-has-own.js: {}
            prefer-object-spread.js: {}
            prefer-promise-reject-errors.js: {}
            prefer-reflect.js: {}
            prefer-regex-literals.js: {}
            prefer-rest-params.js: {}
            prefer-spread.js: {}
            prefer-template.js: {}
            quote-props.js: {}
            quotes.js: {}
            radix.js: {}
            require-atomic-updates.js: {}
            require-await.js: {}
            require-jsdoc.js: {}
            require-unicode-regexp.js: {}
            require-yield.js: {}
            rest-spread-spacing.js: {}
            semi-spacing.js: {}
            semi-style.js: {}
            semi.js: {}
            sort-imports.js: {}
            sort-keys.js: {}
            sort-vars.js: {}
            space-before-blocks.js: {}
            space-before-function-paren.js: {}
            space-in-parens.js: {}
            space-infix-ops.js: {}
            space-unary-ops.js: {}
            spaced-comment.js: {}
            strict.js: {}
            switch-colon-spacing.js: {}
            symbol-description.js: {}
            template-curly-spacing.js: {}
            template-tag-spacing.js: {}
            unicode-bom.js: {}
            use-isnan.js: {}
            utils:
              ast-utils.js: {}
              fix-tracker.js: {}
              keywords.js: {}
              lazy-loading-rule-map.js: {}
              patterns:
                letters.js: {}
              regular-expressions.js: {}
              unicode:
                index.js: {}
                is-combining-character.js: {}
                is-emoji-modifier.js: {}
                is-regional-indicator-symbol.js: {}
                is-surrogate-pair.js: {}
            valid-jsdoc.js: {}
            valid-typeof.js: {}
            vars-on-top.js: {}
            wrap-iife.js: {}
            wrap-regex.js: {}
            yield-star-spacing.js: {}
            yoda.js: {}
          shared:
            ajv.js: {}
            ast-utils.js: {}
            config-validator.js: {}
            deprecation-warnings.js: {}
            directives.js: {}
            logging.js: {}
            relative-module-resolver.js: {}
            runtime-info.js: {}
            severity.js: {}
            string-utils.js: {}
            traverser.js: {}
            types.js: {}
          source-code:
            index.js: {}
            source-code.js: {}
            token-store:
              backward-token-comment-cursor.js: {}
              backward-token-cursor.js: {}
              cursor.js: {}
              cursors.js: {}
              decorative-cursor.js: {}
              filter-cursor.js: {}
              forward-token-comment-cursor.js: {}
              forward-token-cursor.js: {}
              index.js: {}
              limit-cursor.js: {}
              padded-token-cursor.js: {}
              skip-cursor.js: {}
              utils.js: {}
          unsupported-api.js: {}
        messages:
          all-files-ignored.js: {}
          eslintrc-incompat.js: {}
          eslintrc-plugins.js: {}
          extend-config-missing.js: {}
          failed-to-read-json.js: {}
          file-not-found.js: {}
          invalid-rule-options.js: {}
          invalid-rule-severity.js: {}
          no-config-found.js: {}
          plugin-conflict.js: {}
          plugin-invalid.js: {}
          plugin-missing.js: {}
          print-config-with-directory-path.js: {}
          shared.js: {}
          whitespace-found.js: {}
        node_modules:
          .bin:
            js-yaml: {}
          ansi-styles:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          argparse:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            argparse.js: {}
            lib:
              sub.js: {}
              textwrap.js: {}
            package.json: {}
          chalk:
            index.d.ts: {}
            license: {}
            package.json: {}
            readme.md: {}
            source:
              index.js: {}
              templates.js: {}
              util.js: {}
          color-convert:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            conversions.js: {}
            index.js: {}
            package.json: {}
            route.js: {}
          color-name:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          escape-string-regexp:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          globals:
            globals.json: {}
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          js-yaml:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            bin:
              js-yaml.js: {}
            dist:
              js-yaml.js: {}
              js-yaml.min.js: {}
              js-yaml.mjs: {}
            index.js: {}
            lib:
              common.js: {}
              dumper.js: {}
              exception.js: {}
              loader.js: {}
              schema:
                core.js: {}
                default.js: {}
                failsafe.js: {}
                json.js: {}
              schema.js: {}
              snippet.js: {}
              type:
                binary.js: {}
                bool.js: {}
                float.js: {}
                int.js: {}
                map.js: {}
                merge.js: {}
                null.js: {}
                omap.js: {}
                pairs.js: {}
                seq.js: {}
                set.js: {}
                str.js: {}
                timestamp.js: {}
              type.js: {}
            package.json: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          type-fest:
            base.d.ts: {}
            index.d.ts: {}
            license: {}
            package.json: {}
            readme.md: {}
            source:
              async-return-type.d.ts: {}
              asyncify.d.ts: {}
              basic.d.ts: {}
              conditional-except.d.ts: {}
              conditional-keys.d.ts: {}
              conditional-pick.d.ts: {}
              entries.d.ts: {}
              entry.d.ts: {}
              except.d.ts: {}
              fixed-length-array.d.ts: {}
              iterable-element.d.ts: {}
              literal-union.d.ts: {}
              merge-exclusive.d.ts: {}
              merge.d.ts: {}
              mutable.d.ts: {}
              opaque.d.ts: {}
              package-json.d.ts: {}
              partial-deep.d.ts: {}
              promisable.d.ts: {}
              promise-value.d.ts: {}
              readonly-deep.d.ts: {}
              require-at-least-one.d.ts: {}
              require-exactly-one.d.ts: {}
              set-optional.d.ts: {}
              set-required.d.ts: {}
              set-return-type.d.ts: {}
              stringified.d.ts: {}
              tsconfig-json.d.ts: {}
              union-to-intersection.d.ts: {}
              utilities.d.ts: {}
              value-of.d.ts: {}
            ts41:
              camel-case.d.ts: {}
              delimiter-case.d.ts: {}
              index.d.ts: {}
              kebab-case.d.ts: {}
              pascal-case.d.ts: {}
              snake-case.d.ts: {}
        package.json: {}
      eslint-config-react-app:
        LICENSE: {}
        README.md: {}
        base.js: {}
        index.js: {}
        jest.js: {}
        package.json: {}
      eslint-import-resolver-node:
        LICENSE: {}
        README.md: {}
        index.js: {}
        node_modules:
          debug:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            node.js: {}
            package.json: {}
            src:
              browser.js: {}
              common.js: {}
              index.js: {}
              node.js: {}
        package.json: {}
      eslint-module-utils:
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        ModuleCache.d.ts: {}
        ModuleCache.js: {}
        declaredScope.d.ts: {}
        declaredScope.js: {}
        hash.d.ts: {}
        hash.js: {}
        ignore.d.ts: {}
        ignore.js: {}
        module-require.d.ts: {}
        module-require.js: {}
        moduleVisitor.d.ts: {}
        moduleVisitor.js: {}
        node_modules:
          debug:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            node.js: {}
            package.json: {}
            src:
              browser.js: {}
              common.js: {}
              index.js: {}
              node.js: {}
        package.json: {}
        parse.d.ts: {}
        parse.js: {}
        pkgDir.d.ts: {}
        pkgDir.js: {}
        pkgUp.d.ts: {}
        pkgUp.js: {}
        readPkgUp.d.ts: {}
        readPkgUp.js: {}
        resolve.d.ts: {}
        resolve.js: {}
        tsconfig.json: {}
        types.d.ts: {}
        unambiguous.d.ts: {}
        unambiguous.js: {}
        visit.d.ts: {}
        visit.js: {}
      eslint-plugin-flowtype:
        CONTRIBUTING.md: {}
        LICENSE: {}
        README.md: {}
        dist:
          bin:
            addAssertions.js: {}
            checkDocs.js: {}
            checkTests.js: {}
            utilities.js: {}
          configs:
            recommended.json: {}
          index.js: {}
          rules:
            arrayStyle:
              index.js: {}
              isSimpleType.js: {}
              needWrap.js: {}
            arrayStyleComplexType.js: {}
            arrayStyleSimpleType.js: {}
            arrowParens.js: {}
            booleanStyle.js: {}
            defineFlowType.js: {}
            delimiterDangle.js: {}
            enforceLineBreak.js: {}
            genericSpacing.js: {}
            interfaceIdMatch.js: {}
            newlineAfterFlowAnnotation.js: {}
            noDupeKeys.js: {}
            noDuplicateTypeUnionIntersectionMembers.js: {}
            noExistentialType.js: {}
            noFlowFixMeComments.js: {}
            noInternalFlowType.js: {}
            noMixed.js: {}
            noMutableArray.js: {}
            noPrimitiveConstructorTypes.js: {}
            noTypesMissingFileAnnotation.js: {}
            noUnusedExpressions.js: {}
            noWeakTypes.js: {}
            objectTypeCurlySpacing.js: {}
            objectTypeDelimiter.js: {}
            quotes.js: {}
            requireCompoundTypeAlias.js: {}
            requireExactType.js: {}
            requireIndexerName.js: {}
            requireInexactType.js: {}
            requireParameterType.js: {}
            requireReadonlyReactProps.js: {}
            requireReturnType.js: {}
            requireTypesAtTop.js: {}
            requireValidFileAnnotation.js: {}
            requireVariableType.js: {}
            semi.js: {}
            sortKeys.js: {}
            sortTypeUnionIntersectionMembers.js: {}
            spaceAfterTypeColon.js: {}
            spaceBeforeGenericBracket.js: {}
            spaceBeforeTypeColon.js: {}
            spreadExactType.js: {}
            typeColonSpacing:
              evaluateFunctions.js: {}
              evaluateObjectTypeIndexer.js: {}
              evaluateObjectTypeProperty.js: {}
              evaluateReturnType.js: {}
              evaluateTypeCastExpression.js: {}
              evaluateTypical.js: {}
              evaluateVariables.js: {}
              index.js: {}
              reporter.js: {}
            typeIdMatch.js: {}
            typeImportStyle.js: {}
            unionIntersectionSpacing.js: {}
            useFlowType.js: {}
            useReadOnlySpread.js: {}
            validSyntax.js: {}
          utilities:
            checkFlowFileAnnotation.js: {}
            fuzzyStringMatch.js: {}
            getBuiltinRule.js: {}
            getParameterName.js: {}
            getTokenAfterParens.js: {}
            getTokenBeforeParens.js: {}
            index.js: {}
            isFlowFile.js: {}
            isFlowFileAnnotation.js: {}
            isNoFlowFile.js: {}
            isNoFlowFileAnnotation.js: {}
            iterateFunctionNodes.js: {}
            quoteName.js: {}
            spacingFixers.js: {}
        package.json: {}
      eslint-plugin-import:
        CHANGELOG.md: {}
        CONTRIBUTING.md: {}
        LICENSE: {}
        README.md: {}
        RELEASE.md: {}
        SECURITY.md: {}
        config:
          electron.js: {}
          errors.js: {}
          react-native.js: {}
          react.js: {}
          recommended.js: {}
          stage-0.js: {}
          typescript.js: {}
          warnings.js: {}
        docs:
          rules:
            consistent-type-specifier-style.md: {}
            default.md: {}
            dynamic-import-chunkname.md: {}
            export.md: {}
            exports-last.md: {}
            extensions.md: {}
            first.md: {}
            group-exports.md: {}
            imports-first.md: {}
            max-dependencies.md: {}
            named.md: {}
            namespace.md: {}
            newline-after-import.md: {}
            no-absolute-path.md: {}
            no-amd.md: {}
            no-anonymous-default-export.md: {}
            no-commonjs.md: {}
            no-cycle.md: {}
            no-default-export.md: {}
            no-deprecated.md: {}
            no-duplicates.md: {}
            no-dynamic-require.md: {}
            no-empty-named-blocks.md: {}
            no-extraneous-dependencies.md: {}
            no-import-module-exports.md: {}
            no-internal-modules.md: {}
            no-mutable-exports.md: {}
            no-named-as-default-member.md: {}
            no-named-as-default.md: {}
            no-named-default.md: {}
            no-named-export.md: {}
            no-namespace.md: {}
            no-nodejs-modules.md: {}
            no-relative-packages.md: {}
            no-relative-parent-imports.md: {}
            no-restricted-paths.md: {}
            no-self-import.md: {}
            no-unassigned-import.md: {}
            no-unresolved.md: {}
            no-unused-modules.md: {}
            no-useless-path-segments.md: {}
            no-webpack-loader-syntax.md: {}
            order.md: {}
            prefer-default-export.md: {}
            unambiguous.md: {}
        lib:
          ExportMap.js: {}
          core:
            importType.js: {}
            packagePath.js: {}
            staticRequire.js: {}
          docsUrl.js: {}
          importDeclaration.js: {}
          index.js: {}
          rules:
            consistent-type-specifier-style.js: {}
            default.js: {}
            dynamic-import-chunkname.js: {}
            export.js: {}
            exports-last.js: {}
            extensions.js: {}
            first.js: {}
            group-exports.js: {}
            imports-first.js: {}
            max-dependencies.js: {}
            named.js: {}
            namespace.js: {}
            newline-after-import.js: {}
            no-absolute-path.js: {}
            no-amd.js: {}
            no-anonymous-default-export.js: {}
            no-commonjs.js: {}
            no-cycle.js: {}
            no-default-export.js: {}
            no-deprecated.js: {}
            no-duplicates.js: {}
            no-dynamic-require.js: {}
            no-empty-named-blocks.js: {}
            no-extraneous-dependencies.js: {}
            no-import-module-exports.js: {}
            no-internal-modules.js: {}
            no-mutable-exports.js: {}
            no-named-as-default-member.js: {}
            no-named-as-default.js: {}
            no-named-default.js: {}
            no-named-export.js: {}
            no-namespace.js: {}
            no-nodejs-modules.js: {}
            no-relative-packages.js: {}
            no-relative-parent-imports.js: {}
            no-restricted-paths.js: {}
            no-self-import.js: {}
            no-unassigned-import.js: {}
            no-unresolved.js: {}
            no-unused-modules.js: {}
            no-useless-path-segments.js: {}
            no-webpack-loader-syntax.js: {}
            order.js: {}
            prefer-default-export.js: {}
            unambiguous.js: {}
        memo-parser:
          LICENSE: {}
          README.md: {}
          index.js: {}
        node_modules:
          .bin:
            semver: {}
          debug:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            node.js: {}
            package.json: {}
            src:
              browser.js: {}
              common.js: {}
              index.js: {}
              node.js: {}
          doctrine:
            CHANGELOG.md: {}
            LICENSE: {}
            LICENSE.closure-compiler: {}
            LICENSE.esprima: {}
            README.md: {}
            lib:
              doctrine.js: {}
              typed.js: {}
              utility.js: {}
            package.json: {}
          semver:
            LICENSE: {}
            README.md: {}
            bin:
              semver.js: {}
            package.json: {}
            range.bnf: {}
            semver.js: {}
        package.json: {}
      eslint-plugin-jest:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        docs:
          rules:
            consistent-test-it.md: {}
            expect-expect.md: {}
            max-nested-describe.md: {}
            no-alias-methods.md: {}
            no-commented-out-tests.md: {}
            no-conditional-expect.md: {}
            no-deprecated-functions.md: {}
            no-disabled-tests.md: {}
            no-done-callback.md: {}
            no-duplicate-hooks.md: {}
            no-export.md: {}
            no-focused-tests.md: {}
            no-hooks.md: {}
            no-identical-title.md: {}
            no-if.md: {}
            no-interpolation-in-snapshots.md: {}
            no-jasmine-globals.md: {}
            no-jest-import.md: {}
            no-large-snapshots.md: {}
            no-mocks-import.md: {}
            no-restricted-matchers.md: {}
            no-standalone-expect.md: {}
            no-test-prefixes.md: {}
            no-test-return-statement.md: {}
            prefer-called-with.md: {}
            prefer-comparison-matcher.md: {}
            prefer-equality-matcher.md: {}
            prefer-expect-assertions.md: {}
            prefer-expect-resolves.md: {}
            prefer-hooks-on-top.md: {}
            prefer-lowercase-title.md: {}
            prefer-spy-on.md: {}
            prefer-strict-equal.md: {}
            prefer-to-be.md: {}
            prefer-to-contain.md: {}
            prefer-to-have-length.md: {}
            prefer-todo.md: {}
            require-hook.md: {}
            require-to-throw-message.md: {}
            require-top-level-describe.md: {}
            unbound-method.md: {}
            valid-describe-callback.md: {}
            valid-expect-in-promise.md: {}
            valid-expect.md: {}
            valid-title.md: {}
        lib:
          globals.json: {}
          index.js: {}
          processors:
            snapshot-processor.js: {}
          rules:
            consistent-test-it.js: {}
            detectJestVersion.js: {}
            expect-expect.js: {}
            max-nested-describe.js: {}
            no-alias-methods.js: {}
            no-commented-out-tests.js: {}
            no-conditional-expect.js: {}
            no-deprecated-functions.js: {}
            no-disabled-tests.js: {}
            no-done-callback.js: {}
            no-duplicate-hooks.js: {}
            no-export.js: {}
            no-focused-tests.js: {}
            no-hooks.js: {}
            no-identical-title.js: {}
            no-if.js: {}
            no-interpolation-in-snapshots.js: {}
            no-jasmine-globals.js: {}
            no-jest-import.js: {}
            no-large-snapshots.js: {}
            no-mocks-import.js: {}
            no-restricted-matchers.js: {}
            no-standalone-expect.js: {}
            no-test-prefixes.js: {}
            no-test-return-statement.js: {}
            prefer-called-with.js: {}
            prefer-comparison-matcher.js: {}
            prefer-equality-matcher.js: {}
            prefer-expect-assertions.js: {}
            prefer-expect-resolves.js: {}
            prefer-hooks-on-top.js: {}
            prefer-lowercase-title.js: {}
            prefer-spy-on.js: {}
            prefer-strict-equal.js: {}
            prefer-to-be.js: {}
            prefer-to-contain.js: {}
            prefer-to-have-length.js: {}
            prefer-todo.js: {}
            require-hook.js: {}
            require-to-throw-message.js: {}
            require-top-level-describe.js: {}
            unbound-method.js: {}
            utils.js: {}
            valid-describe-callback.js: {}
            valid-expect-in-promise.js: {}
            valid-expect.js: {}
            valid-title.js: {}
        package.json: {}
      eslint-plugin-jsx-a11y:
        .babelrc: {}
        .eslintrc: {}
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        __mocks__:
          IdentifierMock.js: {}
          JSXAttributeMock.js: {}
          JSXElementMock.js: {}
          JSXExpressionContainerMock.js: {}
          JSXSpreadAttributeMock.js: {}
          JSXTextMock.js: {}
          LiteralMock.js: {}
          genInteractives.js: {}
        __tests__:
          __util__:
            axeMapping.js: {}
            helpers:
              getESLintCoreRule.js: {}
              parsers.js: {}
            parserOptionsMapper.js: {}
            ruleOptionsMapperFactory.js: {}
          index-test.js: {}
          src:
            rules:
              accessible-emoji-test.js: {}
              alt-text-test.js: {}
              anchor-ambiguous-text-test.js: {}
              anchor-has-content-test.js: {}
              anchor-is-valid-test.js: {}
              aria-activedescendant-has-tabindex-test.js: {}
              aria-props-test.js: {}
              aria-proptypes-test.js: {}
              aria-role-test.js: {}
              aria-unsupported-elements-test.js: {}
              autocomplete-valid-test.js: {}
              click-events-have-key-events-test.js: {}
              control-has-associated-label-test.js: {}
              heading-has-content-test.js: {}
              html-has-lang-test.js: {}
              iframe-has-title-test.js: {}
              img-redundant-alt-test.js: {}
              interactive-supports-focus-test.js: {}
              label-has-associated-control-test.js: {}
              label-has-for-test.js: {}
              lang-test.js: {}
              media-has-caption-test.js: {}
              mouse-events-have-key-events-test.js: {}
              no-access-key-test.js: {}
              no-aria-hidden-on-focusable-test.js: {}
              no-autofocus-test.js: {}
              no-distracting-elements-test.js: {}
              no-interactive-element-to-noninteractive-role-test.js: {}
              no-noninteractive-element-interactions-test.js: {}
              no-noninteractive-element-to-interactive-role-test.js: {}
              no-noninteractive-tabindex-test.js: {}
              no-onchange-test.js: {}
              no-redundant-roles-test.js: {}
              no-static-element-interactions-test.js: {}
              prefer-tag-over-role-test.js: {}
              role-has-required-aria-props-test.js: {}
              role-supports-aria-props-test.js: {}
              scope-test.js: {}
              tabindex-no-positive-test.js: {}
            util:
              attributesComparator-test.js: {}
              getAccessibleChildText-test.js: {}
              getComputedRole-test.js: {}
              getElementType-test.js: {}
              getExplicitRole-test.js: {}
              getImplicitRole-test.js: {}
              getSuggestion-test.js: {}
              getTabIndex-test.js: {}
              hasAccessibleChild-test.js: {}
              implicitRoles:
                input-test.js: {}
                menu-test.js: {}
                menuitem-test.js: {}
              isAbstractRole-test.js: {}
              isContentEditable-test.js: {}
              isDOMElement-test.js: {}
              isDisabledElement-test.js: {}
              isFocusable-test.js: {}
              isInteractiveElement-test.js: {}
              isInteractiveRole-test.js: {}
              isNonInteractiveElement-test.js: {}
              isNonInteractiveRole-test.js: {}
              isNonLiteralProperty-test.js: {}
              isSemanticRoleElement-test.js: {}
              mayContainChildComponent-test.js: {}
              mayHaveAccessibleLabel-test.js: {}
              parserOptionsMapper-test.js: {}
              schemas-test.js: {}
        docs:
          rules:
            accessible-emoji.md: {}
            alt-text.md: {}
            anchor-ambiguous-text.md: {}
            anchor-has-content.md: {}
            anchor-is-valid.md: {}
            aria-activedescendant-has-tabindex.md: {}
            aria-props.md: {}
            aria-proptypes.md: {}
            aria-role.md: {}
            aria-unsupported-elements.md: {}
            autocomplete-valid.md: {}
            click-events-have-key-events.md: {}
            control-has-associated-label.md: {}
            heading-has-content.md: {}
            html-has-lang.md: {}
            iframe-has-title.md: {}
            img-redundant-alt.md: {}
            interactive-supports-focus.md: {}
            label-has-associated-control.md: {}
            label-has-for.md: {}
            lang.md: {}
            media-has-caption.md: {}
            mouse-events-have-key-events.md: {}
            no-access-key.md: {}
            no-aria-hidden-on-focusable.md: {}
            no-autofocus.md: {}
            no-distracting-elements.md: {}
            no-interactive-element-to-noninteractive-role.md: {}
            no-noninteractive-element-interactions.md: {}
            no-noninteractive-element-to-interactive-role.md: {}
            no-noninteractive-tabindex.md: {}
            no-onchange.md: {}
            no-redundant-roles.md: {}
            no-static-element-interactions.md: {}
            prefer-tag-over-role.md: {}
            role-has-required-aria-props.md: {}
            role-supports-aria-props.md: {}
            scope.md: {}
            tabindex-no-positive.md: {}
        lib:
          index.js: {}
          rules:
            accessible-emoji.js: {}
            alt-text.js: {}
            anchor-ambiguous-text.js: {}
            anchor-has-content.js: {}
            anchor-is-valid.js: {}
            aria-activedescendant-has-tabindex.js: {}
            aria-props.js: {}
            aria-proptypes.js: {}
            aria-role.js: {}
            aria-unsupported-elements.js: {}
            autocomplete-valid.js: {}
            click-events-have-key-events.js: {}
            control-has-associated-label.js: {}
            heading-has-content.js: {}
            html-has-lang.js: {}
            iframe-has-title.js: {}
            img-redundant-alt.js: {}
            interactive-supports-focus.js: {}
            label-has-associated-control.js: {}
            label-has-for.js: {}
            lang.js: {}
            media-has-caption.js: {}
            mouse-events-have-key-events.js: {}
            no-access-key.js: {}
            no-aria-hidden-on-focusable.js: {}
            no-autofocus.js: {}
            no-distracting-elements.js: {}
            no-interactive-element-to-noninteractive-role.js: {}
            no-noninteractive-element-interactions.js: {}
            no-noninteractive-element-to-interactive-role.js: {}
            no-noninteractive-tabindex.js: {}
            no-onchange.js: {}
            no-redundant-roles.js: {}
            no-static-element-interactions.js: {}
            prefer-tag-over-role.js: {}
            role-has-required-aria-props.js: {}
            role-supports-aria-props.js: {}
            scope.js: {}
            tabindex-no-positive.js: {}
          util:
            attributesComparator.js: {}
            getAccessibleChildText.js: {}
            getComputedRole.js: {}
            getElementType.js: {}
            getExplicitRole.js: {}
            getImplicitRole.js: {}
            getSuggestion.js: {}
            getTabIndex.js: {}
            hasAccessibleChild.js: {}
            implicitRoles:
              a.js: {}
              area.js: {}
              article.js: {}
              aside.js: {}
              body.js: {}
              button.js: {}
              datalist.js: {}
              details.js: {}
              dialog.js: {}
              form.js: {}
              h1.js: {}
              h2.js: {}
              h3.js: {}
              h4.js: {}
              h5.js: {}
              h6.js: {}
              hr.js: {}
              img.js: {}
              index.js: {}
              input.js: {}
              li.js: {}
              link.js: {}
              menu.js: {}
              menuitem.js: {}
              meter.js: {}
              nav.js: {}
              ol.js: {}
              option.js: {}
              output.js: {}
              progress.js: {}
              section.js: {}
              select.js: {}
              tbody.js: {}
              textarea.js: {}
              tfoot.js: {}
              thead.js: {}
              ul.js: {}
            isAbstractRole.js: {}
            isContentEditable.js: {}
            isDOMElement.js: {}
            isDisabledElement.js: {}
            isFocusable.js: {}
            isHiddenFromScreenReader.js: {}
            isInteractiveElement.js: {}
            isInteractiveRole.js: {}
            isNonInteractiveElement.js: {}
            isNonInteractiveRole.js: {}
            isNonLiteralProperty.js: {}
            isPresentationRole.js: {}
            isSemanticRoleElement.js: {}
            mayContainChildComponent.js: {}
            mayHaveAccessibleLabel.js: {}
            schemas.js: {}
        package.json: {}
      eslint-plugin-react:
        LICENSE: {}
        README.md: {}
        configs:
          all.js: {}
          jsx-runtime.js: {}
          recommended.js: {}
        index.js: {}
        lib:
          rules:
            boolean-prop-naming.js: {}
            button-has-type.js: {}
            checked-requires-onchange-or-readonly.js: {}
            default-props-match-prop-types.js: {}
            destructuring-assignment.js: {}
            display-name.js: {}
            forbid-component-props.js: {}
            forbid-dom-props.js: {}
            forbid-elements.js: {}
            forbid-foreign-prop-types.js: {}
            forbid-prop-types.js: {}
            function-component-definition.js: {}
            hook-use-state.js: {}
            iframe-missing-sandbox.js: {}
            index.js: {}
            jsx-boolean-value.js: {}
            jsx-child-element-spacing.js: {}
            jsx-closing-bracket-location.js: {}
            jsx-closing-tag-location.js: {}
            jsx-curly-brace-presence.js: {}
            jsx-curly-newline.js: {}
            jsx-curly-spacing.js: {}
            jsx-equals-spacing.js: {}
            jsx-filename-extension.js: {}
            jsx-first-prop-new-line.js: {}
            jsx-fragments.js: {}
            jsx-handler-names.js: {}
            jsx-indent-props.js: {}
            jsx-indent.js: {}
            jsx-key.js: {}
            jsx-max-depth.js: {}
            jsx-max-props-per-line.js: {}
            jsx-newline.js: {}
            jsx-no-bind.js: {}
            jsx-no-comment-textnodes.js: {}
            jsx-no-constructed-context-values.js: {}
            jsx-no-duplicate-props.js: {}
            jsx-no-leaked-render.js: {}
            jsx-no-literals.js: {}
            jsx-no-script-url.js: {}
            jsx-no-target-blank.js: {}
            jsx-no-undef.js: {}
            jsx-no-useless-fragment.js: {}
            jsx-one-expression-per-line.js: {}
            jsx-pascal-case.js: {}
            jsx-props-no-multi-spaces.js: {}
            jsx-props-no-spreading.js: {}
            jsx-sort-default-props.js: {}
            jsx-sort-props.js: {}
            jsx-space-before-closing.js: {}
            jsx-tag-spacing.js: {}
            jsx-uses-react.js: {}
            jsx-uses-vars.js: {}
            jsx-wrap-multilines.js: {}
            no-access-state-in-setstate.js: {}
            no-adjacent-inline-elements.js: {}
            no-array-index-key.js: {}
            no-arrow-function-lifecycle.js: {}
            no-children-prop.js: {}
            no-danger-with-children.js: {}
            no-danger.js: {}
            no-deprecated.js: {}
            no-did-mount-set-state.js: {}
            no-did-update-set-state.js: {}
            no-direct-mutation-state.js: {}
            no-find-dom-node.js: {}
            no-invalid-html-attribute.js: {}
            no-is-mounted.js: {}
            no-multi-comp.js: {}
            no-namespace.js: {}
            no-object-type-as-default-prop.js: {}
            no-redundant-should-component-update.js: {}
            no-render-return-value.js: {}
            no-set-state.js: {}
            no-string-refs.js: {}
            no-this-in-sfc.js: {}
            no-typos.js: {}
            no-unescaped-entities.js: {}
            no-unknown-property.js: {}
            no-unsafe.js: {}
            no-unstable-nested-components.js: {}
            no-unused-class-component-methods.js: {}
            no-unused-prop-types.js: {}
            no-unused-state.js: {}
            no-will-update-set-state.js: {}
            prefer-es6-class.js: {}
            prefer-exact-props.js: {}
            prefer-read-only-props.js: {}
            prefer-stateless-function.js: {}
            prop-types.js: {}
            react-in-jsx-scope.js: {}
            require-default-props.js: {}
            require-optimization.js: {}
            require-render-return.js: {}
            self-closing-comp.js: {}
            sort-comp.js: {}
            sort-default-props.js: {}
            sort-prop-types.js: {}
            state-in-constructor.js: {}
            static-property-placement.js: {}
            style-prop-object.js: {}
            void-dom-elements-no-children.js: {}
          types.d.ts: {}
          util:
            Components.js: {}
            annotations.js: {}
            ast.js: {}
            componentUtil.js: {}
            defaultProps.js: {}
            docsUrl.js: {}
            error.js: {}
            getTokenBeforeClosingBracket.js: {}
            isCreateContext.js: {}
            isCreateElement.js: {}
            isDestructuredFromPragmaImport.js: {}
            isFirstLetterCapitalized.js: {}
            jsx.js: {}
            lifecycleMethods.js: {}
            linkComponents.js: {}
            log.js: {}
            makeNoMethodSetStateRule.js: {}
            message.js: {}
            pragma.js: {}
            propTypes.js: {}
            propTypesSort.js: {}
            propWrapper.js: {}
            props.js: {}
            report.js: {}
            usedPropTypes.js: {}
            variable.js: {}
            version.js: {}
        node_modules:
          .bin:
            resolve: {}
            semver: {}
          doctrine:
            CHANGELOG.md: {}
            LICENSE: {}
            LICENSE.closure-compiler: {}
            LICENSE.esprima: {}
            README.md: {}
            lib:
              doctrine.js: {}
              typed.js: {}
              utility.js: {}
            package.json: {}
          resolve:
            .editorconfig: {}
            .eslintrc: {}
            .github:
              FUNDING.yml: {}
            LICENSE: {}
            SECURITY.md: {}
            async.js: {}
            bin:
              resolve: {}
            example:
              async.js: {}
              sync.js: {}
            index.js: {}
            index.mjs: {}
            lib:
              async.js: {}
              caller.js: {}
              homedir.js: {}
              node-modules-paths.js: {}
              normalize-options.js: {}
              sync.js: {}
            package.json: {}
            readme.markdown: {}
            sync.js: {}
            test:
              dotdot:
                abc:
                  index.js: {}
                index.js: {}
              dotdot.js: {}
              faulty_basedir.js: {}
              filter.js: {}
              filter_sync.js: {}
              home_paths.js: {}
              home_paths_sync.js: {}
              mock.js: {}
              mock_sync.js: {}
              module_dir:
                xmodules:
                  aaa:
                    index.js: {}
                ymodules:
                  aaa:
                    index.js: {}
                zmodules:
                  bbb:
                    main.js: {}
                    package.json: {}
              module_dir.js: {}
              node-modules-paths.js: {}
              node_path:
                x:
                  aaa:
                    index.js: {}
                  ccc:
                    index.js: {}
                y:
                  bbb:
                    index.js: {}
                  ccc:
                    index.js: {}
              node_path.js: {}
              nonstring.js: {}
              pathfilter:
                deep_ref:
                  main.js: {}
              pathfilter.js: {}
              pathfilter_sync.js: {}
              precedence:
                aaa:
                  index.js: {}
                  main.js: {}
                aaa.js: {}
                bbb:
                  main.js: {}
                bbb.js: {}
              precedence.js: {}
              resolver:
                baz:
                  doom.js: {}
                  package.json: {}
                  quux.js: {}
                browser_field:
                  a.js: {}
                  b.js: {}
                  package.json: {}
                cup.coffee: {}
                dot_main:
                  index.js: {}
                  package.json: {}
                dot_slash_main:
                  index.js: {}
                  package.json: {}
                empty_main:
                  index.js: {}
                  package.json: {}
                false_main:
                  index.js: {}
                  package.json: {}
                foo.js: {}
                incorrect_main:
                  index.js: {}
                  package.json: {}
                invalid_main:
                  package.json: {}
                missing_index:
                  package.json: {}
                missing_main:
                  index.js: {}
                  package.json: {}
                mug.coffee: {}
                mug.js: {}
                multirepo:
                  lerna.json: {}
                  package.json: {}
                  packages:
                    package-a:
                      index.js: {}
                      package.json: {}
                    package-b:
                      index.js: {}
                      package.json: {}
                nested_symlinks:
                  mylib:
                    async.js: {}
                    package.json: {}
                    sync.js: {}
                null_main:
                  index.js: {}
                  package.json: {}
                other_path:
                  lib:
                    other-lib.js: {}
                  root.js: {}
                quux:
                  foo:
                    index.js: {}
                same_names:
                  foo:
                    index.js: {}
                  foo.js: {}
                symlinked:
                  _:
                    node_modules:
                      foo.js: {}
                    symlink_target:
                      .gitkeep: {}
                  package:
                    bar.js: {}
                    package.json: {}
                without_basedir:
                  main.js: {}
              resolver.js: {}
              resolver_sync.js: {}
              shadowed_core:
                node_modules:
                  util:
                    index.js: {}
              shadowed_core.js: {}
              subdirs.js: {}
              symlinks.js: {}
          semver:
            LICENSE: {}
            README.md: {}
            bin:
              semver.js: {}
            package.json: {}
            range.bnf: {}
            semver.js: {}
        package.json: {}
      eslint-plugin-react-hooks:
        LICENSE: {}
        README.md: {}
        cjs:
          eslint-plugin-react-hooks.development.js: {}
          eslint-plugin-react-hooks.production.min.js: {}
        index.js: {}
        package.json: {}
      eslint-plugin-testing-library:
        LICENSE: {}
        README.md: {}
        configs:
          angular.js: {}
          dom.js: {}
          index.js: {}
          marko.js: {}
          react.js: {}
          vue.js: {}
        create-testing-library-rule:
          detect-testing-library-utils.js: {}
          index.js: {}
        index.js: {}
        node-utils:
          index.js: {}
          is-node-of-type.js: {}
        package.json: {}
        rules:
          await-async-query.js: {}
          await-async-utils.js: {}
          await-fire-event.js: {}
          consistent-data-testid.js: {}
          index.js: {}
          no-await-sync-events.js: {}
          no-await-sync-query.js: {}
          no-container.js: {}
          no-debugging-utils.js: {}
          no-dom-import.js: {}
          no-global-regexp-flag-in-query.js: {}
          no-manual-cleanup.js: {}
          no-node-access.js: {}
          no-promise-in-fire-event.js: {}
          no-render-in-setup.js: {}
          no-unnecessary-act.js: {}
          no-wait-for-empty-callback.js: {}
          no-wait-for-multiple-assertions.js: {}
          no-wait-for-side-effects.js: {}
          no-wait-for-snapshot.js: {}
          prefer-explicit-assert.js: {}
          prefer-find-by.js: {}
          prefer-presence-queries.js: {}
          prefer-query-by-disappearance.js: {}
          prefer-query-matchers.js: {}
          prefer-screen-queries.js: {}
          prefer-user-event.js: {}
          prefer-wait-for.js: {}
          render-result-naming-convention.js: {}
        utils:
          file-import.js: {}
          index.js: {}
          types.js: {}
      eslint-scope:
        LICENSE: {}
        README.md: {}
        dist:
          eslint-scope.cjs: {}
        lib:
          definition.js: {}
          index.js: {}
          pattern-visitor.js: {}
          reference.js: {}
          referencer.js: {}
          scope-manager.js: {}
          scope.js: {}
          variable.js: {}
          version.js: {}
        package.json: {}
      eslint-visitor-keys:
        LICENSE: {}
        README.md: {}
        dist:
          eslint-visitor-keys.cjs: {}
          eslint-visitor-keys.d.cts: {}
          index.d.ts: {}
          visitor-keys.d.ts: {}
        lib:
          index.js: {}
          visitor-keys.js: {}
        package.json: {}
      eslint-webpack-plugin:
        LICENSE: {}
        README.md: {}
        dist:
          ESLintError.js: {}
          getESLint.js: {}
          index.js: {}
          linter.js: {}
          options.js: {}
          options.json: {}
          utils.js: {}
          worker.js: {}
        node_modules:
          ajv:
            .runkit_example.js: {}
            LICENSE: {}
            README.md: {}
            dist:
              2019.d.ts: {}
              2019.js: {}
              2019.js.map: {}
              2020.d.ts: {}
              2020.js: {}
              2020.js.map: {}
              ajv.d.ts: {}
              ajv.js: {}
              ajv.js.map: {}
              compile:
                codegen:
                  code.d.ts: {}
                  code.js: {}
                  code.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  scope.d.ts: {}
                  scope.js: {}
                  scope.js.map: {}
                errors.d.ts: {}
                errors.js: {}
                errors.js.map: {}
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                jtd:
                  parse.d.ts: {}
                  parse.js: {}
                  parse.js.map: {}
                  serialize.d.ts: {}
                  serialize.js: {}
                  serialize.js.map: {}
                  types.d.ts: {}
                  types.js: {}
                  types.js.map: {}
                names.d.ts: {}
                names.js: {}
                names.js.map: {}
                ref_error.d.ts: {}
                ref_error.js: {}
                ref_error.js.map: {}
                resolve.d.ts: {}
                resolve.js: {}
                resolve.js.map: {}
                rules.d.ts: {}
                rules.js: {}
                rules.js.map: {}
                util.d.ts: {}
                util.js: {}
                util.js.map: {}
                validate:
                  applicability.d.ts: {}
                  applicability.js: {}
                  applicability.js.map: {}
                  boolSchema.d.ts: {}
                  boolSchema.js: {}
                  boolSchema.js.map: {}
                  dataType.d.ts: {}
                  dataType.js: {}
                  dataType.js.map: {}
                  defaults.d.ts: {}
                  defaults.js: {}
                  defaults.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  keyword.d.ts: {}
                  keyword.js: {}
                  keyword.js.map: {}
                  subschema.d.ts: {}
                  subschema.js: {}
                  subschema.js.map: {}
              core.d.ts: {}
              core.js: {}
              core.js.map: {}
              jtd.d.ts: {}
              jtd.js: {}
              jtd.js.map: {}
              refs:
                data.json: {}
                json-schema-2019-09:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format.json: {}
                    meta-data.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-2020-12:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format-annotation.json: {}
                    meta-data.json: {}
                    unevaluated.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-draft-06.json: {}
                json-schema-draft-07.json: {}
                json-schema-secure.json: {}
                jtd-schema.d.ts: {}
                jtd-schema.js: {}
                jtd-schema.js.map: {}
              runtime:
                equal.d.ts: {}
                equal.js: {}
                equal.js.map: {}
                parseJson.d.ts: {}
                parseJson.js: {}
                parseJson.js.map: {}
                quote.d.ts: {}
                quote.js: {}
                quote.js.map: {}
                re2.d.ts: {}
                re2.js: {}
                re2.js.map: {}
                timestamp.d.ts: {}
                timestamp.js: {}
                timestamp.js.map: {}
                ucs2length.d.ts: {}
                ucs2length.js: {}
                ucs2length.js.map: {}
                uri.d.ts: {}
                uri.js: {}
                uri.js.map: {}
                validation_error.d.ts: {}
                validation_error.js: {}
                validation_error.js.map: {}
              standalone:
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                instance.d.ts: {}
                instance.js: {}
                instance.js.map: {}
              types:
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                json-schema.d.ts: {}
                json-schema.js: {}
                json-schema.js.map: {}
                jtd-schema.d.ts: {}
                jtd-schema.js: {}
                jtd-schema.js.map: {}
              vocabularies:
                applicator:
                  additionalItems.d.ts: {}
                  additionalItems.js: {}
                  additionalItems.js.map: {}
                  additionalProperties.d.ts: {}
                  additionalProperties.js: {}
                  additionalProperties.js.map: {}
                  allOf.d.ts: {}
                  allOf.js: {}
                  allOf.js.map: {}
                  anyOf.d.ts: {}
                  anyOf.js: {}
                  anyOf.js.map: {}
                  contains.d.ts: {}
                  contains.js: {}
                  contains.js.map: {}
                  dependencies.d.ts: {}
                  dependencies.js: {}
                  dependencies.js.map: {}
                  dependentSchemas.d.ts: {}
                  dependentSchemas.js: {}
                  dependentSchemas.js.map: {}
                  if.d.ts: {}
                  if.js: {}
                  if.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  items.d.ts: {}
                  items.js: {}
                  items.js.map: {}
                  items2020.d.ts: {}
                  items2020.js: {}
                  items2020.js.map: {}
                  not.d.ts: {}
                  not.js: {}
                  not.js.map: {}
                  oneOf.d.ts: {}
                  oneOf.js: {}
                  oneOf.js.map: {}
                  patternProperties.d.ts: {}
                  patternProperties.js: {}
                  patternProperties.js.map: {}
                  prefixItems.d.ts: {}
                  prefixItems.js: {}
                  prefixItems.js.map: {}
                  properties.d.ts: {}
                  properties.js: {}
                  properties.js.map: {}
                  propertyNames.d.ts: {}
                  propertyNames.js: {}
                  propertyNames.js.map: {}
                  thenElse.d.ts: {}
                  thenElse.js: {}
                  thenElse.js.map: {}
                code.d.ts: {}
                code.js: {}
                code.js.map: {}
                core:
                  id.d.ts: {}
                  id.js: {}
                  id.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  ref.d.ts: {}
                  ref.js: {}
                  ref.js.map: {}
                discriminator:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  types.d.ts: {}
                  types.js: {}
                  types.js.map: {}
                draft2020.d.ts: {}
                draft2020.js: {}
                draft2020.js.map: {}
                draft7.d.ts: {}
                draft7.js: {}
                draft7.js.map: {}
                dynamic:
                  dynamicAnchor.d.ts: {}
                  dynamicAnchor.js: {}
                  dynamicAnchor.js.map: {}
                  dynamicRef.d.ts: {}
                  dynamicRef.js: {}
                  dynamicRef.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  recursiveAnchor.d.ts: {}
                  recursiveAnchor.js: {}
                  recursiveAnchor.js.map: {}
                  recursiveRef.d.ts: {}
                  recursiveRef.js: {}
                  recursiveRef.js.map: {}
                errors.d.ts: {}
                errors.js: {}
                errors.js.map: {}
                format:
                  format.d.ts: {}
                  format.js: {}
                  format.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                jtd:
                  discriminator.d.ts: {}
                  discriminator.js: {}
                  discriminator.js.map: {}
                  elements.d.ts: {}
                  elements.js: {}
                  elements.js.map: {}
                  enum.d.ts: {}
                  enum.js: {}
                  enum.js.map: {}
                  error.d.ts: {}
                  error.js: {}
                  error.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  metadata.d.ts: {}
                  metadata.js: {}
                  metadata.js.map: {}
                  nullable.d.ts: {}
                  nullable.js: {}
                  nullable.js.map: {}
                  optionalProperties.d.ts: {}
                  optionalProperties.js: {}
                  optionalProperties.js.map: {}
                  properties.d.ts: {}
                  properties.js: {}
                  properties.js.map: {}
                  ref.d.ts: {}
                  ref.js: {}
                  ref.js.map: {}
                  type.d.ts: {}
                  type.js: {}
                  type.js.map: {}
                  union.d.ts: {}
                  union.js: {}
                  union.js.map: {}
                  values.d.ts: {}
                  values.js: {}
                  values.js.map: {}
                metadata.d.ts: {}
                metadata.js: {}
                metadata.js.map: {}
                next.d.ts: {}
                next.js: {}
                next.js.map: {}
                unevaluated:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  unevaluatedItems.d.ts: {}
                  unevaluatedItems.js: {}
                  unevaluatedItems.js.map: {}
                  unevaluatedProperties.d.ts: {}
                  unevaluatedProperties.js: {}
                  unevaluatedProperties.js.map: {}
                validation:
                  const.d.ts: {}
                  const.js: {}
                  const.js.map: {}
                  dependentRequired.d.ts: {}
                  dependentRequired.js: {}
                  dependentRequired.js.map: {}
                  enum.d.ts: {}
                  enum.js: {}
                  enum.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  limitContains.d.ts: {}
                  limitContains.js: {}
                  limitContains.js.map: {}
                  limitItems.d.ts: {}
                  limitItems.js: {}
                  limitItems.js.map: {}
                  limitLength.d.ts: {}
                  limitLength.js: {}
                  limitLength.js.map: {}
                  limitNumber.d.ts: {}
                  limitNumber.js: {}
                  limitNumber.js.map: {}
                  limitProperties.d.ts: {}
                  limitProperties.js: {}
                  limitProperties.js.map: {}
                  multipleOf.d.ts: {}
                  multipleOf.js: {}
                  multipleOf.js.map: {}
                  pattern.d.ts: {}
                  pattern.js: {}
                  pattern.js.map: {}
                  required.d.ts: {}
                  required.js: {}
                  required.js.map: {}
                  uniqueItems.d.ts: {}
                  uniqueItems.js: {}
                  uniqueItems.js.map: {}
            lib:
              2019.ts: {}
              2020.ts: {}
              ajv.ts: {}
              compile:
                codegen:
                  code.ts: {}
                  index.ts: {}
                  scope.ts: {}
                errors.ts: {}
                index.ts: {}
                jtd:
                  parse.ts: {}
                  serialize.ts: {}
                  types.ts: {}
                names.ts: {}
                ref_error.ts: {}
                resolve.ts: {}
                rules.ts: {}
                util.ts: {}
                validate:
                  applicability.ts: {}
                  boolSchema.ts: {}
                  dataType.ts: {}
                  defaults.ts: {}
                  index.ts: {}
                  keyword.ts: {}
                  subschema.ts: {}
              core.ts: {}
              jtd.ts: {}
              refs:
                data.json: {}
                json-schema-2019-09:
                  index.ts: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format.json: {}
                    meta-data.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-2020-12:
                  index.ts: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format-annotation.json: {}
                    meta-data.json: {}
                    unevaluated.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-draft-06.json: {}
                json-schema-draft-07.json: {}
                json-schema-secure.json: {}
                jtd-schema.ts: {}
              runtime:
                equal.ts: {}
                parseJson.ts: {}
                quote.ts: {}
                re2.ts: {}
                timestamp.ts: {}
                ucs2length.ts: {}
                uri.ts: {}
                validation_error.ts: {}
              standalone:
                index.ts: {}
                instance.ts: {}
              types:
                index.ts: {}
                json-schema.ts: {}
                jtd-schema.ts: {}
              vocabularies:
                applicator:
                  additionalItems.ts: {}
                  additionalProperties.ts: {}
                  allOf.ts: {}
                  anyOf.ts: {}
                  contains.ts: {}
                  dependencies.ts: {}
                  dependentSchemas.ts: {}
                  if.ts: {}
                  index.ts: {}
                  items.ts: {}
                  items2020.ts: {}
                  not.ts: {}
                  oneOf.ts: {}
                  patternProperties.ts: {}
                  prefixItems.ts: {}
                  properties.ts: {}
                  propertyNames.ts: {}
                  thenElse.ts: {}
                code.ts: {}
                core:
                  id.ts: {}
                  index.ts: {}
                  ref.ts: {}
                discriminator:
                  index.ts: {}
                  types.ts: {}
                draft2020.ts: {}
                draft7.ts: {}
                dynamic:
                  dynamicAnchor.ts: {}
                  dynamicRef.ts: {}
                  index.ts: {}
                  recursiveAnchor.ts: {}
                  recursiveRef.ts: {}
                errors.ts: {}
                format:
                  format.ts: {}
                  index.ts: {}
                jtd:
                  discriminator.ts: {}
                  elements.ts: {}
                  enum.ts: {}
                  error.ts: {}
                  index.ts: {}
                  metadata.ts: {}
                  nullable.ts: {}
                  optionalProperties.ts: {}
                  properties.ts: {}
                  ref.ts: {}
                  type.ts: {}
                  union.ts: {}
                  values.ts: {}
                metadata.ts: {}
                next.ts: {}
                unevaluated:
                  index.ts: {}
                  unevaluatedItems.ts: {}
                  unevaluatedProperties.ts: {}
                validation:
                  const.ts: {}
                  dependentRequired.ts: {}
                  enum.ts: {}
                  index.ts: {}
                  limitContains.ts: {}
                  limitItems.ts: {}
                  limitLength.ts: {}
                  limitNumber.ts: {}
                  limitProperties.ts: {}
                  multipleOf.ts: {}
                  pattern.ts: {}
                  required.ts: {}
                  uniqueItems.ts: {}
            package.json: {}
          ajv-keywords:
            LICENSE: {}
            README.md: {}
            dist:
              definitions:
                _range.d.ts: {}
                _range.js: {}
                _range.js.map: {}
                _required.d.ts: {}
                _required.js: {}
                _required.js.map: {}
                _types.d.ts: {}
                _types.js: {}
                _types.js.map: {}
                _util.d.ts: {}
                _util.js: {}
                _util.js.map: {}
                allRequired.d.ts: {}
                allRequired.js: {}
                allRequired.js.map: {}
                anyRequired.d.ts: {}
                anyRequired.js: {}
                anyRequired.js.map: {}
                deepProperties.d.ts: {}
                deepProperties.js: {}
                deepProperties.js.map: {}
                deepRequired.d.ts: {}
                deepRequired.js: {}
                deepRequired.js.map: {}
                dynamicDefaults.d.ts: {}
                dynamicDefaults.js: {}
                dynamicDefaults.js.map: {}
                exclusiveRange.d.ts: {}
                exclusiveRange.js: {}
                exclusiveRange.js.map: {}
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                instanceof.d.ts: {}
                instanceof.js: {}
                instanceof.js.map: {}
                oneRequired.d.ts: {}
                oneRequired.js: {}
                oneRequired.js.map: {}
                patternRequired.d.ts: {}
                patternRequired.js: {}
                patternRequired.js.map: {}
                prohibited.d.ts: {}
                prohibited.js: {}
                prohibited.js.map: {}
                range.d.ts: {}
                range.js: {}
                range.js.map: {}
                regexp.d.ts: {}
                regexp.js: {}
                regexp.js.map: {}
                select.d.ts: {}
                select.js: {}
                select.js.map: {}
                transform.d.ts: {}
                transform.js: {}
                transform.js.map: {}
                typeof.d.ts: {}
                typeof.js: {}
                typeof.js.map: {}
                uniqueItemProperties.d.ts: {}
                uniqueItemProperties.js: {}
                uniqueItemProperties.js.map: {}
              index.d.ts: {}
              index.js: {}
              index.js.map: {}
              keywords:
                allRequired.d.ts: {}
                allRequired.js: {}
                allRequired.js.map: {}
                anyRequired.d.ts: {}
                anyRequired.js: {}
                anyRequired.js.map: {}
                deepProperties.d.ts: {}
                deepProperties.js: {}
                deepProperties.js.map: {}
                deepRequired.d.ts: {}
                deepRequired.js: {}
                deepRequired.js.map: {}
                dynamicDefaults.d.ts: {}
                dynamicDefaults.js: {}
                dynamicDefaults.js.map: {}
                exclusiveRange.d.ts: {}
                exclusiveRange.js: {}
                exclusiveRange.js.map: {}
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                instanceof.d.ts: {}
                instanceof.js: {}
                instanceof.js.map: {}
                oneRequired.d.ts: {}
                oneRequired.js: {}
                oneRequired.js.map: {}
                patternRequired.d.ts: {}
                patternRequired.js: {}
                patternRequired.js.map: {}
                prohibited.d.ts: {}
                prohibited.js: {}
                prohibited.js.map: {}
                range.d.ts: {}
                range.js: {}
                range.js.map: {}
                regexp.d.ts: {}
                regexp.js: {}
                regexp.js.map: {}
                select.d.ts: {}
                select.js: {}
                select.js.map: {}
                transform.d.ts: {}
                transform.js: {}
                transform.js.map: {}
                typeof.d.ts: {}
                typeof.js: {}
                typeof.js.map: {}
                uniqueItemProperties.d.ts: {}
                uniqueItemProperties.js: {}
                uniqueItemProperties.js.map: {}
            package.json: {}
            src:
              definitions:
                _range.ts: {}
                _required.ts: {}
                _types.ts: {}
                _util.ts: {}
                allRequired.ts: {}
                anyRequired.ts: {}
                deepProperties.ts: {}
                deepRequired.ts: {}
                dynamicDefaults.ts: {}
                exclusiveRange.ts: {}
                index.ts: {}
                instanceof.ts: {}
                oneRequired.ts: {}
                patternRequired.ts: {}
                prohibited.ts: {}
                range.ts: {}
                regexp.ts: {}
                select.ts: {}
                transform.ts: {}
                typeof.ts: {}
                uniqueItemProperties.ts: {}
              index.ts: {}
              keywords:
                allRequired.ts: {}
                anyRequired.ts: {}
                deepProperties.ts: {}
                deepRequired.ts: {}
                dynamicDefaults.ts: {}
                exclusiveRange.ts: {}
                index.ts: {}
                instanceof.ts: {}
                oneRequired.ts: {}
                patternRequired.ts: {}
                prohibited.ts: {}
                range.ts: {}
                regexp.ts: {}
                select.ts: {}
                transform.ts: {}
                typeof.ts: {}
                uniqueItemProperties.ts: {}
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          jest-worker:
            LICENSE: {}
            README.md: {}
            build:
              Farm.js: {}
              FifoQueue.js: {}
              PriorityQueue.js: {}
              WorkerPool.js: {}
              base:
                BaseWorkerPool.js: {}
              index.d.ts: {}
              index.js: {}
              types.js: {}
              workers:
                ChildProcessWorker.js: {}
                NodeThreadsWorker.js: {}
                messageParent.js: {}
                processChild.js: {}
                threadChild.js: {}
            package.json: {}
          json-schema-traverse:
            .eslintrc.yml: {}
            .github:
              FUNDING.yml: {}
              workflows:
                build.yml: {}
                publish.yml: {}
            LICENSE: {}
            README.md: {}
            index.d.ts: {}
            index.js: {}
            package.json: {}
            spec:
              .eslintrc.yml: {}
              fixtures:
                schema.js: {}
              index.spec.js: {}
          schema-utils:
            LICENSE: {}
            README.md: {}
            declarations:
              ValidationError.d.ts: {}
              index.d.ts: {}
              keywords:
                absolutePath.d.ts: {}
                undefinedAsNull.d.ts: {}
              util:
                Range.d.ts: {}
                hints.d.ts: {}
                memorize.d.ts: {}
              validate.d.ts: {}
            dist:
              ValidationError.js: {}
              index.js: {}
              keywords:
                absolutePath.js: {}
                undefinedAsNull.js: {}
              util:
                Range.js: {}
                hints.js: {}
                memorize.js: {}
              validate.js: {}
            package.json: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
        types:
          ESLintError.d.ts: {}
          getESLint.d.ts: {}
          index.d.ts: {}
          linter.d.ts: {}
          options.d.ts: {}
          utils.d.ts: {}
          worker.d.ts: {}
      espree:
        LICENSE: {}
        README.md: {}
        dist:
          espree.cjs: {}
        espree.js: {}
        lib:
          espree.js: {}
          features.js: {}
          options.js: {}
          token-translator.js: {}
          version.js: {}
        package.json: {}
      esprima:
        ChangeLog: {}
        LICENSE.BSD: {}
        README.md: {}
        bin:
          esparse.js: {}
          esvalidate.js: {}
        dist:
          esprima.js: {}
        package.json: {}
      esquery:
        README.md: {}
        dist:
          esquery.esm.js: {}
          esquery.esm.min.js: {}
          esquery.esm.min.js.map: {}
          esquery.js: {}
          esquery.lite.js: {}
          esquery.lite.min.js: {}
          esquery.lite.min.js.map: {}
          esquery.min.js: {}
          esquery.min.js.map: {}
        license.txt: {}
        package.json: {}
        parser.js: {}
      esrecurse:
        .babelrc: {}
        README.md: {}
        esrecurse.js: {}
        gulpfile.babel.js: {}
        package.json: {}
      estraverse:
        .jshintrc: {}
        LICENSE.BSD: {}
        README.md: {}
        estraverse.js: {}
        gulpfile.js: {}
        package.json: {}
      estree-util-is-identifier-name:
        index.d.ts: {}
        index.js: {}
        lib:
          index.d.ts: {}
          index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      estree-walker:
        CHANGELOG.md: {}
        README.md: {}
        dist:
          estree-walker.umd.js: {}
          estree-walker.umd.js.map: {}
        package.json: {}
        src:
          estree-walker.js: {}
          index.ts: {}
        types:
          index.d.ts: {}
      esutils:
        LICENSE.BSD: {}
        README.md: {}
        lib:
          ast.js: {}
          code.js: {}
          keyword.js: {}
          utils.js: {}
        package.json: {}
      etag:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      eventemitter2:
        CHANGELOG.md: {}
        LICENSE.txt: {}
        README.md: {}
        eventemitter2.d.ts: {}
        index.js: {}
        lib:
          eventemitter2.js: {}
        package.json: {}
      eventemitter3:
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        umd:
          eventemitter3.js: {}
          eventemitter3.min.js: {}
          eventemitter3.min.js.map: {}
      events:
        .airtap.yml: {}
        .github:
          FUNDING.yml: {}
        .travis.yml: {}
        History.md: {}
        LICENSE: {}
        Readme.md: {}
        events.js: {}
        package.json: {}
        security.md: {}
        tests:
          add-listeners.js: {}
          check-listener-leaks.js: {}
          common.js: {}
          errors.js: {}
          events-list.js: {}
          events-once.js: {}
          index.js: {}
          legacy-compat.js: {}
          listener-count.js: {}
          listeners-side-effects.js: {}
          listeners.js: {}
          max-listeners.js: {}
          method-names.js: {}
          modify-in-emit.js: {}
          num-args.js: {}
          once.js: {}
          prepend.js: {}
          remove-all-listeners.js: {}
          remove-listeners.js: {}
          set-max-listeners-side-effects.js: {}
          special-event-names.js: {}
          subclass.js: {}
          symbols.js: {}
      execa:
        index.d.ts: {}
        index.js: {}
        lib:
          command.js: {}
          error.js: {}
          kill.js: {}
          promise.js: {}
          stdio.js: {}
          stream.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      exit:
        .jshintrc: {}
        .npmignore: {}
        .travis.yml: {}
        Gruntfile.js: {}
        LICENSE-MIT: {}
        README.md: {}
        lib:
          exit.js: {}
        package.json: {}
        test:
          exit_test.js: {}
          fixtures:
            10-stderr.txt: {}
            10-stdout-stderr.txt: {}
            10-stdout.txt: {}
            100-stderr.txt: {}
            100-stdout-stderr.txt: {}
            100-stdout.txt: {}
            1000-stderr.txt: {}
            1000-stdout-stderr.txt: {}
            1000-stdout.txt: {}
            create-files.sh: {}
            log-broken.js: {}
            log.js: {}
      expect:
        LICENSE: {}
        README.md: {}
        build:
          asymmetricMatchers.d.ts: {}
          asymmetricMatchers.js: {}
          extractExpectedAssertionsErrors.d.ts: {}
          extractExpectedAssertionsErrors.js: {}
          index.d.ts: {}
          index.js: {}
          jasmineUtils.d.ts: {}
          jasmineUtils.js: {}
          jestMatchersObject.d.ts: {}
          jestMatchersObject.js: {}
          matchers.d.ts: {}
          matchers.js: {}
          print.d.ts: {}
          print.js: {}
          spyMatchers.d.ts: {}
          spyMatchers.js: {}
          toThrowMatchers.d.ts: {}
          toThrowMatchers.js: {}
          types.d.ts: {}
          types.js: {}
          utils.d.ts: {}
          utils.js: {}
        package.json: {}
      express:
        History.md: {}
        LICENSE: {}
        Readme.md: {}
        index.js: {}
        lib:
          application.js: {}
          express.js: {}
          middleware:
            init.js: {}
            query.js: {}
          request.js: {}
          response.js: {}
          router:
            index.js: {}
            layer.js: {}
            route.js: {}
          utils.js: {}
          view.js: {}
        node_modules:
          debug:
            .coveralls.yml: {}
            .eslintrc: {}
            .npmignore: {}
            .travis.yml: {}
            CHANGELOG.md: {}
            LICENSE: {}
            Makefile: {}
            README.md: {}
            component.json: {}
            karma.conf.js: {}
            node.js: {}
            package.json: {}
            src:
              browser.js: {}
              debug.js: {}
              index.js: {}
              inspector-log.js: {}
              node.js: {}
          ms:
            index.js: {}
            license.md: {}
            package.json: {}
            readme.md: {}
        package.json: {}
      extend:
        .editorconfig: {}
        .eslintrc: {}
        .jscs.json: {}
        .travis.yml: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        component.json: {}
        index.js: {}
        package.json: {}
      extrareqp2:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        SECURITY.md: {}
        UPGRADE_GUIDE.md: {}
        dist:
          axios.js: {}
          axios.map: {}
          axios.min.js: {}
          axios.min.map: {}
        index.d.ts: {}
        index.js: {}
        lib:
          adapters:
            README.md: {}
            http.js: {}
            xhr.js: {}
          axios.js: {}
          cancel:
            Cancel.js: {}
            CancelToken.js: {}
            isCancel.js: {}
          core:
            Axios.js: {}
            InterceptorManager.js: {}
            README.md: {}
            buildFullPath.js: {}
            createError.js: {}
            dispatchRequest.js: {}
            enhanceError.js: {}
            mergeConfig.js: {}
            settle.js: {}
            transformData.js: {}
          defaults.js: {}
          helpers:
            README.md: {}
            bind.js: {}
            buildURL.js: {}
            combineURLs.js: {}
            cookies.js: {}
            deprecatedMethod.js: {}
            isAbsoluteURL.js: {}
            isAxiosError.js: {}
            isURLSameOrigin.js: {}
            normalizeHeaderName.js: {}
            parseHeaders.js: {}
            spread.js: {}
            validator.js: {}
          utils.js: {}
        package.json: {}
      fast-deep-equal:
        LICENSE: {}
        README.md: {}
        es6:
          index.d.ts: {}
          index.js: {}
          react.d.ts: {}
          react.js: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        react.d.ts: {}
        react.js: {}
      fast-glob:
        LICENSE: {}
        README.md: {}
        node_modules:
          glob-parent:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
        out:
          index.d.ts: {}
          index.js: {}
          managers:
            tasks.d.ts: {}
            tasks.js: {}
          providers:
            async.d.ts: {}
            async.js: {}
            filters:
              deep.d.ts: {}
              deep.js: {}
              entry.d.ts: {}
              entry.js: {}
              error.d.ts: {}
              error.js: {}
            matchers:
              matcher.d.ts: {}
              matcher.js: {}
              partial.d.ts: {}
              partial.js: {}
            provider.d.ts: {}
            provider.js: {}
            stream.d.ts: {}
            stream.js: {}
            sync.d.ts: {}
            sync.js: {}
            transformers:
              entry.d.ts: {}
              entry.js: {}
          readers:
            async.d.ts: {}
            async.js: {}
            reader.d.ts: {}
            reader.js: {}
            stream.d.ts: {}
            stream.js: {}
            sync.d.ts: {}
            sync.js: {}
          settings.d.ts: {}
          settings.js: {}
          types:
            index.d.ts: {}
            index.js: {}
          utils:
            array.d.ts: {}
            array.js: {}
            errno.d.ts: {}
            errno.js: {}
            fs.d.ts: {}
            fs.js: {}
            index.d.ts: {}
            index.js: {}
            path.d.ts: {}
            path.js: {}
            pattern.d.ts: {}
            pattern.js: {}
            stream.d.ts: {}
            stream.js: {}
            string.d.ts: {}
            string.js: {}
        package.json: {}
      fast-json-patch:
        LICENSE.txt: {}
        README.md: {}
        commonjs:
          core.d.ts: {}
          core.js: {}
          duplex.d.ts: {}
          duplex.js: {}
          helpers.d.ts: {}
          helpers.js: {}
        dist:
          fast-json-patch.js: {}
          fast-json-patch.min.js: {}
        index.d.ts: {}
        index.js: {}
        index.mjs: {}
        index.ts: {}
        jasmine-run.mjs: {}
        module:
          core.d.ts: {}
          core.mjs: {}
          duplex.d.ts: {}
          duplex.mjs: {}
          helpers.d.ts: {}
          helpers.mjs: {}
        package.json: {}
        tsc-to-mjs.sh: {}
        webpack.config.js: {}
      fast-json-stable-stringify:
        .eslintrc.yml: {}
        .github:
          FUNDING.yml: {}
        .travis.yml: {}
        LICENSE: {}
        README.md: {}
        benchmark:
          index.js: {}
          test.json: {}
        example:
          key_cmp.js: {}
          nested.js: {}
          str.js: {}
          value_cmp.js: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          cmp.js: {}
          nested.js: {}
          str.js: {}
          to-json.js: {}
      fast-levenshtein:
        LICENSE.md: {}
        README.md: {}
        levenshtein.js: {}
        package.json: {}
      fastq:
        .github:
          dependabot.yml: {}
          workflows:
            ci.yml: {}
        LICENSE: {}
        README.md: {}
        bench.js: {}
        example.js: {}
        example.mjs: {}
        index.d.ts: {}
        package.json: {}
        queue.js: {}
        test:
          example.ts: {}
          promise.js: {}
          test.js: {}
          tsconfig.json: {}
      fault:
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      faye-websocket:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        lib:
          faye:
            eventsource.js: {}
            websocket:
              api:
                event.js: {}
                event_target.js: {}
              api.js: {}
              client.js: {}
            websocket.js: {}
        package.json: {}
      fb-watchman:
        README.md: {}
        index.js: {}
        package.json: {}
      fclone:
        .npmignore: {}
        .travis.yml: {}
        LICENSE: {}
        README.md: {}
        bench:
          index.js: {}
          looparr.js: {}
          loopobj.js: {}
          package.json: {}
        bower.json: {}
        dist:
          fclone.d.ts: {}
          fclone.js: {}
          fclone.min.js: {}
        fclone.d.ts: {}
        package.json: {}
        src:
          fclone.js: {}
      file-entry-cache:
        LICENSE: {}
        README.md: {}
        cache.js: {}
        changelog.md: {}
        package.json: {}
      file-loader:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        dist:
          cjs.js: {}
          index.js: {}
          options.json: {}
          utils.js: {}
        package.json: {}
      filelist:
        README.md: {}
        index.d.ts: {}
        index.js: {}
        jakefile.js: {}
        node_modules:
          brace-expansion:
            .github:
              FUNDING.yml: {}
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          minimatch:
            LICENSE: {}
            README.md: {}
            lib:
              path.js: {}
            minimatch.js: {}
            package.json: {}
        package.json: {}
      filesize:
        LICENSE: {}
        README.md: {}
        filesize.d.ts: {}
        lib:
          filesize.es6.js: {}
          filesize.es6.min.js: {}
          filesize.es6.min.js.map: {}
          filesize.esm.js: {}
          filesize.esm.min.js: {}
          filesize.esm.min.js.map: {}
          filesize.js: {}
          filesize.min.js: {}
          filesize.min.js.map: {}
        package.json: {}
      fill-range:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      finalhandler:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        SECURITY.md: {}
        index.js: {}
        node_modules:
          debug:
            .coveralls.yml: {}
            .eslintrc: {}
            .npmignore: {}
            .travis.yml: {}
            CHANGELOG.md: {}
            LICENSE: {}
            Makefile: {}
            README.md: {}
            component.json: {}
            karma.conf.js: {}
            node.js: {}
            package.json: {}
            src:
              browser.js: {}
              debug.js: {}
              index.js: {}
              inspector-log.js: {}
              node.js: {}
          ms:
            index.js: {}
            license.md: {}
            package.json: {}
            readme.md: {}
        package.json: {}
      find-cache-dir:
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      find-up:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      flat-cache:
        LICENSE: {}
        README.md: {}
        changelog.md: {}
        package.json: {}
        src:
          cache.js: {}
          del.js: {}
          utils.js: {}
      flatted:
        LICENSE: {}
        README.md: {}
        cjs:
          index.js: {}
          package.json: {}
        es.js: {}
        esm:
          index.js: {}
        esm.js: {}
        index.js: {}
        min.js: {}
        package.json: {}
        php:
          flatted.php: {}
        python:
          __pycache__:
            flatted.cpython-311.pyc: {}
          flatted.py:
            classes:
            - end_line: 22
              methods:
              - end_line: 22
                name: __init__
                start_line: 20
                text:
                - '    def __init__(self):'
                - '        self.key = []'
                - '        self.value = []'
              name: _Known
              start_line: 19
              text:
              - 'class _Known:'
              - '    def __init__(self):'
              - '        self.key = []'
              - '        self.value = []'
            - end_line: 26
              methods:
              - end_line: 26
                name: __init__
                start_line: 25
                text:
                - '    def __init__(self, value):'
                - '        self.value = value'
              name: _String
              start_line: 24
              text:
              - 'class _String:'
              - '    def __init__(self, value):'
              - '        self.value = value'
            functions:
            - end_line: 35
              name: _array_keys
              start_line: 29
              text:
              - 'def _array_keys(value):'
              - '    keys = []'
              - '    i = 0'
              - '    for _ in value:'
              - '        keys.append(i)'
              - '        i += 1'
              - '    return keys'
            - end_line: 41
              name: _object_keys
              start_line: 37
              text:
              - 'def _object_keys(value):'
              - '    keys = []'
              - '    for key in value:'
              - '        keys.append(key)'
              - '    return keys'
            - end_line: 44
              name: _is_array
              start_line: 43
              text:
              - 'def _is_array(value):'
              - '    return isinstance(value, list) or isinstance(value, tuple)'
            - end_line: 47
              name: _is_object
              start_line: 46
              text:
              - 'def _is_object(value):'
              - '    return isinstance(value, dict)'
            - end_line: 50
              name: _is_string
              start_line: 49
              text:
              - 'def _is_string(value):'
              - '    return isinstance(value, str)'
            - end_line: 57
              name: _index
              start_line: 52
              text:
              - 'def _index(known, input, value):'
              - '    input.append(value)'
              - '    index = str(len(input) - 1)'
              - '    known.key.append(value)'
              - '    known.value.append(index)'
              - '    return index'
            - end_line: 65
              name: _loop
              start_line: 59
              text:
              - 'def _loop(keys, input, known, output):'
              - '    for key in keys:'
              - '        value = output[key]'
              - '        if isinstance(value, _String):'
              - '            _ref(key, input[int(value.value)], input, known, output)'
              - ''
              - '    return output'
            - end_line: 75
              name: _ref
              start_line: 67
              text:
              - 'def _ref(key, value, input, known, output):'
              - '    if _is_array(value) and not value in known:'
              - '        known.append(value)'
              - '        value = _loop(_array_keys(value), input, known, value)'
              - '    elif _is_object(value) and not value in known:'
              - '        known.append(value)'
              - '        value = _loop(_object_keys(value), input, known, value)'
              - ''
              - '    output[key] = value'
            - end_line: 84
              name: _relate
              start_line: 77
              text:
              - 'def _relate(known, input, value):'
              - '    if _is_string(value) or _is_array(value) or _is_object(value):'
              - '        try:'
              - '            return known.value[known.key.index(value)]'
              - '        except:'
              - '            return _index(known, input, value)'
              - ''
              - '    return value'
            - end_line: 99
              name: _transform
              start_line: 86
              text:
              - 'def _transform(known, input, value):'
              - '    if _is_array(value):'
              - '        output = []'
              - '        for val in value:'
              - '            output.append(_relate(known, input, val))'
              - '        return output'
              - ''
              - '    if _is_object(value):'
              - '        obj = {}'
              - '        for key in value:'
              - '            obj[key] = _relate(known, input, value[key])'
              - '        return obj'
              - ''
              - '    return value'
            - end_line: 115
              name: _wrap
              start_line: 101
              text:
              - 'def _wrap(value):'
              - '    if _is_string(value):'
              - '        return _String(value)'
              - ''
              - '    if _is_array(value):'
              - '        i = 0'
              - '        for val in value:'
              - '            value[i] = _wrap(val)'
              - '            i += 1'
              - ''
              - '    elif _is_object(value):'
              - '        for key in value:'
              - '            value[key] = _wrap(value[key])'
              - ''
              - '    return value'
            - end_line: 138
              name: parse
              start_line: 117
              text:
              - 'def parse(value, *args, **kwargs):'
              - '    json = _json.loads(value, *args, **kwargs)'
              - '    wrapped = []'
              - '    for value in json:'
              - '        wrapped.append(_wrap(value))'
              - ''
              - '    input = []'
              - '    for value in wrapped:'
              - '        if isinstance(value, _String):'
              - '            input.append(value.value)'
              - '        else:'
              - '            input.append(value)'
              - ''
              - '    value = input[0]'
              - ''
              - '    if _is_array(value):'
              - '        return _loop(_array_keys(value), input, [value], value)'
              - ''
              - '    if _is_object(value):'
              - '        return _loop(_object_keys(value), input, [value], value)'
              - ''
              - '    return value'
            - end_line: 149
              name: stringify
              start_line: 141
              text:
              - 'def stringify(value, *args, **kwargs):'
              - '    known = _Known()'
              - '    input = []'
              - '    output = []'
              - '    i = int(_index(known, input, value))'
              - '    while i < len(input):'
              - '        output.append(_transform(known, input, input[i]))'
              - '        i += 1'
              - '    return _json.dumps(output, *args, **kwargs)'
            text:
            - '# ISC License'
            - '#'
            - '# Copyright (c) 2018-2021, Andrea Giammarchi, @WebReflection'
            - '#'
            - '# Permission to use, copy, modify, and/or distribute this software
              for any'
            - '# purpose with or without fee is hereby granted, provided that the
              above'
            - '# copyright notice and this permission notice appear in all copies.'
            - '#'
            - '# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
              WITH'
            - '# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY'
            - '# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
              DIRECT,'
            - '# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
              FROM'
            - '# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE'
            - '# OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
              USE OR'
            - '# PERFORMANCE OF THIS SOFTWARE.'
            - ''
            - import json as _json
            - ''
            - 'class _Known:'
            - '    def __init__(self):'
            - '        self.key = []'
            - '        self.value = []'
            - ''
            - 'class _String:'
            - '    def __init__(self, value):'
            - '        self.value = value'
            - ''
            - ''
            - 'def _array_keys(value):'
            - '    keys = []'
            - '    i = 0'
            - '    for _ in value:'
            - '        keys.append(i)'
            - '        i += 1'
            - '    return keys'
            - ''
            - 'def _object_keys(value):'
            - '    keys = []'
            - '    for key in value:'
            - '        keys.append(key)'
            - '    return keys'
            - ''
            - 'def _is_array(value):'
            - '    return isinstance(value, list) or isinstance(value, tuple)'
            - ''
            - 'def _is_object(value):'
            - '    return isinstance(value, dict)'
            - ''
            - 'def _is_string(value):'
            - '    return isinstance(value, str)'
            - ''
            - 'def _index(known, input, value):'
            - '    input.append(value)'
            - '    index = str(len(input) - 1)'
            - '    known.key.append(value)'
            - '    known.value.append(index)'
            - '    return index'
            - ''
            - 'def _loop(keys, input, known, output):'
            - '    for key in keys:'
            - '        value = output[key]'
            - '        if isinstance(value, _String):'
            - '            _ref(key, input[int(value.value)], input, known, output)'
            - ''
            - '    return output'
            - ''
            - 'def _ref(key, value, input, known, output):'
            - '    if _is_array(value) and not value in known:'
            - '        known.append(value)'
            - '        value = _loop(_array_keys(value), input, known, value)'
            - '    elif _is_object(value) and not value in known:'
            - '        known.append(value)'
            - '        value = _loop(_object_keys(value), input, known, value)'
            - ''
            - '    output[key] = value'
            - ''
            - 'def _relate(known, input, value):'
            - '    if _is_string(value) or _is_array(value) or _is_object(value):'
            - '        try:'
            - '            return known.value[known.key.index(value)]'
            - '        except:'
            - '            return _index(known, input, value)'
            - ''
            - '    return value'
            - ''
            - 'def _transform(known, input, value):'
            - '    if _is_array(value):'
            - '        output = []'
            - '        for val in value:'
            - '            output.append(_relate(known, input, val))'
            - '        return output'
            - ''
            - '    if _is_object(value):'
            - '        obj = {}'
            - '        for key in value:'
            - '            obj[key] = _relate(known, input, value[key])'
            - '        return obj'
            - ''
            - '    return value'
            - ''
            - 'def _wrap(value):'
            - '    if _is_string(value):'
            - '        return _String(value)'
            - ''
            - '    if _is_array(value):'
            - '        i = 0'
            - '        for val in value:'
            - '            value[i] = _wrap(val)'
            - '            i += 1'
            - ''
            - '    elif _is_object(value):'
            - '        for key in value:'
            - '            value[key] = _wrap(value[key])'
            - ''
            - '    return value'
            - ''
            - 'def parse(value, *args, **kwargs):'
            - '    json = _json.loads(value, *args, **kwargs)'
            - '    wrapped = []'
            - '    for value in json:'
            - '        wrapped.append(_wrap(value))'
            - ''
            - '    input = []'
            - '    for value in wrapped:'
            - '        if isinstance(value, _String):'
            - '            input.append(value.value)'
            - '        else:'
            - '            input.append(value)'
            - ''
            - '    value = input[0]'
            - ''
            - '    if _is_array(value):'
            - '        return _loop(_array_keys(value), input, [value], value)'
            - ''
            - '    if _is_object(value):'
            - '        return _loop(_object_keys(value), input, [value], value)'
            - ''
            - '    return value'
            - ''
            - ''
            - 'def stringify(value, *args, **kwargs):'
            - '    known = _Known()'
            - '    input = []'
            - '    output = []'
            - '    i = int(_index(known, input, value))'
            - '    while i < len(input):'
            - '        output.append(_transform(known, input, input[i]))'
            - '        i += 1'
            - '    return _json.dumps(output, *args, **kwargs)'
          test.py:
            classes: []
            functions:
            - end_line: 4
              name: stringify
              start_line: 3
              text:
              - 'def stringify(value):'
              - '    return _stringify(value, separators=('','', '':''))'
            text:
            - from flatted import stringify as _stringify, parse
            - ''
            - 'def stringify(value):'
            - '    return _stringify(value, separators=('','', '':''))'
            - ''
            - assert stringify([None, None]) == '[[null,null]]'
            - ''
            - a = []
            - o = {}
            - ''
            - assert stringify(a) == '[[]]'
            - assert stringify(o) == '[{}]'
            - ''
            - a.append(a)
            - o['o'] = o
            - ''
            - assert stringify(a) == '[["0"]]'
            - assert stringify(o) == '[{"o":"0"}]'
            - ''
            - b = parse(stringify(a))
            - assert isinstance(b, list) and b[0] == b
            - ''
            - a.append(1)
            - a.append('two')
            - a.append(True)
            - o['one'] = 1
            - o['two'] = 'two'
            - o['three'] = True
            - ''
            - assert stringify(a) == '[["0",1,"1",true],"two"]'
            - assert stringify(o) == '[{"o":"0","one":1,"two":"1","three":true},"two"]'
            - ''
            - a.append(o)
            - o['a'] = a
            - ''
            - assert stringify(a) == '[["0",1,"1",true,"2"],"two",{"o":"2","one":1,"two":"1","three":true,"a":"0"}]'
            - assert stringify(o) == '[{"o":"0","one":1,"two":"1","three":true,"a":"2"},"two",["2",1,"1",true,"0"]]'
            - ''
            - 'a.append({''test'': ''OK''})'
            - a.append([1, 2, 3])
            - ''
            - 'o[''test''] = {''test'': ''OK''}'
            - o['array'] = [1, 2, 3]
            - ''
            - assert stringify(a) == '[["0",1,"1",true,"2","3","4"],"two",{"o":"2","one":1,"two":"1","three":true,"a":"0","test":"3","array":"4"},{"test":"5"},[1,2,3],"OK"]'
            - assert stringify(o) == '[{"o":"0","one":1,"two":"1","three":true,"a":"2","test":"3","array":"4"},"two",["2",1,"1",true,"0","3","4"],{"test":"5"},[1,2,3],"OK"]'
            - ''
            - a2 = parse(stringify(a));
            - o2 = parse(stringify(o));
            - ''
            - assert a2[0] == a2
            - assert o2['o'] == o2
            - ''
            - assert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4],
              dict)
            - assert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']
            - ''
            - str = parse('[{"prop":"1","a":"2","b":"3"},{"value":123},["4","5"],{"e":"6","t":"7","p":4},{},{"b":"8"},"f",{"a":"9"},["10"],"sup",{"a":1,"d":2,"c":"7","z":"11","h":1},{"g":2,"a":"7","b":"12","f":6},{"r":4,"u":"7","c":5}]')
            - assert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']
            - ''
            - oo = parse('[{"a":"1","b":"0","c":"2"},{"aa":"3"},{"ca":"4","cb":"5","cc":"6","cd":"7","ce":"8","cf":"9"},{"aaa":"10"},{"caa":"4"},{"cba":"5"},{"cca":"2"},{"cda":"4"},"value2","value3","value1"]');
            - assert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa']
              == oo['c']['ca']
            - ''
            - print('OK')
        types:
          index.d.ts: {}
      follow-redirects:
        LICENSE: {}
        README.md: {}
        debug.js: {}
        http.js: {}
        https.js: {}
        index.js: {}
        package.json: {}
      for-each:
        .editorconfig: {}
        .eslintrc: {}
        .travis.yml: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          .eslintrc: {}
          test.js: {}
      foreground-child:
        LICENSE: {}
        README.md: {}
        dist:
          cjs:
            all-signals.d.ts: {}
            all-signals.d.ts.map: {}
            all-signals.js: {}
            all-signals.js.map: {}
            index.d.ts: {}
            index.d.ts.map: {}
            index.js: {}
            index.js.map: {}
            package.json: {}
            watchdog.d.ts: {}
            watchdog.d.ts.map: {}
            watchdog.js: {}
            watchdog.js.map: {}
          mjs:
            all-signals.d.ts: {}
            all-signals.d.ts.map: {}
            all-signals.js: {}
            all-signals.js.map: {}
            index.d.ts: {}
            index.d.ts.map: {}
            index.js: {}
            index.js.map: {}
            package.json: {}
            watchdog.d.ts: {}
            watchdog.d.ts.map: {}
            watchdog.js: {}
            watchdog.js.map: {}
        node_modules:
          signal-exit:
            LICENSE.txt: {}
            README.md: {}
            dist:
              cjs:
                browser.d.ts: {}
                browser.d.ts.map: {}
                browser.js: {}
                browser.js.map: {}
                index.d.ts: {}
                index.d.ts.map: {}
                index.js: {}
                index.js.map: {}
                package.json: {}
                signals.d.ts: {}
                signals.d.ts.map: {}
                signals.js: {}
                signals.js.map: {}
              mjs:
                browser.d.ts: {}
                browser.d.ts.map: {}
                browser.js: {}
                browser.js.map: {}
                index.d.ts: {}
                index.d.ts.map: {}
                index.js: {}
                index.js.map: {}
                package.json: {}
                signals.d.ts: {}
                signals.d.ts.map: {}
                signals.js: {}
                signals.js.map: {}
            package.json: {}
        package.json: {}
      fork-ts-checker-webpack-plugin:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        changelog.config.js: {}
        lib:
          ForkTsCheckerWebpackPlugin.d.ts: {}
          ForkTsCheckerWebpackPlugin.js: {}
          ForkTsCheckerWebpackPluginConfiguration.d.ts: {}
          ForkTsCheckerWebpackPluginConfiguration.js: {}
          ForkTsCheckerWebpackPluginOptions.d.ts: {}
          ForkTsCheckerWebpackPluginOptions.js: {}
          ForkTsCheckerWebpackPluginOptions.json: {}
          ForkTsCheckerWebpackPluginState.d.ts: {}
          ForkTsCheckerWebpackPluginState.js: {}
          error:
            OperationCanceledError.d.ts: {}
            OperationCanceledError.js: {}
          eslint-reporter:
            EsLintReporterConfiguration.d.ts: {}
            EsLintReporterConfiguration.js: {}
            EsLintReporterOptions.d.ts: {}
            EsLintReporterOptions.js: {}
            assertEsLintSupport.d.ts: {}
            assertEsLintSupport.js: {}
            issue:
              EsLintIssueFactory.d.ts: {}
              EsLintIssueFactory.js: {}
            reporter:
              EsLintReporter.d.ts: {}
              EsLintReporter.js: {}
              EsLintReporterRpcClient.d.ts: {}
              EsLintReporterRpcClient.js: {}
              EsLintReporterRpcService.d.ts: {}
              EsLintReporterRpcService.js: {}
            types:
              eslint.d.ts: {}
              eslint.js: {}
          formatter:
            BasicFormatter.d.ts: {}
            BasicFormatter.js: {}
            CodeFrameFormatter.d.ts: {}
            CodeFrameFormatter.js: {}
            Formatter.d.ts: {}
            Formatter.js: {}
            FormatterConfiguration.d.ts: {}
            FormatterConfiguration.js: {}
            FormatterFactory.d.ts: {}
            FormatterFactory.js: {}
            FormatterOptions.d.ts: {}
            FormatterOptions.js: {}
            WebpackFormatter.d.ts: {}
            WebpackFormatter.js: {}
            index.d.ts: {}
            index.js: {}
            types:
              babel__code-frame.d.ts: {}
              babel__code-frame.js: {}
          hooks:
            interceptDoneToGetWebpackDevServerTap.d.ts: {}
            interceptDoneToGetWebpackDevServerTap.js: {}
            pluginHooks.d.ts: {}
            pluginHooks.js: {}
            tapAfterCompileToAddDependencies.d.ts: {}
            tapAfterCompileToAddDependencies.js: {}
            tapAfterCompileToGetIssues.d.ts: {}
            tapAfterCompileToGetIssues.js: {}
            tapAfterEnvironmentToPatchWatching.d.ts: {}
            tapAfterEnvironmentToPatchWatching.js: {}
            tapDoneToAsyncGetIssues.d.ts: {}
            tapDoneToAsyncGetIssues.js: {}
            tapErrorToLogMessage.d.ts: {}
            tapErrorToLogMessage.js: {}
            tapStartToConnectAndRunReporter.d.ts: {}
            tapStartToConnectAndRunReporter.js: {}
            tapStopToDisconnectReporter.d.ts: {}
            tapStopToDisconnectReporter.js: {}
          index.d.ts: {}
          index.js: {}
          issue:
            Issue.d.ts: {}
            Issue.js: {}
            IssueConfiguration.d.ts: {}
            IssueConfiguration.js: {}
            IssueLocation.d.ts: {}
            IssueLocation.js: {}
            IssueMatch.d.ts: {}
            IssueMatch.js: {}
            IssueOptions.d.ts: {}
            IssueOptions.js: {}
            IssuePosition.d.ts: {}
            IssuePosition.js: {}
            IssuePredicate.d.ts: {}
            IssuePredicate.js: {}
            IssueSeverity.d.ts: {}
            IssueSeverity.js: {}
            IssueWebpackError.d.ts: {}
            IssueWebpackError.js: {}
            index.d.ts: {}
            index.js: {}
          logger:
            Logger.d.ts: {}
            Logger.js: {}
            LoggerConfiguration.d.ts: {}
            LoggerConfiguration.js: {}
            LoggerFactory.d.ts: {}
            LoggerFactory.js: {}
            LoggerOptions.d.ts: {}
            LoggerOptions.js: {}
            PartialLogger.d.ts: {}
            PartialLogger.js: {}
            WebpackInfrastructureLogger.d.ts: {}
            WebpackInfrastructureLogger.js: {}
          profile:
            Performance.d.ts: {}
            Performance.js: {}
          reporter:
            AggregatedReporter.d.ts: {}
            AggregatedReporter.js: {}
            FilesChange.d.ts: {}
            FilesChange.js: {}
            FilesMatch.d.ts: {}
            FilesMatch.js: {}
            Report.d.ts: {}
            Report.js: {}
            Reporter.d.ts: {}
            Reporter.js: {}
            index.d.ts: {}
            index.js: {}
            reporter-rpc:
              ReporterRpcClient.d.ts: {}
              ReporterRpcClient.js: {}
              ReporterRpcProcedure.d.ts: {}
              ReporterRpcProcedure.js: {}
              ReporterRpcService.d.ts: {}
              ReporterRpcService.js: {}
          rpc:
            RpcClient.d.ts: {}
            RpcClient.js: {}
            RpcHost.d.ts: {}
            RpcHost.js: {}
            RpcMessage.d.ts: {}
            RpcMessage.js: {}
            RpcMessageChannel.d.ts: {}
            RpcMessageChannel.js: {}
            RpcMessagePort.d.ts: {}
            RpcMessagePort.js: {}
            RpcProcedure.d.ts: {}
            RpcProcedure.js: {}
            RpcService.d.ts: {}
            RpcService.js: {}
            error:
              RpcMessagePortClosedError.d.ts: {}
              RpcMessagePortClosedError.js: {}
              RpcRemoteError.d.ts: {}
              RpcRemoteError.js: {}
            index.d.ts: {}
            index.js: {}
            rpc-ipc:
              ProcessLike.d.ts: {}
              ProcessLike.js: {}
              RpcIpcMessageChannel.d.ts: {}
              RpcIpcMessageChannel.js: {}
              RpcIpcMessagePort.d.ts: {}
              RpcIpcMessagePort.js: {}
              error:
                RpcIpcMessagePortClosedError.d.ts: {}
                RpcIpcMessagePortClosedError.js: {}
              index.d.ts: {}
              index.js: {}
          typescript-reporter:
            TypeScriptConfigurationOverwrite.d.ts: {}
            TypeScriptConfigurationOverwrite.js: {}
            TypeScriptDiagnosticsOptions.d.ts: {}
            TypeScriptDiagnosticsOptions.js: {}
            TypeScriptReporterConfiguration.d.ts: {}
            TypeScriptReporterConfiguration.js: {}
            TypeScriptReporterOptions.d.ts: {}
            TypeScriptReporterOptions.js: {}
            TypeScriptSupport.d.ts: {}
            TypeScriptSupport.js: {}
            extension:
              TypeScriptEmbeddedExtension.d.ts: {}
              TypeScriptEmbeddedExtension.js: {}
              TypeScriptExtension.d.ts: {}
              TypeScriptExtension.js: {}
              vue:
                TypeScriptVueExtension.d.ts: {}
                TypeScriptVueExtension.js: {}
                TypeScriptVueExtensionConfiguration.d.ts: {}
                TypeScriptVueExtensionConfiguration.js: {}
                TypeScriptVueExtensionOptions.d.ts: {}
                TypeScriptVueExtensionOptions.js: {}
                TypeScriptVueExtensionSupport.d.ts: {}
                TypeScriptVueExtensionSupport.js: {}
                types:
                  vue-template-compiler.d.ts: {}
                  vue-template-compiler.js: {}
                  vue__compiler-sfc.d.ts: {}
                  vue__compiler-sfc.js: {}
            file-system:
              FileSystem.d.ts: {}
              FileSystem.js: {}
              MemFileSystem.d.ts: {}
              MemFileSystem.js: {}
              PassiveFileSystem.d.ts: {}
              PassiveFileSystem.js: {}
              RealFileSystem.d.ts: {}
              RealFileSystem.js: {}
            issue:
              TypeScriptIssueFactory.d.ts: {}
              TypeScriptIssueFactory.js: {}
            profile:
              TypeScriptPerformance.d.ts: {}
              TypeScriptPerformance.js: {}
            reporter:
              ControlledTypeScriptSystem.d.ts: {}
              ControlledTypeScriptSystem.js: {}
              ControlledWatchCompilerHost.d.ts: {}
              ControlledWatchCompilerHost.js: {}
              ControlledWatchSolutionBuilderHost.d.ts: {}
              ControlledWatchSolutionBuilderHost.js: {}
              TypeScriptConfigurationParser.d.ts: {}
              TypeScriptConfigurationParser.js: {}
              TypeScriptReporter.d.ts: {}
              TypeScriptReporter.js: {}
              TypeScriptReporterRpcClient.d.ts: {}
              TypeScriptReporterRpcClient.js: {}
              TypeScriptReporterRpcService.d.ts: {}
              TypeScriptReporterRpcService.js: {}
          utils:
            array:
              flatten.d.ts: {}
              flatten.js: {}
              intersect.d.ts: {}
              intersect.js: {}
              substract.d.ts: {}
              substract.js: {}
              unique.d.ts: {}
              unique.js: {}
            async:
              isPending.d.ts: {}
              isPending.js: {}
              pool.d.ts: {}
              pool.js: {}
              wait.d.ts: {}
              wait.js: {}
            path:
              forwardSlash.d.ts: {}
              forwardSlash.js: {}
          watch:
            CompilerWithWatchFileSystem.d.ts: {}
            CompilerWithWatchFileSystem.js: {}
            InclusiveNodeWatchFileSystem.d.ts: {}
            InclusiveNodeWatchFileSystem.js: {}
            WatchFileSystem.d.ts: {}
            WatchFileSystem.js: {}
        node_modules:
          ansi-styles:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          chalk:
            index.d.ts: {}
            license: {}
            package.json: {}
            readme.md: {}
            source:
              index.js: {}
              templates.js: {}
              util.js: {}
          color-convert:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            conversions.js: {}
            index.js: {}
            package.json: {}
            route.js: {}
          color-name:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          cosmiconfig:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            dist:
              Explorer.d.ts: {}
              Explorer.d.ts.map: {}
              Explorer.js: {}
              Explorer.js.map: {}
              ExplorerBase.d.ts: {}
              ExplorerBase.d.ts.map: {}
              ExplorerBase.js: {}
              ExplorerBase.js.map: {}
              ExplorerSync.d.ts: {}
              ExplorerSync.d.ts.map: {}
              ExplorerSync.js: {}
              ExplorerSync.js.map: {}
              cacheWrapper.d.ts: {}
              cacheWrapper.d.ts.map: {}
              cacheWrapper.js: {}
              cacheWrapper.js.map: {}
              getDirectory.d.ts: {}
              getDirectory.d.ts.map: {}
              getDirectory.js: {}
              getDirectory.js.map: {}
              getPropertyByPath.d.ts: {}
              getPropertyByPath.d.ts.map: {}
              getPropertyByPath.js: {}
              getPropertyByPath.js.map: {}
              index.d.ts: {}
              index.d.ts.map: {}
              index.js: {}
              index.js.map: {}
              loaders.d.ts: {}
              loaders.d.ts.map: {}
              loaders.js: {}
              loaders.js.map: {}
              readFile.d.ts: {}
              readFile.d.ts.map: {}
              readFile.js: {}
              readFile.js.map: {}
              types.d.ts: {}
              types.d.ts.map: {}
              types.js: {}
              types.js.map: {}
            package.json: {}
          fs-extra:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            lib:
              copy:
                copy.js: {}
                index.js: {}
              copy-sync:
                copy-sync.js: {}
                index.js: {}
              empty:
                index.js: {}
              ensure:
                file.js: {}
                index.js: {}
                link.js: {}
                symlink-paths.js: {}
                symlink-type.js: {}
                symlink.js: {}
              fs:
                index.js: {}
              index.js: {}
              json:
                index.js: {}
                jsonfile.js: {}
                output-json-sync.js: {}
                output-json.js: {}
              mkdirs:
                index.js: {}
                make-dir.js: {}
              move:
                index.js: {}
                move.js: {}
              move-sync:
                index.js: {}
                move-sync.js: {}
              output:
                index.js: {}
              path-exists:
                index.js: {}
              remove:
                index.js: {}
                rimraf.js: {}
              util:
                stat.js: {}
                utimes.js: {}
            package.json: {}
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          schema-utils:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            declarations:
              ValidationError.d.ts: {}
              index.d.ts: {}
              keywords:
                absolutePath.d.ts: {}
              util:
                Range.d.ts: {}
                hints.d.ts: {}
              validate.d.ts: {}
            dist:
              ValidationError.js: {}
              index.js: {}
              keywords:
                absolutePath.js: {}
              util:
                Range.js: {}
                hints.js: {}
              validate.js: {}
            package.json: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          tapable:
            LICENSE: {}
            README.md: {}
            lib:
              AsyncParallelBailHook.js: {}
              AsyncParallelHook.js: {}
              AsyncSeriesBailHook.js: {}
              AsyncSeriesHook.js: {}
              AsyncSeriesLoopHook.js: {}
              AsyncSeriesWaterfallHook.js: {}
              Hook.js: {}
              HookCodeFactory.js: {}
              HookMap.js: {}
              MultiHook.js: {}
              SyncBailHook.js: {}
              SyncHook.js: {}
              SyncLoopHook.js: {}
              SyncWaterfallHook.js: {}
              Tapable.js: {}
              index.js: {}
            package.json: {}
        package.json: {}
      form-data:
        License: {}
        README.md.bak: {}
        Readme.md: {}
        index.d.ts: {}
        lib:
          browser.js: {}
          form_data.js: {}
          populate.js: {}
        package.json: {}
      format:
        .npmignore: {}
        Makefile: {}
        Readme.md: {}
        component.json: {}
        format-min.js: {}
        format.js: {}
        package.json: {}
        test_format.js: {}
      forwarded:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      fraction.js:
        LICENSE: {}
        README.md: {}
        bigfraction.js: {}
        fraction.cjs: {}
        fraction.d.ts: {}
        fraction.js: {}
        fraction.min.js: {}
        package.json: {}
      fresh:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      fs-extra:
        LICENSE: {}
        README.md: {}
        lib:
          copy:
            copy-sync.js: {}
            copy.js: {}
            index.js: {}
          empty:
            index.js: {}
          ensure:
            file.js: {}
            index.js: {}
            link.js: {}
            symlink-paths.js: {}
            symlink-type.js: {}
            symlink.js: {}
          fs:
            index.js: {}
          index.js: {}
          json:
            index.js: {}
            jsonfile.js: {}
            output-json-sync.js: {}
            output-json.js: {}
          mkdirs:
            index.js: {}
            make-dir.js: {}
            utils.js: {}
          move:
            index.js: {}
            move-sync.js: {}
            move.js: {}
          output-file:
            index.js: {}
          path-exists:
            index.js: {}
          remove:
            index.js: {}
            rimraf.js: {}
          util:
            stat.js: {}
            utimes.js: {}
        package.json: {}
      fs-monkey:
        LICENSE: {}
        README.md: {}
        docs:
          api:
            patchFs.md: {}
            patchRequire.md: {}
        lib:
          correctPath.js: {}
          index.js: {}
          patchFs.js: {}
          patchRequire.js: {}
          util:
            lists.js: {}
        package.json: {}
      fs.realpath:
        LICENSE: {}
        README.md: {}
        index.js: {}
        old.js: {}
        package.json: {}
      fsevents:
        LICENSE: {}
        README.md: {}
        fsevents.d.ts: {}
        fsevents.js: {}
        fsevents.node: {}
        package.json: {}
      function-bind:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
          SECURITY.md: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        test:
          .eslintrc: {}
          index.js: {}
      function.prototype.name:
        .editorconfig: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        auto.js: {}
        helpers:
          functionsHaveNames.js: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        polyfill.js: {}
        shim.js: {}
        test:
          implementation.js: {}
          index.js: {}
          shimmed.js: {}
          tests.js: {}
          uglified.js: {}
      functions-have-names:
        .editorconfig: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      gensync:
        LICENSE: {}
        README.md: {}
        index.js: {}
        index.js.flow: {}
        package.json: {}
        test:
          .babelrc: {}
          index.test.js: {}
      get-caller-file:
        LICENSE.md: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        index.js.map: {}
        package.json: {}
      get-intrinsic:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          GetIntrinsic.js: {}
      get-own-enumerable-property-symbols:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        lib:
          index.d.ts: {}
          index.js: {}
          index.js.map: {}
        package.json: {}
      get-package-type:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        async.cjs: {}
        cache.cjs: {}
        index.cjs: {}
        is-node-modules.cjs: {}
        package.json: {}
        sync.cjs: {}
      get-stream:
        buffer-stream.js: {}
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      get-symbol-description:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        getInferredName.js: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      get-uri:
        LICENSE: {}
        README.md: {}
        dist:
          data.d.ts: {}
          data.js: {}
          data.js.map: {}
          file.d.ts: {}
          file.js: {}
          file.js.map: {}
          ftp.d.ts: {}
          ftp.js: {}
          ftp.js.map: {}
          http-error.d.ts: {}
          http-error.js: {}
          http-error.js.map: {}
          http.d.ts: {}
          http.js: {}
          http.js.map: {}
          https.d.ts: {}
          https.js: {}
          https.js.map: {}
          index.d.ts: {}
          index.js: {}
          index.js.map: {}
          notfound.d.ts: {}
          notfound.js: {}
          notfound.js.map: {}
          notmodified.d.ts: {}
          notmodified.js: {}
          notmodified.js.map: {}
        node_modules:
          fs-extra:
            LICENSE: {}
            README.md: {}
            lib:
              copy:
                copy-sync.js: {}
                copy.js: {}
                index.js: {}
              empty:
                index.js: {}
              ensure:
                file.js: {}
                index.js: {}
                link.js: {}
                symlink-paths.js: {}
                symlink-type.js: {}
                symlink.js: {}
              esm.mjs: {}
              fs:
                index.js: {}
              index.js: {}
              json:
                index.js: {}
                jsonfile.js: {}
                output-json-sync.js: {}
                output-json.js: {}
              mkdirs:
                index.js: {}
                make-dir.js: {}
                utils.js: {}
              move:
                index.js: {}
                move-sync.js: {}
                move.js: {}
              output-file:
                index.js: {}
              path-exists:
                index.js: {}
              remove:
                index.js: {}
              util:
                stat.js: {}
                utimes.js: {}
            package.json: {}
        package.json: {}
      git-node-fs:
        .npmignore: {}
        LICENSE: {}
        README.md: {}
        lib:
          node-fs.js: {}
        mixins:
          fs-db.js: {}
        package.json: {}
        test:
          fixtures:
            numbers.txt: {}
        test.js: {}
      git-sha1:
        LICENSE: {}
        README.md: {}
        git-sha1.js: {}
        package.json: {}
      glob:
        LICENSE: {}
        README.md: {}
        common.js: {}
        glob.js: {}
        package.json: {}
        sync.js: {}
      glob-parent:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      glob-to-regexp:
        .travis.yml: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test.js: {}
      global-modules:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      global-prefix:
        LICENSE: {}
        README.md: {}
        index.js: {}
        node_modules:
          .bin:
            which: {}
          which:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            bin:
              which: {}
            package.json: {}
            which.js: {}
        package.json: {}
      globals:
        globals.json: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      globalthis:
        .eslintrc: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        auto.js: {}
        implementation.browser.js: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        polyfill.js: {}
        shim.js: {}
        test:
          implementation.js: {}
          index.js: {}
          native.js: {}
          shimmed.js: {}
          tests.js: {}
      globby:
        gitignore.js: {}
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
        stream-utils.js: {}
      gopd:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      graceful-fs:
        LICENSE: {}
        README.md: {}
        clone.js: {}
        graceful-fs.js: {}
        legacy-streams.js: {}
        package.json: {}
        polyfills.js: {}
      graphemer:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        lib:
          Graphemer.d.ts: {}
          Graphemer.d.ts.map: {}
          Graphemer.js: {}
          GraphemerHelper.d.ts: {}
          GraphemerHelper.d.ts.map: {}
          GraphemerHelper.js: {}
          GraphemerIterator.d.ts: {}
          GraphemerIterator.d.ts.map: {}
          GraphemerIterator.js: {}
          boundaries.d.ts: {}
          boundaries.d.ts.map: {}
          boundaries.js: {}
          index.d.ts: {}
          index.d.ts.map: {}
          index.js: {}
        package.json: {}
      gzip-size:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      handle-thing:
        .travis.yml: {}
        README.md: {}
        lib:
          handle.js: {}
          queue.js: {}
        package.json: {}
        test:
          api-test.js: {}
      harmony-reflect:
        README.md: {}
        index.d.ts: {}
        package.json: {}
        reflect.js: {}
      has-bigints:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      has-flag:
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      has-property-descriptors:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      has-proto:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      has-symbols:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        shams.js: {}
        test:
          index.js: {}
          shams:
            core-js.js: {}
            get-own-property-symbols.js: {}
          tests.js: {}
      has-tostringtag:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        shams.d.ts: {}
        shams.js: {}
        test:
          index.js: {}
          shams:
            core-js.js: {}
            get-own-property-symbols.js: {}
          tests.js: {}
        tsconfig.json: {}
      hasown:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        tsconfig.json: {}
      hast-util-parse-selector:
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      hast-util-to-jsx-runtime:
        index.d.ts: {}
        index.js: {}
        lib:
          components.d.ts: {}
          components.js: {}
          index.d.ts: {}
          index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      hast-util-whitespace:
        index.d.ts: {}
        index.js: {}
        lib:
          index.d.ts: {}
          index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      hastscript:
        factory.js: {}
        html.js: {}
        index.d.ts: {}
        index.js: {}
        license: {}
        node_modules:
          '@types':
            hast:
              LICENSE: {}
              README.md: {}
              index.d.ts: {}
              package.json: {}
            unist:
              LICENSE: {}
              README.md: {}
              index.d.ts: {}
              package.json: {}
          comma-separated-tokens:
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          property-information:
            find.js: {}
            hast-to-react.json: {}
            html.js: {}
            index.js: {}
            lib:
              aria.js: {}
              html.js: {}
              svg.js: {}
              util:
                case-insensitive-transform.js: {}
                case-sensitive-transform.js: {}
                create.js: {}
                defined-info.js: {}
                info.js: {}
                merge.js: {}
                schema.js: {}
                types.js: {}
              xlink.js: {}
              xml.js: {}
              xmlns.js: {}
            license: {}
            normalize.js: {}
            package.json: {}
            readme.md: {}
            svg.js: {}
          space-separated-tokens:
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
        readme.md: {}
        svg-case-sensitive-tag-names.json: {}
        svg.d.ts: {}
        svg.js: {}
      he:
        LICENSE-MIT.txt: {}
        README.md: {}
        bin:
          he: {}
        he.js: {}
        man:
          he.1: {}
        package.json: {}
      highlight.js:
        LICENSE: {}
        README.md: {}
        lib:
          core.js: {}
          highlight.js: {}
          index.js: {}
          languages:
            1c.js: {}
            abnf.js: {}
            accesslog.js: {}
            actionscript.js: {}
            ada.js: {}
            angelscript.js: {}
            apache.js: {}
            applescript.js: {}
            arcade.js: {}
            arduino.js: {}
            armasm.js: {}
            asciidoc.js: {}
            aspectj.js: {}
            autohotkey.js: {}
            autoit.js: {}
            avrasm.js: {}
            awk.js: {}
            axapta.js: {}
            bash.js: {}
            basic.js: {}
            bnf.js: {}
            brainfuck.js: {}
            c-like.js: {}
            c.js: {}
            cal.js: {}
            capnproto.js: {}
            ceylon.js: {}
            clean.js: {}
            clojure-repl.js: {}
            clojure.js: {}
            cmake.js: {}
            coffeescript.js: {}
            coq.js: {}
            cos.js: {}
            cpp.js: {}
            crmsh.js: {}
            crystal.js: {}
            csharp.js: {}
            csp.js: {}
            css.js: {}
            d.js: {}
            dart.js: {}
            delphi.js: {}
            diff.js: {}
            django.js: {}
            dns.js: {}
            dockerfile.js: {}
            dos.js: {}
            dsconfig.js: {}
            dts.js: {}
            dust.js: {}
            ebnf.js: {}
            elixir.js: {}
            elm.js: {}
            erb.js: {}
            erlang-repl.js: {}
            erlang.js: {}
            excel.js: {}
            fix.js: {}
            flix.js: {}
            fortran.js: {}
            fsharp.js: {}
            gams.js: {}
            gauss.js: {}
            gcode.js: {}
            gherkin.js: {}
            glsl.js: {}
            gml.js: {}
            go.js: {}
            golo.js: {}
            gradle.js: {}
            groovy.js: {}
            haml.js: {}
            handlebars.js: {}
            haskell.js: {}
            haxe.js: {}
            hsp.js: {}
            htmlbars.js: {}
            http.js: {}
            hy.js: {}
            inform7.js: {}
            ini.js: {}
            irpf90.js: {}
            isbl.js: {}
            java.js: {}
            javascript.js: {}
            jboss-cli.js: {}
            json.js: {}
            julia-repl.js: {}
            julia.js: {}
            kotlin.js: {}
            lasso.js: {}
            latex.js: {}
            ldif.js: {}
            leaf.js: {}
            less.js: {}
            lisp.js: {}
            livecodeserver.js: {}
            livescript.js: {}
            llvm.js: {}
            lsl.js: {}
            lua.js: {}
            makefile.js: {}
            markdown.js: {}
            mathematica.js: {}
            matlab.js: {}
            maxima.js: {}
            mel.js: {}
            mercury.js: {}
            mipsasm.js: {}
            mizar.js: {}
            mojolicious.js: {}
            monkey.js: {}
            moonscript.js: {}
            n1ql.js: {}
            nginx.js: {}
            nim.js: {}
            nix.js: {}
            node-repl.js: {}
            nsis.js: {}
            objectivec.js: {}
            ocaml.js: {}
            openscad.js: {}
            oxygene.js: {}
            parser3.js: {}
            perl.js: {}
            pf.js: {}
            pgsql.js: {}
            php-template.js: {}
            php.js: {}
            plaintext.js: {}
            pony.js: {}
            powershell.js: {}
            processing.js: {}
            profile.js: {}
            prolog.js: {}
            properties.js: {}
            protobuf.js: {}
            puppet.js: {}
            purebasic.js: {}
            python-repl.js: {}
            python.js: {}
            q.js: {}
            qml.js: {}
            r.js: {}
            reasonml.js: {}
            rib.js: {}
            roboconf.js: {}
            routeros.js: {}
            rsl.js: {}
            ruby.js: {}
            ruleslanguage.js: {}
            rust.js: {}
            sas.js: {}
            scala.js: {}
            scheme.js: {}
            scilab.js: {}
            scss.js: {}
            shell.js: {}
            smali.js: {}
            smalltalk.js: {}
            sml.js: {}
            sqf.js: {}
            sql.js: {}
            sql_more.js: {}
            stan.js: {}
            stata.js: {}
            step21.js: {}
            stylus.js: {}
            subunit.js: {}
            swift.js: {}
            taggerscript.js: {}
            tap.js: {}
            tcl.js: {}
            thrift.js: {}
            tp.js: {}
            twig.js: {}
            typescript.js: {}
            vala.js: {}
            vbnet.js: {}
            vbscript-html.js: {}
            vbscript.js: {}
            verilog.js: {}
            vhdl.js: {}
            vim.js: {}
            x86asm.js: {}
            xl.js: {}
            xml.js: {}
            xquery.js: {}
            yaml.js: {}
            zephir.js: {}
        package.json: {}
        scss:
          a11y-dark.scss: {}
          a11y-light.scss: {}
          agate.scss: {}
          an-old-hope.scss: {}
          androidstudio.scss: {}
          arduino-light.scss: {}
          arta.scss: {}
          ascetic.scss: {}
          atelier-cave-dark.scss: {}
          atelier-cave-light.scss: {}
          atelier-dune-dark.scss: {}
          atelier-dune-light.scss: {}
          atelier-estuary-dark.scss: {}
          atelier-estuary-light.scss: {}
          atelier-forest-dark.scss: {}
          atelier-forest-light.scss: {}
          atelier-heath-dark.scss: {}
          atelier-heath-light.scss: {}
          atelier-lakeside-dark.scss: {}
          atelier-lakeside-light.scss: {}
          atelier-plateau-dark.scss: {}
          atelier-plateau-light.scss: {}
          atelier-savanna-dark.scss: {}
          atelier-savanna-light.scss: {}
          atelier-seaside-dark.scss: {}
          atelier-seaside-light.scss: {}
          atelier-sulphurpool-dark.scss: {}
          atelier-sulphurpool-light.scss: {}
          atom-one-dark-reasonable.scss: {}
          atom-one-dark.scss: {}
          atom-one-light.scss: {}
          brown-paper.scss: {}
          brown-papersq.png: {}
          codepen-embed.scss: {}
          color-brewer.scss: {}
          darcula.scss: {}
          dark.scss: {}
          default.scss: {}
          docco.scss: {}
          dracula.scss: {}
          far.scss: {}
          foundation.scss: {}
          github-gist.scss: {}
          github.scss: {}
          gml.scss: {}
          googlecode.scss: {}
          gradient-dark.scss: {}
          gradient-light.scss: {}
          grayscale.scss: {}
          gruvbox-dark.scss: {}
          gruvbox-light.scss: {}
          hopscotch.scss: {}
          hybrid.scss: {}
          idea.scss: {}
          ir-black.scss: {}
          isbl-editor-dark.scss: {}
          isbl-editor-light.scss: {}
          kimbie.dark.scss: {}
          kimbie.light.scss: {}
          lightfair.scss: {}
          lioshi.scss: {}
          magula.scss: {}
          mono-blue.scss: {}
          monokai-sublime.scss: {}
          monokai.scss: {}
          night-owl.scss: {}
          nnfx-dark.scss: {}
          nnfx.scss: {}
          nord.scss: {}
          obsidian.scss: {}
          ocean.scss: {}
          paraiso-dark.scss: {}
          paraiso-light.scss: {}
          pojoaque.jpg: {}
          pojoaque.scss: {}
          purebasic.scss: {}
          qtcreator_dark.scss: {}
          qtcreator_light.scss: {}
          railscasts.scss: {}
          rainbow.scss: {}
          routeros.scss: {}
          school-book.png: {}
          school-book.scss: {}
          shades-of-purple.scss: {}
          solarized-dark.scss: {}
          solarized-light.scss: {}
          srcery.scss: {}
          stackoverflow-dark.scss: {}
          stackoverflow-light.scss: {}
          sunburst.scss: {}
          tomorrow-night-blue.scss: {}
          tomorrow-night-bright.scss: {}
          tomorrow-night-eighties.scss: {}
          tomorrow-night.scss: {}
          tomorrow.scss: {}
          vs.scss: {}
          vs2015.scss: {}
          xcode.scss: {}
          xt256.scss: {}
          zenburn.scss: {}
        styles:
          a11y-dark.css: {}
          a11y-light.css: {}
          agate.css: {}
          an-old-hope.css: {}
          androidstudio.css: {}
          arduino-light.css: {}
          arta.css: {}
          ascetic.css: {}
          atelier-cave-dark.css: {}
          atelier-cave-light.css: {}
          atelier-dune-dark.css: {}
          atelier-dune-light.css: {}
          atelier-estuary-dark.css: {}
          atelier-estuary-light.css: {}
          atelier-forest-dark.css: {}
          atelier-forest-light.css: {}
          atelier-heath-dark.css: {}
          atelier-heath-light.css: {}
          atelier-lakeside-dark.css: {}
          atelier-lakeside-light.css: {}
          atelier-plateau-dark.css: {}
          atelier-plateau-light.css: {}
          atelier-savanna-dark.css: {}
          atelier-savanna-light.css: {}
          atelier-seaside-dark.css: {}
          atelier-seaside-light.css: {}
          atelier-sulphurpool-dark.css: {}
          atelier-sulphurpool-light.css: {}
          atom-one-dark-reasonable.css: {}
          atom-one-dark.css: {}
          atom-one-light.css: {}
          brown-paper.css: {}
          brown-papersq.png: {}
          codepen-embed.css: {}
          color-brewer.css: {}
          darcula.css: {}
          dark.css: {}
          default.css: {}
          docco.css: {}
          dracula.css: {}
          far.css: {}
          foundation.css: {}
          github-gist.css: {}
          github.css: {}
          gml.css: {}
          googlecode.css: {}
          gradient-dark.css: {}
          gradient-light.css: {}
          grayscale.css: {}
          gruvbox-dark.css: {}
          gruvbox-light.css: {}
          hopscotch.css: {}
          hybrid.css: {}
          idea.css: {}
          ir-black.css: {}
          isbl-editor-dark.css: {}
          isbl-editor-light.css: {}
          kimbie.dark.css: {}
          kimbie.light.css: {}
          lightfair.css: {}
          lioshi.css: {}
          magula.css: {}
          mono-blue.css: {}
          monokai-sublime.css: {}
          monokai.css: {}
          night-owl.css: {}
          nnfx-dark.css: {}
          nnfx.css: {}
          nord.css: {}
          obsidian.css: {}
          ocean.css: {}
          paraiso-dark.css: {}
          paraiso-light.css: {}
          pojoaque.css: {}
          pojoaque.jpg: {}
          purebasic.css: {}
          qtcreator_dark.css: {}
          qtcreator_light.css: {}
          railscasts.css: {}
          rainbow.css: {}
          routeros.css: {}
          school-book.css: {}
          school-book.png: {}
          shades-of-purple.css: {}
          solarized-dark.css: {}
          solarized-light.css: {}
          srcery.css: {}
          stackoverflow-dark.css: {}
          stackoverflow-light.css: {}
          sunburst.css: {}
          tomorrow-night-blue.css: {}
          tomorrow-night-bright.css: {}
          tomorrow-night-eighties.css: {}
          tomorrow-night.css: {}
          tomorrow.css: {}
          vs.css: {}
          vs2015.css: {}
          xcode.css: {}
          xt256.css: {}
          zenburn.css: {}
        types:
          index.d.ts: {}
      hoopy:
        .eslintrc: {}
        .gitlab-ci.yml: {}
        AUTHORS: {}
        CHANGELOG.md: {}
        CONTRIBUTING.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test.js: {}
      hpack.js:
        .npmignore: {}
        .travis.yml: {}
        README.md: {}
        bin:
          benchmark: {}
        lib:
          hpack:
            compressor.js: {}
            decoder.js: {}
            decompressor.js: {}
            encoder.js: {}
            huffman.js: {}
            static-table.js: {}
            table.js: {}
            utils.js: {}
          hpack.js: {}
        node_modules:
          isarray:
            .npmignore: {}
            .travis.yml: {}
            Makefile: {}
            README.md: {}
            component.json: {}
            index.js: {}
            package.json: {}
            test.js: {}
          readable-stream:
            .travis.yml: {}
            CONTRIBUTING.md: {}
            GOVERNANCE.md: {}
            LICENSE: {}
            README.md: {}
            doc:
              wg-meetings:
                2015-01-30.md: {}
            duplex-browser.js: {}
            duplex.js: {}
            lib:
              _stream_duplex.js: {}
              _stream_passthrough.js: {}
              _stream_readable.js: {}
              _stream_transform.js: {}
              _stream_writable.js: {}
              internal:
                streams:
                  BufferList.js: {}
                  destroy.js: {}
                  stream-browser.js: {}
                  stream.js: {}
            package.json: {}
            passthrough.js: {}
            readable-browser.js: {}
            readable.js: {}
            transform.js: {}
            writable-browser.js: {}
            writable.js: {}
          safe-buffer:
            LICENSE: {}
            README.md: {}
            index.d.ts: {}
            index.js: {}
            package.json: {}
          string_decoder:
            .travis.yml: {}
            LICENSE: {}
            README.md: {}
            lib:
              string_decoder.js: {}
            package.json: {}
        package.json: {}
        test:
          compressor-test.js: {}
          decoder-test.js: {}
          decompressor-test.js: {}
          encoder-test.js: {}
          fixtures.js: {}
        tools:
          gen-huffman.js: {}
          gen-static-table.js: {}
          utils.js: {}
      html-encoding-sniffer:
        LICENSE.txt: {}
        README.md: {}
        lib:
          html-encoding-sniffer.js: {}
        package.json: {}
      html-entities:
        LICENSE: {}
        README.md: {}
        lib:
          index.d.ts: {}
          index.js: {}
          index.js.flow: {}
          index.js.map: {}
          named-references.js: {}
          named-references.js.map: {}
          numeric-unicode-map.js: {}
          numeric-unicode-map.js.map: {}
          surrogate-pairs.js: {}
          surrogate-pairs.js.map: {}
        package.json: {}
        src:
          index.ts: {}
          named-references.ts: {}
          numeric-unicode-map.ts: {}
          surrogate-pairs.ts: {}
      html-escaper:
        LICENSE.txt: {}
        README.md: {}
        cjs:
          index.js: {}
          package.json: {}
        esm:
          index.js: {}
        index.js: {}
        min.js: {}
        package.json: {}
        test:
          index.js: {}
          package.json: {}
      html-minifier-terser:
        LICENSE: {}
        README.md: {}
        cli.js: {}
        package.json: {}
        sample-cli-config-file.conf: {}
        src:
          htmlminifier.js: {}
          htmlparser.js: {}
          tokenchain.js: {}
          utils.js: {}
      html-url-attributes:
        index.d.ts: {}
        index.js: {}
        lib:
          index.d.ts: {}
          index.js: {}
        package.json: {}
        readme.md: {}
      html-webpack-plugin:
        LICENSE: {}
        README.md: {}
        default_index.ejs: {}
        index.js: {}
        lib:
          cached-child-compiler.js: {}
          child-compiler.js: {}
          chunksorter.js: {}
          errors.js: {}
          hooks.js: {}
          html-tags.js: {}
          loader.js: {}
        package.json: {}
        typings.d.ts: {}
      htmlparser2:
        LICENSE: {}
        README.md: {}
        lib:
          CollectingHandler.d.ts: {}
          CollectingHandler.d.ts.map: {}
          CollectingHandler.js: {}
          FeedHandler.d.ts: {}
          FeedHandler.d.ts.map: {}
          FeedHandler.js: {}
          MultiplexHandler.d.ts: {}
          MultiplexHandler.d.ts.map: {}
          MultiplexHandler.js: {}
          Parser.d.ts: {}
          Parser.d.ts.map: {}
          Parser.js: {}
          Tokenizer.d.ts: {}
          Tokenizer.d.ts.map: {}
          Tokenizer.js: {}
          WritableStream.d.ts: {}
          WritableStream.d.ts.map: {}
          WritableStream.js: {}
          index.d.ts: {}
          index.d.ts.map: {}
          index.js: {}
        package.json: {}
      http-deceiver:
        .npmignore: {}
        .travis.yml: {}
        README.md: {}
        lib:
          deceiver.js: {}
        package.json: {}
        test:
          api-test.js: {}
      http-errors:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      http-parser-js:
        LICENSE.md: {}
        README.md: {}
        http-parser.d.ts: {}
        http-parser.js: {}
        package.json: {}
      http-proxy:
        .auto-changelog: {}
        .gitattributes: {}
        CHANGELOG.md: {}
        CODE_OF_CONDUCT.md: {}
        LICENSE: {}
        README.md: {}
        codecov.yml: {}
        index.js: {}
        lib:
          http-proxy:
            common.js: {}
            index.js: {}
            passes:
              web-incoming.js: {}
              web-outgoing.js: {}
              ws-incoming.js: {}
          http-proxy.js: {}
        package.json: {}
        renovate.json: {}
      http-proxy-agent:
        README.md: {}
        dist:
          agent.d.ts: {}
          agent.js: {}
          agent.js.map: {}
          index.d.ts: {}
          index.js: {}
          index.js.map: {}
        package.json: {}
      http-proxy-middleware:
        LICENSE: {}
        README.md: {}
        dist:
          _handlers.d.ts: {}
          _handlers.js: {}
          config-factory.d.ts: {}
          config-factory.js: {}
          context-matcher.d.ts: {}
          context-matcher.js: {}
          errors.d.ts: {}
          errors.js: {}
          handlers:
            fix-request-body.d.ts: {}
            fix-request-body.js: {}
            index.d.ts: {}
            index.js: {}
            public.d.ts: {}
            public.js: {}
            response-interceptor.d.ts: {}
            response-interceptor.js: {}
          http-proxy-middleware.d.ts: {}
          http-proxy-middleware.js: {}
          index.d.ts: {}
          index.js: {}
          logger.d.ts: {}
          logger.js: {}
          path-rewriter.d.ts: {}
          path-rewriter.js: {}
          router.d.ts: {}
          router.js: {}
          types.d.ts: {}
          types.js: {}
        package.json: {}
      https-proxy-agent:
        README.md: {}
        dist:
          agent.d.ts: {}
          agent.js: {}
          agent.js.map: {}
          index.d.ts: {}
          index.js: {}
          index.js.map: {}
          parse-proxy-response.d.ts: {}
          parse-proxy-response.js: {}
          parse-proxy-response.js.map: {}
        package.json: {}
      human-signals:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        build:
          src:
            core.js: {}
            core.js.map: {}
            main.d.ts: {}
            main.js: {}
            main.js.map: {}
            realtime.js: {}
            realtime.js.map: {}
            signals.js: {}
            signals.js.map: {}
        package.json: {}
      iconv-lite:
        .github:
          dependabot.yml: {}
        .idea:
          codeStyles:
            Project.xml: {}
            codeStyleConfig.xml: {}
          iconv-lite.iml: {}
          inspectionProfiles:
            Project_Default.xml: {}
          modules.xml: {}
          vcs.xml: {}
        Changelog.md: {}
        LICENSE: {}
        README.md: {}
        encodings:
          dbcs-codec.js: {}
          dbcs-data.js: {}
          index.js: {}
          internal.js: {}
          sbcs-codec.js: {}
          sbcs-data-generated.js: {}
          sbcs-data.js: {}
          tables:
            big5-added.json: {}
            cp936.json: {}
            cp949.json: {}
            cp950.json: {}
            eucjp.json: {}
            gb18030-ranges.json: {}
            gbk-added.json: {}
            shiftjis.json: {}
          utf16.js: {}
          utf32.js: {}
          utf7.js: {}
        lib:
          bom-handling.js: {}
          index.d.ts: {}
          index.js: {}
          streams.js: {}
        package.json: {}
      icss-utils:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        package.json: {}
        src:
          createICSSRules.js: {}
          extractICSS.js: {}
          index.js: {}
          replaceSymbols.js: {}
          replaceValueSymbols.js: {}
      idb:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        build:
          async-iterators.cjs: {}
          async-iterators.d.ts: {}
          async-iterators.js: {}
          database-extras.d.ts: {}
          entry.d.ts: {}
          index.cjs: {}
          index.d.ts: {}
          index.js: {}
          umd-with-async-ittr.js: {}
          umd.js: {}
          util.d.ts: {}
          wrap-idb-value.cjs: {}
          wrap-idb-value.d.ts: {}
          wrap-idb-value.js: {}
        package.json: {}
        with-async-ittr.cjs: {}
        with-async-ittr.d.ts: {}
        with-async-ittr.js: {}
      identity-obj-proxy:
        .babelrc: {}
        .eslintrc: {}
        .npmignore: {}
        .travis.yml: {}
        LICENSE: {}
        README.md: {}
        package.json: {}
        src:
          __tests__:
            import-es6-export-test.js: {}
            import-es6-import-export-test.js: {}
            import-es6-import-test.js: {}
            import-vanilla-test.js: {}
            index-test.js: {}
            require-es6-export-test.js: {}
            require-es6-import-export-test.js: {}
            require-es6-import-test.js: {}
            require-vanilla-test.js: {}
          index.js: {}
          test-redirections:
            idObjES6Export.js: {}
            idObjES6Import.js: {}
            idObjES6ImportExport.js: {}
      ignore:
        LICENSE-MIT: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        legacy.js: {}
        package.json: {}
      immer:
        LICENSE: {}
        compat:
          pre-3.7:
            dist:
              immer.d.ts: {}
        dist:
          core:
            current.d.ts: {}
            current.d.ts.map: {}
            finalize.d.ts: {}
            finalize.d.ts.map: {}
            immerClass.d.ts: {}
            immerClass.d.ts.map: {}
            proxy.d.ts: {}
            proxy.d.ts.map: {}
            scope.d.ts: {}
            scope.d.ts.map: {}
          immer.cjs.development.js: {}
          immer.cjs.development.js.map: {}
          immer.cjs.production.min.js: {}
          immer.cjs.production.min.js.map: {}
          immer.d.ts: {}
          immer.d.ts.map: {}
          immer.esm.js: {}
          immer.esm.js.map: {}
          immer.esm.mjs: {}
          immer.umd.development.js: {}
          immer.umd.development.js.map: {}
          immer.umd.production.min.js: {}
          immer.umd.production.min.js.map: {}
          index.js: {}
          index.js.flow: {}
          internal.d.ts: {}
          internal.d.ts.map: {}
          plugins:
            all.d.ts: {}
            all.d.ts.map: {}
            es5.d.ts: {}
            es5.d.ts.map: {}
            mapset.d.ts: {}
            mapset.d.ts.map: {}
            patches.d.ts: {}
            patches.d.ts.map: {}
          types:
            types-external.d.ts: {}
            types-external.d.ts.map: {}
            types-internal.d.ts: {}
            types-internal.d.ts.map: {}
          utils:
            common.d.ts: {}
            common.d.ts.map: {}
            env.d.ts: {}
            env.d.ts.map: {}
            errors.d.ts: {}
            errors.d.ts.map: {}
            plugins.d.ts: {}
            plugins.d.ts.map: {}
        package.json: {}
        readme.md: {}
        src:
          core:
            current.ts: {}
            finalize.ts: {}
            immerClass.ts: {}
            proxy.ts: {}
            scope.ts: {}
          immer.ts: {}
          internal.ts: {}
          plugins:
            all.ts: {}
            es5.ts: {}
            mapset.ts: {}
            patches.ts: {}
          types:
            globals.d.ts: {}
            index.js.flow: {}
            types-external.ts: {}
            types-internal.ts: {}
          utils:
            common.ts: {}
            env.ts: {}
            errors.ts: {}
            plugins.ts: {}
      import-fresh:
        index.d.ts: {}
        index.js: {}
        license: {}
        node_modules:
          resolve-from:
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
        readme.md: {}
      import-local:
        fixtures:
          cli.js: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      imurmurhash:
        README.md: {}
        imurmurhash.js: {}
        imurmurhash.min.js: {}
        package.json: {}
      indent-string:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      inflight:
        LICENSE: {}
        README.md: {}
        inflight.js: {}
        package.json: {}
      inherits:
        LICENSE: {}
        README.md: {}
        inherits.js: {}
        inherits_browser.js: {}
        package.json: {}
      ini:
        LICENSE: {}
        README.md: {}
        ini.js: {}
        package.json: {}
      inline-style-parser:
        LICENSE: {}
        README.md: {}
        dist:
          inline-style-parser.js: {}
          inline-style-parser.js.map: {}
          inline-style-parser.min.js: {}
          inline-style-parser.min.js.map: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
      internal-slot:
        .editorconfig: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      invariant:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        browser.js: {}
        invariant.js: {}
        invariant.js.flow: {}
        package.json: {}
      ip-address:
        LICENSE: {}
        README.md: {}
        dist:
          address-error.d.ts: {}
          address-error.d.ts.map: {}
          address-error.js: {}
          address-error.js.map: {}
          common.d.ts: {}
          common.d.ts.map: {}
          common.js: {}
          common.js.map: {}
          ip-address.d.ts: {}
          ip-address.d.ts.map: {}
          ip-address.js: {}
          ip-address.js.map: {}
          ipv4.d.ts: {}
          ipv4.d.ts.map: {}
          ipv4.js: {}
          ipv4.js.map: {}
          ipv6.d.ts: {}
          ipv6.d.ts.map: {}
          ipv6.js: {}
          ipv6.js.map: {}
          v4:
            constants.d.ts: {}
            constants.d.ts.map: {}
            constants.js: {}
            constants.js.map: {}
          v6:
            constants.d.ts: {}
            constants.d.ts.map: {}
            constants.js: {}
            constants.js.map: {}
            helpers.d.ts: {}
            helpers.d.ts.map: {}
            helpers.js: {}
            helpers.js.map: {}
            regular-expressions.d.ts: {}
            regular-expressions.d.ts.map: {}
            regular-expressions.js: {}
            regular-expressions.js.map: {}
        node_modules:
          sprintf-js:
            CONTRIBUTORS.md: {}
            LICENSE: {}
            README.md: {}
            dist:
              .gitattributes: {}
              angular-sprintf.min.js: {}
              angular-sprintf.min.js.map: {}
              sprintf.min.js: {}
              sprintf.min.js.map: {}
            package.json: {}
            src:
              angular-sprintf.js: {}
              sprintf.js: {}
        package.json: {}
        src:
          address-error.ts: {}
          common.ts: {}
          ip-address.ts: {}
          ipv4.ts: {}
          ipv6.ts: {}
          v4:
            constants.ts: {}
          v6:
            constants.ts: {}
            helpers.ts: {}
            regular-expressions.ts: {}
      ipaddr.js:
        LICENSE: {}
        README.md: {}
        ipaddr.min.js: {}
        lib:
          ipaddr.js: {}
          ipaddr.js.d.ts: {}
        package.json: {}
      is-alphabetical:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      is-alphanumerical:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      is-arguments:
        .editorconfig: {}
        .eslintignore: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      is-array-buffer:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      is-arrayish:
        .editorconfig: {}
        .istanbul.yml: {}
        .npmignore: {}
        .travis.yml: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      is-async-function:
        .eslintrc: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
          uglified.js: {}
      is-bigint:
        .eslintignore: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      is-binary-path:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      is-boolean-object:
        .editorconfig: {}
        .eslintignore: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      is-callable:
        .editorconfig: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      is-core-module:
        .eslintrc: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        core.json: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      is-data-view:
        .editorconfig: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      is-date-object:
        .editorconfig: {}
        .eslintignore: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      is-decimal:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      is-docker:
        cli.js: {}
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      is-extglob:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      is-finalizationregistry:
        .eslintignore: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      is-fullwidth-code-point:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      is-generator-fn:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      is-generator-function:
        .eslintignore: {}
        .eslintrc: {}
        .nvmrc: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          corejs.js: {}
          index.js: {}
          uglified.js: {}
      is-glob:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      is-hexadecimal:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      is-map:
        .editorconfig: {}
        .eslintrc: {}
        .gitattributes: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      is-module:
        .npmignore: {}
        README.md: {}
        component.json: {}
        index.js: {}
        package.json: {}
      is-negative-zero:
        .editorconfig: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      is-number:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      is-number-object:
        .editorconfig: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      is-obj:
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      is-path-inside:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      is-plain-obj:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      is-potential-custom-element-name:
        LICENSE-MIT.txt: {}
        README.md: {}
        index.js: {}
        package.json: {}
      is-regex:
        .editorconfig: {}
        .eslintignore: {}
        .eslintrc: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      is-regexp:
        index.js: {}
        package.json: {}
        readme.md: {}
      is-root:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      is-set:
        .editorconfig: {}
        .eslintrc: {}
        .gitattributes: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      is-shared-array-buffer:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      is-stream:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      is-string:
        .eslintignore: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      is-symbol:
        .editorconfig: {}
        .eslintignore: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      is-typed-array:
        .editorconfig: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      is-typedarray:
        LICENSE.md: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test.js: {}
      is-weakmap:
        .editorconfig: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      is-weakref:
        .eslintignore: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      is-weakset:
        .editorconfig: {}
        .eslintrc: {}
        .gitattributes: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      is-wsl:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      isarray:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      isexe:
        .npmignore: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        mode.js: {}
        package.json: {}
        test:
          basic.js: {}
        windows.js: {}
      istanbul-lib-coverage:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        lib:
          coverage-map.js: {}
          coverage-summary.js: {}
          data-properties.js: {}
          file-coverage.js: {}
          percent.js: {}
        package.json: {}
      istanbul-lib-instrument:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        node_modules:
          .bin:
            semver: {}
          semver:
            LICENSE: {}
            README.md: {}
            bin:
              semver.js: {}
            package.json: {}
            range.bnf: {}
            semver.js: {}
        package.json: {}
        src:
          constants.js: {}
          index.js: {}
          instrumenter.js: {}
          read-coverage.js: {}
          source-coverage.js: {}
          visitor.js: {}
      istanbul-lib-report:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        lib:
          context.js: {}
          file-writer.js: {}
          path.js: {}
          report-base.js: {}
          summarizer-factory.js: {}
          tree.js: {}
          watermarks.js: {}
          xml-writer.js: {}
        node_modules:
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          make-dir:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
      istanbul-lib-source-maps:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        lib:
          get-mapping.js: {}
          map-store.js: {}
          mapped.js: {}
          pathutils.js: {}
          transform-utils.js: {}
          transformer.js: {}
        node_modules:
          source-map:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            dist:
              source-map.debug.js: {}
              source-map.js: {}
              source-map.min.js: {}
              source-map.min.js.map: {}
            lib:
              array-set.js: {}
              base64-vlq.js: {}
              base64.js: {}
              binary-search.js: {}
              mapping-list.js: {}
              quick-sort.js: {}
              source-map-consumer.js: {}
              source-map-generator.js: {}
              source-node.js: {}
              util.js: {}
            package.json: {}
            source-map.d.ts: {}
            source-map.js: {}
        package.json: {}
      istanbul-reports:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        lib:
          clover:
            index.js: {}
          cobertura:
            index.js: {}
          html:
            annotator.js: {}
            assets:
              base.css: {}
              block-navigation.js: {}
              favicon.png: {}
              sort-arrow-sprite.png: {}
              sorter.js: {}
              vendor:
                prettify.css: {}
                prettify.js: {}
            index.js: {}
            insertion-text.js: {}
          html-spa:
            .babelrc: {}
            assets:
              bundle.js: {}
              sort-arrow-sprite.png: {}
              spa.css: {}
            index.js: {}
            src:
              fileBreadcrumbs.js: {}
              filterToggle.js: {}
              flattenToggle.js: {}
              getChildData.js: {}
              index.js: {}
              routing.js: {}
              summaryHeader.js: {}
              summaryTableHeader.js: {}
              summaryTableLine.js: {}
            webpack.config.js: {}
          json:
            index.js: {}
          json-summary:
            index.js: {}
          lcov:
            index.js: {}
          lcovonly:
            index.js: {}
          none:
            index.js: {}
          teamcity:
            index.js: {}
          text:
            index.js: {}
          text-lcov:
            index.js: {}
          text-summary:
            index.js: {}
        package.json: {}
      iterator.prototype:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      jackspeak:
        LICENSE.md: {}
        README.md: {}
        dist:
          commonjs:
            index.d.ts: {}
            index.d.ts.map: {}
            index.js: {}
            index.js.map: {}
            package.json: {}
            parse-args-cjs.cjs.map: {}
            parse-args-cjs.d.cts.map: {}
            parse-args.d.ts: {}
            parse-args.d.ts.map: {}
            parse-args.js: {}
            parse-args.js.map: {}
          esm:
            index.d.ts: {}
            index.d.ts.map: {}
            index.js: {}
            index.js.map: {}
            package.json: {}
            parse-args.d.ts: {}
            parse-args.d.ts.map: {}
            parse-args.js: {}
            parse-args.js.map: {}
        package.json: {}
      jake:
        Makefile: {}
        README.md: {}
        bin:
          bash_completion.sh: {}
          cli.js: {}
        jakefile.js: {}
        lib:
          api.js: {}
          jake.js: {}
          loader.js: {}
          namespace.js: {}
          package_task.js: {}
          parseargs.js: {}
          program.js: {}
          publish_task.js: {}
          rule.js: {}
          task:
            directory_task.js: {}
            file_task.js: {}
            index.js: {}
            task.js: {}
          test_task.js: {}
          utils:
            file.js: {}
            index.js: {}
            logger.js: {}
        node_modules:
          ansi-styles:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          chalk:
            index.d.ts: {}
            license: {}
            package.json: {}
            readme.md: {}
            source:
              index.js: {}
              templates.js: {}
              util.js: {}
          color-convert:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            conversions.js: {}
            index.js: {}
            package.json: {}
            route.js: {}
          color-name:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
        test:
          integration:
            concurrent.js: {}
            file.js: {}
            file_task.js: {}
            helpers.js: {}
            jakefile.js: {}
            jakelib:
              concurrent.jake.js: {}
              publish.jake.js: {}
              required_module.jake.js: {}
              rule.jake.js: {}
            list_tasks.js: {}
            publish_task.js: {}
            rule.js: {}
            selfdep.js: {}
            task_base.js: {}
          unit:
            jakefile.js: {}
            namespace.js: {}
            parseargs.js: {}
        usage.txt: {}
      jest:
        LICENSE: {}
        README.md: {}
        bin:
          jest.js: {}
        build:
          jest.d.ts: {}
          jest.js: {}
        package.json: {}
      jest-changed-files:
        LICENSE: {}
        README.md: {}
        build:
          git.d.ts: {}
          git.js: {}
          hg.d.ts: {}
          hg.js: {}
          index.d.ts: {}
          index.js: {}
          types.d.ts: {}
          types.js: {}
        package.json: {}
      jest-circus:
        LICENSE: {}
        README.md: {}
        build:
          eventHandler.d.ts: {}
          eventHandler.js: {}
          formatNodeAssertErrors.d.ts: {}
          formatNodeAssertErrors.js: {}
          globalErrorHandlers.d.ts: {}
          globalErrorHandlers.js: {}
          index.d.ts: {}
          index.js: {}
          legacy-code-todo-rewrite:
            jestAdapter.d.ts: {}
            jestAdapter.js: {}
            jestAdapterInit.d.ts: {}
            jestAdapterInit.js: {}
            jestExpect.d.ts: {}
            jestExpect.js: {}
          run.d.ts: {}
          run.js: {}
          state.d.ts: {}
          state.js: {}
          testCaseReportHandler.d.ts: {}
          testCaseReportHandler.js: {}
          types.d.ts: {}
          types.js: {}
          utils.d.ts: {}
          utils.js: {}
        node_modules:
          ansi-styles:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          chalk:
            index.d.ts: {}
            license: {}
            package.json: {}
            readme.md: {}
            source:
              index.js: {}
              templates.js: {}
              util.js: {}
          color-convert:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            conversions.js: {}
            index.js: {}
            package.json: {}
            route.js: {}
          color-name:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
        runner.js: {}
      jest-cli:
        LICENSE: {}
        README.md: {}
        bin:
          jest.js: {}
        build:
          cli:
            args.d.ts: {}
            args.js: {}
            index.d.ts: {}
            index.js: {}
          index.d.ts: {}
          index.js: {}
          init:
            errors.d.ts: {}
            errors.js: {}
            generateConfigFile.d.ts: {}
            generateConfigFile.js: {}
            index.d.ts: {}
            index.js: {}
            modifyPackageJson.d.ts: {}
            modifyPackageJson.js: {}
            questions.d.ts: {}
            questions.js: {}
            types.d.ts: {}
            types.js: {}
        node_modules:
          ansi-styles:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          chalk:
            index.d.ts: {}
            license: {}
            package.json: {}
            readme.md: {}
            source:
              index.js: {}
              templates.js: {}
              util.js: {}
          color-convert:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            conversions.js: {}
            index.js: {}
            package.json: {}
            route.js: {}
          color-name:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
      jest-config:
        LICENSE: {}
        build:
          Defaults.d.ts: {}
          Defaults.js: {}
          Deprecated.d.ts: {}
          Deprecated.js: {}
          Descriptions.d.ts: {}
          Descriptions.js: {}
          ReporterValidationErrors.d.ts: {}
          ReporterValidationErrors.js: {}
          ValidConfig.d.ts: {}
          ValidConfig.js: {}
          color.d.ts: {}
          color.js: {}
          constants.d.ts: {}
          constants.js: {}
          getCacheDirectory.d.ts: {}
          getCacheDirectory.js: {}
          getMaxWorkers.d.ts: {}
          getMaxWorkers.js: {}
          index.d.ts: {}
          index.js: {}
          normalize.d.ts: {}
          normalize.js: {}
          readConfigFileAndSetRootDir.d.ts: {}
          readConfigFileAndSetRootDir.js: {}
          resolveConfigPath.d.ts: {}
          resolveConfigPath.js: {}
          setFromArgv.d.ts: {}
          setFromArgv.js: {}
          utils.d.ts: {}
          utils.js: {}
          validatePattern.d.ts: {}
          validatePattern.js: {}
        node_modules:
          ansi-styles:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          chalk:
            index.d.ts: {}
            license: {}
            package.json: {}
            readme.md: {}
            source:
              index.js: {}
              templates.js: {}
              util.js: {}
          color-convert:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            conversions.js: {}
            index.js: {}
            package.json: {}
            route.js: {}
          color-name:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
      jest-diff:
        LICENSE: {}
        README.md: {}
        build:
          cleanupSemantic.d.ts: {}
          cleanupSemantic.js: {}
          constants.d.ts: {}
          constants.js: {}
          diffLines.d.ts: {}
          diffLines.js: {}
          diffStrings.d.ts: {}
          diffStrings.js: {}
          getAlignedDiffs.d.ts: {}
          getAlignedDiffs.js: {}
          index.d.ts: {}
          index.js: {}
          joinAlignedDiffs.d.ts: {}
          joinAlignedDiffs.js: {}
          normalizeDiffOptions.d.ts: {}
          normalizeDiffOptions.js: {}
          printDiffs.d.ts: {}
          printDiffs.js: {}
          types.d.ts: {}
          types.js: {}
        node_modules:
          ansi-styles:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          chalk:
            index.d.ts: {}
            license: {}
            package.json: {}
            readme.md: {}
            source:
              index.js: {}
              templates.js: {}
              util.js: {}
          color-convert:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            conversions.js: {}
            index.js: {}
            package.json: {}
            route.js: {}
          color-name:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
      jest-docblock:
        LICENSE: {}
        README.md: {}
        build:
          index.d.ts: {}
          index.js: {}
        package.json: {}
      jest-each:
        LICENSE: {}
        README.md: {}
        build:
          bind.d.ts: {}
          bind.js: {}
          index.d.ts: {}
          index.js: {}
          table:
            array.d.ts: {}
            array.js: {}
            interpolation.d.ts: {}
            interpolation.js: {}
            template.d.ts: {}
            template.js: {}
          validation.d.ts: {}
          validation.js: {}
        node_modules:
          ansi-styles:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          chalk:
            index.d.ts: {}
            license: {}
            package.json: {}
            readme.md: {}
            source:
              index.js: {}
              templates.js: {}
              util.js: {}
          color-convert:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            conversions.js: {}
            index.js: {}
            package.json: {}
            route.js: {}
          color-name:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
      jest-environment-jsdom:
        LICENSE: {}
        build:
          index.d.ts: {}
          index.js: {}
        package.json: {}
      jest-environment-node:
        LICENSE: {}
        build:
          index.d.ts: {}
          index.js: {}
        package.json: {}
      jest-get-type:
        LICENSE: {}
        build:
          index.d.ts: {}
          index.js: {}
        package.json: {}
      jest-haste-map:
        LICENSE: {}
        build:
          HasteFS.d.ts: {}
          HasteFS.js: {}
          ModuleMap.d.ts: {}
          ModuleMap.js: {}
          blacklist.d.ts: {}
          blacklist.js: {}
          constants.d.ts: {}
          constants.js: {}
          crawlers:
            node.d.ts: {}
            node.js: {}
            watchman.d.ts: {}
            watchman.js: {}
          getMockName.d.ts: {}
          getMockName.js: {}
          index.d.ts: {}
          index.js: {}
          lib:
            dependencyExtractor.d.ts: {}
            dependencyExtractor.js: {}
            fast_path.d.ts: {}
            fast_path.js: {}
            getPlatformExtension.d.ts: {}
            getPlatformExtension.js: {}
            isRegExpSupported.d.ts: {}
            isRegExpSupported.js: {}
            normalizePathSep.d.ts: {}
            normalizePathSep.js: {}
          types.d.ts: {}
          types.js: {}
          watchers:
            FSEventsWatcher.d.ts: {}
            FSEventsWatcher.js: {}
            NodeWatcher.js: {}
            RecrawlWarning.js: {}
            WatchmanWatcher.js: {}
            common.js: {}
          worker.d.ts: {}
          worker.js: {}
        package.json: {}
      jest-jasmine2:
        LICENSE: {}
        build:
          ExpectationFailed.d.ts: {}
          ExpectationFailed.js: {}
          PCancelable.d.ts: {}
          PCancelable.js: {}
          assertionErrorMessage.d.ts: {}
          assertionErrorMessage.js: {}
          each.d.ts: {}
          each.js: {}
          errorOnPrivate.d.ts: {}
          errorOnPrivate.js: {}
          expectationResultFactory.d.ts: {}
          expectationResultFactory.js: {}
          index.d.ts: {}
          index.js: {}
          isError.d.ts: {}
          isError.js: {}
          jasmine:
            CallTracker.d.ts: {}
            CallTracker.js: {}
            Env.d.ts: {}
            Env.js: {}
            JsApiReporter.d.ts: {}
            JsApiReporter.js: {}
            ReportDispatcher.d.ts: {}
            ReportDispatcher.js: {}
            Spec.d.ts: {}
            Spec.js: {}
            SpyStrategy.d.ts: {}
            SpyStrategy.js: {}
            Suite.d.ts: {}
            Suite.js: {}
            Timer.d.ts: {}
            Timer.js: {}
            createSpy.d.ts: {}
            createSpy.js: {}
            jasmineLight.d.ts: {}
            jasmineLight.js: {}
            spyRegistry.d.ts: {}
            spyRegistry.js: {}
          jasmineAsyncInstall.d.ts: {}
          jasmineAsyncInstall.js: {}
          jestExpect.d.ts: {}
          jestExpect.js: {}
          pTimeout.d.ts: {}
          pTimeout.js: {}
          queueRunner.d.ts: {}
          queueRunner.js: {}
          reporter.d.ts: {}
          reporter.js: {}
          setup_jest_globals.d.ts: {}
          setup_jest_globals.js: {}
          treeProcessor.d.ts: {}
          treeProcessor.js: {}
          types.d.ts: {}
          types.js: {}
        node_modules:
          ansi-styles:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          chalk:
            index.d.ts: {}
            license: {}
            package.json: {}
            readme.md: {}
            source:
              index.js: {}
              templates.js: {}
              util.js: {}
          color-convert:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            conversions.js: {}
            index.js: {}
            package.json: {}
            route.js: {}
          color-name:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
      jest-leak-detector:
        LICENSE: {}
        README.md: {}
        build:
          index.d.ts: {}
          index.js: {}
        package.json: {}
      jest-matcher-utils:
        LICENSE: {}
        README.md: {}
        build:
          Replaceable.d.ts: {}
          Replaceable.js: {}
          deepCyclicCopyReplaceable.d.ts: {}
          deepCyclicCopyReplaceable.js: {}
          index.d.ts: {}
          index.js: {}
        node_modules:
          ansi-styles:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          chalk:
            index.d.ts: {}
            license: {}
            package.json: {}
            readme.md: {}
            source:
              index.js: {}
              templates.js: {}
              util.js: {}
          color-convert:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            conversions.js: {}
            index.js: {}
            package.json: {}
            route.js: {}
          color-name:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
      jest-message-util:
        LICENSE: {}
        build:
          index.d.ts: {}
          index.js: {}
          types.d.ts: {}
          types.js: {}
        node_modules:
          ansi-styles:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          chalk:
            index.d.ts: {}
            license: {}
            package.json: {}
            readme.md: {}
            source:
              index.js: {}
              templates.js: {}
              util.js: {}
          color-convert:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            conversions.js: {}
            index.js: {}
            package.json: {}
            route.js: {}
          color-name:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
      jest-mock:
        LICENSE: {}
        README.md: {}
        build:
          index.d.ts: {}
          index.js: {}
        package.json: {}
      jest-pnp-resolver:
        README.md: {}
        createRequire.js: {}
        getDefaultResolver.js: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
      jest-regex-util:
        LICENSE: {}
        build:
          index.d.ts: {}
          index.js: {}
        package.json: {}
      jest-resolve:
        LICENSE: {}
        build:
          ModuleNotFoundError.d.ts: {}
          ModuleNotFoundError.js: {}
          defaultResolver.d.ts: {}
          defaultResolver.js: {}
          fileWalkers.d.ts: {}
          fileWalkers.js: {}
          index.d.ts: {}
          index.js: {}
          isBuiltinModule.d.ts: {}
          isBuiltinModule.js: {}
          nodeModulesPaths.d.ts: {}
          nodeModulesPaths.js: {}
          resolver.d.ts: {}
          resolver.js: {}
          shouldLoadAsEsm.d.ts: {}
          shouldLoadAsEsm.js: {}
          types.d.ts: {}
          types.js: {}
          utils.d.ts: {}
          utils.js: {}
        node_modules:
          ansi-styles:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          chalk:
            index.d.ts: {}
            license: {}
            package.json: {}
            readme.md: {}
            source:
              index.js: {}
              templates.js: {}
              util.js: {}
          color-convert:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            conversions.js: {}
            index.js: {}
            package.json: {}
            route.js: {}
          color-name:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
      jest-resolve-dependencies:
        LICENSE: {}
        build:
          index.d.ts: {}
          index.js: {}
        package.json: {}
      jest-runner:
        LICENSE: {}
        build:
          index.d.ts: {}
          index.js: {}
          runTest.d.ts: {}
          runTest.js: {}
          testWorker.d.ts: {}
          testWorker.js: {}
          types.d.ts: {}
          types.js: {}
        node_modules:
          ansi-styles:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          chalk:
            index.d.ts: {}
            license: {}
            package.json: {}
            readme.md: {}
            source:
              index.js: {}
              templates.js: {}
              util.js: {}
          color-convert:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            conversions.js: {}
            index.js: {}
            package.json: {}
            route.js: {}
          color-name:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
      jest-runtime:
        LICENSE: {}
        build:
          helpers.d.ts: {}
          helpers.js: {}
          index.d.ts: {}
          index.js: {}
          types.d.ts: {}
          types.js: {}
        node_modules:
          ansi-styles:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          chalk:
            index.d.ts: {}
            license: {}
            package.json: {}
            readme.md: {}
            source:
              index.js: {}
              templates.js: {}
              util.js: {}
          color-convert:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            conversions.js: {}
            index.js: {}
            package.json: {}
            route.js: {}
          color-name:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
      jest-serializer:
        LICENSE: {}
        README.md: {}
        build:
          index.d.ts: {}
          index.js: {}
        package.json: {}
        v8.d.ts: {}
      jest-snapshot:
        LICENSE: {}
        build:
          InlineSnapshots.d.ts: {}
          InlineSnapshots.js: {}
          SnapshotResolver.d.ts: {}
          SnapshotResolver.js: {}
          State.d.ts: {}
          State.js: {}
          colors.d.ts: {}
          colors.js: {}
          dedentLines.d.ts: {}
          dedentLines.js: {}
          index.d.ts: {}
          index.js: {}
          mockSerializer.d.ts: {}
          mockSerializer.js: {}
          plugins.d.ts: {}
          plugins.js: {}
          printSnapshot.d.ts: {}
          printSnapshot.js: {}
          types.d.ts: {}
          types.js: {}
          utils.d.ts: {}
          utils.js: {}
        node_modules:
          ansi-styles:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          chalk:
            index.d.ts: {}
            license: {}
            package.json: {}
            readme.md: {}
            source:
              index.js: {}
              templates.js: {}
              util.js: {}
          color-convert:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            conversions.js: {}
            index.js: {}
            package.json: {}
            route.js: {}
          color-name:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
      jest-util:
        LICENSE: {}
        build:
          ErrorWithStack.d.ts: {}
          ErrorWithStack.js: {}
          clearLine.d.ts: {}
          clearLine.js: {}
          convertDescriptorToString.d.ts: {}
          convertDescriptorToString.js: {}
          createDirectory.d.ts: {}
          createDirectory.js: {}
          createProcessObject.d.ts: {}
          createProcessObject.js: {}
          deepCyclicCopy.d.ts: {}
          deepCyclicCopy.js: {}
          formatTime.d.ts: {}
          formatTime.js: {}
          globsToMatcher.d.ts: {}
          globsToMatcher.js: {}
          index.d.ts: {}
          index.js: {}
          installCommonGlobals.d.ts: {}
          installCommonGlobals.js: {}
          interopRequireDefault.d.ts: {}
          interopRequireDefault.js: {}
          isInteractive.d.ts: {}
          isInteractive.js: {}
          isPromise.d.ts: {}
          isPromise.js: {}
          pluralize.d.ts: {}
          pluralize.js: {}
          preRunMessage.d.ts: {}
          preRunMessage.js: {}
          replacePathSepForGlob.d.ts: {}
          replacePathSepForGlob.js: {}
          requireOrImportModule.d.ts: {}
          requireOrImportModule.js: {}
          setGlobal.d.ts: {}
          setGlobal.js: {}
          specialChars.d.ts: {}
          specialChars.js: {}
          testPathPatternToRegExp.d.ts: {}
          testPathPatternToRegExp.js: {}
          tryRealpath.d.ts: {}
          tryRealpath.js: {}
        node_modules:
          ansi-styles:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          chalk:
            index.d.ts: {}
            license: {}
            package.json: {}
            readme.md: {}
            source:
              index.js: {}
              templates.js: {}
              util.js: {}
          color-convert:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            conversions.js: {}
            index.js: {}
            package.json: {}
            route.js: {}
          color-name:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
      jest-validate:
        LICENSE: {}
        README.md: {}
        build:
          condition.d.ts: {}
          condition.js: {}
          defaultConfig.d.ts: {}
          defaultConfig.js: {}
          deprecated.d.ts: {}
          deprecated.js: {}
          errors.d.ts: {}
          errors.js: {}
          exampleConfig.d.ts: {}
          exampleConfig.js: {}
          index.d.ts: {}
          index.js: {}
          types.d.ts: {}
          types.js: {}
          utils.d.ts: {}
          utils.js: {}
          validate.d.ts: {}
          validate.js: {}
          validateCLIOptions.d.ts: {}
          validateCLIOptions.js: {}
          warnings.d.ts: {}
          warnings.js: {}
        node_modules:
          ansi-styles:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          chalk:
            index.d.ts: {}
            license: {}
            package.json: {}
            readme.md: {}
            source:
              index.js: {}
              templates.js: {}
              util.js: {}
          color-convert:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            conversions.js: {}
            index.js: {}
            package.json: {}
            route.js: {}
          color-name:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
      jest-watch-typeahead:
        LICENSE: {}
        README.md: {}
        build:
          file_name_plugin:
            plugin.js: {}
            prompt.js: {}
          index.js: {}
          lib:
            pattern_mode_helpers.js: {}
            scroll.js: {}
            utils.js: {}
          test_name_plugin:
            plugin.js: {}
            prompt.js: {}
          types:
            Config.js: {}
        filename.js: {}
        node_modules:
          '@jest':
            console:
              LICENSE: {}
              build:
                BufferedConsole.js: {}
                CustomConsole.js: {}
                NullConsole.js: {}
                getConsoleOutput.js: {}
                index.d.ts: {}
                index.js: {}
                types.js: {}
              node_modules:
                slash:
                  index.d.ts: {}
                  index.js: {}
                  license: {}
                  package.json: {}
                  readme.md: {}
              package.json: {}
            test-result:
              LICENSE: {}
              build:
                formatTestResults.js: {}
                helpers.js: {}
                index.d.ts: {}
                index.js: {}
                types.js: {}
              package.json: {}
            types:
              LICENSE: {}
              README.md: {}
              build:
                Circus.js: {}
                Config.js: {}
                Global.js: {}
                TestResult.js: {}
                Transform.js: {}
                index.d.ts: {}
                index.js: {}
              package.json: {}
          '@types':
            yargs:
              LICENSE: {}
              README.md: {}
              helpers.d.mts: {}
              helpers.d.ts: {}
              index.d.mts: {}
              index.d.ts: {}
              package.json: {}
              yargs.d.ts: {}
          ansi-styles:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          chalk:
            index.d.ts: {}
            license: {}
            package.json: {}
            readme.md: {}
            source:
              index.js: {}
              templates.js: {}
              util.js: {}
          color-convert:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            conversions.js: {}
            index.js: {}
            package.json: {}
            route.js: {}
          color-name:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          emittery:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          jest-message-util:
            LICENSE: {}
            build:
              index.d.ts: {}
              index.js: {}
              types.js: {}
            node_modules:
              slash:
                index.d.ts: {}
                index.js: {}
                license: {}
                package.json: {}
                readme.md: {}
            package.json: {}
          jest-regex-util:
            LICENSE: {}
            build:
              index.d.ts: {}
              index.js: {}
            package.json: {}
          jest-util:
            LICENSE: {}
            build:
              ErrorWithStack.js: {}
              clearLine.js: {}
              convertDescriptorToString.js: {}
              createDirectory.js: {}
              createProcessObject.js: {}
              deepCyclicCopy.js: {}
              formatTime.js: {}
              globsToMatcher.js: {}
              index.d.ts: {}
              index.js: {}
              installCommonGlobals.js: {}
              interopRequireDefault.js: {}
              isInteractive.js: {}
              isPromise.js: {}
              pluralize.js: {}
              preRunMessage.js: {}
              replacePathSepForGlob.js: {}
              requireOrImportModule.js: {}
              setGlobal.js: {}
              specialChars.js: {}
              testPathPatternToRegExp.js: {}
              tryRealpath.js: {}
            package.json: {}
          jest-watcher:
            LICENSE: {}
            build:
              BaseWatchPlugin.js: {}
              JestHooks.js: {}
              PatternPrompt.js: {}
              TestWatcher.js: {}
              constants.js: {}
              index.d.ts: {}
              index.js: {}
              lib:
                Prompt.js: {}
                colorize.js: {}
                formatTestNameByPattern.js: {}
                patternModeHelpers.js: {}
                scroll.js: {}
              types.js: {}
            node_modules:
              string-length:
                index.d.ts: {}
                index.js: {}
                license: {}
                package.json: {}
                readme.md: {}
              strip-ansi:
                index.d.ts: {}
                index.js: {}
                license: {}
                package.json: {}
                readme.md: {}
            package.json: {}
          pretty-format:
            LICENSE: {}
            README.md: {}
            build:
              collections.js: {}
              index.d.ts: {}
              index.js: {}
              plugins:
                AsymmetricMatcher.js: {}
                ConvertAnsi.js: {}
                DOMCollection.js: {}
                DOMElement.js: {}
                Immutable.js: {}
                ReactElement.js: {}
                ReactTestComponent.js: {}
                lib:
                  escapeHTML.js: {}
                  markup.js: {}
              types.js: {}
            node_modules:
              ansi-styles:
                index.d.ts: {}
                index.js: {}
                license: {}
                package.json: {}
                readme.md: {}
            package.json: {}
          react-is:
            LICENSE: {}
            README.md: {}
            cjs:
              react-is.development.js: {}
              react-is.production.min.js: {}
            index.js: {}
            package.json: {}
            umd:
              react-is.development.js: {}
              react-is.production.min.js: {}
          slash:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          string-length:
            index.d.ts: {}
            index.js: {}
            license: {}
            node_modules:
              char-regex:
                index.d.ts: {}
                index.js: {}
                license: {}
                package.json: {}
                readme.md: {}
            package.json: {}
            readme.md: {}
          strip-ansi:
            index.d.ts: {}
            index.js: {}
            license: {}
            node_modules:
              ansi-regex:
                index.d.ts: {}
                index.js: {}
                license: {}
                package.json: {}
                readme.md: {}
            package.json: {}
            readme.md: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
        testname.js: {}
      jest-watcher:
        LICENSE: {}
        build:
          BaseWatchPlugin.d.ts: {}
          BaseWatchPlugin.js: {}
          JestHooks.d.ts: {}
          JestHooks.js: {}
          PatternPrompt.d.ts: {}
          PatternPrompt.js: {}
          constants.d.ts: {}
          constants.js: {}
          index.d.ts: {}
          index.js: {}
          lib:
            Prompt.d.ts: {}
            Prompt.js: {}
            colorize.d.ts: {}
            colorize.js: {}
            formatTestNameByPattern.d.ts: {}
            formatTestNameByPattern.js: {}
            patternModeHelpers.d.ts: {}
            patternModeHelpers.js: {}
            scroll.d.ts: {}
            scroll.js: {}
          types.d.ts: {}
          types.js: {}
        node_modules:
          ansi-styles:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          chalk:
            index.d.ts: {}
            license: {}
            package.json: {}
            readme.md: {}
            source:
              index.js: {}
              templates.js: {}
              util.js: {}
          color-convert:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            conversions.js: {}
            index.js: {}
            package.json: {}
            route.js: {}
          color-name:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
      jest-worker:
        LICENSE: {}
        README.md: {}
        build:
          Farm.d.ts: {}
          Farm.js: {}
          FifoQueue.d.ts: {}
          FifoQueue.js: {}
          PriorityQueue.d.ts: {}
          PriorityQueue.js: {}
          WorkerPool.d.ts: {}
          WorkerPool.js: {}
          base:
            BaseWorkerPool.d.ts: {}
            BaseWorkerPool.js: {}
          index.d.ts: {}
          index.js: {}
          types.d.ts: {}
          types.js: {}
          workers:
            ChildProcessWorker.d.ts: {}
            ChildProcessWorker.js: {}
            NodeThreadsWorker.d.ts: {}
            NodeThreadsWorker.js: {}
            messageParent.d.ts: {}
            messageParent.js: {}
            processChild.d.ts: {}
            processChild.js: {}
            threadChild.d.ts: {}
            threadChild.js: {}
        node_modules:
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
      jiti:
        LICENSE: {}
        README.md: {}
        bin:
          jiti.js: {}
        dist:
          babel.d.ts: {}
          babel.js: {}
          jiti.d.ts: {}
          jiti.js: {}
          plugins:
            babel-plugin-transform-import-meta.d.ts: {}
            import-meta-env.d.ts: {}
          types.d.ts: {}
          utils.d.ts: {}
        lib:
          index.js: {}
        package.json: {}
        register.js: {}
      js-git:
        BACKERS-2.md: {}
        BACKERS.md: {}
        LICENSE: {}
        README.md: {}
        SPONSORS.md: {}
        art:
          architecture.svg: {}
          jsgit-sticker-sheet.svg: {}
        doc:
          lib:
            config-codec.md: {}
            deflate.md: {}
            inflate-stream.md: {}
            inflate.md: {}
            object-codec.md: {}
            pack-codec.md: {}
          mixins:
            fs-db.md: {}
            mem-db.md: {}
            pack-ops.md: {}
        lib:
          apply-delta.js: {}
          config-codec.js: {}
          defer.js: {}
          deflate.js: {}
          find-common.js: {}
          git-fs.js: {}
          inflate-stream.js: {}
          inflate.js: {}
          modes.js: {}
          object-codec.js: {}
          pack-codec.js: {}
          pkt-line.js: {}
          wrap-handler.js: {}
        mixins:
          add-cache.js: {}
          create-tree.js: {}
          delay.js: {}
          fall-through.js: {}
          formats.js: {}
          fs-db.js: {}
          indexed-db.js: {}
          mem-cache.js: {}
          mem-db.js: {}
          pack-ops.js: {}
          path-to-entry.js: {}
          read-combiner.js: {}
          sync.js: {}
          walkers.js: {}
          websql-db.js: {}
        net:
          git-fetch-pack.js: {}
          request-xhr.js: {}
          tcp-chrome-sockets.js: {}
          tcp-node.js: {}
          tcp-ws-proxy.js: {}
          transport-http.js: {}
          transport-tcp.js: {}
        package.json: {}
        test:
          run.js: {}
          sample-pack.js: {}
          test-config-codec.js: {}
          test-mem-db.js: {}
          test-object-codec.js: {}
          test-pack-codec.js: {}
          test-pack-ops.js: {}
          test-zlib.js: {}
      js-tokens:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      js-yaml:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        bin:
          js-yaml.js: {}
        dist:
          js-yaml.js: {}
          js-yaml.min.js: {}
        index.js: {}
        lib:
          js-yaml:
            common.js: {}
            dumper.js: {}
            exception.js: {}
            loader.js: {}
            mark.js: {}
            schema:
              core.js: {}
              default_full.js: {}
              default_safe.js: {}
              failsafe.js: {}
              json.js: {}
            schema.js: {}
            type:
              binary.js: {}
              bool.js: {}
              float.js: {}
              int.js: {}
              js:
                function.js: {}
                regexp.js: {}
                undefined.js: {}
              map.js: {}
              merge.js: {}
              null.js: {}
              omap.js: {}
              pairs.js: {}
              seq.js: {}
              set.js: {}
              str.js: {}
              timestamp.js: {}
            type.js: {}
          js-yaml.js: {}
        package.json: {}
      jsbn:
        .npmignore: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        example.html: {}
        example.js: {}
        index.js: {}
        package.json: {}
        test:
          es6-import.js: {}
      jsdom:
        LICENSE.txt: {}
        README.md: {}
        lib:
          api.js: {}
          jsdom:
            browser:
              Window.js: {}
              default-stylesheet.js: {}
              js-globals.json: {}
              not-implemented.js: {}
              parser:
                html.js: {}
                index.js: {}
                xml.js: {}
              resources:
                async-resource-queue.js: {}
                no-op-resource-loader.js: {}
                per-document-resource-loader.js: {}
                request-manager.js: {}
                resource-loader.js: {}
                resource-queue.js: {}
            level2:
              style.js: {}
            level3:
              xpath.js: {}
            living:
              aborting:
                AbortController-impl.js: {}
                AbortSignal-impl.js: {}
              attributes:
                Attr-impl.js: {}
                NamedNodeMap-impl.js: {}
              attributes.js: {}
              constraint-validation:
                DefaultConstraintValidation-impl.js: {}
                ValidityState-impl.js: {}
              cssom:
                StyleSheetList-impl.js: {}
              custom-elements:
                CustomElementRegistry-impl.js: {}
              documents.js: {}
              domparsing:
                DOMParser-impl.js: {}
                InnerHTML-impl.js: {}
                XMLSerializer-impl.js: {}
                parse5-adapter-serialization.js: {}
                serialization.js: {}
              events:
                CloseEvent-impl.js: {}
                CompositionEvent-impl.js: {}
                CustomEvent-impl.js: {}
                ErrorEvent-impl.js: {}
                Event-impl.js: {}
                EventModifierMixin-impl.js: {}
                EventTarget-impl.js: {}
                FocusEvent-impl.js: {}
                HashChangeEvent-impl.js: {}
                InputEvent-impl.js: {}
                KeyboardEvent-impl.js: {}
                MessageEvent-impl.js: {}
                MouseEvent-impl.js: {}
                PageTransitionEvent-impl.js: {}
                PopStateEvent-impl.js: {}
                ProgressEvent-impl.js: {}
                StorageEvent-impl.js: {}
                TouchEvent-impl.js: {}
                UIEvent-impl.js: {}
                WheelEvent-impl.js: {}
              fetch:
                Headers-impl.js: {}
                header-list.js: {}
                header-types.js: {}
              file-api:
                Blob-impl.js: {}
                File-impl.js: {}
                FileList-impl.js: {}
                FileReader-impl.js: {}
              generated:
                AbortController.js: {}
                AbortSignal.js: {}
                AbstractRange.js: {}
                AddEventListenerOptions.js: {}
                AssignedNodesOptions.js: {}
                Attr.js: {}
                BarProp.js: {}
                BinaryType.js: {}
                Blob.js: {}
                BlobCallback.js: {}
                BlobPropertyBag.js: {}
                CDATASection.js: {}
                CanPlayTypeResult.js: {}
                CharacterData.js: {}
                CloseEvent.js: {}
                CloseEventInit.js: {}
                Comment.js: {}
                CompositionEvent.js: {}
                CompositionEventInit.js: {}
                CustomElementConstructor.js: {}
                CustomElementRegistry.js: {}
                CustomEvent.js: {}
                CustomEventInit.js: {}
                DOMImplementation.js: {}
                DOMParser.js: {}
                DOMStringMap.js: {}
                DOMTokenList.js: {}
                Document.js: {}
                DocumentFragment.js: {}
                DocumentReadyState.js: {}
                DocumentType.js: {}
                Element.js: {}
                ElementCreationOptions.js: {}
                ElementDefinitionOptions.js: {}
                EndingType.js: {}
                ErrorEvent.js: {}
                ErrorEventInit.js: {}
                Event.js: {}
                EventHandlerNonNull.js: {}
                EventInit.js: {}
                EventListener.js: {}
                EventListenerOptions.js: {}
                EventModifierInit.js: {}
                EventTarget.js: {}
                External.js: {}
                File.js: {}
                FileList.js: {}
                FilePropertyBag.js: {}
                FileReader.js: {}
                FocusEvent.js: {}
                FocusEventInit.js: {}
                FormData.js: {}
                Function.js: {}
                GetRootNodeOptions.js: {}
                HTMLAnchorElement.js: {}
                HTMLAreaElement.js: {}
                HTMLAudioElement.js: {}
                HTMLBRElement.js: {}
                HTMLBaseElement.js: {}
                HTMLBodyElement.js: {}
                HTMLButtonElement.js: {}
                HTMLCanvasElement.js: {}
                HTMLCollection.js: {}
                HTMLDListElement.js: {}
                HTMLDataElement.js: {}
                HTMLDataListElement.js: {}
                HTMLDetailsElement.js: {}
                HTMLDialogElement.js: {}
                HTMLDirectoryElement.js: {}
                HTMLDivElement.js: {}
                HTMLElement.js: {}
                HTMLEmbedElement.js: {}
                HTMLFieldSetElement.js: {}
                HTMLFontElement.js: {}
                HTMLFormElement.js: {}
                HTMLFrameElement.js: {}
                HTMLFrameSetElement.js: {}
                HTMLHRElement.js: {}
                HTMLHeadElement.js: {}
                HTMLHeadingElement.js: {}
                HTMLHtmlElement.js: {}
                HTMLIFrameElement.js: {}
                HTMLImageElement.js: {}
                HTMLInputElement.js: {}
                HTMLLIElement.js: {}
                HTMLLabelElement.js: {}
                HTMLLegendElement.js: {}
                HTMLLinkElement.js: {}
                HTMLMapElement.js: {}
                HTMLMarqueeElement.js: {}
                HTMLMediaElement.js: {}
                HTMLMenuElement.js: {}
                HTMLMetaElement.js: {}
                HTMLMeterElement.js: {}
                HTMLModElement.js: {}
                HTMLOListElement.js: {}
                HTMLObjectElement.js: {}
                HTMLOptGroupElement.js: {}
                HTMLOptionElement.js: {}
                HTMLOptionsCollection.js: {}
                HTMLOutputElement.js: {}
                HTMLParagraphElement.js: {}
                HTMLParamElement.js: {}
                HTMLPictureElement.js: {}
                HTMLPreElement.js: {}
                HTMLProgressElement.js: {}
                HTMLQuoteElement.js: {}
                HTMLScriptElement.js: {}
                HTMLSelectElement.js: {}
                HTMLSlotElement.js: {}
                HTMLSourceElement.js: {}
                HTMLSpanElement.js: {}
                HTMLStyleElement.js: {}
                HTMLTableCaptionElement.js: {}
                HTMLTableCellElement.js: {}
                HTMLTableColElement.js: {}
                HTMLTableElement.js: {}
                HTMLTableRowElement.js: {}
                HTMLTableSectionElement.js: {}
                HTMLTemplateElement.js: {}
                HTMLTextAreaElement.js: {}
                HTMLTimeElement.js: {}
                HTMLTitleElement.js: {}
                HTMLTrackElement.js: {}
                HTMLUListElement.js: {}
                HTMLUnknownElement.js: {}
                HTMLVideoElement.js: {}
                HashChangeEvent.js: {}
                HashChangeEventInit.js: {}
                Headers.js: {}
                History.js: {}
                InputEvent.js: {}
                InputEventInit.js: {}
                KeyboardEvent.js: {}
                KeyboardEventInit.js: {}
                Location.js: {}
                MessageEvent.js: {}
                MessageEventInit.js: {}
                MimeType.js: {}
                MimeTypeArray.js: {}
                MouseEvent.js: {}
                MouseEventInit.js: {}
                MutationCallback.js: {}
                MutationObserver.js: {}
                MutationObserverInit.js: {}
                MutationRecord.js: {}
                NamedNodeMap.js: {}
                Navigator.js: {}
                Node.js: {}
                NodeFilter.js: {}
                NodeIterator.js: {}
                NodeList.js: {}
                OnBeforeUnloadEventHandlerNonNull.js: {}
                OnErrorEventHandlerNonNull.js: {}
                PageTransitionEvent.js: {}
                PageTransitionEventInit.js: {}
                Performance.js: {}
                Plugin.js: {}
                PluginArray.js: {}
                PopStateEvent.js: {}
                PopStateEventInit.js: {}
                ProcessingInstruction.js: {}
                ProgressEvent.js: {}
                ProgressEventInit.js: {}
                Range.js: {}
                SVGAnimatedString.js: {}
                SVGBoundingBoxOptions.js: {}
                SVGElement.js: {}
                SVGGraphicsElement.js: {}
                SVGNumber.js: {}
                SVGSVGElement.js: {}
                SVGStringList.js: {}
                SVGTitleElement.js: {}
                Screen.js: {}
                ScrollBehavior.js: {}
                ScrollIntoViewOptions.js: {}
                ScrollLogicalPosition.js: {}
                ScrollOptions.js: {}
                ScrollRestoration.js: {}
                Selection.js: {}
                SelectionMode.js: {}
                ShadowRoot.js: {}
                ShadowRootInit.js: {}
                ShadowRootMode.js: {}
                StaticRange.js: {}
                StaticRangeInit.js: {}
                Storage.js: {}
                StorageEvent.js: {}
                StorageEventInit.js: {}
                StyleSheetList.js: {}
                SupportedType.js: {}
                Text.js: {}
                TextTrackKind.js: {}
                TouchEvent.js: {}
                TouchEventInit.js: {}
                TreeWalker.js: {}
                UIEvent.js: {}
                UIEventInit.js: {}
                ValidityState.js: {}
                VisibilityState.js: {}
                VoidFunction.js: {}
                WebSocket.js: {}
                WheelEvent.js: {}
                WheelEventInit.js: {}
                XMLDocument.js: {}
                XMLHttpRequest.js: {}
                XMLHttpRequestEventTarget.js: {}
                XMLHttpRequestResponseType.js: {}
                XMLHttpRequestUpload.js: {}
                XMLSerializer.js: {}
                utils.js: {}
              helpers:
                agent-factory.js: {}
                binary-data.js: {}
                create-element.js: {}
                create-event-accessor.js: {}
                custom-elements.js: {}
                dates-and-times.js: {}
                details.js: {}
                document-base-url.js: {}
                events.js: {}
                focusing.js: {}
                form-controls.js: {}
                html-constructor.js: {}
                http-request.js: {}
                internal-constants.js: {}
                iterable-weak-set.js: {}
                json.js: {}
                mutation-observers.js: {}
                namespaces.js: {}
                node.js: {}
                number-and-date-inputs.js: {}
                ordered-set.js: {}
                runtime-script-errors.js: {}
                selectors.js: {}
                shadow-dom.js: {}
                strings.js: {}
                style-rules.js: {}
                stylesheets.js: {}
                svg:
                  basic-types.js: {}
                  render.js: {}
                text.js: {}
                traversal.js: {}
                validate-names.js: {}
              hr-time:
                Performance-impl.js: {}
              interfaces.js: {}
              mutation-observer:
                MutationObserver-impl.js: {}
                MutationRecord-impl.js: {}
              named-properties-window.js: {}
              navigator:
                MimeType-impl.js: {}
                MimeTypeArray-impl.js: {}
                Navigator-impl.js: {}
                NavigatorConcurrentHardware-impl.js: {}
                NavigatorCookies-impl.js: {}
                NavigatorID-impl.js: {}
                NavigatorLanguage-impl.js: {}
                NavigatorOnLine-impl.js: {}
                NavigatorPlugins-impl.js: {}
                Plugin-impl.js: {}
                PluginArray-impl.js: {}
              node-document-position.js: {}
              node-type.js: {}
              node.js: {}
              nodes:
                CDATASection-impl.js: {}
                CharacterData-impl.js: {}
                ChildNode-impl.js: {}
                Comment-impl.js: {}
                DOMImplementation-impl.js: {}
                DOMStringMap-impl.js: {}
                DOMTokenList-impl.js: {}
                Document-impl.js: {}
                DocumentFragment-impl.js: {}
                DocumentOrShadowRoot-impl.js: {}
                DocumentType-impl.js: {}
                Element-impl.js: {}
                ElementCSSInlineStyle-impl.js: {}
                ElementContentEditable-impl.js: {}
                GlobalEventHandlers-impl.js: {}
                HTMLAnchorElement-impl.js: {}
                HTMLAreaElement-impl.js: {}
                HTMLAudioElement-impl.js: {}
                HTMLBRElement-impl.js: {}
                HTMLBaseElement-impl.js: {}
                HTMLBodyElement-impl.js: {}
                HTMLButtonElement-impl.js: {}
                HTMLCanvasElement-impl.js: {}
                HTMLCollection-impl.js: {}
                HTMLDListElement-impl.js: {}
                HTMLDataElement-impl.js: {}
                HTMLDataListElement-impl.js: {}
                HTMLDetailsElement-impl.js: {}
                HTMLDialogElement-impl.js: {}
                HTMLDirectoryElement-impl.js: {}
                HTMLDivElement-impl.js: {}
                HTMLElement-impl.js: {}
                HTMLEmbedElement-impl.js: {}
                HTMLFieldSetElement-impl.js: {}
                HTMLFontElement-impl.js: {}
                HTMLFormElement-impl.js: {}
                HTMLFrameElement-impl.js: {}
                HTMLFrameSetElement-impl.js: {}
                HTMLHRElement-impl.js: {}
                HTMLHeadElement-impl.js: {}
                HTMLHeadingElement-impl.js: {}
                HTMLHtmlElement-impl.js: {}
                HTMLHyperlinkElementUtils-impl.js: {}
                HTMLIFrameElement-impl.js: {}
                HTMLImageElement-impl.js: {}
                HTMLInputElement-impl.js: {}
                HTMLLIElement-impl.js: {}
                HTMLLabelElement-impl.js: {}
                HTMLLegendElement-impl.js: {}
                HTMLLinkElement-impl.js: {}
                HTMLMapElement-impl.js: {}
                HTMLMarqueeElement-impl.js: {}
                HTMLMediaElement-impl.js: {}
                HTMLMenuElement-impl.js: {}
                HTMLMetaElement-impl.js: {}
                HTMLMeterElement-impl.js: {}
                HTMLModElement-impl.js: {}
                HTMLOListElement-impl.js: {}
                HTMLObjectElement-impl.js: {}
                HTMLOptGroupElement-impl.js: {}
                HTMLOptionElement-impl.js: {}
                HTMLOptionsCollection-impl.js: {}
                HTMLOrSVGElement-impl.js: {}
                HTMLOutputElement-impl.js: {}
                HTMLParagraphElement-impl.js: {}
                HTMLParamElement-impl.js: {}
                HTMLPictureElement-impl.js: {}
                HTMLPreElement-impl.js: {}
                HTMLProgressElement-impl.js: {}
                HTMLQuoteElement-impl.js: {}
                HTMLScriptElement-impl.js: {}
                HTMLSelectElement-impl.js: {}
                HTMLSlotElement-impl.js: {}
                HTMLSourceElement-impl.js: {}
                HTMLSpanElement-impl.js: {}
                HTMLStyleElement-impl.js: {}
                HTMLTableCaptionElement-impl.js: {}
                HTMLTableCellElement-impl.js: {}
                HTMLTableColElement-impl.js: {}
                HTMLTableElement-impl.js: {}
                HTMLTableRowElement-impl.js: {}
                HTMLTableSectionElement-impl.js: {}
                HTMLTemplateElement-impl.js: {}
                HTMLTextAreaElement-impl.js: {}
                HTMLTimeElement-impl.js: {}
                HTMLTitleElement-impl.js: {}
                HTMLTrackElement-impl.js: {}
                HTMLUListElement-impl.js: {}
                HTMLUnknownElement-impl.js: {}
                HTMLVideoElement-impl.js: {}
                LinkStyle-impl.js: {}
                Node-impl.js: {}
                NodeList-impl.js: {}
                NonDocumentTypeChildNode-impl.js: {}
                NonElementParentNode-impl.js: {}
                ParentNode-impl.js: {}
                ProcessingInstruction-impl.js: {}
                SVGElement-impl.js: {}
                SVGGraphicsElement-impl.js: {}
                SVGSVGElement-impl.js: {}
                SVGTests-impl.js: {}
                SVGTitleElement-impl.js: {}
                ShadowRoot-impl.js: {}
                Slotable-impl.js: {}
                Text-impl.js: {}
                WindowEventHandlers-impl.js: {}
                XMLDocument-impl.js: {}
              post-message.js: {}
              range:
                AbstractRange-impl.js: {}
                Range-impl.js: {}
                StaticRange-impl.js: {}
                boundary-point.js: {}
              selection:
                Selection-impl.js: {}
              svg:
                SVGAnimatedString-impl.js: {}
                SVGListBase.js: {}
                SVGNumber-impl.js: {}
                SVGStringList-impl.js: {}
              traversal:
                NodeIterator-impl.js: {}
                TreeWalker-impl.js: {}
                helpers.js: {}
              websockets:
                WebSocket-impl-browser.js: {}
                WebSocket-impl.js: {}
              webstorage:
                Storage-impl.js: {}
              window:
                BarProp-impl.js: {}
                External-impl.js: {}
                History-impl.js: {}
                Location-impl.js: {}
                Screen-impl.js: {}
                SessionHistory.js: {}
                navigation.js: {}
              xhr:
                FormData-impl.js: {}
                XMLHttpRequest-impl.js: {}
                XMLHttpRequestEventTarget-impl.js: {}
                XMLHttpRequestUpload-impl.js: {}
                xhr-sync-worker.js: {}
                xhr-utils.js: {}
            named-properties-tracker.js: {}
            utils.js: {}
            virtual-console.js: {}
            vm-shim.js: {}
        package.json: {}
      jsesc:
        LICENSE-MIT.txt: {}
        README.md: {}
        bin:
          jsesc: {}
        jsesc.js: {}
        man:
          jsesc.1: {}
        package.json: {}
      json-buffer:
        .travis.yml: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      json-parse-even-better-errors:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        index.js: {}
        package.json: {}
      json-schema:
        LICENSE: {}
        README.md: {}
        lib:
          links.js: {}
          validate.js: {}
        package.json: {}
      json-schema-traverse:
        .eslintrc.yml: {}
        .travis.yml: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        spec:
          .eslintrc.yml: {}
          fixtures:
            schema.js: {}
          index.spec.js: {}
      json-stable-stringify-without-jsonify:
        .npmignore: {}
        .travis.yml: {}
        LICENSE: {}
        example:
          key_cmp.js: {}
          nested.js: {}
          str.js: {}
          value_cmp.js: {}
        index.js: {}
        package.json: {}
        readme.markdown: {}
        test:
          cmp.js: {}
          nested.js: {}
          replacer.js: {}
          space.js: {}
          str.js: {}
          to-json.js: {}
      json-stringify-safe:
        .npmignore: {}
        CHANGELOG.md: {}
        LICENSE: {}
        Makefile: {}
        README.md: {}
        package.json: {}
        stringify.js: {}
        test:
          mocha.opts: {}
          stringify_test.js: {}
      json5:
        LICENSE.md: {}
        README.md: {}
        dist:
          index.js: {}
          index.min.js: {}
          index.min.mjs: {}
          index.mjs: {}
        lib:
          cli.js: {}
          index.d.ts: {}
          index.js: {}
          parse.d.ts: {}
          parse.js: {}
          register.js: {}
          require.js: {}
          stringify.d.ts: {}
          stringify.js: {}
          unicode.d.ts: {}
          unicode.js: {}
          util.d.ts: {}
          util.js: {}
        package.json: {}
      jsonfile:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        utils.js: {}
      jsonpath:
        .jscsrc: {}
        .jshintrc: {}
        .travis.yml: {}
        Dockerfile: {}
        Gruntfile.js: {}
        LICENSE: {}
        README.md: {}
        bin:
          generate_parser.js: {}
        fig.yml: {}
        generated:
          parser.js: {}
        include:
          action.js: {}
          module.js: {}
        index.js: {}
        jsonpath.js: {}
        jsonpath.min.js: {}
        lib:
          aesprim.js: {}
          dict.js: {}
          grammar.js: {}
          handlers.js: {}
          index.js: {}
          parser.js: {}
          slice.js: {}
        node_modules:
          .bin:
            esparse: {}
            esvalidate: {}
          esprima:
            README.md: {}
            bin:
              esparse.js: {}
              esvalidate.js: {}
            esprima.js: {}
            package.json: {}
            test:
              compat.js: {}
              reflect.js: {}
              run.js: {}
              runner.js: {}
              test.js: {}
        package.json: {}
        test:
          data:
            store.json: {}
          lessons.js: {}
          parse.js: {}
          query.js: {}
          slice.js: {}
          stringify.js: {}
          sugar.js: {}
      jsonpointer:
        LICENSE.md: {}
        README.md: {}
        jsonpointer.d.ts: {}
        jsonpointer.js: {}
        package.json: {}
      jsx-ast-utils:
        .babelrc: {}
        .eslintignore: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        __tests__:
          helper.js: {}
          src:
            elementType-test.js: {}
            eventHandlers-test.js: {}
            getProp-parser-test.js: {}
            getProp-test.js: {}
            getPropLiteralValue-babelparser-test.js: {}
            getPropLiteralValue-flowparser-test.js: {}
            getPropValue-babelparser-test.js: {}
            getPropValue-flowparser-test.js: {}
            hasProp-test.js: {}
            index-test.js: {}
            propName-test.js: {}
        elementType.js: {}
        eventHandlers.js: {}
        eventHandlersByType.js: {}
        getLiteralPropValue.js: {}
        getProp.js: {}
        getPropValue.js: {}
        hasAnyProp.js: {}
        hasEveryProp.js: {}
        hasProp.js: {}
        lib:
          elementType.js: {}
          eventHandlers.js: {}
          getProp.js: {}
          getPropValue.js: {}
          hasProp.js: {}
          index.js: {}
          propName.js: {}
          values:
            JSXElement.js: {}
            JSXFragment.js: {}
            JSXText.js: {}
            Literal.js: {}
            expressions:
              ArrayExpression.js: {}
              AssignmentExpression.js: {}
              BinaryExpression.js: {}
              BindExpression.js: {}
              CallExpression.js: {}
              ChainExpression.js: {}
              ConditionalExpression.js: {}
              FunctionExpression.js: {}
              Identifier.js: {}
              LogicalExpression.js: {}
              MemberExpression.js: {}
              NewExpression.js: {}
              ObjectExpression.js: {}
              OptionalCallExpression.js: {}
              OptionalMemberExpression.js: {}
              SequenceExpression.js: {}
              SpreadElement.js: {}
              TSNonNullExpression.js: {}
              TaggedTemplateExpression.js: {}
              TemplateLiteral.js: {}
              ThisExpression.js: {}
              TypeCastExpression.js: {}
              UnaryExpression.js: {}
              UpdateExpression.js: {}
              index.js: {}
            index.js: {}
        package.json: {}
        propName.js: {}
        src:
          elementType.js: {}
          eventHandlers.js: {}
          getProp.js: {}
          getPropValue.js: {}
          hasProp.js: {}
          index.js: {}
          propName.js: {}
          values:
            JSXElement.js: {}
            JSXFragment.js: {}
            JSXText.js: {}
            Literal.js: {}
            expressions:
              ArrayExpression.js: {}
              AssignmentExpression.js: {}
              BinaryExpression.js: {}
              BindExpression.js: {}
              CallExpression.js: {}
              ChainExpression.js: {}
              ConditionalExpression.js: {}
              FunctionExpression.js: {}
              Identifier.js: {}
              LogicalExpression.js: {}
              MemberExpression.js: {}
              NewExpression.js: {}
              ObjectExpression.js: {}
              OptionalCallExpression.js: {}
              OptionalMemberExpression.js: {}
              SequenceExpression.js: {}
              SpreadElement.js: {}
              TSNonNullExpression.js: {}
              TaggedTemplateExpression.js: {}
              TemplateLiteral.js: {}
              ThisExpression.js: {}
              TypeCastExpression.js: {}
              UnaryExpression.js: {}
              UpdateExpression.js: {}
              index.js: {}
            index.js: {}
      keyv:
        README.md: {}
        package.json: {}
        src:
          index.d.ts: {}
          index.js: {}
      kind-of:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      kleur:
        index.js: {}
        kleur.d.ts: {}
        license: {}
        package.json: {}
        readme.md: {}
      klona:
        dist:
          index.js: {}
          index.min.js: {}
          index.mjs: {}
        full:
          index.d.ts: {}
          index.js: {}
          index.min.js: {}
          index.mjs: {}
        index.d.ts: {}
        json:
          index.d.ts: {}
          index.js: {}
          index.min.js: {}
          index.mjs: {}
        license: {}
        lite:
          index.d.ts: {}
          index.js: {}
          index.min.js: {}
          index.mjs: {}
        package.json: {}
        readme.md: {}
      language-subtag-registry:
        README.md: {}
        data:
          json:
            collection.json: {}
            extlang.json: {}
            grandfathered.json: {}
            index.json: {}
            language.json: {}
            macrolanguage.json: {}
            meta.json: {}
            private-use.json: {}
            redundant.json: {}
            region.json: {}
            registry.json: {}
            script.json: {}
            special.json: {}
            variant.json: {}
        package.json: {}
      language-tags:
        README.md: {}
        lib:
          Subtag.js: {}
          Tag.js: {}
          index.js: {}
        package.json: {}
      launch-editor:
        LICENSE: {}
        editor-info:
          linux.js: {}
          osx.js: {}
          windows.js: {}
        get-args.js: {}
        guess.js: {}
        index.js: {}
        package.json: {}
      lazy:
        .npmignore: {}
        README.md: {}
        lazy.js: {}
        lazy.js~: {}
        package.json: {}
        package.json~: {}
        test:
          bucket.js: {}
          complex.js: {}
          custom.js: {}
          em.js: {}
          filter.js: {}
          foldr.js: {}
          forEach.js: {}
          head.js: {}
          join.js: {}
          lines.js: {}
          map.js: {}
          pipe.js: {}
          product.js: {}
          range.js: {}
          skip.js: {}
          sum.js: {}
          tail.js: {}
          take.js: {}
          takeWhile.js: {}
      leven:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      levn:
        LICENSE: {}
        README.md: {}
        lib:
          cast.js: {}
          index.js: {}
          parse-string.js: {}
        package.json: {}
      lilconfig:
        LICENSE: {}
        dist:
          index.d.ts: {}
          index.js: {}
        package.json: {}
        readme.md: {}
      lines-and-columns:
        LICENSE: {}
        README.md: {}
        build:
          index.d.ts: {}
          index.js: {}
        package.json: {}
      loader-runner:
        LICENSE: {}
        README.md: {}
        lib:
          LoaderLoadingError.js: {}
          LoaderRunner.js: {}
          loadLoader.js: {}
        package.json: {}
      loader-utils:
        LICENSE: {}
        README.md: {}
        lib:
          getCurrentRequest.js: {}
          getHashDigest.js: {}
          getOptions.js: {}
          getRemainingRequest.js: {}
          hash:
            BatchedHash.js: {}
            md4.js: {}
            wasm-hash.js: {}
          index.js: {}
          interpolateName.js: {}
          isUrlRequest.js: {}
          parseQuery.js: {}
          parseString.js: {}
          stringifyRequest.js: {}
          urlToRequest.js: {}
        package.json: {}
      locate-path:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      lodash:
        LICENSE: {}
        README.md: {}
        _DataView.js: {}
        _Hash.js: {}
        _LazyWrapper.js: {}
        _ListCache.js: {}
        _LodashWrapper.js: {}
        _Map.js: {}
        _MapCache.js: {}
        _Promise.js: {}
        _Set.js: {}
        _SetCache.js: {}
        _Stack.js: {}
        _Symbol.js: {}
        _Uint8Array.js: {}
        _WeakMap.js: {}
        _apply.js: {}
        _arrayAggregator.js: {}
        _arrayEach.js: {}
        _arrayEachRight.js: {}
        _arrayEvery.js: {}
        _arrayFilter.js: {}
        _arrayIncludes.js: {}
        _arrayIncludesWith.js: {}
        _arrayLikeKeys.js: {}
        _arrayMap.js: {}
        _arrayPush.js: {}
        _arrayReduce.js: {}
        _arrayReduceRight.js: {}
        _arraySample.js: {}
        _arraySampleSize.js: {}
        _arrayShuffle.js: {}
        _arraySome.js: {}
        _asciiSize.js: {}
        _asciiToArray.js: {}
        _asciiWords.js: {}
        _assignMergeValue.js: {}
        _assignValue.js: {}
        _assocIndexOf.js: {}
        _baseAggregator.js: {}
        _baseAssign.js: {}
        _baseAssignIn.js: {}
        _baseAssignValue.js: {}
        _baseAt.js: {}
        _baseClamp.js: {}
        _baseClone.js: {}
        _baseConforms.js: {}
        _baseConformsTo.js: {}
        _baseCreate.js: {}
        _baseDelay.js: {}
        _baseDifference.js: {}
        _baseEach.js: {}
        _baseEachRight.js: {}
        _baseEvery.js: {}
        _baseExtremum.js: {}
        _baseFill.js: {}
        _baseFilter.js: {}
        _baseFindIndex.js: {}
        _baseFindKey.js: {}
        _baseFlatten.js: {}
        _baseFor.js: {}
        _baseForOwn.js: {}
        _baseForOwnRight.js: {}
        _baseForRight.js: {}
        _baseFunctions.js: {}
        _baseGet.js: {}
        _baseGetAllKeys.js: {}
        _baseGetTag.js: {}
        _baseGt.js: {}
        _baseHas.js: {}
        _baseHasIn.js: {}
        _baseInRange.js: {}
        _baseIndexOf.js: {}
        _baseIndexOfWith.js: {}
        _baseIntersection.js: {}
        _baseInverter.js: {}
        _baseInvoke.js: {}
        _baseIsArguments.js: {}
        _baseIsArrayBuffer.js: {}
        _baseIsDate.js: {}
        _baseIsEqual.js: {}
        _baseIsEqualDeep.js: {}
        _baseIsMap.js: {}
        _baseIsMatch.js: {}
        _baseIsNaN.js: {}
        _baseIsNative.js: {}
        _baseIsRegExp.js: {}
        _baseIsSet.js: {}
        _baseIsTypedArray.js: {}
        _baseIteratee.js: {}
        _baseKeys.js: {}
        _baseKeysIn.js: {}
        _baseLodash.js: {}
        _baseLt.js: {}
        _baseMap.js: {}
        _baseMatches.js: {}
        _baseMatchesProperty.js: {}
        _baseMean.js: {}
        _baseMerge.js: {}
        _baseMergeDeep.js: {}
        _baseNth.js: {}
        _baseOrderBy.js: {}
        _basePick.js: {}
        _basePickBy.js: {}
        _baseProperty.js: {}
        _basePropertyDeep.js: {}
        _basePropertyOf.js: {}
        _basePullAll.js: {}
        _basePullAt.js: {}
        _baseRandom.js: {}
        _baseRange.js: {}
        _baseReduce.js: {}
        _baseRepeat.js: {}
        _baseRest.js: {}
        _baseSample.js: {}
        _baseSampleSize.js: {}
        _baseSet.js: {}
        _baseSetData.js: {}
        _baseSetToString.js: {}
        _baseShuffle.js: {}
        _baseSlice.js: {}
        _baseSome.js: {}
        _baseSortBy.js: {}
        _baseSortedIndex.js: {}
        _baseSortedIndexBy.js: {}
        _baseSortedUniq.js: {}
        _baseSum.js: {}
        _baseTimes.js: {}
        _baseToNumber.js: {}
        _baseToPairs.js: {}
        _baseToString.js: {}
        _baseTrim.js: {}
        _baseUnary.js: {}
        _baseUniq.js: {}
        _baseUnset.js: {}
        _baseUpdate.js: {}
        _baseValues.js: {}
        _baseWhile.js: {}
        _baseWrapperValue.js: {}
        _baseXor.js: {}
        _baseZipObject.js: {}
        _cacheHas.js: {}
        _castArrayLikeObject.js: {}
        _castFunction.js: {}
        _castPath.js: {}
        _castRest.js: {}
        _castSlice.js: {}
        _charsEndIndex.js: {}
        _charsStartIndex.js: {}
        _cloneArrayBuffer.js: {}
        _cloneBuffer.js: {}
        _cloneDataView.js: {}
        _cloneRegExp.js: {}
        _cloneSymbol.js: {}
        _cloneTypedArray.js: {}
        _compareAscending.js: {}
        _compareMultiple.js: {}
        _composeArgs.js: {}
        _composeArgsRight.js: {}
        _copyArray.js: {}
        _copyObject.js: {}
        _copySymbols.js: {}
        _copySymbolsIn.js: {}
        _coreJsData.js: {}
        _countHolders.js: {}
        _createAggregator.js: {}
        _createAssigner.js: {}
        _createBaseEach.js: {}
        _createBaseFor.js: {}
        _createBind.js: {}
        _createCaseFirst.js: {}
        _createCompounder.js: {}
        _createCtor.js: {}
        _createCurry.js: {}
        _createFind.js: {}
        _createFlow.js: {}
        _createHybrid.js: {}
        _createInverter.js: {}
        _createMathOperation.js: {}
        _createOver.js: {}
        _createPadding.js: {}
        _createPartial.js: {}
        _createRange.js: {}
        _createRecurry.js: {}
        _createRelationalOperation.js: {}
        _createRound.js: {}
        _createSet.js: {}
        _createToPairs.js: {}
        _createWrap.js: {}
        _customDefaultsAssignIn.js: {}
        _customDefaultsMerge.js: {}
        _customOmitClone.js: {}
        _deburrLetter.js: {}
        _defineProperty.js: {}
        _equalArrays.js: {}
        _equalByTag.js: {}
        _equalObjects.js: {}
        _escapeHtmlChar.js: {}
        _escapeStringChar.js: {}
        _flatRest.js: {}
        _freeGlobal.js: {}
        _getAllKeys.js: {}
        _getAllKeysIn.js: {}
        _getData.js: {}
        _getFuncName.js: {}
        _getHolder.js: {}
        _getMapData.js: {}
        _getMatchData.js: {}
        _getNative.js: {}
        _getPrototype.js: {}
        _getRawTag.js: {}
        _getSymbols.js: {}
        _getSymbolsIn.js: {}
        _getTag.js: {}
        _getValue.js: {}
        _getView.js: {}
        _getWrapDetails.js: {}
        _hasPath.js: {}
        _hasUnicode.js: {}
        _hasUnicodeWord.js: {}
        _hashClear.js: {}
        _hashDelete.js: {}
        _hashGet.js: {}
        _hashHas.js: {}
        _hashSet.js: {}
        _initCloneArray.js: {}
        _initCloneByTag.js: {}
        _initCloneObject.js: {}
        _insertWrapDetails.js: {}
        _isFlattenable.js: {}
        _isIndex.js: {}
        _isIterateeCall.js: {}
        _isKey.js: {}
        _isKeyable.js: {}
        _isLaziable.js: {}
        _isMaskable.js: {}
        _isMasked.js: {}
        _isPrototype.js: {}
        _isStrictComparable.js: {}
        _iteratorToArray.js: {}
        _lazyClone.js: {}
        _lazyReverse.js: {}
        _lazyValue.js: {}
        _listCacheClear.js: {}
        _listCacheDelete.js: {}
        _listCacheGet.js: {}
        _listCacheHas.js: {}
        _listCacheSet.js: {}
        _mapCacheClear.js: {}
        _mapCacheDelete.js: {}
        _mapCacheGet.js: {}
        _mapCacheHas.js: {}
        _mapCacheSet.js: {}
        _mapToArray.js: {}
        _matchesStrictComparable.js: {}
        _memoizeCapped.js: {}
        _mergeData.js: {}
        _metaMap.js: {}
        _nativeCreate.js: {}
        _nativeKeys.js: {}
        _nativeKeysIn.js: {}
        _nodeUtil.js: {}
        _objectToString.js: {}
        _overArg.js: {}
        _overRest.js: {}
        _parent.js: {}
        _reEscape.js: {}
        _reEvaluate.js: {}
        _reInterpolate.js: {}
        _realNames.js: {}
        _reorder.js: {}
        _replaceHolders.js: {}
        _root.js: {}
        _safeGet.js: {}
        _setCacheAdd.js: {}
        _setCacheHas.js: {}
        _setData.js: {}
        _setToArray.js: {}
        _setToPairs.js: {}
        _setToString.js: {}
        _setWrapToString.js: {}
        _shortOut.js: {}
        _shuffleSelf.js: {}
        _stackClear.js: {}
        _stackDelete.js: {}
        _stackGet.js: {}
        _stackHas.js: {}
        _stackSet.js: {}
        _strictIndexOf.js: {}
        _strictLastIndexOf.js: {}
        _stringSize.js: {}
        _stringToArray.js: {}
        _stringToPath.js: {}
        _toKey.js: {}
        _toSource.js: {}
        _trimmedEndIndex.js: {}
        _unescapeHtmlChar.js: {}
        _unicodeSize.js: {}
        _unicodeToArray.js: {}
        _unicodeWords.js: {}
        _updateWrapDetails.js: {}
        _wrapperClone.js: {}
        add.js: {}
        after.js: {}
        array.js: {}
        ary.js: {}
        assign.js: {}
        assignIn.js: {}
        assignInWith.js: {}
        assignWith.js: {}
        at.js: {}
        attempt.js: {}
        before.js: {}
        bind.js: {}
        bindAll.js: {}
        bindKey.js: {}
        camelCase.js: {}
        capitalize.js: {}
        castArray.js: {}
        ceil.js: {}
        chain.js: {}
        chunk.js: {}
        clamp.js: {}
        clone.js: {}
        cloneDeep.js: {}
        cloneDeepWith.js: {}
        cloneWith.js: {}
        collection.js: {}
        commit.js: {}
        compact.js: {}
        concat.js: {}
        cond.js: {}
        conforms.js: {}
        conformsTo.js: {}
        constant.js: {}
        core.js: {}
        core.min.js: {}
        countBy.js: {}
        create.js: {}
        curry.js: {}
        curryRight.js: {}
        date.js: {}
        debounce.js: {}
        deburr.js: {}
        defaultTo.js: {}
        defaults.js: {}
        defaultsDeep.js: {}
        defer.js: {}
        delay.js: {}
        difference.js: {}
        differenceBy.js: {}
        differenceWith.js: {}
        divide.js: {}
        drop.js: {}
        dropRight.js: {}
        dropRightWhile.js: {}
        dropWhile.js: {}
        each.js: {}
        eachRight.js: {}
        endsWith.js: {}
        entries.js: {}
        entriesIn.js: {}
        eq.js: {}
        escape.js: {}
        escapeRegExp.js: {}
        every.js: {}
        extend.js: {}
        extendWith.js: {}
        fill.js: {}
        filter.js: {}
        find.js: {}
        findIndex.js: {}
        findKey.js: {}
        findLast.js: {}
        findLastIndex.js: {}
        findLastKey.js: {}
        first.js: {}
        flake.lock: {}
        flake.nix: {}
        flatMap.js: {}
        flatMapDeep.js: {}
        flatMapDepth.js: {}
        flatten.js: {}
        flattenDeep.js: {}
        flattenDepth.js: {}
        flip.js: {}
        floor.js: {}
        flow.js: {}
        flowRight.js: {}
        forEach.js: {}
        forEachRight.js: {}
        forIn.js: {}
        forInRight.js: {}
        forOwn.js: {}
        forOwnRight.js: {}
        fp:
          F.js: {}
          T.js: {}
          __.js: {}
          _baseConvert.js: {}
          _convertBrowser.js: {}
          _falseOptions.js: {}
          _mapping.js: {}
          _util.js: {}
          add.js: {}
          after.js: {}
          all.js: {}
          allPass.js: {}
          always.js: {}
          any.js: {}
          anyPass.js: {}
          apply.js: {}
          array.js: {}
          ary.js: {}
          assign.js: {}
          assignAll.js: {}
          assignAllWith.js: {}
          assignIn.js: {}
          assignInAll.js: {}
          assignInAllWith.js: {}
          assignInWith.js: {}
          assignWith.js: {}
          assoc.js: {}
          assocPath.js: {}
          at.js: {}
          attempt.js: {}
          before.js: {}
          bind.js: {}
          bindAll.js: {}
          bindKey.js: {}
          camelCase.js: {}
          capitalize.js: {}
          castArray.js: {}
          ceil.js: {}
          chain.js: {}
          chunk.js: {}
          clamp.js: {}
          clone.js: {}
          cloneDeep.js: {}
          cloneDeepWith.js: {}
          cloneWith.js: {}
          collection.js: {}
          commit.js: {}
          compact.js: {}
          complement.js: {}
          compose.js: {}
          concat.js: {}
          cond.js: {}
          conforms.js: {}
          conformsTo.js: {}
          constant.js: {}
          contains.js: {}
          convert.js: {}
          countBy.js: {}
          create.js: {}
          curry.js: {}
          curryN.js: {}
          curryRight.js: {}
          curryRightN.js: {}
          date.js: {}
          debounce.js: {}
          deburr.js: {}
          defaultTo.js: {}
          defaults.js: {}
          defaultsAll.js: {}
          defaultsDeep.js: {}
          defaultsDeepAll.js: {}
          defer.js: {}
          delay.js: {}
          difference.js: {}
          differenceBy.js: {}
          differenceWith.js: {}
          dissoc.js: {}
          dissocPath.js: {}
          divide.js: {}
          drop.js: {}
          dropLast.js: {}
          dropLastWhile.js: {}
          dropRight.js: {}
          dropRightWhile.js: {}
          dropWhile.js: {}
          each.js: {}
          eachRight.js: {}
          endsWith.js: {}
          entries.js: {}
          entriesIn.js: {}
          eq.js: {}
          equals.js: {}
          escape.js: {}
          escapeRegExp.js: {}
          every.js: {}
          extend.js: {}
          extendAll.js: {}
          extendAllWith.js: {}
          extendWith.js: {}
          fill.js: {}
          filter.js: {}
          find.js: {}
          findFrom.js: {}
          findIndex.js: {}
          findIndexFrom.js: {}
          findKey.js: {}
          findLast.js: {}
          findLastFrom.js: {}
          findLastIndex.js: {}
          findLastIndexFrom.js: {}
          findLastKey.js: {}
          first.js: {}
          flatMap.js: {}
          flatMapDeep.js: {}
          flatMapDepth.js: {}
          flatten.js: {}
          flattenDeep.js: {}
          flattenDepth.js: {}
          flip.js: {}
          floor.js: {}
          flow.js: {}
          flowRight.js: {}
          forEach.js: {}
          forEachRight.js: {}
          forIn.js: {}
          forInRight.js: {}
          forOwn.js: {}
          forOwnRight.js: {}
          fromPairs.js: {}
          function.js: {}
          functions.js: {}
          functionsIn.js: {}
          get.js: {}
          getOr.js: {}
          groupBy.js: {}
          gt.js: {}
          gte.js: {}
          has.js: {}
          hasIn.js: {}
          head.js: {}
          identical.js: {}
          identity.js: {}
          inRange.js: {}
          includes.js: {}
          includesFrom.js: {}
          indexBy.js: {}
          indexOf.js: {}
          indexOfFrom.js: {}
          init.js: {}
          initial.js: {}
          intersection.js: {}
          intersectionBy.js: {}
          intersectionWith.js: {}
          invert.js: {}
          invertBy.js: {}
          invertObj.js: {}
          invoke.js: {}
          invokeArgs.js: {}
          invokeArgsMap.js: {}
          invokeMap.js: {}
          isArguments.js: {}
          isArray.js: {}
          isArrayBuffer.js: {}
          isArrayLike.js: {}
          isArrayLikeObject.js: {}
          isBoolean.js: {}
          isBuffer.js: {}
          isDate.js: {}
          isElement.js: {}
          isEmpty.js: {}
          isEqual.js: {}
          isEqualWith.js: {}
          isError.js: {}
          isFinite.js: {}
          isFunction.js: {}
          isInteger.js: {}
          isLength.js: {}
          isMap.js: {}
          isMatch.js: {}
          isMatchWith.js: {}
          isNaN.js: {}
          isNative.js: {}
          isNil.js: {}
          isNull.js: {}
          isNumber.js: {}
          isObject.js: {}
          isObjectLike.js: {}
          isPlainObject.js: {}
          isRegExp.js: {}
          isSafeInteger.js: {}
          isSet.js: {}
          isString.js: {}
          isSymbol.js: {}
          isTypedArray.js: {}
          isUndefined.js: {}
          isWeakMap.js: {}
          isWeakSet.js: {}
          iteratee.js: {}
          join.js: {}
          juxt.js: {}
          kebabCase.js: {}
          keyBy.js: {}
          keys.js: {}
          keysIn.js: {}
          lang.js: {}
          last.js: {}
          lastIndexOf.js: {}
          lastIndexOfFrom.js: {}
          lowerCase.js: {}
          lowerFirst.js: {}
          lt.js: {}
          lte.js: {}
          map.js: {}
          mapKeys.js: {}
          mapValues.js: {}
          matches.js: {}
          matchesProperty.js: {}
          math.js: {}
          max.js: {}
          maxBy.js: {}
          mean.js: {}
          meanBy.js: {}
          memoize.js: {}
          merge.js: {}
          mergeAll.js: {}
          mergeAllWith.js: {}
          mergeWith.js: {}
          method.js: {}
          methodOf.js: {}
          min.js: {}
          minBy.js: {}
          mixin.js: {}
          multiply.js: {}
          nAry.js: {}
          negate.js: {}
          next.js: {}
          noop.js: {}
          now.js: {}
          nth.js: {}
          nthArg.js: {}
          number.js: {}
          object.js: {}
          omit.js: {}
          omitAll.js: {}
          omitBy.js: {}
          once.js: {}
          orderBy.js: {}
          over.js: {}
          overArgs.js: {}
          overEvery.js: {}
          overSome.js: {}
          pad.js: {}
          padChars.js: {}
          padCharsEnd.js: {}
          padCharsStart.js: {}
          padEnd.js: {}
          padStart.js: {}
          parseInt.js: {}
          partial.js: {}
          partialRight.js: {}
          partition.js: {}
          path.js: {}
          pathEq.js: {}
          pathOr.js: {}
          paths.js: {}
          pick.js: {}
          pickAll.js: {}
          pickBy.js: {}
          pipe.js: {}
          placeholder.js: {}
          plant.js: {}
          pluck.js: {}
          prop.js: {}
          propEq.js: {}
          propOr.js: {}
          property.js: {}
          propertyOf.js: {}
          props.js: {}
          pull.js: {}
          pullAll.js: {}
          pullAllBy.js: {}
          pullAllWith.js: {}
          pullAt.js: {}
          random.js: {}
          range.js: {}
          rangeRight.js: {}
          rangeStep.js: {}
          rangeStepRight.js: {}
          rearg.js: {}
          reduce.js: {}
          reduceRight.js: {}
          reject.js: {}
          remove.js: {}
          repeat.js: {}
          replace.js: {}
          rest.js: {}
          restFrom.js: {}
          result.js: {}
          reverse.js: {}
          round.js: {}
          sample.js: {}
          sampleSize.js: {}
          seq.js: {}
          set.js: {}
          setWith.js: {}
          shuffle.js: {}
          size.js: {}
          slice.js: {}
          snakeCase.js: {}
          some.js: {}
          sortBy.js: {}
          sortedIndex.js: {}
          sortedIndexBy.js: {}
          sortedIndexOf.js: {}
          sortedLastIndex.js: {}
          sortedLastIndexBy.js: {}
          sortedLastIndexOf.js: {}
          sortedUniq.js: {}
          sortedUniqBy.js: {}
          split.js: {}
          spread.js: {}
          spreadFrom.js: {}
          startCase.js: {}
          startsWith.js: {}
          string.js: {}
          stubArray.js: {}
          stubFalse.js: {}
          stubObject.js: {}
          stubString.js: {}
          stubTrue.js: {}
          subtract.js: {}
          sum.js: {}
          sumBy.js: {}
          symmetricDifference.js: {}
          symmetricDifferenceBy.js: {}
          symmetricDifferenceWith.js: {}
          tail.js: {}
          take.js: {}
          takeLast.js: {}
          takeLastWhile.js: {}
          takeRight.js: {}
          takeRightWhile.js: {}
          takeWhile.js: {}
          tap.js: {}
          template.js: {}
          templateSettings.js: {}
          throttle.js: {}
          thru.js: {}
          times.js: {}
          toArray.js: {}
          toFinite.js: {}
          toInteger.js: {}
          toIterator.js: {}
          toJSON.js: {}
          toLength.js: {}
          toLower.js: {}
          toNumber.js: {}
          toPairs.js: {}
          toPairsIn.js: {}
          toPath.js: {}
          toPlainObject.js: {}
          toSafeInteger.js: {}
          toString.js: {}
          toUpper.js: {}
          transform.js: {}
          trim.js: {}
          trimChars.js: {}
          trimCharsEnd.js: {}
          trimCharsStart.js: {}
          trimEnd.js: {}
          trimStart.js: {}
          truncate.js: {}
          unapply.js: {}
          unary.js: {}
          unescape.js: {}
          union.js: {}
          unionBy.js: {}
          unionWith.js: {}
          uniq.js: {}
          uniqBy.js: {}
          uniqWith.js: {}
          uniqueId.js: {}
          unnest.js: {}
          unset.js: {}
          unzip.js: {}
          unzipWith.js: {}
          update.js: {}
          updateWith.js: {}
          upperCase.js: {}
          upperFirst.js: {}
          useWith.js: {}
          util.js: {}
          value.js: {}
          valueOf.js: {}
          values.js: {}
          valuesIn.js: {}
          where.js: {}
          whereEq.js: {}
          without.js: {}
          words.js: {}
          wrap.js: {}
          wrapperAt.js: {}
          wrapperChain.js: {}
          wrapperLodash.js: {}
          wrapperReverse.js: {}
          wrapperValue.js: {}
          xor.js: {}
          xorBy.js: {}
          xorWith.js: {}
          zip.js: {}
          zipAll.js: {}
          zipObj.js: {}
          zipObject.js: {}
          zipObjectDeep.js: {}
          zipWith.js: {}
        fp.js: {}
        fromPairs.js: {}
        function.js: {}
        functions.js: {}
        functionsIn.js: {}
        get.js: {}
        groupBy.js: {}
        gt.js: {}
        gte.js: {}
        has.js: {}
        hasIn.js: {}
        head.js: {}
        identity.js: {}
        inRange.js: {}
        includes.js: {}
        index.js: {}
        indexOf.js: {}
        initial.js: {}
        intersection.js: {}
        intersectionBy.js: {}
        intersectionWith.js: {}
        invert.js: {}
        invertBy.js: {}
        invoke.js: {}
        invokeMap.js: {}
        isArguments.js: {}
        isArray.js: {}
        isArrayBuffer.js: {}
        isArrayLike.js: {}
        isArrayLikeObject.js: {}
        isBoolean.js: {}
        isBuffer.js: {}
        isDate.js: {}
        isElement.js: {}
        isEmpty.js: {}
        isEqual.js: {}
        isEqualWith.js: {}
        isError.js: {}
        isFinite.js: {}
        isFunction.js: {}
        isInteger.js: {}
        isLength.js: {}
        isMap.js: {}
        isMatch.js: {}
        isMatchWith.js: {}
        isNaN.js: {}
        isNative.js: {}
        isNil.js: {}
        isNull.js: {}
        isNumber.js: {}
        isObject.js: {}
        isObjectLike.js: {}
        isPlainObject.js: {}
        isRegExp.js: {}
        isSafeInteger.js: {}
        isSet.js: {}
        isString.js: {}
        isSymbol.js: {}
        isTypedArray.js: {}
        isUndefined.js: {}
        isWeakMap.js: {}
        isWeakSet.js: {}
        iteratee.js: {}
        join.js: {}
        kebabCase.js: {}
        keyBy.js: {}
        keys.js: {}
        keysIn.js: {}
        lang.js: {}
        last.js: {}
        lastIndexOf.js: {}
        lodash.js: {}
        lodash.min.js: {}
        lowerCase.js: {}
        lowerFirst.js: {}
        lt.js: {}
        lte.js: {}
        map.js: {}
        mapKeys.js: {}
        mapValues.js: {}
        matches.js: {}
        matchesProperty.js: {}
        math.js: {}
        max.js: {}
        maxBy.js: {}
        mean.js: {}
        meanBy.js: {}
        memoize.js: {}
        merge.js: {}
        mergeWith.js: {}
        method.js: {}
        methodOf.js: {}
        min.js: {}
        minBy.js: {}
        mixin.js: {}
        multiply.js: {}
        negate.js: {}
        next.js: {}
        noop.js: {}
        now.js: {}
        nth.js: {}
        nthArg.js: {}
        number.js: {}
        object.js: {}
        omit.js: {}
        omitBy.js: {}
        once.js: {}
        orderBy.js: {}
        over.js: {}
        overArgs.js: {}
        overEvery.js: {}
        overSome.js: {}
        package.json: {}
        pad.js: {}
        padEnd.js: {}
        padStart.js: {}
        parseInt.js: {}
        partial.js: {}
        partialRight.js: {}
        partition.js: {}
        pick.js: {}
        pickBy.js: {}
        plant.js: {}
        property.js: {}
        propertyOf.js: {}
        pull.js: {}
        pullAll.js: {}
        pullAllBy.js: {}
        pullAllWith.js: {}
        pullAt.js: {}
        random.js: {}
        range.js: {}
        rangeRight.js: {}
        rearg.js: {}
        reduce.js: {}
        reduceRight.js: {}
        reject.js: {}
        release.md: {}
        remove.js: {}
        repeat.js: {}
        replace.js: {}
        rest.js: {}
        result.js: {}
        reverse.js: {}
        round.js: {}
        sample.js: {}
        sampleSize.js: {}
        seq.js: {}
        set.js: {}
        setWith.js: {}
        shuffle.js: {}
        size.js: {}
        slice.js: {}
        snakeCase.js: {}
        some.js: {}
        sortBy.js: {}
        sortedIndex.js: {}
        sortedIndexBy.js: {}
        sortedIndexOf.js: {}
        sortedLastIndex.js: {}
        sortedLastIndexBy.js: {}
        sortedLastIndexOf.js: {}
        sortedUniq.js: {}
        sortedUniqBy.js: {}
        split.js: {}
        spread.js: {}
        startCase.js: {}
        startsWith.js: {}
        string.js: {}
        stubArray.js: {}
        stubFalse.js: {}
        stubObject.js: {}
        stubString.js: {}
        stubTrue.js: {}
        subtract.js: {}
        sum.js: {}
        sumBy.js: {}
        tail.js: {}
        take.js: {}
        takeRight.js: {}
        takeRightWhile.js: {}
        takeWhile.js: {}
        tap.js: {}
        template.js: {}
        templateSettings.js: {}
        throttle.js: {}
        thru.js: {}
        times.js: {}
        toArray.js: {}
        toFinite.js: {}
        toInteger.js: {}
        toIterator.js: {}
        toJSON.js: {}
        toLength.js: {}
        toLower.js: {}
        toNumber.js: {}
        toPairs.js: {}
        toPairsIn.js: {}
        toPath.js: {}
        toPlainObject.js: {}
        toSafeInteger.js: {}
        toString.js: {}
        toUpper.js: {}
        transform.js: {}
        trim.js: {}
        trimEnd.js: {}
        trimStart.js: {}
        truncate.js: {}
        unary.js: {}
        unescape.js: {}
        union.js: {}
        unionBy.js: {}
        unionWith.js: {}
        uniq.js: {}
        uniqBy.js: {}
        uniqWith.js: {}
        uniqueId.js: {}
        unset.js: {}
        unzip.js: {}
        unzipWith.js: {}
        update.js: {}
        updateWith.js: {}
        upperCase.js: {}
        upperFirst.js: {}
        util.js: {}
        value.js: {}
        valueOf.js: {}
        values.js: {}
        valuesIn.js: {}
        without.js: {}
        words.js: {}
        wrap.js: {}
        wrapperAt.js: {}
        wrapperChain.js: {}
        wrapperLodash.js: {}
        wrapperReverse.js: {}
        wrapperValue.js: {}
        xor.js: {}
        xorBy.js: {}
        xorWith.js: {}
        zip.js: {}
        zipObject.js: {}
        zipObjectDeep.js: {}
        zipWith.js: {}
      lodash.debounce:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      lodash.memoize:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      lodash.merge:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      lodash.sortby:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      lodash.uniq:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      log-driver:
        .npmignore: {}
        .travis.yml: {}
        LICENSE: {}
        Makefile: {}
        README.md: {}
        index.js: {}
        package.json: {}
      longest-streak:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      loose-envify:
        LICENSE: {}
        README.md: {}
        cli.js: {}
        custom.js: {}
        index.js: {}
        loose-envify.js: {}
        package.json: {}
        replace.js: {}
      lower-case:
        LICENSE: {}
        README.md: {}
        dist:
          index.d.ts: {}
          index.js: {}
          index.js.map: {}
          index.spec.d.ts: {}
          index.spec.js: {}
          index.spec.js.map: {}
        dist.es2015:
          index.d.ts: {}
          index.js: {}
          index.js.map: {}
          index.spec.d.ts: {}
          index.spec.js: {}
          index.spec.js.map: {}
        package.json: {}
      lowlight:
        changelog.md: {}
        index.js: {}
        lib:
          core.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      lru-cache:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      lz-string:
        LICENSE: {}
        README.md: {}
        bin:
          bin.js: {}
        bower.json: {}
        libs:
          base64-string.js: {}
          lz-string.js: {}
          lz-string.min.js: {}
        package.json: {}
        reference:
          lz-string-1.0.2.js: {}
        tests:
          SpecRunner.html: {}
          lib:
            jasmine-1.3.1:
              MIT.LICENSE: {}
              jasmine-html.js: {}
              jasmine.css: {}
              jasmine.js: {}
          lz-string-spec.js: {}
        typings:
          lz-string.d.ts: {}
      magic-string:
        LICENSE: {}
        README.md: {}
        dist:
          magic-string.cjs.js: {}
          magic-string.cjs.js.map: {}
          magic-string.es.js: {}
          magic-string.es.js.map: {}
          magic-string.umd.js: {}
          magic-string.umd.js.map: {}
        index.d.ts: {}
        package.json: {}
      make-dir:
        index.d.ts: {}
        index.js: {}
        license: {}
        node_modules:
          .bin:
            semver: {}
          semver:
            LICENSE: {}
            README.md: {}
            bin:
              semver.js: {}
            package.json: {}
            range.bnf: {}
            semver.js: {}
        package.json: {}
        readme.md: {}
      makeerror:
        .travis.yml: {}
        lib:
          makeerror.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      mdast-util-from-markdown:
        dev:
          index.d.ts: {}
          index.js: {}
          lib:
            index.d.ts: {}
            index.js: {}
        index.d.ts: {}
        index.js: {}
        lib:
          index.d.ts: {}
          index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      mdast-util-mdx-expression:
        index.d.ts: {}
        index.js: {}
        lib:
          index.d.ts: {}
          index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      mdast-util-mdx-jsx:
        index.d.ts: {}
        index.js: {}
        lib:
          index.d.ts: {}
          index.d.ts.map: {}
          index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      mdast-util-mdxjs-esm:
        index.d.ts: {}
        index.js: {}
        lib:
          index.d.ts: {}
          index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      mdast-util-phrasing:
        index.d.ts: {}
        index.js: {}
        lib:
          index.d.ts: {}
          index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      mdast-util-to-hast:
        index.d.ts: {}
        index.js: {}
        lib:
          footer.d.ts: {}
          footer.js: {}
          handlers:
            blockquote.d.ts: {}
            blockquote.js: {}
            break.d.ts: {}
            break.js: {}
            code.d.ts: {}
            code.js: {}
            delete.d.ts: {}
            delete.js: {}
            emphasis.d.ts: {}
            emphasis.js: {}
            footnote-reference.d.ts: {}
            footnote-reference.js: {}
            heading.d.ts: {}
            heading.js: {}
            html.d.ts: {}
            html.js: {}
            image-reference.d.ts: {}
            image-reference.js: {}
            image.d.ts: {}
            image.js: {}
            index.d.ts: {}
            index.js: {}
            inline-code.d.ts: {}
            inline-code.js: {}
            link-reference.d.ts: {}
            link-reference.js: {}
            link.d.ts: {}
            link.js: {}
            list-item.d.ts: {}
            list-item.js: {}
            list.d.ts: {}
            list.js: {}
            paragraph.d.ts: {}
            paragraph.js: {}
            root.d.ts: {}
            root.js: {}
            strong.d.ts: {}
            strong.js: {}
            table-cell.d.ts: {}
            table-cell.js: {}
            table-row.d.ts: {}
            table-row.js: {}
            table.d.ts: {}
            table.js: {}
            text.d.ts: {}
            text.js: {}
            thematic-break.d.ts: {}
            thematic-break.js: {}
          index.d.ts: {}
          index.js: {}
          revert.d.ts: {}
          revert.js: {}
          state.d.ts: {}
          state.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      mdast-util-to-markdown:
        index.d.ts: {}
        index.js: {}
        lib:
          configure.d.ts: {}
          configure.js: {}
          handle:
            blockquote.d.ts: {}
            blockquote.js: {}
            break.d.ts: {}
            break.js: {}
            code.d.ts: {}
            code.js: {}
            definition.d.ts: {}
            definition.js: {}
            emphasis.d.ts: {}
            emphasis.js: {}
            heading.d.ts: {}
            heading.js: {}
            html.d.ts: {}
            html.js: {}
            image-reference.d.ts: {}
            image-reference.js: {}
            image.d.ts: {}
            image.js: {}
            index.d.ts: {}
            index.js: {}
            inline-code.d.ts: {}
            inline-code.js: {}
            link-reference.d.ts: {}
            link-reference.js: {}
            link.d.ts: {}
            link.js: {}
            list-item.d.ts: {}
            list-item.js: {}
            list.d.ts: {}
            list.js: {}
            paragraph.d.ts: {}
            paragraph.js: {}
            root.d.ts: {}
            root.js: {}
            strong.d.ts: {}
            strong.js: {}
            text.d.ts: {}
            text.js: {}
            thematic-break.d.ts: {}
            thematic-break.js: {}
          index.d.ts: {}
          index.js: {}
          join.d.ts: {}
          join.js: {}
          types.d.ts: {}
          types.js: {}
          unsafe.d.ts: {}
          unsafe.js: {}
          util:
            association.d.ts: {}
            association.js: {}
            check-bullet-ordered.d.ts: {}
            check-bullet-ordered.js: {}
            check-bullet-other.d.ts: {}
            check-bullet-other.js: {}
            check-bullet.d.ts: {}
            check-bullet.js: {}
            check-emphasis.d.ts: {}
            check-emphasis.js: {}
            check-fence.d.ts: {}
            check-fence.js: {}
            check-list-item-indent.d.ts: {}
            check-list-item-indent.js: {}
            check-quote.d.ts: {}
            check-quote.js: {}
            check-rule-repetition.d.ts: {}
            check-rule-repetition.js: {}
            check-rule.d.ts: {}
            check-rule.js: {}
            check-strong.d.ts: {}
            check-strong.js: {}
            compile-pattern.d.ts: {}
            compile-pattern.js: {}
            container-flow.d.ts: {}
            container-flow.js: {}
            container-phrasing.d.ts: {}
            container-phrasing.js: {}
            format-code-as-indented.d.ts: {}
            format-code-as-indented.js: {}
            format-heading-as-setext.d.ts: {}
            format-heading-as-setext.js: {}
            format-link-as-autolink.d.ts: {}
            format-link-as-autolink.js: {}
            indent-lines.d.ts: {}
            indent-lines.js: {}
            pattern-in-scope.d.ts: {}
            pattern-in-scope.js: {}
            safe.d.ts: {}
            safe.js: {}
            track.d.ts: {}
            track.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      mdast-util-to-string:
        index.d.ts: {}
        index.js: {}
        lib:
          index.d.ts: {}
          index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      mdn-data:
        LICENSE: {}
        README.md: {}
        api:
          index.js: {}
          inheritance.json: {}
          inheritance.schema.json: {}
        css:
          at-rules.json: {}
          at-rules.schema.json: {}
          definitions.json: {}
          index.js: {}
          properties.json: {}
          properties.schema.json: {}
          readme.md: {}
          selectors.json: {}
          selectors.schema.json: {}
          syntaxes.json: {}
          syntaxes.schema.json: {}
          types.json: {}
          types.schema.json: {}
          units.json: {}
          units.schema.json: {}
        index.js: {}
        l10n:
          css.json: {}
          index.js: {}
        package.json: {}
      media-typer:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      memfs:
        LICENSE: {}
        README.md: {}
        lib:
          Dirent.d.ts: {}
          Dirent.js: {}
          Stats.d.ts: {}
          Stats.js: {}
          constants.d.ts: {}
          constants.js: {}
          encoding.d.ts: {}
          encoding.js: {}
          getBigInt.js: {}
          index.d.ts: {}
          index.js: {}
          internal:
            buffer.d.ts: {}
            buffer.js: {}
            errors.d.ts: {}
            errors.js: {}
          node.d.ts: {}
          node.js: {}
          process.d.ts: {}
          process.js: {}
          promises.d.ts: {}
          promises.js: {}
          setImmediate.d.ts: {}
          setImmediate.js: {}
          setTimeoutUnref.d.ts: {}
          setTimeoutUnref.js: {}
          volume-localstorage.d.ts: {}
          volume-localstorage.js: {}
          volume.d.ts: {}
          volume.js: {}
        package.json: {}
      merge-descriptors:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      merge-stream:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      merge2:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      methods:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      micromark:
        dev:
          index.d.ts: {}
          index.js: {}
          lib:
            compile.d.ts: {}
            compile.js: {}
            constructs.d.ts: {}
            constructs.js: {}
            create-tokenizer.d.ts: {}
            create-tokenizer.js: {}
            initialize:
              content.d.ts: {}
              content.js: {}
              document.d.ts: {}
              document.js: {}
              flow.d.ts: {}
              flow.js: {}
              text.d.ts: {}
              text.js: {}
            parse.d.ts: {}
            parse.js: {}
            postprocess.d.ts: {}
            postprocess.js: {}
            preprocess.d.ts: {}
            preprocess.js: {}
          stream.d.ts: {}
          stream.js: {}
        index.d.ts: {}
        index.js: {}
        lib:
          compile.d.ts: {}
          compile.js: {}
          constructs.d.ts: {}
          constructs.js: {}
          create-tokenizer.d.ts: {}
          create-tokenizer.js: {}
          initialize:
            content.d.ts: {}
            content.js: {}
            document.d.ts: {}
            document.js: {}
            flow.d.ts: {}
            flow.js: {}
            text.d.ts: {}
            text.js: {}
          parse.d.ts: {}
          parse.js: {}
          postprocess.d.ts: {}
          postprocess.js: {}
          preprocess.d.ts: {}
          preprocess.js: {}
        package.json: {}
        readme.md: {}
        stream.d.ts: {}
        stream.js: {}
      micromark-core-commonmark:
        dev:
          index.d.ts: {}
          index.d.ts.map: {}
          index.js: {}
          lib:
            attention.d.ts: {}
            attention.d.ts.map: {}
            attention.js: {}
            autolink.d.ts: {}
            autolink.d.ts.map: {}
            autolink.js: {}
            blank-line.d.ts: {}
            blank-line.d.ts.map: {}
            blank-line.js: {}
            block-quote.d.ts: {}
            block-quote.d.ts.map: {}
            block-quote.js: {}
            character-escape.d.ts: {}
            character-escape.d.ts.map: {}
            character-escape.js: {}
            character-reference.d.ts: {}
            character-reference.d.ts.map: {}
            character-reference.js: {}
            code-fenced.d.ts: {}
            code-fenced.d.ts.map: {}
            code-fenced.js: {}
            code-indented.d.ts: {}
            code-indented.d.ts.map: {}
            code-indented.js: {}
            code-text.d.ts: {}
            code-text.d.ts.map: {}
            code-text.js: {}
            content.d.ts: {}
            content.d.ts.map: {}
            content.js: {}
            definition.d.ts: {}
            definition.d.ts.map: {}
            definition.js: {}
            hard-break-escape.d.ts: {}
            hard-break-escape.d.ts.map: {}
            hard-break-escape.js: {}
            heading-atx.d.ts: {}
            heading-atx.d.ts.map: {}
            heading-atx.js: {}
            html-flow.d.ts: {}
            html-flow.d.ts.map: {}
            html-flow.js: {}
            html-text.d.ts: {}
            html-text.d.ts.map: {}
            html-text.js: {}
            label-end.d.ts: {}
            label-end.d.ts.map: {}
            label-end.js: {}
            label-start-image.d.ts: {}
            label-start-image.d.ts.map: {}
            label-start-image.js: {}
            label-start-link.d.ts: {}
            label-start-link.d.ts.map: {}
            label-start-link.js: {}
            line-ending.d.ts: {}
            line-ending.d.ts.map: {}
            line-ending.js: {}
            list.d.ts: {}
            list.d.ts.map: {}
            list.js: {}
            setext-underline.d.ts: {}
            setext-underline.d.ts.map: {}
            setext-underline.js: {}
            thematic-break.d.ts: {}
            thematic-break.d.ts.map: {}
            thematic-break.js: {}
        index.d.ts: {}
        index.d.ts.map: {}
        index.js: {}
        lib:
          attention.d.ts: {}
          attention.d.ts.map: {}
          attention.js: {}
          autolink.d.ts: {}
          autolink.d.ts.map: {}
          autolink.js: {}
          blank-line.d.ts: {}
          blank-line.d.ts.map: {}
          blank-line.js: {}
          block-quote.d.ts: {}
          block-quote.d.ts.map: {}
          block-quote.js: {}
          character-escape.d.ts: {}
          character-escape.d.ts.map: {}
          character-escape.js: {}
          character-reference.d.ts: {}
          character-reference.d.ts.map: {}
          character-reference.js: {}
          code-fenced.d.ts: {}
          code-fenced.d.ts.map: {}
          code-fenced.js: {}
          code-indented.d.ts: {}
          code-indented.d.ts.map: {}
          code-indented.js: {}
          code-text.d.ts: {}
          code-text.d.ts.map: {}
          code-text.js: {}
          content.d.ts: {}
          content.d.ts.map: {}
          content.js: {}
          definition.d.ts: {}
          definition.d.ts.map: {}
          definition.js: {}
          hard-break-escape.d.ts: {}
          hard-break-escape.d.ts.map: {}
          hard-break-escape.js: {}
          heading-atx.d.ts: {}
          heading-atx.d.ts.map: {}
          heading-atx.js: {}
          html-flow.d.ts: {}
          html-flow.d.ts.map: {}
          html-flow.js: {}
          html-text.d.ts: {}
          html-text.d.ts.map: {}
          html-text.js: {}
          label-end.d.ts: {}
          label-end.d.ts.map: {}
          label-end.js: {}
          label-start-image.d.ts: {}
          label-start-image.d.ts.map: {}
          label-start-image.js: {}
          label-start-link.d.ts: {}
          label-start-link.d.ts.map: {}
          label-start-link.js: {}
          line-ending.d.ts: {}
          line-ending.d.ts.map: {}
          line-ending.js: {}
          list.d.ts: {}
          list.d.ts.map: {}
          list.js: {}
          setext-underline.d.ts: {}
          setext-underline.d.ts.map: {}
          setext-underline.js: {}
          thematic-break.d.ts: {}
          thematic-break.d.ts.map: {}
          thematic-break.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      micromark-factory-destination:
        dev:
          index.d.ts: {}
          index.js: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        readme.md: {}
      micromark-factory-label:
        dev:
          index.d.ts: {}
          index.js: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        readme.md: {}
      micromark-factory-space:
        dev:
          index.d.ts: {}
          index.js: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        readme.md: {}
      micromark-factory-title:
        dev:
          index.d.ts: {}
          index.js: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        readme.md: {}
      micromark-factory-whitespace:
        dev:
          index.d.ts: {}
          index.js: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        readme.md: {}
      micromark-util-character:
        dev:
          index.d.ts: {}
          index.d.ts.map: {}
          index.js: {}
        index.d.ts: {}
        index.d.ts.map: {}
        index.js: {}
        package.json: {}
        readme.md: {}
      micromark-util-chunked:
        dev:
          index.d.ts: {}
          index.js: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        readme.md: {}
      micromark-util-classify-character:
        dev:
          index.d.ts: {}
          index.js: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        readme.md: {}
      micromark-util-combine-extensions:
        index.d.ts: {}
        index.js: {}
        package.json: {}
        readme.md: {}
      micromark-util-decode-numeric-character-reference:
        dev:
          index.d.ts: {}
          index.js: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        readme.md: {}
      micromark-util-decode-string:
        dev:
          index.d.ts: {}
          index.js: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        readme.md: {}
      micromark-util-encode:
        index.d.ts: {}
        index.js: {}
        package.json: {}
        readme.md: {}
      micromark-util-html-tag-name:
        index.d.ts: {}
        index.js: {}
        package.json: {}
        readme.md: {}
      micromark-util-normalize-identifier:
        dev:
          index.d.ts: {}
          index.js: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        readme.md: {}
      micromark-util-resolve-all:
        index.d.ts: {}
        index.js: {}
        package.json: {}
        readme.md: {}
      micromark-util-sanitize-uri:
        dev:
          index.d.ts: {}
          index.js: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        readme.md: {}
      micromark-util-subtokenize:
        dev:
          index.d.ts: {}
          index.d.ts.map: {}
          index.js: {}
          lib:
            splice-buffer.d.ts: {}
            splice-buffer.d.ts.map: {}
            splice-buffer.js: {}
        index.d.ts: {}
        index.d.ts.map: {}
        index.js: {}
        lib:
          splice-buffer.d.ts: {}
          splice-buffer.d.ts.map: {}
          splice-buffer.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      micromark-util-symbol:
        lib:
          codes.d.ts: {}
          codes.js: {}
          constants.d.ts: {}
          constants.js: {}
          default.d.ts: {}
          default.js: {}
          types.d.ts: {}
          types.js: {}
          values.d.ts: {}
          values.js: {}
        package.json: {}
        readme.md: {}
      micromark-util-types:
        index.d.ts: {}
        index.js: {}
        package.json: {}
        readme.md: {}
      micromatch:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      mime:
        .npmignore: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        cli.js: {}
        mime.js: {}
        package.json: {}
        src:
          build.js: {}
          test.js: {}
        types.json: {}
      mime-db:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        db.json: {}
        index.js: {}
        package.json: {}
      mime-types:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      mimic-fn:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      min-indent:
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      mini-css-extract-plugin:
        LICENSE: {}
        README.md: {}
        dist:
          hmr:
            hotModuleReplacement.js: {}
            normalize-url.js: {}
          index.js: {}
          loader-options.json: {}
          loader.js: {}
          plugin-options.json: {}
          utils.js: {}
        node_modules:
          ajv:
            .runkit_example.js: {}
            LICENSE: {}
            README.md: {}
            dist:
              2019.d.ts: {}
              2019.js: {}
              2019.js.map: {}
              2020.d.ts: {}
              2020.js: {}
              2020.js.map: {}
              ajv.d.ts: {}
              ajv.js: {}
              ajv.js.map: {}
              compile:
                codegen:
                  code.d.ts: {}
                  code.js: {}
                  code.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  scope.d.ts: {}
                  scope.js: {}
                  scope.js.map: {}
                errors.d.ts: {}
                errors.js: {}
                errors.js.map: {}
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                jtd:
                  parse.d.ts: {}
                  parse.js: {}
                  parse.js.map: {}
                  serialize.d.ts: {}
                  serialize.js: {}
                  serialize.js.map: {}
                  types.d.ts: {}
                  types.js: {}
                  types.js.map: {}
                names.d.ts: {}
                names.js: {}
                names.js.map: {}
                ref_error.d.ts: {}
                ref_error.js: {}
                ref_error.js.map: {}
                resolve.d.ts: {}
                resolve.js: {}
                resolve.js.map: {}
                rules.d.ts: {}
                rules.js: {}
                rules.js.map: {}
                util.d.ts: {}
                util.js: {}
                util.js.map: {}
                validate:
                  applicability.d.ts: {}
                  applicability.js: {}
                  applicability.js.map: {}
                  boolSchema.d.ts: {}
                  boolSchema.js: {}
                  boolSchema.js.map: {}
                  dataType.d.ts: {}
                  dataType.js: {}
                  dataType.js.map: {}
                  defaults.d.ts: {}
                  defaults.js: {}
                  defaults.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  keyword.d.ts: {}
                  keyword.js: {}
                  keyword.js.map: {}
                  subschema.d.ts: {}
                  subschema.js: {}
                  subschema.js.map: {}
              core.d.ts: {}
              core.js: {}
              core.js.map: {}
              jtd.d.ts: {}
              jtd.js: {}
              jtd.js.map: {}
              refs:
                data.json: {}
                json-schema-2019-09:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format.json: {}
                    meta-data.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-2020-12:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format-annotation.json: {}
                    meta-data.json: {}
                    unevaluated.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-draft-06.json: {}
                json-schema-draft-07.json: {}
                json-schema-secure.json: {}
                jtd-schema.d.ts: {}
                jtd-schema.js: {}
                jtd-schema.js.map: {}
              runtime:
                equal.d.ts: {}
                equal.js: {}
                equal.js.map: {}
                parseJson.d.ts: {}
                parseJson.js: {}
                parseJson.js.map: {}
                quote.d.ts: {}
                quote.js: {}
                quote.js.map: {}
                re2.d.ts: {}
                re2.js: {}
                re2.js.map: {}
                timestamp.d.ts: {}
                timestamp.js: {}
                timestamp.js.map: {}
                ucs2length.d.ts: {}
                ucs2length.js: {}
                ucs2length.js.map: {}
                uri.d.ts: {}
                uri.js: {}
                uri.js.map: {}
                validation_error.d.ts: {}
                validation_error.js: {}
                validation_error.js.map: {}
              standalone:
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                instance.d.ts: {}
                instance.js: {}
                instance.js.map: {}
              types:
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                json-schema.d.ts: {}
                json-schema.js: {}
                json-schema.js.map: {}
                jtd-schema.d.ts: {}
                jtd-schema.js: {}
                jtd-schema.js.map: {}
              vocabularies:
                applicator:
                  additionalItems.d.ts: {}
                  additionalItems.js: {}
                  additionalItems.js.map: {}
                  additionalProperties.d.ts: {}
                  additionalProperties.js: {}
                  additionalProperties.js.map: {}
                  allOf.d.ts: {}
                  allOf.js: {}
                  allOf.js.map: {}
                  anyOf.d.ts: {}
                  anyOf.js: {}
                  anyOf.js.map: {}
                  contains.d.ts: {}
                  contains.js: {}
                  contains.js.map: {}
                  dependencies.d.ts: {}
                  dependencies.js: {}
                  dependencies.js.map: {}
                  dependentSchemas.d.ts: {}
                  dependentSchemas.js: {}
                  dependentSchemas.js.map: {}
                  if.d.ts: {}
                  if.js: {}
                  if.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  items.d.ts: {}
                  items.js: {}
                  items.js.map: {}
                  items2020.d.ts: {}
                  items2020.js: {}
                  items2020.js.map: {}
                  not.d.ts: {}
                  not.js: {}
                  not.js.map: {}
                  oneOf.d.ts: {}
                  oneOf.js: {}
                  oneOf.js.map: {}
                  patternProperties.d.ts: {}
                  patternProperties.js: {}
                  patternProperties.js.map: {}
                  prefixItems.d.ts: {}
                  prefixItems.js: {}
                  prefixItems.js.map: {}
                  properties.d.ts: {}
                  properties.js: {}
                  properties.js.map: {}
                  propertyNames.d.ts: {}
                  propertyNames.js: {}
                  propertyNames.js.map: {}
                  thenElse.d.ts: {}
                  thenElse.js: {}
                  thenElse.js.map: {}
                code.d.ts: {}
                code.js: {}
                code.js.map: {}
                core:
                  id.d.ts: {}
                  id.js: {}
                  id.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  ref.d.ts: {}
                  ref.js: {}
                  ref.js.map: {}
                discriminator:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  types.d.ts: {}
                  types.js: {}
                  types.js.map: {}
                draft2020.d.ts: {}
                draft2020.js: {}
                draft2020.js.map: {}
                draft7.d.ts: {}
                draft7.js: {}
                draft7.js.map: {}
                dynamic:
                  dynamicAnchor.d.ts: {}
                  dynamicAnchor.js: {}
                  dynamicAnchor.js.map: {}
                  dynamicRef.d.ts: {}
                  dynamicRef.js: {}
                  dynamicRef.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  recursiveAnchor.d.ts: {}
                  recursiveAnchor.js: {}
                  recursiveAnchor.js.map: {}
                  recursiveRef.d.ts: {}
                  recursiveRef.js: {}
                  recursiveRef.js.map: {}
                errors.d.ts: {}
                errors.js: {}
                errors.js.map: {}
                format:
                  format.d.ts: {}
                  format.js: {}
                  format.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                jtd:
                  discriminator.d.ts: {}
                  discriminator.js: {}
                  discriminator.js.map: {}
                  elements.d.ts: {}
                  elements.js: {}
                  elements.js.map: {}
                  enum.d.ts: {}
                  enum.js: {}
                  enum.js.map: {}
                  error.d.ts: {}
                  error.js: {}
                  error.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  metadata.d.ts: {}
                  metadata.js: {}
                  metadata.js.map: {}
                  nullable.d.ts: {}
                  nullable.js: {}
                  nullable.js.map: {}
                  optionalProperties.d.ts: {}
                  optionalProperties.js: {}
                  optionalProperties.js.map: {}
                  properties.d.ts: {}
                  properties.js: {}
                  properties.js.map: {}
                  ref.d.ts: {}
                  ref.js: {}
                  ref.js.map: {}
                  type.d.ts: {}
                  type.js: {}
                  type.js.map: {}
                  union.d.ts: {}
                  union.js: {}
                  union.js.map: {}
                  values.d.ts: {}
                  values.js: {}
                  values.js.map: {}
                metadata.d.ts: {}
                metadata.js: {}
                metadata.js.map: {}
                next.d.ts: {}
                next.js: {}
                next.js.map: {}
                unevaluated:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  unevaluatedItems.d.ts: {}
                  unevaluatedItems.js: {}
                  unevaluatedItems.js.map: {}
                  unevaluatedProperties.d.ts: {}
                  unevaluatedProperties.js: {}
                  unevaluatedProperties.js.map: {}
                validation:
                  const.d.ts: {}
                  const.js: {}
                  const.js.map: {}
                  dependentRequired.d.ts: {}
                  dependentRequired.js: {}
                  dependentRequired.js.map: {}
                  enum.d.ts: {}
                  enum.js: {}
                  enum.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  limitContains.d.ts: {}
                  limitContains.js: {}
                  limitContains.js.map: {}
                  limitItems.d.ts: {}
                  limitItems.js: {}
                  limitItems.js.map: {}
                  limitLength.d.ts: {}
                  limitLength.js: {}
                  limitLength.js.map: {}
                  limitNumber.d.ts: {}
                  limitNumber.js: {}
                  limitNumber.js.map: {}
                  limitProperties.d.ts: {}
                  limitProperties.js: {}
                  limitProperties.js.map: {}
                  multipleOf.d.ts: {}
                  multipleOf.js: {}
                  multipleOf.js.map: {}
                  pattern.d.ts: {}
                  pattern.js: {}
                  pattern.js.map: {}
                  required.d.ts: {}
                  required.js: {}
                  required.js.map: {}
                  uniqueItems.d.ts: {}
                  uniqueItems.js: {}
                  uniqueItems.js.map: {}
            lib:
              2019.ts: {}
              2020.ts: {}
              ajv.ts: {}
              compile:
                codegen:
                  code.ts: {}
                  index.ts: {}
                  scope.ts: {}
                errors.ts: {}
                index.ts: {}
                jtd:
                  parse.ts: {}
                  serialize.ts: {}
                  types.ts: {}
                names.ts: {}
                ref_error.ts: {}
                resolve.ts: {}
                rules.ts: {}
                util.ts: {}
                validate:
                  applicability.ts: {}
                  boolSchema.ts: {}
                  dataType.ts: {}
                  defaults.ts: {}
                  index.ts: {}
                  keyword.ts: {}
                  subschema.ts: {}
              core.ts: {}
              jtd.ts: {}
              refs:
                data.json: {}
                json-schema-2019-09:
                  index.ts: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format.json: {}
                    meta-data.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-2020-12:
                  index.ts: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format-annotation.json: {}
                    meta-data.json: {}
                    unevaluated.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-draft-06.json: {}
                json-schema-draft-07.json: {}
                json-schema-secure.json: {}
                jtd-schema.ts: {}
              runtime:
                equal.ts: {}
                parseJson.ts: {}
                quote.ts: {}
                re2.ts: {}
                timestamp.ts: {}
                ucs2length.ts: {}
                uri.ts: {}
                validation_error.ts: {}
              standalone:
                index.ts: {}
                instance.ts: {}
              types:
                index.ts: {}
                json-schema.ts: {}
                jtd-schema.ts: {}
              vocabularies:
                applicator:
                  additionalItems.ts: {}
                  additionalProperties.ts: {}
                  allOf.ts: {}
                  anyOf.ts: {}
                  contains.ts: {}
                  dependencies.ts: {}
                  dependentSchemas.ts: {}
                  if.ts: {}
                  index.ts: {}
                  items.ts: {}
                  items2020.ts: {}
                  not.ts: {}
                  oneOf.ts: {}
                  patternProperties.ts: {}
                  prefixItems.ts: {}
                  properties.ts: {}
                  propertyNames.ts: {}
                  thenElse.ts: {}
                code.ts: {}
                core:
                  id.ts: {}
                  index.ts: {}
                  ref.ts: {}
                discriminator:
                  index.ts: {}
                  types.ts: {}
                draft2020.ts: {}
                draft7.ts: {}
                dynamic:
                  dynamicAnchor.ts: {}
                  dynamicRef.ts: {}
                  index.ts: {}
                  recursiveAnchor.ts: {}
                  recursiveRef.ts: {}
                errors.ts: {}
                format:
                  format.ts: {}
                  index.ts: {}
                jtd:
                  discriminator.ts: {}
                  elements.ts: {}
                  enum.ts: {}
                  error.ts: {}
                  index.ts: {}
                  metadata.ts: {}
                  nullable.ts: {}
                  optionalProperties.ts: {}
                  properties.ts: {}
                  ref.ts: {}
                  type.ts: {}
                  union.ts: {}
                  values.ts: {}
                metadata.ts: {}
                next.ts: {}
                unevaluated:
                  index.ts: {}
                  unevaluatedItems.ts: {}
                  unevaluatedProperties.ts: {}
                validation:
                  const.ts: {}
                  dependentRequired.ts: {}
                  enum.ts: {}
                  index.ts: {}
                  limitContains.ts: {}
                  limitItems.ts: {}
                  limitLength.ts: {}
                  limitNumber.ts: {}
                  limitProperties.ts: {}
                  multipleOf.ts: {}
                  pattern.ts: {}
                  required.ts: {}
                  uniqueItems.ts: {}
            package.json: {}
          ajv-keywords:
            LICENSE: {}
            README.md: {}
            dist:
              definitions:
                _range.d.ts: {}
                _range.js: {}
                _range.js.map: {}
                _required.d.ts: {}
                _required.js: {}
                _required.js.map: {}
                _types.d.ts: {}
                _types.js: {}
                _types.js.map: {}
                _util.d.ts: {}
                _util.js: {}
                _util.js.map: {}
                allRequired.d.ts: {}
                allRequired.js: {}
                allRequired.js.map: {}
                anyRequired.d.ts: {}
                anyRequired.js: {}
                anyRequired.js.map: {}
                deepProperties.d.ts: {}
                deepProperties.js: {}
                deepProperties.js.map: {}
                deepRequired.d.ts: {}
                deepRequired.js: {}
                deepRequired.js.map: {}
                dynamicDefaults.d.ts: {}
                dynamicDefaults.js: {}
                dynamicDefaults.js.map: {}
                exclusiveRange.d.ts: {}
                exclusiveRange.js: {}
                exclusiveRange.js.map: {}
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                instanceof.d.ts: {}
                instanceof.js: {}
                instanceof.js.map: {}
                oneRequired.d.ts: {}
                oneRequired.js: {}
                oneRequired.js.map: {}
                patternRequired.d.ts: {}
                patternRequired.js: {}
                patternRequired.js.map: {}
                prohibited.d.ts: {}
                prohibited.js: {}
                prohibited.js.map: {}
                range.d.ts: {}
                range.js: {}
                range.js.map: {}
                regexp.d.ts: {}
                regexp.js: {}
                regexp.js.map: {}
                select.d.ts: {}
                select.js: {}
                select.js.map: {}
                transform.d.ts: {}
                transform.js: {}
                transform.js.map: {}
                typeof.d.ts: {}
                typeof.js: {}
                typeof.js.map: {}
                uniqueItemProperties.d.ts: {}
                uniqueItemProperties.js: {}
                uniqueItemProperties.js.map: {}
              index.d.ts: {}
              index.js: {}
              index.js.map: {}
              keywords:
                allRequired.d.ts: {}
                allRequired.js: {}
                allRequired.js.map: {}
                anyRequired.d.ts: {}
                anyRequired.js: {}
                anyRequired.js.map: {}
                deepProperties.d.ts: {}
                deepProperties.js: {}
                deepProperties.js.map: {}
                deepRequired.d.ts: {}
                deepRequired.js: {}
                deepRequired.js.map: {}
                dynamicDefaults.d.ts: {}
                dynamicDefaults.js: {}
                dynamicDefaults.js.map: {}
                exclusiveRange.d.ts: {}
                exclusiveRange.js: {}
                exclusiveRange.js.map: {}
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                instanceof.d.ts: {}
                instanceof.js: {}
                instanceof.js.map: {}
                oneRequired.d.ts: {}
                oneRequired.js: {}
                oneRequired.js.map: {}
                patternRequired.d.ts: {}
                patternRequired.js: {}
                patternRequired.js.map: {}
                prohibited.d.ts: {}
                prohibited.js: {}
                prohibited.js.map: {}
                range.d.ts: {}
                range.js: {}
                range.js.map: {}
                regexp.d.ts: {}
                regexp.js: {}
                regexp.js.map: {}
                select.d.ts: {}
                select.js: {}
                select.js.map: {}
                transform.d.ts: {}
                transform.js: {}
                transform.js.map: {}
                typeof.d.ts: {}
                typeof.js: {}
                typeof.js.map: {}
                uniqueItemProperties.d.ts: {}
                uniqueItemProperties.js: {}
                uniqueItemProperties.js.map: {}
            package.json: {}
            src:
              definitions:
                _range.ts: {}
                _required.ts: {}
                _types.ts: {}
                _util.ts: {}
                allRequired.ts: {}
                anyRequired.ts: {}
                deepProperties.ts: {}
                deepRequired.ts: {}
                dynamicDefaults.ts: {}
                exclusiveRange.ts: {}
                index.ts: {}
                instanceof.ts: {}
                oneRequired.ts: {}
                patternRequired.ts: {}
                prohibited.ts: {}
                range.ts: {}
                regexp.ts: {}
                select.ts: {}
                transform.ts: {}
                typeof.ts: {}
                uniqueItemProperties.ts: {}
              index.ts: {}
              keywords:
                allRequired.ts: {}
                anyRequired.ts: {}
                deepProperties.ts: {}
                deepRequired.ts: {}
                dynamicDefaults.ts: {}
                exclusiveRange.ts: {}
                index.ts: {}
                instanceof.ts: {}
                oneRequired.ts: {}
                patternRequired.ts: {}
                prohibited.ts: {}
                range.ts: {}
                regexp.ts: {}
                select.ts: {}
                transform.ts: {}
                typeof.ts: {}
                uniqueItemProperties.ts: {}
          json-schema-traverse:
            .eslintrc.yml: {}
            .github:
              FUNDING.yml: {}
              workflows:
                build.yml: {}
                publish.yml: {}
            LICENSE: {}
            README.md: {}
            index.d.ts: {}
            index.js: {}
            package.json: {}
            spec:
              .eslintrc.yml: {}
              fixtures:
                schema.js: {}
              index.spec.js: {}
          schema-utils:
            LICENSE: {}
            README.md: {}
            declarations:
              ValidationError.d.ts: {}
              index.d.ts: {}
              keywords:
                absolutePath.d.ts: {}
                undefinedAsNull.d.ts: {}
              util:
                Range.d.ts: {}
                hints.d.ts: {}
                memorize.d.ts: {}
              validate.d.ts: {}
            dist:
              ValidationError.js: {}
              index.js: {}
              keywords:
                absolutePath.js: {}
                undefinedAsNull.js: {}
              util:
                Range.js: {}
                hints.js: {}
                memorize.js: {}
              validate.js: {}
            package.json: {}
        package.json: {}
        types:
          hmr:
            hotModuleReplacement.d.ts: {}
            normalize-url.d.ts: {}
          hooks.d.ts: {}
          index.d.ts: {}
          loader.d.ts: {}
          utils.d.ts: {}
      minimalistic-assert:
        LICENSE: {}
        index.js: {}
        package.json: {}
        readme.md: {}
      minimatch:
        LICENSE: {}
        README.md: {}
        minimatch.js: {}
        package.json: {}
      minimist:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        example:
          parse.js: {}
        index.js: {}
        package.json: {}
        test:
          all_bool.js: {}
          bool.js: {}
          dash.js: {}
          default_bool.js: {}
          dotted.js: {}
          kv_short.js: {}
          long.js: {}
          num.js: {}
          parse.js: {}
          parse_modified.js: {}
          proto.js: {}
          short.js: {}
          stop_early.js: {}
          unknown.js: {}
          whitespace.js: {}
      minipass:
        LICENSE: {}
        README.md: {}
        dist:
          commonjs:
            index.d.ts: {}
            index.d.ts.map: {}
            index.js: {}
            index.js.map: {}
            package.json: {}
          esm:
            index.d.ts: {}
            index.d.ts.map: {}
            index.js: {}
            index.js.map: {}
            package.json: {}
        package.json: {}
      mkdirp:
        LICENSE: {}
        bin:
          cmd.js: {}
          usage.txt: {}
        index.js: {}
        package.json: {}
        readme.markdown: {}
      module-details-from-path:
        .npmignore: {}
        .travis.yml: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test.js: {}
      ms:
        index.js: {}
        license.md: {}
        package.json: {}
        readme.md: {}
      multicast-dns:
        .travis.yml: {}
        LICENSE: {}
        README.md: {}
        appveyor.yml: {}
        cli.js: {}
        example.js: {}
        index.js: {}
        package.json: {}
        test.js: {}
      mute-stream:
        LICENSE: {}
        README.md: {}
        mute.js: {}
        package.json: {}
      mz:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        child_process.js: {}
        crypto.js: {}
        dns.js: {}
        fs.js: {}
        index.js: {}
        package.json: {}
        readline.js: {}
        zlib.js: {}
      nanoid:
        LICENSE: {}
        README.md: {}
        async:
          index.browser.cjs: {}
          index.browser.js: {}
          index.cjs: {}
          index.d.ts: {}
          index.js: {}
          index.native.js: {}
          package.json: {}
        bin:
          nanoid.cjs: {}
        index.browser.cjs: {}
        index.browser.js: {}
        index.cjs: {}
        index.d.cts: {}
        index.d.ts: {}
        index.js: {}
        nanoid.js: {}
        non-secure:
          index.cjs: {}
          index.d.ts: {}
          index.js: {}
          package.json: {}
        package.json: {}
        url-alphabet:
          index.cjs: {}
          index.js: {}
          package.json: {}
      natural-compare:
        README.md: {}
        index.js: {}
        package.json: {}
      natural-compare-lite:
        README.md: {}
        index.js: {}
        package.json: {}
      needle:
        README.md: {}
        bin:
          needle: {}
        examples:
          deflated-stream.js: {}
          digest-auth.js: {}
          download-to-file.js: {}
          multipart-stream.js: {}
          parsed-stream.js: {}
          parsed-stream2.js: {}
          stream-events.js: {}
          stream-to-file.js: {}
          upload-image.js: {}
        lib:
          auth.js: {}
          cookies.js: {}
          decoder.js: {}
          multipart.js: {}
          needle.js: {}
          parsers.js: {}
          querystring.js: {}
        license.txt: {}
        node_modules:
          debug:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            node.js: {}
            package.json: {}
            src:
              browser.js: {}
              common.js: {}
              index.js: {}
              node.js: {}
          iconv-lite:
            Changelog.md: {}
            LICENSE: {}
            README.md: {}
            encodings:
              dbcs-codec.js: {}
              dbcs-data.js: {}
              index.js: {}
              internal.js: {}
              sbcs-codec.js: {}
              sbcs-data-generated.js: {}
              sbcs-data.js: {}
              tables:
                big5-added.json: {}
                cp936.json: {}
                cp949.json: {}
                cp950.json: {}
                eucjp.json: {}
                gb18030-ranges.json: {}
                gbk-added.json: {}
                shiftjis.json: {}
              utf16.js: {}
              utf7.js: {}
            lib:
              bom-handling.js: {}
              extend-node.js: {}
              index.d.ts: {}
              index.js: {}
              streams.js: {}
            package.json: {}
        package.json: {}
        test:
          basic_auth_spec.js: {}
          compression_spec.js: {}
          cookies_spec.js: {}
          decoder_spec.js: {}
          errors_spec.js: {}
          headers_spec.js: {}
          helpers.js: {}
          long_string_spec.js: {}
          output_spec.js: {}
          parsing_spec.js: {}
          post_data_spec.js: {}
          proxy_spec.js: {}
          querystring_spec.js: {}
          redirect_spec.js: {}
          redirect_with_timeout.js: {}
          request_stream_spec.js: {}
          response_stream_spec.js: {}
          socket_pool_spec.js: {}
          url_spec.js: {}
          utils:
            formidable.js: {}
            proxy.js: {}
            test.js: {}
      negotiator:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        lib:
          charset.js: {}
          encoding.js: {}
          language.js: {}
          mediaType.js: {}
        package.json: {}
      neo-async:
        LICENSE: {}
        README.md: {}
        all.js: {}
        allLimit.js: {}
        allSeries.js: {}
        angelFall.js: {}
        any.js: {}
        anyLimit.js: {}
        anySeries.js: {}
        apply.js: {}
        applyEach.js: {}
        applyEachSeries.js: {}
        async.js: {}
        async.min.js: {}
        asyncify.js: {}
        auto.js: {}
        autoInject.js: {}
        cargo.js: {}
        compose.js: {}
        concat.js: {}
        concatLimit.js: {}
        concatSeries.js: {}
        constant.js: {}
        createLogger.js: {}
        detect.js: {}
        detectLimit.js: {}
        detectSeries.js: {}
        dir.js: {}
        doDuring.js: {}
        doUntil.js: {}
        doWhilst.js: {}
        during.js: {}
        each.js: {}
        eachLimit.js: {}
        eachOf.js: {}
        eachOfLimit.js: {}
        eachOfSeries.js: {}
        eachSeries.js: {}
        ensureAsync.js: {}
        every.js: {}
        everyLimit.js: {}
        everySeries.js: {}
        fast.js: {}
        filter.js: {}
        filterLimit.js: {}
        filterSeries.js: {}
        find.js: {}
        findLimit.js: {}
        findSeries.js: {}
        foldl.js: {}
        foldr.js: {}
        forEach.js: {}
        forEachLimit.js: {}
        forEachOf.js: {}
        forEachOfLimit.js: {}
        forEachOfSeries.js: {}
        forEachSeries.js: {}
        forever.js: {}
        groupBy.js: {}
        groupByLimit.js: {}
        groupBySeries.js: {}
        inject.js: {}
        iterator.js: {}
        log.js: {}
        map.js: {}
        mapLimit.js: {}
        mapSeries.js: {}
        mapValues.js: {}
        mapValuesLimit.js: {}
        mapValuesSeries.js: {}
        memoize.js: {}
        nextTick.js: {}
        omit.js: {}
        omitLimit.js: {}
        omitSeries.js: {}
        package.json: {}
        parallel.js: {}
        parallelLimit.js: {}
        pick.js: {}
        pickLimit.js: {}
        pickSeries.js: {}
        priorityQueue.js: {}
        queue.js: {}
        race.js: {}
        reduce.js: {}
        reduceRight.js: {}
        reflect.js: {}
        reflectAll.js: {}
        reject.js: {}
        rejectLimit.js: {}
        rejectSeries.js: {}
        retry.js: {}
        retryable.js: {}
        safe.js: {}
        select.js: {}
        selectLimit.js: {}
        selectSeries.js: {}
        seq.js: {}
        series.js: {}
        setImmediate.js: {}
        some.js: {}
        someLimit.js: {}
        someSeries.js: {}
        sortBy.js: {}
        sortByLimit.js: {}
        sortBySeries.js: {}
        timeout.js: {}
        times.js: {}
        timesLimit.js: {}
        timesSeries.js: {}
        transform.js: {}
        transformLimit.js: {}
        transformSeries.js: {}
        tryEach.js: {}
        unmemoize.js: {}
        until.js: {}
        waterfall.js: {}
        whilst.js: {}
        wrapSync.js: {}
      netmask:
        CHANGELOG.md: {}
        CREDITS.md: {}
        README.md: {}
        example:
          ipcalc.coffee: {}
        lib:
          netmask.coffee: {}
          netmask.js: {}
        package.json: {}
        test:
          badnets.coffee: {}
          netmasks.coffee: {}
        tests:
          netmask.js: {}
      no-case:
        LICENSE: {}
        README.md: {}
        dist:
          index.d.ts: {}
          index.js: {}
          index.js.map: {}
          index.spec.d.ts: {}
          index.spec.js: {}
          index.spec.js.map: {}
        dist.es2015:
          index.d.ts: {}
          index.js: {}
          index.js.map: {}
          index.spec.d.ts: {}
          index.spec.js: {}
          index.spec.js.map: {}
        package.json: {}
      node-forge:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        dist:
          forge.all.min.js: {}
          forge.all.min.js.map: {}
          forge.min.js: {}
          forge.min.js.map: {}
          prime.worker.min.js: {}
          prime.worker.min.js.map: {}
        flash:
          README.md: {}
          package.json: {}
          swf:
            SocketPool.swf: {}
        lib:
          aes.js: {}
          aesCipherSuites.js: {}
          asn1-validator.js: {}
          asn1.js: {}
          baseN.js: {}
          cipher.js: {}
          cipherModes.js: {}
          des.js: {}
          ed25519.js: {}
          forge.js: {}
          form.js: {}
          hmac.js: {}
          http.js: {}
          index.all.js: {}
          index.js: {}
          jsbn.js: {}
          kem.js: {}
          log.js: {}
          md.all.js: {}
          md.js: {}
          md5.js: {}
          mgf.js: {}
          mgf1.js: {}
          oids.js: {}
          pbe.js: {}
          pbkdf2.js: {}
          pem.js: {}
          pkcs1.js: {}
          pkcs12.js: {}
          pkcs7.js: {}
          pkcs7asn1.js: {}
          pki.js: {}
          prime.js: {}
          prime.worker.js: {}
          prng.js: {}
          pss.js: {}
          random.js: {}
          rc2.js: {}
          rsa.js: {}
          sha1.js: {}
          sha256.js: {}
          sha512.js: {}
          socket.js: {}
          ssh.js: {}
          tls.js: {}
          tlssocket.js: {}
          util.js: {}
          x509.js: {}
          xhr.js: {}
        package.json: {}
      node-int64:
        .npmignore: {}
        Int64.js: {}
        LICENSE: {}
        README.md: {}
        package.json: {}
        test.js: {}
      node-releases:
        LICENSE: {}
        README.md: {}
        data:
          processed:
            envs.json: {}
          release-schedule:
            release-schedule.json: {}
        package.json: {}
      normalize-path:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      normalize-range:
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      normalize-url:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      npm-run-path:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      nssocket:
        .npmignore: {}
        .travis.yml: {}
        LICENSE: {}
        README.md: {}
        examples:
          bla.js: {}
          foo.js: {}
          reconnect.js: {}
          simple-protocol.js: {}
          verbose-protocol.js: {}
        lib:
          common.js: {}
          nssocket.js: {}
        node_modules:
          eventemitter2:
            README.md: {}
            index.js: {}
            lib:
              eventemitter2.js: {}
            package.json: {}
        package.json: {}
        test:
          create-server-test.js: {}
          fixtures:
            ryans-cert.pem: {}
            ryans-csr.pem: {}
            ryans-key.pem: {}
          msgpack-tcp-test.js: {}
          tcp-reconnect-test.js: {}
          tcp-test.js: {}
          tls-test.js: {}
      nth-check:
        LICENSE: {}
        README.md: {}
        lib:
          compile.d.ts: {}
          compile.d.ts.map: {}
          compile.js: {}
          compile.js.map: {}
          esm:
            compile.d.ts: {}
            compile.d.ts.map: {}
            compile.js: {}
            compile.js.map: {}
            index.d.ts: {}
            index.d.ts.map: {}
            index.js: {}
            index.js.map: {}
            package.json: {}
            parse.d.ts: {}
            parse.d.ts.map: {}
            parse.js: {}
            parse.js.map: {}
          index.d.ts: {}
          index.d.ts.map: {}
          index.js: {}
          index.js.map: {}
          parse.d.ts: {}
          parse.d.ts.map: {}
          parse.js: {}
          parse.js.map: {}
        package.json: {}
      nwsapi:
        LICENSE: {}
        README.md: {}
        dist:
          lint.log: {}
        package.json: {}
        src:
          modules:
            nwsapi-jquery.js: {}
            nwsapi-traversal.js: {}
          nwsapi.js: {}
      object-assign:
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      object-hash:
        LICENSE: {}
        dist:
          object_hash.js: {}
        index.js: {}
        package.json: {}
        readme.markdown: {}
      object-inspect:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        example:
          all.js: {}
          circular.js: {}
          fn.js: {}
          inspect.js: {}
        index.js: {}
        package-support.json: {}
        package.json: {}
        readme.markdown: {}
        test:
          bigint.js: {}
          browser:
            dom.js: {}
          circular.js: {}
          deep.js: {}
          element.js: {}
          err.js: {}
          fakes.js: {}
          fn.js: {}
          global.js: {}
          has.js: {}
          holes.js: {}
          indent-option.js: {}
          inspect.js: {}
          lowbyte.js: {}
          number.js: {}
          quoteStyle.js: {}
          toStringTag.js: {}
          undef.js: {}
          values.js: {}
        test-core-js.js: {}
        util.inspect.js: {}
      object-is:
        .eslintrc: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        auto.js: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        polyfill.js: {}
        shim.js: {}
        test:
          implementation.js: {}
          index.js: {}
          shimmed.js: {}
          tests.js: {}
      object-keys:
        .editorconfig: {}
        .eslintrc: {}
        .travis.yml: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        implementation.js: {}
        index.js: {}
        isArguments.js: {}
        package.json: {}
        test:
          index.js: {}
      object.assign:
        .editorconfig: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        auto.js: {}
        dist:
          browser.js: {}
        hasSymbols.js: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        polyfill.js: {}
        shim.js: {}
        test:
          implementation.js: {}
          index.js: {}
          native.js: {}
          ses-compat.js: {}
          shimmed.js: {}
          tests.js: {}
      object.entries:
        .editorconfig: {}
        .eslintrc: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        auto.js: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        polyfill.js: {}
        shim.js: {}
        test:
          .eslintrc: {}
          implementation.js: {}
          index.js: {}
          native.js: {}
          shimmed.js: {}
          tests.js: {}
      object.fromentries:
        .editorconfig: {}
        .eslintrc: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        auto.js: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        polyfill.js: {}
        shim.js: {}
        test:
          implementation.js: {}
          index.js: {}
          shimmed.js: {}
          tests.js: {}
      object.getownpropertydescriptors:
        .editorconfig: {}
        .eslintrc: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        auto.js: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        polyfill.js: {}
        shim.js: {}
        test:
          implementation.js: {}
          index.js: {}
          shimmed.js: {}
          tests.js: {}
      object.groupby:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        auto.js: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        polyfill.js: {}
        shim.js: {}
        test:
          implementation.js: {}
          index.js: {}
          shimmed.js: {}
          tests.js: {}
      object.hasown:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        auto.js: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        polyfill.js: {}
        shim.js: {}
        test:
          implementation.js: {}
          index.js: {}
          shimmed.js: {}
          tests.js: {}
      object.values:
        .editorconfig: {}
        .eslintrc: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        auto.js: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        polyfill.js: {}
        shim.js: {}
        test:
          .eslintrc: {}
          implementation.js: {}
          index.js: {}
          shimmed.js: {}
          tests.js: {}
      obuf:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          buffer-test.js: {}
      on-finished:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      on-headers:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      once:
        LICENSE: {}
        README.md: {}
        once.js: {}
        package.json: {}
      onetime:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      open:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
        xdg-open: {}
      optionator:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        lib:
          help.js: {}
          index.js: {}
          util.js: {}
        package.json: {}
      p-limit:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      p-locate:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      p-retry:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      p-try:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      pac-proxy-agent:
        README.md: {}
        dist:
          index.d.ts: {}
          index.d.ts.map: {}
          index.js: {}
          index.js.map: {}
        node_modules:
          agent-base:
            LICENSE: {}
            README.md: {}
            dist:
              helpers.d.ts: {}
              helpers.d.ts.map: {}
              helpers.js: {}
              helpers.js.map: {}
              index.d.ts: {}
              index.d.ts.map: {}
              index.js: {}
              index.js.map: {}
            package.json: {}
          http-proxy-agent:
            LICENSE: {}
            README.md: {}
            dist:
              index.d.ts: {}
              index.d.ts.map: {}
              index.js: {}
              index.js.map: {}
            package.json: {}
          https-proxy-agent:
            LICENSE: {}
            README.md: {}
            dist:
              index.d.ts: {}
              index.d.ts.map: {}
              index.js: {}
              index.js.map: {}
              parse-proxy-response.d.ts: {}
              parse-proxy-response.d.ts.map: {}
              parse-proxy-response.js: {}
              parse-proxy-response.js.map: {}
            package.json: {}
        package.json: {}
      pac-resolver:
        LICENSE: {}
        README.md: {}
        dist:
          dateRange.d.ts: {}
          dateRange.d.ts.map: {}
          dateRange.js: {}
          dateRange.js.map: {}
          dnsDomainIs.d.ts: {}
          dnsDomainIs.d.ts.map: {}
          dnsDomainIs.js: {}
          dnsDomainIs.js.map: {}
          dnsDomainLevels.d.ts: {}
          dnsDomainLevels.d.ts.map: {}
          dnsDomainLevels.js: {}
          dnsDomainLevels.js.map: {}
          dnsResolve.d.ts: {}
          dnsResolve.d.ts.map: {}
          dnsResolve.js: {}
          dnsResolve.js.map: {}
          index.d.ts: {}
          index.d.ts.map: {}
          index.js: {}
          index.js.map: {}
          ip.d.ts: {}
          ip.d.ts.map: {}
          ip.js: {}
          ip.js.map: {}
          isInNet.d.ts: {}
          isInNet.d.ts.map: {}
          isInNet.js: {}
          isInNet.js.map: {}
          isPlainHostName.d.ts: {}
          isPlainHostName.d.ts.map: {}
          isPlainHostName.js: {}
          isPlainHostName.js.map: {}
          isResolvable.d.ts: {}
          isResolvable.d.ts.map: {}
          isResolvable.js: {}
          isResolvable.js.map: {}
          localHostOrDomainIs.d.ts: {}
          localHostOrDomainIs.d.ts.map: {}
          localHostOrDomainIs.js: {}
          localHostOrDomainIs.js.map: {}
          myIpAddress.d.ts: {}
          myIpAddress.d.ts.map: {}
          myIpAddress.js: {}
          myIpAddress.js.map: {}
          shExpMatch.d.ts: {}
          shExpMatch.d.ts.map: {}
          shExpMatch.js: {}
          shExpMatch.js.map: {}
          timeRange.d.ts: {}
          timeRange.d.ts.map: {}
          timeRange.js: {}
          timeRange.js.map: {}
          util.d.ts: {}
          util.d.ts.map: {}
          util.js: {}
          util.js.map: {}
          weekdayRange.d.ts: {}
          weekdayRange.d.ts.map: {}
          weekdayRange.js: {}
          weekdayRange.js.map: {}
        package.json: {}
      pako:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        dist:
          pako.js: {}
          pako.min.js: {}
          pako_deflate.js: {}
          pako_deflate.min.js: {}
          pako_inflate.js: {}
          pako_inflate.min.js: {}
        index.js: {}
        lib:
          deflate.js: {}
          inflate.js: {}
          utils:
            common.js: {}
            strings.js: {}
          zlib:
            adler32.js: {}
            constants.js: {}
            crc32.js: {}
            deflate.js: {}
            gzheader.js: {}
            inffast.js: {}
            inflate.js: {}
            inftrees.js: {}
            messages.js: {}
            trees.js: {}
            zstream.js: {}
        package.json: {}
      param-case:
        LICENSE: {}
        README.md: {}
        dist:
          index.d.ts: {}
          index.js: {}
          index.js.map: {}
          index.spec.d.ts: {}
          index.spec.js: {}
          index.spec.js.map: {}
        dist.es2015:
          index.d.ts: {}
          index.js: {}
          index.js.map: {}
          index.spec.d.ts: {}
          index.spec.js: {}
          index.spec.js.map: {}
        package.json: {}
      parent-module:
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      parse-entities:
        index.d.ts: {}
        index.js: {}
        lib:
          index.d.ts: {}
          index.js: {}
        license: {}
        node_modules:
          '@types':
            unist:
              LICENSE: {}
              README.md: {}
              index.d.ts: {}
              package.json: {}
        package.json: {}
        readme.md: {}
      parse-json:
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      parse5:
        LICENSE: {}
        README.md: {}
        lib:
          common:
            doctype.js: {}
            error-codes.js: {}
            foreign-content.js: {}
            html.js: {}
            unicode.js: {}
          extensions:
            error-reporting:
              mixin-base.js: {}
              parser-mixin.js: {}
              preprocessor-mixin.js: {}
              tokenizer-mixin.js: {}
            location-info:
              open-element-stack-mixin.js: {}
              parser-mixin.js: {}
              tokenizer-mixin.js: {}
            position-tracking:
              preprocessor-mixin.js: {}
          index.js: {}
          parser:
            formatting-element-list.js: {}
            index.js: {}
            open-element-stack.js: {}
          serializer:
            index.js: {}
          tokenizer:
            index.js: {}
            named-entity-data.js: {}
            preprocessor.js: {}
          tree-adapters:
            default.js: {}
          utils:
            merge-options.js: {}
            mixin.js: {}
        package.json: {}
      parseurl:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      pascal-case:
        LICENSE: {}
        README.md: {}
        dist:
          index.d.ts: {}
          index.js: {}
          index.js.map: {}
          index.spec.d.ts: {}
          index.spec.js: {}
          index.spec.js.map: {}
        dist.es2015:
          index.d.ts: {}
          index.js: {}
          index.js.map: {}
          index.spec.d.ts: {}
          index.spec.js: {}
          index.spec.js.map: {}
        package.json: {}
      path-exists:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      path-is-absolute:
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      path-key:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      path-parse:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      path-scurry:
        LICENSE.md: {}
        README.md: {}
        dist:
          commonjs:
            index.d.ts: {}
            index.d.ts.map: {}
            index.js: {}
            index.js.map: {}
            package.json: {}
          esm:
            index.d.ts: {}
            index.d.ts.map: {}
            index.js: {}
            index.js.map: {}
            package.json: {}
        node_modules:
          lru-cache:
            LICENSE: {}
            README.md: {}
            dist:
              commonjs:
                index.d.ts: {}
                index.d.ts.map: {}
                index.js: {}
                index.js.map: {}
                package.json: {}
              esm:
                index.d.ts: {}
                index.d.ts.map: {}
                index.js: {}
                index.js.map: {}
                package.json: {}
            package.json: {}
        package.json: {}
      path-to-regexp:
        History.md: {}
        LICENSE: {}
        Readme.md: {}
        index.js: {}
        package.json: {}
      path-type:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      performance-now:
        .npmignore: {}
        .tm_properties: {}
        .travis.yml: {}
        README.md: {}
        lib:
          performance-now.js: {}
          performance-now.js.map: {}
        license.txt: {}
        package.json: {}
        src:
          index.d.ts: {}
          performance-now.coffee: {}
        test:
          mocha.opts: {}
          performance-now.coffee: {}
          scripts:
            delayed-call.coffee: {}
            delayed-require.coffee: {}
            difference.coffee: {}
            initial-value.coffee: {}
          scripts.coffee: {}
      picocolors:
        LICENSE: {}
        README.md: {}
        package.json: {}
        picocolors.browser.js: {}
        picocolors.d.ts: {}
        picocolors.js: {}
        types.ts: {}
      picomatch:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        lib:
          constants.js: {}
          parse.js: {}
          picomatch.js: {}
          scan.js: {}
          utils.js: {}
        package.json: {}
      pidusage:
        LICENSE: {}
        README.md: {}
        index.js: {}
        lib:
          bin.js: {}
          helpers:
            cpu.js: {}
            parallel.js: {}
          history.js: {}
          procfile.js: {}
          ps.js: {}
          stats.js: {}
          wmic.js: {}
        package.json: {}
      pify:
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      pirates:
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        lib:
          index.js: {}
        package.json: {}
      pkg-dir:
        index.d.ts: {}
        index.js: {}
        license: {}
        node_modules:
          find-up:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          locate-path:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          p-limit:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          p-locate:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
        readme.md: {}
      pkg-up:
        index.d.ts: {}
        index.js: {}
        license: {}
        node_modules:
          find-up:
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          locate-path:
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          p-limit:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          p-locate:
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          path-exists:
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
        readme.md: {}
      pm2:
        .gitattributes: {}
        .mocharc.js: {}
        CHANGELOG.md: {}
        CONTRIBUTING.md: {}
        GNU-AGPL-3.0.txt: {}
        LICENSE: {}
        README.md: {}
        bin:
          pm2: {}
          pm2-dev: {}
          pm2-docker: {}
          pm2-runtime: {}
        constants.js: {}
        e2e_time: {}
        index.js: {}
        lib:
          API:
            Configuration.js: {}
            Containerizer.js: {}
            Dashboard.js: {}
            Deploy.js: {}
            Extra.js: {}
            ExtraMgmt:
              Docker.js: {}
            Log.js: {}
            LogManagement.js: {}
            Modules:
              LOCAL.js: {}
              Modularizer.js: {}
              NPM.js: {}
              TAR.js: {}
              flagExt.js: {}
              index.js: {}
            Monit.js: {}
            Serve.js: {}
            Startup.js: {}
            UX:
              helpers.js: {}
              index.js: {}
              pm2-describe.js: {}
              pm2-ls-minimal.js: {}
              pm2-ls.js: {}
            Version.js: {}
            interpreter.json: {}
            pm2-plus:
              PM2IO.js: {}
              auth-strategies:
                CliAuth.js: {}
                WebAuth.js: {}
              helpers.js: {}
              link.js: {}
              pres:
                motd: {}
                motd.update: {}
                welcome: {}
              process-selector.js: {}
            schema.json: {}
          API.js: {}
          Client.js: {}
          Common.js: {}
          Configuration.js: {}
          Daemon.js: {}
          Event.js: {}
          God:
            ActionMethods.js: {}
            ClusterMode.js: {}
            ForkMode.js: {}
            Methods.js: {}
            Reload.js: {}
          God.js: {}
          HttpInterface.js: {}
          ProcessContainer.js: {}
          ProcessContainerFork.js: {}
          ProcessUtils.js: {}
          TreeKill.js: {}
          Utility.js: {}
          VersionCheck.js: {}
          Watcher.js: {}
          Worker.js: {}
          binaries:
            CLI.js: {}
            DevCLI.js: {}
            Runtime.js: {}
            Runtime4Docker.js: {}
          completion.js: {}
          completion.sh: {}
          motd: {}
          templates:
            Dockerfiles:
              Dockerfile-java.tpl: {}
              Dockerfile-nodejs.tpl: {}
              Dockerfile-ruby.tpl: {}
            ecosystem-es.tpl: {}
            ecosystem-simple-es.tpl: {}
            ecosystem-simple.tpl: {}
            ecosystem.tpl: {}
            init-scripts:
              launchd.tpl: {}
              openrc.tpl: {}
              pm2-init-amazon.sh: {}
              rcd-openbsd.tpl: {}
              rcd.tpl: {}
              smf.tpl: {}
              systemd-online.tpl: {}
              systemd.tpl: {}
              upstart.tpl: {}
            logrotate.d:
              pm2: {}
            sample-apps:
              http-server:
                README.md: {}
                api.js: {}
                ecosystem.config.js: {}
                package.json: {}
              pm2-plus-metrics-actions:
                README.md: {}
                custom-metrics.js: {}
                ecosystem.config.js: {}
                package.json: {}
              python-app:
                README.md: {}
                echo.py:
                  classes: []
                  functions: []
                  text:
                  - '#!/usr/bin/python'
                  - import time
                  - ''
                  - 'while 1:'
                  - '    print("Start : %s" % time.ctime())'
                  - '    print("second line")'
                  - '    time.sleep(1)'
                ecosystem.config.js: {}
                package.json: {}
          tools:
            Config.js: {}
            IsAbsolute.js: {}
            copydirSync.js: {}
            deleteFolderRecursive.js: {}
            find-package-json.js: {}
            fmt.js: {}
            isbinaryfile.js: {}
            json5.js: {}
            open.js: {}
            passwd.js: {}
            promise.min.js: {}
            sexec.js: {}
            treeify.js: {}
            which.js: {}
            xdg-open: {}
        node_modules:
          .bin:
            mkdirp: {}
          ansi-styles:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          chalk:
            index.d.ts: {}
            license: {}
            package.json: {}
            readme.md: {}
            source:
              index.js: {}
              templates.js: {}
              util.js: {}
          color-convert:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            conversions.js: {}
            index.js: {}
            package.json: {}
            route.js: {}
          color-name:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          commander:
            CHANGELOG.md: {}
            LICENSE: {}
            Readme.md: {}
            index.js: {}
            package.json: {}
            typings:
              index.d.ts: {}
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          mkdirp:
            CHANGELOG.md: {}
            LICENSE: {}
            bin:
              cmd.js: {}
            index.js: {}
            lib:
              find-made.js: {}
              mkdirp-manual.js: {}
              mkdirp-native.js: {}
              opts-arg.js: {}
              path-arg.js: {}
              use-native.js: {}
            package.json: {}
            readme.markdown: {}
          sprintf-js:
            CHANGELOG.md: {}
            CONTRIBUTORS.md: {}
            LICENSE: {}
            README.md: {}
            dist:
              .gitattributes: {}
              angular-sprintf.min.js: {}
              angular-sprintf.min.js.map: {}
              sprintf.min.js: {}
              sprintf.min.js.map: {}
            package.json: {}
            src:
              angular-sprintf.js: {}
              sprintf.js: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
        paths.js: {}
        pm2: {}
        types:
          index.d.ts: {}
          tsconfig.json: {}
        unit_time: {}
      pm2-axon:
        History.md: {}
        LICENSE: {}
        Readme.md: {}
        index.js: {}
        lib:
          configurable:
            History.md: {}
            Makefile: {}
            Readme.md: {}
            index.js: {}
            lib:
              configurable.js: {}
            package.json: {}
          index.js: {}
          plugins:
            queue.js: {}
            round-robin.js: {}
          sockets:
            pub-emitter.js: {}
            pub.js: {}
            pull.js: {}
            push.js: {}
            rep.js: {}
            req.js: {}
            sock.js: {}
            sub-emitter.js: {}
            sub.js: {}
          utils.js: {}
        node_modules:
          escape-string-regexp:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
      pm2-axon-rpc:
        .travis.yml: {}
        History.md: {}
        Makefile: {}
        Readme.md: {}
        example.js: {}
        index.js: {}
        lib:
          client.js: {}
          server.js: {}
        package.json: {}
      pm2-deploy:
        LICENSE: {}
        README.md: {}
        deploy: {}
        deploy.js: {}
        package.json: {}
      pm2-multimeter:
        README.markdown: {}
        example:
          drop.js: {}
          multibar.js: {}
          multirel.js: {}
          single.js: {}
          sum.js: {}
          web_multibar.js: {}
          web_multirel.js: {}
          web_sum.js: {}
        index.js: {}
        lib:
          bar.js: {}
        package.json: {}
      pm2-sysmonit:
        LICENSE-APACHE.txt: {}
        README.md: {}
        index.js: {}
        node_modules:
          pidusage:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            index.js: {}
            lib:
              bin.js: {}
              helpers:
                cpu.js: {}
                parallel.js: {}
              history.js: {}
              procfile.js: {}
              ps.js: {}
              stats.js: {}
              wmic.js: {}
            package.json: {}
        package.json: {}
        src:
          MeanCalc.js: {}
          SystemInfos.js: {}
          fastlist.exe: {}
          pm2.js: {}
          psList.js: {}
      possible-typed-array-names:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      postcss:
        LICENSE: {}
        README.md: {}
        lib:
          at-rule.d.ts: {}
          at-rule.js: {}
          comment.d.ts: {}
          comment.js: {}
          container.d.ts: {}
          container.js: {}
          css-syntax-error.d.ts: {}
          css-syntax-error.js: {}
          declaration.d.ts: {}
          declaration.js: {}
          document.d.ts: {}
          document.js: {}
          fromJSON.d.ts: {}
          fromJSON.js: {}
          input.d.ts: {}
          input.js: {}
          lazy-result.d.ts: {}
          lazy-result.js: {}
          list.d.ts: {}
          list.js: {}
          map-generator.js: {}
          no-work-result.d.ts: {}
          no-work-result.js: {}
          node.d.ts: {}
          node.js: {}
          parse.d.ts: {}
          parse.js: {}
          parser.js: {}
          postcss.d.mts: {}
          postcss.d.ts: {}
          postcss.js: {}
          postcss.mjs: {}
          previous-map.d.ts: {}
          previous-map.js: {}
          processor.d.ts: {}
          processor.js: {}
          result.d.ts: {}
          result.js: {}
          root.d.ts: {}
          root.js: {}
          rule.d.ts: {}
          rule.js: {}
          stringifier.d.ts: {}
          stringifier.js: {}
          stringify.d.ts: {}
          stringify.js: {}
          symbols.js: {}
          terminal-highlight.js: {}
          tokenize.js: {}
          warn-once.js: {}
          warning.d.ts: {}
          warning.js: {}
        package.json: {}
      postcss-attribute-case-insensitive:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        dist:
          index.cjs: {}
          index.d.ts: {}
          index.mjs: {}
        package.json: {}
      postcss-browser-comments:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        index.cjs: {}
        index.cjs.map: {}
        index.mjs: {}
        index.mjs.map: {}
        package.json: {}
      postcss-calc:
        LICENSE: {}
        README.md: {}
        package.json: {}
        src:
          __tests__:
            convertUnit.js: {}
            index.js: {}
          index.js: {}
          lib:
            convertUnit.js: {}
            reducer.js: {}
            stringifier.js: {}
            transform.js: {}
          parser.d.ts: {}
          parser.jison: {}
          parser.js: {}
        types:
          index.d.ts: {}
          lib:
            convertUnit.d.ts: {}
            reducer.d.ts: {}
            stringifier.d.ts: {}
            transform.d.ts: {}
      postcss-clamp:
        INSTALL.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        index.test.js: {}
        package.json: {}
      postcss-color-functional-notation:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        dist:
          has-supports-at-rule-ancestor.d.ts: {}
          index.cjs: {}
          index.d.ts: {}
          index.mjs: {}
          on-css-function.d.ts: {}
        package.json: {}
      postcss-color-hex-alpha:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        dist:
          index.cjs: {}
          index.d.ts: {}
          index.mjs: {}
        package.json: {}
      postcss-color-rebeccapurple:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        dist:
          index.cjs: {}
          index.d.ts: {}
          index.mjs: {}
        package.json: {}
      postcss-colormin:
        LICENSE-MIT: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
          minifyColor.js: {}
        types:
          index.d.ts: {}
          minifyColor.d.ts: {}
      postcss-convert-values:
        LICENSE-MIT: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
          lib:
            convert.js: {}
        types:
          index.d.ts: {}
          lib:
            convert.d.ts: {}
      postcss-custom-media:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        dist:
          index.cjs: {}
          index.mjs: {}
        package.json: {}
      postcss-custom-properties:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        dist:
          index.cjs: {}
          index.d.ts: {}
          index.mjs: {}
          lib:
            get-custom-properties-from-imports.d.ts: {}
            get-custom-properties-from-root.d.ts: {}
            is-ignored.d.ts: {}
            options.d.ts: {}
            transform-properties.d.ts: {}
            transform-value-ast.d.ts: {}
            write-custom-properties-to-exports.d.ts: {}
        package.json: {}
      postcss-custom-selectors:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        dist:
          index.cjs: {}
          index.mjs: {}
        package.json: {}
      postcss-dir-pseudo-class:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        dist:
          index.cjs: {}
          index.mjs: {}
        package.json: {}
      postcss-discard-comments:
        LICENSE-MIT: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
          lib:
            commentParser.js: {}
            commentRemover.js: {}
        types:
          index.d.ts: {}
          lib:
            commentParser.d.ts: {}
            commentRemover.d.ts: {}
      postcss-discard-duplicates:
        LICENSE-MIT: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
        types:
          index.d.ts: {}
      postcss-discard-empty:
        LICENSE-MIT: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
        types:
          index.d.ts: {}
      postcss-discard-overridden:
        LICENSE: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
      postcss-double-position-gradients:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        dist:
          has-supports-at-rule-ancestor.d.ts: {}
          index.cjs: {}
          index.d.ts: {}
          index.mjs: {}
          is-gradient.d.ts: {}
        package.json: {}
      postcss-env-function:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        dist:
          index.cjs: {}
          index.mjs: {}
        package.json: {}
      postcss-flexbugs-fixes:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        bugs:
          bug4.js: {}
          bug6.js: {}
          bug81a.js: {}
        index.js: {}
        package.json: {}
      postcss-focus-visible:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        dist:
          index.cjs: {}
          index.d.ts: {}
          index.mjs: {}
        package.json: {}
      postcss-focus-within:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        dist:
          index.cjs: {}
          index.d.ts: {}
          index.mjs: {}
        package.json: {}
      postcss-font-variant:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      postcss-gap-properties:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        dist:
          index.cjs: {}
          index.mjs: {}
        package.json: {}
      postcss-image-set-function:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        dist:
          index.cjs: {}
          index.d.ts: {}
          index.mjs: {}
          lib:
            get-comma.d.ts: {}
            get-image.d.ts: {}
            get-media.d.ts: {}
            handle-invalidation.d.ts: {}
            process-image-set.d.ts: {}
        package.json: {}
      postcss-import:
        LICENSE: {}
        README.md: {}
        index.js: {}
        lib:
          assign-layer-names.js: {}
          data-url.js: {}
          join-layer.js: {}
          join-media.js: {}
          load-content.js: {}
          parse-statements.js: {}
          process-content.js: {}
          resolve-id.js: {}
        package.json: {}
      postcss-initial:
        .editorconfig: {}
        .github:
          workflows:
            npm-publish.yml: {}
        .vscode:
          settings.json: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        lib:
          decls.json: {}
          rules-fabric.js: {}
        package.json: {}
        '~':
          .config:
            configstore:
              update-notifier-npm.json: {}
      postcss-js:
        LICENSE: {}
        README.md: {}
        async.js: {}
        index.js: {}
        index.mjs: {}
        objectifier.js: {}
        package.json: {}
        parser.js: {}
        process-result.js: {}
        sync.js: {}
      postcss-lab-function:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        dist:
          convert-lab-to-display-p3.d.ts: {}
          convert-lab-to-srgb.d.ts: {}
          convert-lch-to-display-p3.d.ts: {}
          convert-lch-to-srgb.d.ts: {}
          css-color-4:
            conversions.d.ts: {}
            deltaEOK.d.ts: {}
            map-gamut.d.ts: {}
            multiply-matrices.d.ts: {}
            utilities.d.ts: {}
          has-fallback-decl.d.ts: {}
          has-supports-at-rule-ancestor.d.ts: {}
          index.cjs: {}
          index.d.ts: {}
          index.mjs: {}
          modified-values.d.ts: {}
          on-css-function.d.ts: {}
        package.json: {}
      postcss-load-config:
        LICENSE: {}
        README.md: {}
        node_modules:
          .bin:
            yaml: {}
          lilconfig:
            LICENSE: {}
            package.json: {}
            readme.md: {}
            src:
              index.d.ts: {}
              index.js: {}
          yaml:
            LICENSE: {}
            README.md: {}
            bin.mjs: {}
            browser:
              dist:
                compose:
                  compose-collection.js: {}
                  compose-doc.js: {}
                  compose-node.js: {}
                  compose-scalar.js: {}
                  composer.js: {}
                  resolve-block-map.js: {}
                  resolve-block-scalar.js: {}
                  resolve-block-seq.js: {}
                  resolve-end.js: {}
                  resolve-flow-collection.js: {}
                  resolve-flow-scalar.js: {}
                  resolve-props.js: {}
                  util-contains-newline.js: {}
                  util-empty-scalar-position.js: {}
                  util-flow-indent-check.js: {}
                  util-map-includes.js: {}
                doc:
                  Document.js: {}
                  anchors.js: {}
                  applyReviver.js: {}
                  createNode.js: {}
                  directives.js: {}
                errors.js: {}
                index.js: {}
                log.js: {}
                node_modules:
                  tslib:
                    tslib.es6.js: {}
                nodes:
                  Alias.js: {}
                  Collection.js: {}
                  Node.js: {}
                  Pair.js: {}
                  Scalar.js: {}
                  YAMLMap.js: {}
                  YAMLSeq.js: {}
                  addPairToJSMap.js: {}
                  identity.js: {}
                  toJS.js: {}
                parse:
                  cst-scalar.js: {}
                  cst-stringify.js: {}
                  cst-visit.js: {}
                  cst.js: {}
                  lexer.js: {}
                  line-counter.js: {}
                  parser.js: {}
                public-api.js: {}
                schema:
                  Schema.js: {}
                  common:
                    map.js: {}
                    null.js: {}
                    seq.js: {}
                    string.js: {}
                  core:
                    bool.js: {}
                    float.js: {}
                    int.js: {}
                    schema.js: {}
                  json:
                    schema.js: {}
                  tags.js: {}
                  yaml-1.1:
                    binary.js: {}
                    bool.js: {}
                    float.js: {}
                    int.js: {}
                    omap.js: {}
                    pairs.js: {}
                    schema.js: {}
                    set.js: {}
                    timestamp.js: {}
                stringify:
                  foldFlowLines.js: {}
                  stringify.js: {}
                  stringifyCollection.js: {}
                  stringifyComment.js: {}
                  stringifyDocument.js: {}
                  stringifyNumber.js: {}
                  stringifyPair.js: {}
                  stringifyString.js: {}
                util.js: {}
                visit.js: {}
              index.js: {}
              package.json: {}
            dist:
              cli.d.ts: {}
              cli.mjs: {}
              compose:
                compose-collection.d.ts: {}
                compose-collection.js: {}
                compose-doc.d.ts: {}
                compose-doc.js: {}
                compose-node.d.ts: {}
                compose-node.js: {}
                compose-scalar.d.ts: {}
                compose-scalar.js: {}
                composer.d.ts: {}
                composer.js: {}
                resolve-block-map.d.ts: {}
                resolve-block-map.js: {}
                resolve-block-scalar.d.ts: {}
                resolve-block-scalar.js: {}
                resolve-block-seq.d.ts: {}
                resolve-block-seq.js: {}
                resolve-end.d.ts: {}
                resolve-end.js: {}
                resolve-flow-collection.d.ts: {}
                resolve-flow-collection.js: {}
                resolve-flow-scalar.d.ts: {}
                resolve-flow-scalar.js: {}
                resolve-props.d.ts: {}
                resolve-props.js: {}
                util-contains-newline.d.ts: {}
                util-contains-newline.js: {}
                util-empty-scalar-position.d.ts: {}
                util-empty-scalar-position.js: {}
                util-flow-indent-check.d.ts: {}
                util-flow-indent-check.js: {}
                util-map-includes.d.ts: {}
                util-map-includes.js: {}
              doc:
                Document.d.ts: {}
                Document.js: {}
                anchors.d.ts: {}
                anchors.js: {}
                applyReviver.d.ts: {}
                applyReviver.js: {}
                createNode.d.ts: {}
                createNode.js: {}
                directives.d.ts: {}
                directives.js: {}
              errors.d.ts: {}
              errors.js: {}
              index.d.ts: {}
              index.js: {}
              log.d.ts: {}
              log.js: {}
              nodes:
                Alias.d.ts: {}
                Alias.js: {}
                Collection.d.ts: {}
                Collection.js: {}
                Node.d.ts: {}
                Node.js: {}
                Pair.d.ts: {}
                Pair.js: {}
                Scalar.d.ts: {}
                Scalar.js: {}
                YAMLMap.d.ts: {}
                YAMLMap.js: {}
                YAMLSeq.d.ts: {}
                YAMLSeq.js: {}
                addPairToJSMap.d.ts: {}
                addPairToJSMap.js: {}
                identity.d.ts: {}
                identity.js: {}
                toJS.d.ts: {}
                toJS.js: {}
              options.d.ts: {}
              parse:
                cst-scalar.d.ts: {}
                cst-scalar.js: {}
                cst-stringify.d.ts: {}
                cst-stringify.js: {}
                cst-visit.d.ts: {}
                cst-visit.js: {}
                cst.d.ts: {}
                cst.js: {}
                lexer.d.ts: {}
                lexer.js: {}
                line-counter.d.ts: {}
                line-counter.js: {}
                parser.d.ts: {}
                parser.js: {}
              public-api.d.ts: {}
              public-api.js: {}
              schema:
                Schema.d.ts: {}
                Schema.js: {}
                common:
                  map.d.ts: {}
                  map.js: {}
                  null.d.ts: {}
                  null.js: {}
                  seq.d.ts: {}
                  seq.js: {}
                  string.d.ts: {}
                  string.js: {}
                core:
                  bool.d.ts: {}
                  bool.js: {}
                  float.d.ts: {}
                  float.js: {}
                  int.d.ts: {}
                  int.js: {}
                  schema.d.ts: {}
                  schema.js: {}
                json:
                  schema.d.ts: {}
                  schema.js: {}
                json-schema.d.ts: {}
                tags.d.ts: {}
                tags.js: {}
                types.d.ts: {}
                yaml-1.1:
                  binary.d.ts: {}
                  binary.js: {}
                  bool.d.ts: {}
                  bool.js: {}
                  float.d.ts: {}
                  float.js: {}
                  int.d.ts: {}
                  int.js: {}
                  omap.d.ts: {}
                  omap.js: {}
                  pairs.d.ts: {}
                  pairs.js: {}
                  schema.d.ts: {}
                  schema.js: {}
                  set.d.ts: {}
                  set.js: {}
                  timestamp.d.ts: {}
                  timestamp.js: {}
              stringify:
                foldFlowLines.d.ts: {}
                foldFlowLines.js: {}
                stringify.d.ts: {}
                stringify.js: {}
                stringifyCollection.d.ts: {}
                stringifyCollection.js: {}
                stringifyComment.d.ts: {}
                stringifyComment.js: {}
                stringifyDocument.d.ts: {}
                stringifyDocument.js: {}
                stringifyNumber.d.ts: {}
                stringifyNumber.js: {}
                stringifyPair.d.ts: {}
                stringifyPair.js: {}
                stringifyString.d.ts: {}
                stringifyString.js: {}
              test-events.d.ts: {}
              test-events.js: {}
              util.d.ts: {}
              util.js: {}
              visit.d.ts: {}
              visit.js: {}
            package.json: {}
            util.js: {}
        package.json: {}
        src:
          index.d.ts: {}
          index.js: {}
          options.js: {}
          plugins.js: {}
          req.js: {}
      postcss-loader:
        LICENSE: {}
        README.md: {}
        dist:
          Error.js: {}
          Warning.js: {}
          cjs.js: {}
          index.js: {}
          options.json: {}
          utils.js: {}
        package.json: {}
      postcss-logical:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        dist:
          index.cjs: {}
          index.mjs: {}
        package.json: {}
      postcss-media-minmax:
        CHANGELOG.md: {}
        LICENSE: {}
        README-zh.md: {}
        README.md: {}
        index.js: {}
        package.json: {}
      postcss-merge-longhand:
        LICENSE-MIT: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
          lib:
            canExplode.js: {}
            canMerge.js: {}
            colornames.js: {}
            decl:
              borders.js: {}
              boxBase.js: {}
              columns.js: {}
              index.js: {}
              margin.js: {}
              padding.js: {}
            getDecls.js: {}
            getLastNode.js: {}
            getRules.js: {}
            getValue.js: {}
            hasAllProps.js: {}
            insertCloned.js: {}
            isCustomProp.js: {}
            mergeRules.js: {}
            mergeValues.js: {}
            minifyTrbl.js: {}
            minifyWsc.js: {}
            parseTrbl.js: {}
            parseWsc.js: {}
            trbl.js: {}
            validateWsc.js: {}
        types:
          index.d.ts: {}
          lib:
            canExplode.d.ts: {}
            canMerge.d.ts: {}
            colornames.d.ts: {}
            decl:
              borders.d.ts: {}
              boxBase.d.ts: {}
              columns.d.ts: {}
              index.d.ts: {}
              margin.d.ts: {}
              padding.d.ts: {}
            getDecls.d.ts: {}
            getLastNode.d.ts: {}
            getRules.d.ts: {}
            getValue.d.ts: {}
            hasAllProps.d.ts: {}
            insertCloned.d.ts: {}
            isCustomProp.d.ts: {}
            mergeRules.d.ts: {}
            mergeValues.d.ts: {}
            minifyTrbl.d.ts: {}
            minifyWsc.d.ts: {}
            parseTrbl.d.ts: {}
            parseWsc.d.ts: {}
            remove.d.ts: {}
            trbl.d.ts: {}
            validateWsc.d.ts: {}
      postcss-merge-rules:
        LICENSE-MIT: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
          lib:
            ensureCompatibility.js: {}
        types:
          index.d.ts: {}
          lib:
            ensureCompatibility.d.ts: {}
      postcss-minify-font-values:
        LICENSE: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
          lib:
            keywords.js: {}
            minify-family.js: {}
            minify-font.js: {}
            minify-weight.js: {}
        types:
          index.d.ts: {}
          lib:
            keywords.d.ts: {}
            minify-family.d.ts: {}
            minify-font.d.ts: {}
            minify-weight.d.ts: {}
      postcss-minify-gradients:
        LICENSE-MIT: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
          isColorStop.js: {}
        types:
          index.d.ts: {}
          isColorStop.d.ts: {}
      postcss-minify-params:
        LICENSE: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
        types:
          index.d.ts: {}
      postcss-minify-selectors:
        LICENSE-MIT: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
          lib:
            canUnquote.js: {}
        types:
          index.d.ts: {}
          lib:
            canUnquote.d.ts: {}
      postcss-modules-extract-imports:
        LICENSE: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
          topologicalSort.js: {}
      postcss-modules-local-by-default:
        LICENSE: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
      postcss-modules-scope:
        LICENSE: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
      postcss-modules-values:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
      postcss-nested:
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
      postcss-nesting:
        LICENSE.md: {}
        README.md: {}
        dist:
          index.cjs: {}
          index.d.ts: {}
          index.mjs: {}
          lib:
            atrule-within-atrule.d.ts: {}
            atrule-within-rule.d.ts: {}
            cleanup-parent.d.ts: {}
            is-type-of-rule.d.ts: {}
            list.d.ts: {}
            merge-params.d.ts: {}
            merge-selectors:
              combinations-of-size-n.d.ts: {}
              compound-selector-order.d.ts: {}
              merge-selectors.d.ts: {}
              specificity.d.ts: {}
            nest-rule-within-rule.d.ts: {}
            options.d.ts: {}
            rule-within-rule.d.ts: {}
            shift-nodes-before-parent.d.ts: {}
            valid-atrules.d.ts: {}
            walk-func.d.ts: {}
            walk.d.ts: {}
        mod.js: {}
        package.json: {}
      postcss-normalize:
        LICENSE.md: {}
        README.md: {}
        index.cjs: {}
        index.d.ts: {}
        index.mjs: {}
        package.json: {}
      postcss-normalize-charset:
        LICENSE: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
        types:
          index.d.ts: {}
      postcss-normalize-display-values:
        LICENSE-MIT: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
          lib:
            map.js: {}
        types:
          index.d.ts: {}
          lib:
            map.d.ts: {}
      postcss-normalize-positions:
        LICENSE-MIT: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
        types:
          index.d.ts: {}
      postcss-normalize-repeat-style:
        LICENSE-MIT: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
          lib:
            map.js: {}
        types:
          index.d.ts: {}
          lib:
            map.d.ts: {}
      postcss-normalize-string:
        LICENSE-MIT: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
        types:
          index.d.ts: {}
      postcss-normalize-timing-functions:
        LICENSE-MIT: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
        types:
          index.d.ts: {}
      postcss-normalize-unicode:
        LICENSE-MIT: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
        types:
          index.d.ts: {}
      postcss-normalize-url:
        LICENSE-MIT: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
        types:
          index.d.ts: {}
      postcss-normalize-whitespace:
        LICENSE-MIT: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
        types:
          index.d.ts: {}
      postcss-opacity-percentage:
        LICENSE.md: {}
        README.md: {}
        index.js: {}
        package.json: {}
      postcss-ordered-values:
        LICENSE-MIT: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
          lib:
            addSpace.js: {}
            getValue.js: {}
            joinGridValue.js: {}
            mathfunctions.js: {}
            vendorUnprefixed.js: {}
          rules:
            animation.js: {}
            border.js: {}
            boxShadow.js: {}
            columns.js: {}
            flexFlow.js: {}
            grid.js: {}
            listStyle.js: {}
            listStyleTypes.json: {}
            transition.js: {}
        types:
          index.d.ts: {}
          lib:
            addSpace.d.ts: {}
            getValue.d.ts: {}
            joinGridValue.d.ts: {}
            mathfunctions.d.ts: {}
            vendorUnprefixed.d.ts: {}
          rules:
            animation.d.ts: {}
            border.d.ts: {}
            boxShadow.d.ts: {}
            columns.d.ts: {}
            flexFlow.d.ts: {}
            grid.d.ts: {}
            listStyle.d.ts: {}
            transition.d.ts: {}
      postcss-overflow-shorthand:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        dist:
          index.cjs: {}
          index.mjs: {}
        package.json: {}
      postcss-page-break:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      postcss-place:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        dist:
          index.cjs: {}
          index.mjs: {}
        package.json: {}
      postcss-preset-env:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        dist:
          index.cjs: {}
          index.mjs: {}
        package.json: {}
      postcss-pseudo-class-any-link:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        dist:
          index.cjs: {}
          index.mjs: {}
        package.json: {}
      postcss-reduce-initial:
        LICENSE-MIT: {}
        README.md: {}
        package.json: {}
        src:
          data:
            fromInitial.json: {}
            toInitial.json: {}
          index.js: {}
        types:
          index.d.ts: {}
      postcss-reduce-transforms:
        LICENSE-MIT: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
        types:
          index.d.ts: {}
      postcss-replace-overflow-wrap:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      postcss-selector-not:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        dist:
          index.cjs: {}
          index.d.ts: {}
          index.mjs: {}
        package.json: {}
      postcss-selector-parser:
        API.md: {}
        CHANGELOG.md: {}
        LICENSE-MIT: {}
        README.md: {}
        dist:
          index.js: {}
          parser.js: {}
          processor.js: {}
          selectors:
            attribute.js: {}
            className.js: {}
            combinator.js: {}
            comment.js: {}
            constructors.js: {}
            container.js: {}
            guards.js: {}
            id.js: {}
            index.js: {}
            namespace.js: {}
            nesting.js: {}
            node.js: {}
            pseudo.js: {}
            root.js: {}
            selector.js: {}
            string.js: {}
            tag.js: {}
            types.js: {}
            universal.js: {}
          sortAscending.js: {}
          tokenTypes.js: {}
          tokenize.js: {}
          util:
            ensureObject.js: {}
            getProp.js: {}
            index.js: {}
            stripComments.js: {}
            unesc.js: {}
        package.json: {}
        postcss-selector-parser.d.ts: {}
      postcss-svgo:
        LICENSE-MIT: {}
        README.md: {}
        node_modules:
          .bin:
            svgo: {}
          commander:
            CHANGELOG.md: {}
            LICENSE: {}
            Readme.md: {}
            esm.mjs: {}
            index.js: {}
            package-support.json: {}
            package.json: {}
            typings:
              index.d.ts: {}
          css-tree:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            data:
              index.js: {}
              patch.json: {}
            dist:
              csstree.js: {}
              csstree.min.js: {}
            lib:
              common:
                List.js: {}
                OffsetToLocation.js: {}
                SyntaxError.js: {}
                TokenStream.js: {}
                adopt-buffer.js: {}
              convertor:
                create.js: {}
                index.js: {}
              definition-syntax:
                SyntaxError.js: {}
                generate.js: {}
                index.js: {}
                parse.js: {}
                tokenizer.js: {}
                walk.js: {}
              generator:
                create.js: {}
                index.js: {}
                sourceMap.js: {}
              index.js: {}
              lexer:
                Lexer.js: {}
                error.js: {}
                generic-an-plus-b.js: {}
                generic-urange.js: {}
                generic.js: {}
                index.js: {}
                match-graph.js: {}
                match.js: {}
                prepare-tokens.js: {}
                search.js: {}
                structure.js: {}
                trace.js: {}
              parser:
                create.js: {}
                index.js: {}
                sequence.js: {}
              syntax:
                atrule:
                  font-face.js: {}
                  import.js: {}
                  index.js: {}
                  media.js: {}
                  page.js: {}
                  supports.js: {}
                config:
                  lexer.js: {}
                  mix.js: {}
                  parser.js: {}
                  walker.js: {}
                create.js: {}
                function:
                  expression.js: {}
                  var.js: {}
                index.js: {}
                node:
                  AnPlusB.js: {}
                  Atrule.js: {}
                  AtrulePrelude.js: {}
                  AttributeSelector.js: {}
                  Block.js: {}
                  Brackets.js: {}
                  CDC.js: {}
                  CDO.js: {}
                  ClassSelector.js: {}
                  Combinator.js: {}
                  Comment.js: {}
                  Declaration.js: {}
                  DeclarationList.js: {}
                  Dimension.js: {}
                  Function.js: {}
                  Hash.js: {}
                  IdSelector.js: {}
                  Identifier.js: {}
                  MediaFeature.js: {}
                  MediaQuery.js: {}
                  MediaQueryList.js: {}
                  Nth.js: {}
                  Number.js: {}
                  Operator.js: {}
                  Parentheses.js: {}
                  Percentage.js: {}
                  PseudoClassSelector.js: {}
                  PseudoElementSelector.js: {}
                  Ratio.js: {}
                  Raw.js: {}
                  Rule.js: {}
                  Selector.js: {}
                  SelectorList.js: {}
                  String.js: {}
                  StyleSheet.js: {}
                  TypeSelector.js: {}
                  UnicodeRange.js: {}
                  Url.js: {}
                  Value.js: {}
                  WhiteSpace.js: {}
                  index.js: {}
                pseudo:
                  common:
                    nth.js: {}
                    nthWithOfClause.js: {}
                    selectorList.js: {}
                  dir.js: {}
                  has.js: {}
                  index.js: {}
                  lang.js: {}
                  matches.js: {}
                  not.js: {}
                  nth-child.js: {}
                  nth-last-child.js: {}
                  nth-last-of-type.js: {}
                  nth-of-type.js: {}
                  slotted.js: {}
                scope:
                  atrulePrelude.js: {}
                  default.js: {}
                  index.js: {}
                  selector.js: {}
                  value.js: {}
              tokenizer:
                char-code-definitions.js: {}
                const.js: {}
                index.js: {}
                utils.js: {}
              utils:
                clone.js: {}
                createCustomError.js: {}
                names.js: {}
              walker:
                create.js: {}
                index.js: {}
            package.json: {}
          mdn-data:
            LICENSE: {}
            README.md: {}
            api:
              index.js: {}
              inheritance.json: {}
              inheritance.schema.json: {}
            css:
              at-rules.json: {}
              at-rules.schema.json: {}
              definitions.json: {}
              index.js: {}
              properties.json: {}
              properties.schema.json: {}
              selectors.json: {}
              selectors.schema.json: {}
              syntaxes.json: {}
              syntaxes.schema.json: {}
              types.json: {}
              types.schema.json: {}
              units.json: {}
              units.schema.json: {}
            index.js: {}
            l10n:
              css.json: {}
              index.js: {}
            package.json: {}
          source-map:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            dist:
              source-map.debug.js: {}
              source-map.js: {}
              source-map.min.js: {}
              source-map.min.js.map: {}
            lib:
              array-set.js: {}
              base64-vlq.js: {}
              base64.js: {}
              binary-search.js: {}
              mapping-list.js: {}
              quick-sort.js: {}
              source-map-consumer.js: {}
              source-map-generator.js: {}
              source-node.js: {}
              util.js: {}
            package.json: {}
            source-map.d.ts: {}
            source-map.js: {}
          svgo:
            LICENSE: {}
            README.md: {}
            bin:
              svgo: {}
            dist:
              svgo.browser.js: {}
            lib:
              css-tools.js: {}
              parser.js: {}
              path.js: {}
              stringifier.js: {}
              style.js: {}
              svgo:
                coa.js: {}
                config.js: {}
                css-class-list.js: {}
                css-select-adapter.d.ts: {}
                css-select-adapter.js: {}
                css-style-declaration.js: {}
                jsAPI.d.ts: {}
                jsAPI.js: {}
                plugins.js: {}
                tools.js: {}
              svgo-node.js: {}
              svgo.js: {}
              types.ts: {}
              xast.js: {}
            package.json: {}
            plugins:
              _applyTransforms.js: {}
              _collections.js: {}
              _path.js: {}
              _transforms.js: {}
              addAttributesToSVGElement.js: {}
              addClassesToSVGElement.js: {}
              cleanupAttrs.js: {}
              cleanupEnableBackground.js: {}
              cleanupIDs.js: {}
              cleanupListOfValues.js: {}
              cleanupNumericValues.js: {}
              collapseGroups.js: {}
              convertColors.js: {}
              convertEllipseToCircle.js: {}
              convertPathData.js: {}
              convertShapeToPath.js: {}
              convertStyleToAttrs.js: {}
              convertTransform.js: {}
              inlineStyles.js: {}
              mergePaths.js: {}
              mergeStyles.js: {}
              minifyStyles.js: {}
              moveElemsAttrsToGroup.js: {}
              moveGroupAttrsToElems.js: {}
              plugins.js: {}
              prefixIds.js: {}
              preset-default.js: {}
              removeAttributesBySelector.js: {}
              removeAttrs.js: {}
              removeComments.js: {}
              removeDesc.js: {}
              removeDimensions.js: {}
              removeDoctype.js: {}
              removeEditorsNSData.js: {}
              removeElementsByAttr.js: {}
              removeEmptyAttrs.js: {}
              removeEmptyContainers.js: {}
              removeEmptyText.js: {}
              removeHiddenElems.js: {}
              removeMetadata.js: {}
              removeNonInheritableGroupAttrs.js: {}
              removeOffCanvasPaths.js: {}
              removeRasterImages.js: {}
              removeScriptElement.js: {}
              removeStyleElement.js: {}
              removeTitle.js: {}
              removeUnknownsAndDefaults.js: {}
              removeUnusedNS.js: {}
              removeUselessDefs.js: {}
              removeUselessStrokeAndFill.js: {}
              removeViewBox.js: {}
              removeXMLNS.js: {}
              removeXMLProcInst.js: {}
              reusePaths.js: {}
              sortAttrs.js: {}
              sortDefsChildren.js: {}
        package.json: {}
        src:
          globals.d.ts: {}
          index.js: {}
          lib:
            url.js: {}
        types:
          index.d.ts: {}
          lib:
            url.d.ts: {}
      postcss-unique-selectors:
        LICENSE-MIT: {}
        README.md: {}
        package.json: {}
        src:
          index.js: {}
        types:
          index.d.ts: {}
      postcss-value-parser:
        LICENSE: {}
        README.md: {}
        lib:
          index.d.ts: {}
          index.js: {}
          parse.js: {}
          stringify.js: {}
          unit.js: {}
          walk.js: {}
        package.json: {}
      prelude-ls:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        lib:
          Func.js: {}
          List.js: {}
          Num.js: {}
          Obj.js: {}
          Str.js: {}
          index.js: {}
        package.json: {}
      pretty-bytes:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      pretty-error:
        .github:
          workflows:
            main.yml: {}
        .mocharc.yaml: {}
        .travis.yml: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        lib:
          ParsedError.js: {}
          PrettyError.js: {}
          defaultStyle.js: {}
          nodePaths.js: {}
        package.json: {}
        src:
          ParsedError.coffee: {}
          PrettyError.coffee: {}
          defaultStyle.coffee: {}
          nodePaths.coffee: {}
        start.js: {}
        test:
          ParsedError.coffee: {}
          PrettyError.coffee: {}
      pretty-format:
        LICENSE: {}
        README.md: {}
        build:
          collections.d.ts: {}
          collections.js: {}
          index.d.ts: {}
          index.js: {}
          plugins:
            AsymmetricMatcher.d.ts: {}
            AsymmetricMatcher.js: {}
            ConvertAnsi.d.ts: {}
            ConvertAnsi.js: {}
            DOMCollection.d.ts: {}
            DOMCollection.js: {}
            DOMElement.d.ts: {}
            DOMElement.js: {}
            Immutable.d.ts: {}
            Immutable.js: {}
            ReactElement.d.ts: {}
            ReactElement.js: {}
            ReactTestComponent.d.ts: {}
            ReactTestComponent.js: {}
            lib:
              escapeHTML.d.ts: {}
              escapeHTML.js: {}
              markup.d.ts: {}
              markup.js: {}
          types.d.ts: {}
          types.js: {}
        node_modules:
          ansi-styles:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
      prismjs:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        components:
          index.js: {}
          prism-abap.js: {}
          prism-abap.min.js: {}
          prism-abnf.js: {}
          prism-abnf.min.js: {}
          prism-actionscript.js: {}
          prism-actionscript.min.js: {}
          prism-ada.js: {}
          prism-ada.min.js: {}
          prism-agda.js: {}
          prism-agda.min.js: {}
          prism-al.js: {}
          prism-al.min.js: {}
          prism-antlr4.js: {}
          prism-antlr4.min.js: {}
          prism-apacheconf.js: {}
          prism-apacheconf.min.js: {}
          prism-apex.js: {}
          prism-apex.min.js: {}
          prism-apl.js: {}
          prism-apl.min.js: {}
          prism-applescript.js: {}
          prism-applescript.min.js: {}
          prism-aql.js: {}
          prism-aql.min.js: {}
          prism-arduino.js: {}
          prism-arduino.min.js: {}
          prism-arff.js: {}
          prism-arff.min.js: {}
          prism-armasm.js: {}
          prism-armasm.min.js: {}
          prism-arturo.js: {}
          prism-arturo.min.js: {}
          prism-asciidoc.js: {}
          prism-asciidoc.min.js: {}
          prism-asm6502.js: {}
          prism-asm6502.min.js: {}
          prism-asmatmel.js: {}
          prism-asmatmel.min.js: {}
          prism-aspnet.js: {}
          prism-aspnet.min.js: {}
          prism-autohotkey.js: {}
          prism-autohotkey.min.js: {}
          prism-autoit.js: {}
          prism-autoit.min.js: {}
          prism-avisynth.js: {}
          prism-avisynth.min.js: {}
          prism-avro-idl.js: {}
          prism-avro-idl.min.js: {}
          prism-awk.js: {}
          prism-awk.min.js: {}
          prism-bash.js: {}
          prism-bash.min.js: {}
          prism-basic.js: {}
          prism-basic.min.js: {}
          prism-batch.js: {}
          prism-batch.min.js: {}
          prism-bbcode.js: {}
          prism-bbcode.min.js: {}
          prism-bbj.js: {}
          prism-bbj.min.js: {}
          prism-bicep.js: {}
          prism-bicep.min.js: {}
          prism-birb.js: {}
          prism-birb.min.js: {}
          prism-bison.js: {}
          prism-bison.min.js: {}
          prism-bnf.js: {}
          prism-bnf.min.js: {}
          prism-bqn.js: {}
          prism-bqn.min.js: {}
          prism-brainfuck.js: {}
          prism-brainfuck.min.js: {}
          prism-brightscript.js: {}
          prism-brightscript.min.js: {}
          prism-bro.js: {}
          prism-bro.min.js: {}
          prism-bsl.js: {}
          prism-bsl.min.js: {}
          prism-c.js: {}
          prism-c.min.js: {}
          prism-cfscript.js: {}
          prism-cfscript.min.js: {}
          prism-chaiscript.js: {}
          prism-chaiscript.min.js: {}
          prism-cil.js: {}
          prism-cil.min.js: {}
          prism-cilkc.js: {}
          prism-cilkc.min.js: {}
          prism-cilkcpp.js: {}
          prism-cilkcpp.min.js: {}
          prism-clike.js: {}
          prism-clike.min.js: {}
          prism-clojure.js: {}
          prism-clojure.min.js: {}
          prism-cmake.js: {}
          prism-cmake.min.js: {}
          prism-cobol.js: {}
          prism-cobol.min.js: {}
          prism-coffeescript.js: {}
          prism-coffeescript.min.js: {}
          prism-concurnas.js: {}
          prism-concurnas.min.js: {}
          prism-cooklang.js: {}
          prism-cooklang.min.js: {}
          prism-coq.js: {}
          prism-coq.min.js: {}
          prism-core.js: {}
          prism-core.min.js: {}
          prism-cpp.js: {}
          prism-cpp.min.js: {}
          prism-crystal.js: {}
          prism-crystal.min.js: {}
          prism-csharp.js: {}
          prism-csharp.min.js: {}
          prism-cshtml.js: {}
          prism-cshtml.min.js: {}
          prism-csp.js: {}
          prism-csp.min.js: {}
          prism-css-extras.js: {}
          prism-css-extras.min.js: {}
          prism-css.js: {}
          prism-css.min.js: {}
          prism-csv.js: {}
          prism-csv.min.js: {}
          prism-cue.js: {}
          prism-cue.min.js: {}
          prism-cypher.js: {}
          prism-cypher.min.js: {}
          prism-d.js: {}
          prism-d.min.js: {}
          prism-dart.js: {}
          prism-dart.min.js: {}
          prism-dataweave.js: {}
          prism-dataweave.min.js: {}
          prism-dax.js: {}
          prism-dax.min.js: {}
          prism-dhall.js: {}
          prism-dhall.min.js: {}
          prism-diff.js: {}
          prism-diff.min.js: {}
          prism-django.js: {}
          prism-django.min.js: {}
          prism-dns-zone-file.js: {}
          prism-dns-zone-file.min.js: {}
          prism-docker.js: {}
          prism-docker.min.js: {}
          prism-dot.js: {}
          prism-dot.min.js: {}
          prism-ebnf.js: {}
          prism-ebnf.min.js: {}
          prism-editorconfig.js: {}
          prism-editorconfig.min.js: {}
          prism-eiffel.js: {}
          prism-eiffel.min.js: {}
          prism-ejs.js: {}
          prism-ejs.min.js: {}
          prism-elixir.js: {}
          prism-elixir.min.js: {}
          prism-elm.js: {}
          prism-elm.min.js: {}
          prism-erb.js: {}
          prism-erb.min.js: {}
          prism-erlang.js: {}
          prism-erlang.min.js: {}
          prism-etlua.js: {}
          prism-etlua.min.js: {}
          prism-excel-formula.js: {}
          prism-excel-formula.min.js: {}
          prism-factor.js: {}
          prism-factor.min.js: {}
          prism-false.js: {}
          prism-false.min.js: {}
          prism-firestore-security-rules.js: {}
          prism-firestore-security-rules.min.js: {}
          prism-flow.js: {}
          prism-flow.min.js: {}
          prism-fortran.js: {}
          prism-fortran.min.js: {}
          prism-fsharp.js: {}
          prism-fsharp.min.js: {}
          prism-ftl.js: {}
          prism-ftl.min.js: {}
          prism-gap.js: {}
          prism-gap.min.js: {}
          prism-gcode.js: {}
          prism-gcode.min.js: {}
          prism-gdscript.js: {}
          prism-gdscript.min.js: {}
          prism-gedcom.js: {}
          prism-gedcom.min.js: {}
          prism-gettext.js: {}
          prism-gettext.min.js: {}
          prism-gherkin.js: {}
          prism-gherkin.min.js: {}
          prism-git.js: {}
          prism-git.min.js: {}
          prism-glsl.js: {}
          prism-glsl.min.js: {}
          prism-gml.js: {}
          prism-gml.min.js: {}
          prism-gn.js: {}
          prism-gn.min.js: {}
          prism-go-module.js: {}
          prism-go-module.min.js: {}
          prism-go.js: {}
          prism-go.min.js: {}
          prism-gradle.js: {}
          prism-gradle.min.js: {}
          prism-graphql.js: {}
          prism-graphql.min.js: {}
          prism-groovy.js: {}
          prism-groovy.min.js: {}
          prism-haml.js: {}
          prism-haml.min.js: {}
          prism-handlebars.js: {}
          prism-handlebars.min.js: {}
          prism-haskell.js: {}
          prism-haskell.min.js: {}
          prism-haxe.js: {}
          prism-haxe.min.js: {}
          prism-hcl.js: {}
          prism-hcl.min.js: {}
          prism-hlsl.js: {}
          prism-hlsl.min.js: {}
          prism-hoon.js: {}
          prism-hoon.min.js: {}
          prism-hpkp.js: {}
          prism-hpkp.min.js: {}
          prism-hsts.js: {}
          prism-hsts.min.js: {}
          prism-http.js: {}
          prism-http.min.js: {}
          prism-ichigojam.js: {}
          prism-ichigojam.min.js: {}
          prism-icon.js: {}
          prism-icon.min.js: {}
          prism-icu-message-format.js: {}
          prism-icu-message-format.min.js: {}
          prism-idris.js: {}
          prism-idris.min.js: {}
          prism-iecst.js: {}
          prism-iecst.min.js: {}
          prism-ignore.js: {}
          prism-ignore.min.js: {}
          prism-inform7.js: {}
          prism-inform7.min.js: {}
          prism-ini.js: {}
          prism-ini.min.js: {}
          prism-io.js: {}
          prism-io.min.js: {}
          prism-j.js: {}
          prism-j.min.js: {}
          prism-java.js: {}
          prism-java.min.js: {}
          prism-javadoc.js: {}
          prism-javadoc.min.js: {}
          prism-javadoclike.js: {}
          prism-javadoclike.min.js: {}
          prism-javascript.js: {}
          prism-javascript.min.js: {}
          prism-javastacktrace.js: {}
          prism-javastacktrace.min.js: {}
          prism-jexl.js: {}
          prism-jexl.min.js: {}
          prism-jolie.js: {}
          prism-jolie.min.js: {}
          prism-jq.js: {}
          prism-jq.min.js: {}
          prism-js-extras.js: {}
          prism-js-extras.min.js: {}
          prism-js-templates.js: {}
          prism-js-templates.min.js: {}
          prism-jsdoc.js: {}
          prism-jsdoc.min.js: {}
          prism-json.js: {}
          prism-json.min.js: {}
          prism-json5.js: {}
          prism-json5.min.js: {}
          prism-jsonp.js: {}
          prism-jsonp.min.js: {}
          prism-jsstacktrace.js: {}
          prism-jsstacktrace.min.js: {}
          prism-jsx.js: {}
          prism-jsx.min.js: {}
          prism-julia.js: {}
          prism-julia.min.js: {}
          prism-keepalived.js: {}
          prism-keepalived.min.js: {}
          prism-keyman.js: {}
          prism-keyman.min.js: {}
          prism-kotlin.js: {}
          prism-kotlin.min.js: {}
          prism-kumir.js: {}
          prism-kumir.min.js: {}
          prism-kusto.js: {}
          prism-kusto.min.js: {}
          prism-latex.js: {}
          prism-latex.min.js: {}
          prism-latte.js: {}
          prism-latte.min.js: {}
          prism-less.js: {}
          prism-less.min.js: {}
          prism-lilypond.js: {}
          prism-lilypond.min.js: {}
          prism-linker-script.js: {}
          prism-linker-script.min.js: {}
          prism-liquid.js: {}
          prism-liquid.min.js: {}
          prism-lisp.js: {}
          prism-lisp.min.js: {}
          prism-livescript.js: {}
          prism-livescript.min.js: {}
          prism-llvm.js: {}
          prism-llvm.min.js: {}
          prism-log.js: {}
          prism-log.min.js: {}
          prism-lolcode.js: {}
          prism-lolcode.min.js: {}
          prism-lua.js: {}
          prism-lua.min.js: {}
          prism-magma.js: {}
          prism-magma.min.js: {}
          prism-makefile.js: {}
          prism-makefile.min.js: {}
          prism-markdown.js: {}
          prism-markdown.min.js: {}
          prism-markup-templating.js: {}
          prism-markup-templating.min.js: {}
          prism-markup.js: {}
          prism-markup.min.js: {}
          prism-mata.js: {}
          prism-mata.min.js: {}
          prism-matlab.js: {}
          prism-matlab.min.js: {}
          prism-maxscript.js: {}
          prism-maxscript.min.js: {}
          prism-mel.js: {}
          prism-mel.min.js: {}
          prism-mermaid.js: {}
          prism-mermaid.min.js: {}
          prism-metafont.js: {}
          prism-metafont.min.js: {}
          prism-mizar.js: {}
          prism-mizar.min.js: {}
          prism-mongodb.js: {}
          prism-mongodb.min.js: {}
          prism-monkey.js: {}
          prism-monkey.min.js: {}
          prism-moonscript.js: {}
          prism-moonscript.min.js: {}
          prism-n1ql.js: {}
          prism-n1ql.min.js: {}
          prism-n4js.js: {}
          prism-n4js.min.js: {}
          prism-nand2tetris-hdl.js: {}
          prism-nand2tetris-hdl.min.js: {}
          prism-naniscript.js: {}
          prism-naniscript.min.js: {}
          prism-nasm.js: {}
          prism-nasm.min.js: {}
          prism-neon.js: {}
          prism-neon.min.js: {}
          prism-nevod.js: {}
          prism-nevod.min.js: {}
          prism-nginx.js: {}
          prism-nginx.min.js: {}
          prism-nim.js: {}
          prism-nim.min.js: {}
          prism-nix.js: {}
          prism-nix.min.js: {}
          prism-nsis.js: {}
          prism-nsis.min.js: {}
          prism-objectivec.js: {}
          prism-objectivec.min.js: {}
          prism-ocaml.js: {}
          prism-ocaml.min.js: {}
          prism-odin.js: {}
          prism-odin.min.js: {}
          prism-opencl.js: {}
          prism-opencl.min.js: {}
          prism-openqasm.js: {}
          prism-openqasm.min.js: {}
          prism-oz.js: {}
          prism-oz.min.js: {}
          prism-parigp.js: {}
          prism-parigp.min.js: {}
          prism-parser.js: {}
          prism-parser.min.js: {}
          prism-pascal.js: {}
          prism-pascal.min.js: {}
          prism-pascaligo.js: {}
          prism-pascaligo.min.js: {}
          prism-pcaxis.js: {}
          prism-pcaxis.min.js: {}
          prism-peoplecode.js: {}
          prism-peoplecode.min.js: {}
          prism-perl.js: {}
          prism-perl.min.js: {}
          prism-php-extras.js: {}
          prism-php-extras.min.js: {}
          prism-php.js: {}
          prism-php.min.js: {}
          prism-phpdoc.js: {}
          prism-phpdoc.min.js: {}
          prism-plant-uml.js: {}
          prism-plant-uml.min.js: {}
          prism-plsql.js: {}
          prism-plsql.min.js: {}
          prism-powerquery.js: {}
          prism-powerquery.min.js: {}
          prism-powershell.js: {}
          prism-powershell.min.js: {}
          prism-processing.js: {}
          prism-processing.min.js: {}
          prism-prolog.js: {}
          prism-prolog.min.js: {}
          prism-promql.js: {}
          prism-promql.min.js: {}
          prism-properties.js: {}
          prism-properties.min.js: {}
          prism-protobuf.js: {}
          prism-protobuf.min.js: {}
          prism-psl.js: {}
          prism-psl.min.js: {}
          prism-pug.js: {}
          prism-pug.min.js: {}
          prism-puppet.js: {}
          prism-puppet.min.js: {}
          prism-pure.js: {}
          prism-pure.min.js: {}
          prism-purebasic.js: {}
          prism-purebasic.min.js: {}
          prism-purescript.js: {}
          prism-purescript.min.js: {}
          prism-python.js: {}
          prism-python.min.js: {}
          prism-q.js: {}
          prism-q.min.js: {}
          prism-qml.js: {}
          prism-qml.min.js: {}
          prism-qore.js: {}
          prism-qore.min.js: {}
          prism-qsharp.js: {}
          prism-qsharp.min.js: {}
          prism-r.js: {}
          prism-r.min.js: {}
          prism-racket.js: {}
          prism-racket.min.js: {}
          prism-reason.js: {}
          prism-reason.min.js: {}
          prism-regex.js: {}
          prism-regex.min.js: {}
          prism-rego.js: {}
          prism-rego.min.js: {}
          prism-renpy.js: {}
          prism-renpy.min.js: {}
          prism-rescript.js: {}
          prism-rescript.min.js: {}
          prism-rest.js: {}
          prism-rest.min.js: {}
          prism-rip.js: {}
          prism-rip.min.js: {}
          prism-roboconf.js: {}
          prism-roboconf.min.js: {}
          prism-robotframework.js: {}
          prism-robotframework.min.js: {}
          prism-ruby.js: {}
          prism-ruby.min.js: {}
          prism-rust.js: {}
          prism-rust.min.js: {}
          prism-sas.js: {}
          prism-sas.min.js: {}
          prism-sass.js: {}
          prism-sass.min.js: {}
          prism-scala.js: {}
          prism-scala.min.js: {}
          prism-scheme.js: {}
          prism-scheme.min.js: {}
          prism-scss.js: {}
          prism-scss.min.js: {}
          prism-shell-session.js: {}
          prism-shell-session.min.js: {}
          prism-smali.js: {}
          prism-smali.min.js: {}
          prism-smalltalk.js: {}
          prism-smalltalk.min.js: {}
          prism-smarty.js: {}
          prism-smarty.min.js: {}
          prism-sml.js: {}
          prism-sml.min.js: {}
          prism-solidity.js: {}
          prism-solidity.min.js: {}
          prism-solution-file.js: {}
          prism-solution-file.min.js: {}
          prism-soy.js: {}
          prism-soy.min.js: {}
          prism-sparql.js: {}
          prism-sparql.min.js: {}
          prism-splunk-spl.js: {}
          prism-splunk-spl.min.js: {}
          prism-sqf.js: {}
          prism-sqf.min.js: {}
          prism-sql.js: {}
          prism-sql.min.js: {}
          prism-squirrel.js: {}
          prism-squirrel.min.js: {}
          prism-stan.js: {}
          prism-stan.min.js: {}
          prism-stata.js: {}
          prism-stata.min.js: {}
          prism-stylus.js: {}
          prism-stylus.min.js: {}
          prism-supercollider.js: {}
          prism-supercollider.min.js: {}
          prism-swift.js: {}
          prism-swift.min.js: {}
          prism-systemd.js: {}
          prism-systemd.min.js: {}
          prism-t4-cs.js: {}
          prism-t4-cs.min.js: {}
          prism-t4-templating.js: {}
          prism-t4-templating.min.js: {}
          prism-t4-vb.js: {}
          prism-t4-vb.min.js: {}
          prism-tap.js: {}
          prism-tap.min.js: {}
          prism-tcl.js: {}
          prism-tcl.min.js: {}
          prism-textile.js: {}
          prism-textile.min.js: {}
          prism-toml.js: {}
          prism-toml.min.js: {}
          prism-tremor.js: {}
          prism-tremor.min.js: {}
          prism-tsx.js: {}
          prism-tsx.min.js: {}
          prism-tt2.js: {}
          prism-tt2.min.js: {}
          prism-turtle.js: {}
          prism-turtle.min.js: {}
          prism-twig.js: {}
          prism-twig.min.js: {}
          prism-typescript.js: {}
          prism-typescript.min.js: {}
          prism-typoscript.js: {}
          prism-typoscript.min.js: {}
          prism-unrealscript.js: {}
          prism-unrealscript.min.js: {}
          prism-uorazor.js: {}
          prism-uorazor.min.js: {}
          prism-uri.js: {}
          prism-uri.min.js: {}
          prism-v.js: {}
          prism-v.min.js: {}
          prism-vala.js: {}
          prism-vala.min.js: {}
          prism-vbnet.js: {}
          prism-vbnet.min.js: {}
          prism-velocity.js: {}
          prism-velocity.min.js: {}
          prism-verilog.js: {}
          prism-verilog.min.js: {}
          prism-vhdl.js: {}
          prism-vhdl.min.js: {}
          prism-vim.js: {}
          prism-vim.min.js: {}
          prism-visual-basic.js: {}
          prism-visual-basic.min.js: {}
          prism-warpscript.js: {}
          prism-warpscript.min.js: {}
          prism-wasm.js: {}
          prism-wasm.min.js: {}
          prism-web-idl.js: {}
          prism-web-idl.min.js: {}
          prism-wgsl.js: {}
          prism-wgsl.min.js: {}
          prism-wiki.js: {}
          prism-wiki.min.js: {}
          prism-wolfram.js: {}
          prism-wolfram.min.js: {}
          prism-wren.js: {}
          prism-wren.min.js: {}
          prism-xeora.js: {}
          prism-xeora.min.js: {}
          prism-xml-doc.js: {}
          prism-xml-doc.min.js: {}
          prism-xojo.js: {}
          prism-xojo.min.js: {}
          prism-xquery.js: {}
          prism-xquery.min.js: {}
          prism-yaml.js: {}
          prism-yaml.min.js: {}
          prism-yang.js: {}
          prism-yang.min.js: {}
          prism-zig.js: {}
          prism-zig.min.js: {}
        components.js: {}
        components.json: {}
        dependencies.js: {}
        package.json: {}
        plugins:
          autolinker:
            prism-autolinker.css: {}
            prism-autolinker.js: {}
            prism-autolinker.min.css: {}
            prism-autolinker.min.js: {}
          autoloader:
            prism-autoloader.js: {}
            prism-autoloader.min.js: {}
          command-line:
            prism-command-line.css: {}
            prism-command-line.js: {}
            prism-command-line.min.css: {}
            prism-command-line.min.js: {}
          copy-to-clipboard:
            prism-copy-to-clipboard.js: {}
            prism-copy-to-clipboard.min.js: {}
          custom-class:
            prism-custom-class.js: {}
            prism-custom-class.min.js: {}
          data-uri-highlight:
            prism-data-uri-highlight.js: {}
            prism-data-uri-highlight.min.js: {}
          diff-highlight:
            prism-diff-highlight.css: {}
            prism-diff-highlight.js: {}
            prism-diff-highlight.min.css: {}
            prism-diff-highlight.min.js: {}
          download-button:
            prism-download-button.js: {}
            prism-download-button.min.js: {}
          file-highlight:
            prism-file-highlight.js: {}
            prism-file-highlight.min.js: {}
          filter-highlight-all:
            prism-filter-highlight-all.js: {}
            prism-filter-highlight-all.min.js: {}
          highlight-keywords:
            prism-highlight-keywords.js: {}
            prism-highlight-keywords.min.js: {}
          inline-color:
            prism-inline-color.css: {}
            prism-inline-color.js: {}
            prism-inline-color.min.css: {}
            prism-inline-color.min.js: {}
          jsonp-highlight:
            prism-jsonp-highlight.js: {}
            prism-jsonp-highlight.min.js: {}
          keep-markup:
            prism-keep-markup.js: {}
            prism-keep-markup.min.js: {}
          line-highlight:
            prism-line-highlight.css: {}
            prism-line-highlight.js: {}
            prism-line-highlight.min.css: {}
            prism-line-highlight.min.js: {}
          line-numbers:
            prism-line-numbers.css: {}
            prism-line-numbers.js: {}
            prism-line-numbers.min.css: {}
            prism-line-numbers.min.js: {}
          match-braces:
            prism-match-braces.css: {}
            prism-match-braces.js: {}
            prism-match-braces.min.css: {}
            prism-match-braces.min.js: {}
          normalize-whitespace:
            prism-normalize-whitespace.js: {}
            prism-normalize-whitespace.min.js: {}
          previewers:
            prism-previewers.css: {}
            prism-previewers.js: {}
            prism-previewers.min.css: {}
            prism-previewers.min.js: {}
          remove-initial-line-feed:
            prism-remove-initial-line-feed.js: {}
            prism-remove-initial-line-feed.min.js: {}
          show-invisibles:
            prism-show-invisibles.css: {}
            prism-show-invisibles.js: {}
            prism-show-invisibles.min.css: {}
            prism-show-invisibles.min.js: {}
          show-language:
            prism-show-language.js: {}
            prism-show-language.min.js: {}
          toolbar:
            prism-toolbar.css: {}
            prism-toolbar.js: {}
            prism-toolbar.min.css: {}
            prism-toolbar.min.js: {}
          treeview:
            prism-treeview.css: {}
            prism-treeview.js: {}
            prism-treeview.min.css: {}
            prism-treeview.min.js: {}
          unescaped-markup:
            prism-unescaped-markup.css: {}
            prism-unescaped-markup.js: {}
            prism-unescaped-markup.min.css: {}
            prism-unescaped-markup.min.js: {}
          wpd:
            prism-wpd.css: {}
            prism-wpd.js: {}
            prism-wpd.min.css: {}
            prism-wpd.min.js: {}
        prism.js: {}
        themes:
          prism-coy.css: {}
          prism-coy.min.css: {}
          prism-dark.css: {}
          prism-dark.min.css: {}
          prism-funky.css: {}
          prism-funky.min.css: {}
          prism-okaidia.css: {}
          prism-okaidia.min.css: {}
          prism-solarizedlight.css: {}
          prism-solarizedlight.min.css: {}
          prism-tomorrow.css: {}
          prism-tomorrow.min.css: {}
          prism-twilight.css: {}
          prism-twilight.min.css: {}
          prism.css: {}
          prism.min.css: {}
      process-nextick-args:
        index.js: {}
        license.md: {}
        package.json: {}
        readme.md: {}
      promise:
        .jshintrc: {}
        LICENSE: {}
        Readme.md: {}
        build.js: {}
        core.js: {}
        domains:
          core.js: {}
          done.js: {}
          es6-extensions.js: {}
          finally.js: {}
          index.js: {}
          node-extensions.js: {}
          rejection-tracking.js: {}
          synchronous.js: {}
        index.d.ts: {}
        index.js: {}
        index.js.flow: {}
        lib:
          core.js: {}
          done.js: {}
          es6-extensions.js: {}
          finally.js: {}
          index.js: {}
          node-extensions.js: {}
          rejection-tracking.js: {}
          synchronous.js: {}
        package.json: {}
        polyfill-done.js: {}
        polyfill.js: {}
        setimmediate:
          core.js: {}
          done.js: {}
          es6-extensions.js: {}
          finally.js: {}
          index.js: {}
          node-extensions.js: {}
          rejection-tracking.js: {}
          synchronous.js: {}
        src:
          core.js: {}
          done.js: {}
          es6-extensions.js: {}
          finally.js: {}
          index.js: {}
          node-extensions.js: {}
          rejection-tracking.js: {}
          synchronous.js: {}
      promptly:
        .editorconfig: {}
        .jshintrc: {}
        .npmignore: {}
        .travis.yml: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          test.js: {}
      prompts:
        dist:
          dateparts:
            datepart.js: {}
            day.js: {}
            hours.js: {}
            index.js: {}
            meridiem.js: {}
            milliseconds.js: {}
            minutes.js: {}
            month.js: {}
            seconds.js: {}
            year.js: {}
          elements:
            autocomplete.js: {}
            autocompleteMultiselect.js: {}
            confirm.js: {}
            date.js: {}
            index.js: {}
            multiselect.js: {}
            number.js: {}
            prompt.js: {}
            select.js: {}
            text.js: {}
            toggle.js: {}
          index.js: {}
          prompts.js: {}
          util:
            action.js: {}
            clear.js: {}
            entriesToDisplay.js: {}
            figures.js: {}
            index.js: {}
            lines.js: {}
            strip.js: {}
            style.js: {}
            wrap.js: {}
        index.js: {}
        lib:
          dateparts:
            datepart.js: {}
            day.js: {}
            hours.js: {}
            index.js: {}
            meridiem.js: {}
            milliseconds.js: {}
            minutes.js: {}
            month.js: {}
            seconds.js: {}
            year.js: {}
          elements:
            autocomplete.js: {}
            autocompleteMultiselect.js: {}
            confirm.js: {}
            date.js: {}
            index.js: {}
            multiselect.js: {}
            number.js: {}
            prompt.js: {}
            select.js: {}
            text.js: {}
            toggle.js: {}
          index.js: {}
          prompts.js: {}
          util:
            action.js: {}
            clear.js: {}
            entriesToDisplay.js: {}
            figures.js: {}
            index.js: {}
            lines.js: {}
            strip.js: {}
            style.js: {}
            wrap.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      prop-types:
        LICENSE: {}
        README.md: {}
        checkPropTypes.js: {}
        factory.js: {}
        factoryWithThrowingShims.js: {}
        factoryWithTypeCheckers.js: {}
        index.js: {}
        lib:
          ReactPropTypesSecret.js: {}
          has.js: {}
        node_modules:
          react-is:
            LICENSE: {}
            README.md: {}
            build-info.json: {}
            cjs:
              react-is.development.js: {}
              react-is.production.min.js: {}
            index.js: {}
            package.json: {}
            umd:
              react-is.development.js: {}
              react-is.production.min.js: {}
        package.json: {}
        prop-types.js: {}
        prop-types.min.js: {}
      prop-types-extra:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        lib:
          all.js: {}
          componentOrElement.js: {}
          deprecated.js: {}
          elementType.js: {}
          index.js: {}
          isRequiredForA11y.js: {}
          utils:
            createChainableTypeChecker.js: {}
        node_modules:
          react-is:
            LICENSE: {}
            README.md: {}
            build-info.json: {}
            cjs:
              react-is.development.js: {}
              react-is.production.min.js: {}
            index.js: {}
            package.json: {}
            umd:
              react-is.development.js: {}
              react-is.production.min.js: {}
        package.json: {}
      property-information:
        index.d.ts: {}
        index.js: {}
        lib:
          aria.d.ts: {}
          aria.js: {}
          find.d.ts: {}
          find.js: {}
          hast-to-react.d.ts: {}
          hast-to-react.js: {}
          html.d.ts: {}
          html.js: {}
          normalize.d.ts: {}
          normalize.js: {}
          svg.d.ts: {}
          svg.js: {}
          util:
            case-insensitive-transform.d.ts: {}
            case-insensitive-transform.js: {}
            case-sensitive-transform.d.ts: {}
            case-sensitive-transform.js: {}
            create.d.ts: {}
            create.js: {}
            defined-info.d.ts: {}
            defined-info.js: {}
            info.d.ts: {}
            info.js: {}
            merge.d.ts: {}
            merge.js: {}
            schema.d.ts: {}
            schema.js: {}
            types.d.ts: {}
            types.js: {}
          xlink.d.ts: {}
          xlink.js: {}
          xml.d.ts: {}
          xml.js: {}
          xmlns.d.ts: {}
          xmlns.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      proxy-addr:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        node_modules:
          ipaddr.js:
            LICENSE: {}
            README.md: {}
            ipaddr.min.js: {}
            lib:
              ipaddr.js: {}
              ipaddr.js.d.ts: {}
            package.json: {}
        package.json: {}
      proxy-agent:
        README.md: {}
        dist:
          index.d.ts: {}
          index.d.ts.map: {}
          index.js: {}
          index.js.map: {}
        node_modules:
          agent-base:
            LICENSE: {}
            README.md: {}
            dist:
              helpers.d.ts: {}
              helpers.d.ts.map: {}
              helpers.js: {}
              helpers.js.map: {}
              index.d.ts: {}
              index.d.ts.map: {}
              index.js: {}
              index.js.map: {}
            package.json: {}
          http-proxy-agent:
            LICENSE: {}
            README.md: {}
            dist:
              index.d.ts: {}
              index.d.ts.map: {}
              index.js: {}
              index.js.map: {}
            package.json: {}
          https-proxy-agent:
            LICENSE: {}
            README.md: {}
            dist:
              index.d.ts: {}
              index.d.ts.map: {}
              index.js: {}
              index.js.map: {}
              parse-proxy-response.d.ts: {}
              parse-proxy-response.d.ts.map: {}
              parse-proxy-response.js: {}
              parse-proxy-response.js.map: {}
            package.json: {}
          lru-cache:
            LICENSE: {}
            README.md: {}
            index.d.ts: {}
            index.js: {}
            index.mjs: {}
            package.json: {}
        package.json: {}
      proxy-from-env:
        .eslintrc: {}
        .travis.yml: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test.js: {}
      psl:
        .env: {}
        LICENSE: {}
        README.md: {}
        browserstack-logo.svg: {}
        data:
          rules.json: {}
        dist:
          psl.js: {}
          psl.min.js: {}
        index.js: {}
        package.json: {}
      punycode:
        LICENSE-MIT.txt: {}
        README.md: {}
        package.json: {}
        punycode.es6.js: {}
        punycode.js: {}
      q:
        CHANGES.md: {}
        LICENSE: {}
        README.md: {}
        package.json: {}
        q.js: {}
        queue.js: {}
      qs:
        .editorconfig: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        dist:
          qs.js: {}
        lib:
          formats.js: {}
          index.js: {}
          parse.js: {}
          stringify.js: {}
          utils.js: {}
        package.json: {}
        test:
          parse.js: {}
          stringify.js: {}
          utils.js: {}
      querystringify:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      queue-microtask:
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
      raf:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        polyfill.js: {}
        test.js: {}
        window.js: {}
      randombytes:
        .travis.yml: {}
        .zuul.yml: {}
        LICENSE: {}
        README.md: {}
        browser.js: {}
        index.js: {}
        package.json: {}
        test.js: {}
      range-parser:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      raw-body:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        SECURITY.md: {}
        index.d.ts: {}
        index.js: {}
        node_modules:
          bytes:
            History.md: {}
            LICENSE: {}
            Readme.md: {}
            index.js: {}
            package.json: {}
          iconv-lite:
            Changelog.md: {}
            LICENSE: {}
            README.md: {}
            encodings:
              dbcs-codec.js: {}
              dbcs-data.js: {}
              index.js: {}
              internal.js: {}
              sbcs-codec.js: {}
              sbcs-data-generated.js: {}
              sbcs-data.js: {}
              tables:
                big5-added.json: {}
                cp936.json: {}
                cp949.json: {}
                cp950.json: {}
                eucjp.json: {}
                gb18030-ranges.json: {}
                gbk-added.json: {}
                shiftjis.json: {}
              utf16.js: {}
              utf7.js: {}
            lib:
              bom-handling.js: {}
              extend-node.js: {}
              index.d.ts: {}
              index.js: {}
              streams.js: {}
            package.json: {}
        package.json: {}
      react:
        LICENSE: {}
        README.md: {}
        cjs:
          react-jsx-dev-runtime.development.js: {}
          react-jsx-dev-runtime.production.min.js: {}
          react-jsx-dev-runtime.profiling.min.js: {}
          react-jsx-runtime.development.js: {}
          react-jsx-runtime.production.min.js: {}
          react-jsx-runtime.profiling.min.js: {}
          react.development.js: {}
          react.production.min.js: {}
          react.shared-subset.development.js: {}
          react.shared-subset.production.min.js: {}
        index.js: {}
        jsx-dev-runtime.js: {}
        jsx-runtime.js: {}
        package.json: {}
        react.shared-subset.js: {}
        umd:
          react.development.js: {}
          react.production.min.js: {}
          react.profiling.min.js: {}
      react-app-polyfill:
        LICENSE: {}
        README.md: {}
        ie11.js: {}
        ie9.js: {}
        jsdom.js: {}
        node_modules:
          regenerator-runtime:
            LICENSE: {}
            README.md: {}
            package.json: {}
            path.js: {}
            runtime.js: {}
        package.json: {}
        stable.js: {}
      react-bootstrap:
        AbstractModalHeader:
          package.json: {}
        Accordion:
          package.json: {}
        AccordionBody:
          package.json: {}
        AccordionButton:
          package.json: {}
        AccordionCollapse:
          package.json: {}
        AccordionContext:
          package.json: {}
        AccordionHeader:
          package.json: {}
        AccordionItem:
          package.json: {}
        AccordionItemContext:
          package.json: {}
        Alert:
          package.json: {}
        AlertHeading:
          package.json: {}
        AlertLink:
          package.json: {}
        Anchor:
          package.json: {}
        Badge:
          package.json: {}
        BootstrapModalManager:
          package.json: {}
        Breadcrumb:
          package.json: {}
        BreadcrumbItem:
          package.json: {}
        Button:
          package.json: {}
        ButtonGroup:
          package.json: {}
        ButtonToolbar:
          package.json: {}
        Card:
          package.json: {}
        CardBody:
          package.json: {}
        CardFooter:
          package.json: {}
        CardGroup:
          package.json: {}
        CardHeader:
          package.json: {}
        CardHeaderContext:
          package.json: {}
        CardImg:
          package.json: {}
        CardImgOverlay:
          package.json: {}
        CardLink:
          package.json: {}
        CardSubtitle:
          package.json: {}
        CardText:
          package.json: {}
        CardTitle:
          package.json: {}
        Carousel:
          package.json: {}
        CarouselCaption:
          package.json: {}
        CarouselItem:
          package.json: {}
        CloseButton:
          package.json: {}
        Col:
          package.json: {}
        Collapse:
          package.json: {}
        Container:
          package.json: {}
        Dropdown:
          package.json: {}
        DropdownButton:
          package.json: {}
        DropdownContext:
          package.json: {}
        DropdownDivider:
          package.json: {}
        DropdownHeader:
          package.json: {}
        DropdownItem:
          package.json: {}
        DropdownItemText:
          package.json: {}
        DropdownMenu:
          package.json: {}
        DropdownToggle:
          package.json: {}
        ElementChildren:
          package.json: {}
        Fade:
          package.json: {}
        Feedback:
          package.json: {}
        Figure:
          package.json: {}
        FigureCaption:
          package.json: {}
        FigureImage:
          package.json: {}
        FloatingLabel:
          package.json: {}
        Form:
          package.json: {}
        FormCheck:
          package.json: {}
        FormCheckInput:
          package.json: {}
        FormCheckLabel:
          package.json: {}
        FormContext:
          package.json: {}
        FormControl:
          package.json: {}
        FormFloating:
          package.json: {}
        FormGroup:
          package.json: {}
        FormLabel:
          package.json: {}
        FormRange:
          package.json: {}
        FormSelect:
          package.json: {}
        FormText:
          package.json: {}
        Image:
          package.json: {}
        InputGroup:
          package.json: {}
        InputGroupContext:
          package.json: {}
        InputGroupText:
          package.json: {}
        LICENSE: {}
        ListGroup:
          package.json: {}
        ListGroupItem:
          package.json: {}
        Modal:
          package.json: {}
        ModalBody:
          package.json: {}
        ModalContext:
          package.json: {}
        ModalDialog:
          package.json: {}
        ModalFooter:
          package.json: {}
        ModalHeader:
          package.json: {}
        ModalTitle:
          package.json: {}
        Nav:
          package.json: {}
        NavContext:
          package.json: {}
        NavDropdown:
          package.json: {}
        NavItem:
          package.json: {}
        NavLink:
          package.json: {}
        Navbar:
          package.json: {}
        NavbarBrand:
          package.json: {}
        NavbarCollapse:
          package.json: {}
        NavbarContext:
          package.json: {}
        NavbarOffcanvas:
          package.json: {}
        NavbarText:
          package.json: {}
        NavbarToggle:
          package.json: {}
        Offcanvas:
          package.json: {}
        OffcanvasBody:
          package.json: {}
        OffcanvasHeader:
          package.json: {}
        OffcanvasTitle:
          package.json: {}
        OffcanvasToggling:
          package.json: {}
        Overlay:
          package.json: {}
        OverlayTrigger:
          package.json: {}
        PageItem:
          package.json: {}
        Pagination:
          package.json: {}
        Placeholder:
          package.json: {}
        PlaceholderButton:
          package.json: {}
        Popover:
          package.json: {}
        PopoverBody:
          package.json: {}
        PopoverHeader:
          package.json: {}
        ProgressBar:
          package.json: {}
        README.md: {}
        Ratio:
          package.json: {}
        Row:
          package.json: {}
        SSRProvider:
          package.json: {}
        Spinner:
          package.json: {}
        SplitButton:
          package.json: {}
        Stack:
          package.json: {}
        Switch:
          package.json: {}
        Tab:
          package.json: {}
        TabContainer:
          package.json: {}
        TabContent:
          package.json: {}
        TabPane:
          package.json: {}
        Table:
          package.json: {}
        Tabs:
          package.json: {}
        ThemeProvider:
          package.json: {}
        Toast:
          package.json: {}
        ToastBody:
          package.json: {}
        ToastContainer:
          package.json: {}
        ToastContext:
          package.json: {}
        ToastFade:
          package.json: {}
        ToastHeader:
          package.json: {}
        ToggleButton:
          package.json: {}
        ToggleButtonGroup:
          package.json: {}
        Tooltip:
          package.json: {}
        TransitionWrapper:
          package.json: {}
        cjs:
          AbstractModalHeader.d.ts: {}
          AbstractModalHeader.js: {}
          Accordion.d.ts: {}
          Accordion.js: {}
          AccordionBody.d.ts: {}
          AccordionBody.js: {}
          AccordionButton.d.ts: {}
          AccordionButton.js: {}
          AccordionCollapse.d.ts: {}
          AccordionCollapse.js: {}
          AccordionContext.d.ts: {}
          AccordionContext.js: {}
          AccordionHeader.d.ts: {}
          AccordionHeader.js: {}
          AccordionItem.d.ts: {}
          AccordionItem.js: {}
          AccordionItemContext.d.ts: {}
          AccordionItemContext.js: {}
          Alert.d.ts: {}
          Alert.js: {}
          AlertHeading.d.ts: {}
          AlertHeading.js: {}
          AlertLink.d.ts: {}
          AlertLink.js: {}
          Anchor.d.ts: {}
          Anchor.js: {}
          Badge.d.ts: {}
          Badge.js: {}
          BootstrapModalManager.d.ts: {}
          BootstrapModalManager.js: {}
          Breadcrumb.d.ts: {}
          Breadcrumb.js: {}
          BreadcrumbItem.d.ts: {}
          BreadcrumbItem.js: {}
          Button.d.ts: {}
          Button.js: {}
          ButtonGroup.d.ts: {}
          ButtonGroup.js: {}
          ButtonToolbar.d.ts: {}
          ButtonToolbar.js: {}
          Card.d.ts: {}
          Card.js: {}
          CardBody.d.ts: {}
          CardBody.js: {}
          CardFooter.d.ts: {}
          CardFooter.js: {}
          CardGroup.d.ts: {}
          CardGroup.js: {}
          CardHeader.d.ts: {}
          CardHeader.js: {}
          CardHeaderContext.d.ts: {}
          CardHeaderContext.js: {}
          CardImg.d.ts: {}
          CardImg.js: {}
          CardImgOverlay.d.ts: {}
          CardImgOverlay.js: {}
          CardLink.d.ts: {}
          CardLink.js: {}
          CardSubtitle.d.ts: {}
          CardSubtitle.js: {}
          CardText.d.ts: {}
          CardText.js: {}
          CardTitle.d.ts: {}
          CardTitle.js: {}
          Carousel.d.ts: {}
          Carousel.js: {}
          CarouselCaption.d.ts: {}
          CarouselCaption.js: {}
          CarouselItem.d.ts: {}
          CarouselItem.js: {}
          CloseButton.d.ts: {}
          CloseButton.js: {}
          Col.d.ts: {}
          Col.js: {}
          Collapse.d.ts: {}
          Collapse.js: {}
          Container.d.ts: {}
          Container.js: {}
          Dropdown.d.ts: {}
          Dropdown.js: {}
          DropdownButton.d.ts: {}
          DropdownButton.js: {}
          DropdownContext.d.ts: {}
          DropdownContext.js: {}
          DropdownDivider.d.ts: {}
          DropdownDivider.js: {}
          DropdownHeader.d.ts: {}
          DropdownHeader.js: {}
          DropdownItem.d.ts: {}
          DropdownItem.js: {}
          DropdownItemText.d.ts: {}
          DropdownItemText.js: {}
          DropdownMenu.d.ts: {}
          DropdownMenu.js: {}
          DropdownToggle.d.ts: {}
          DropdownToggle.js: {}
          ElementChildren.d.ts: {}
          ElementChildren.js: {}
          Fade.d.ts: {}
          Fade.js: {}
          Feedback.d.ts: {}
          Feedback.js: {}
          Figure.d.ts: {}
          Figure.js: {}
          FigureCaption.d.ts: {}
          FigureCaption.js: {}
          FigureImage.d.ts: {}
          FigureImage.js: {}
          FloatingLabel.d.ts: {}
          FloatingLabel.js: {}
          Form.d.ts: {}
          Form.js: {}
          FormCheck.d.ts: {}
          FormCheck.js: {}
          FormCheckInput.d.ts: {}
          FormCheckInput.js: {}
          FormCheckLabel.d.ts: {}
          FormCheckLabel.js: {}
          FormContext.d.ts: {}
          FormContext.js: {}
          FormControl.d.ts: {}
          FormControl.js: {}
          FormFloating.d.ts: {}
          FormFloating.js: {}
          FormGroup.d.ts: {}
          FormGroup.js: {}
          FormLabel.d.ts: {}
          FormLabel.js: {}
          FormRange.d.ts: {}
          FormRange.js: {}
          FormSelect.d.ts: {}
          FormSelect.js: {}
          FormText.d.ts: {}
          FormText.js: {}
          Image.d.ts: {}
          Image.js: {}
          InputGroup.d.ts: {}
          InputGroup.js: {}
          InputGroupContext.d.ts: {}
          InputGroupContext.js: {}
          InputGroupText.d.ts: {}
          InputGroupText.js: {}
          ListGroup.d.ts: {}
          ListGroup.js: {}
          ListGroupItem.d.ts: {}
          ListGroupItem.js: {}
          Modal.d.ts: {}
          Modal.js: {}
          ModalBody.d.ts: {}
          ModalBody.js: {}
          ModalContext.d.ts: {}
          ModalContext.js: {}
          ModalDialog.d.ts: {}
          ModalDialog.js: {}
          ModalFooter.d.ts: {}
          ModalFooter.js: {}
          ModalHeader.d.ts: {}
          ModalHeader.js: {}
          ModalTitle.d.ts: {}
          ModalTitle.js: {}
          Nav.d.ts: {}
          Nav.js: {}
          NavContext.d.ts: {}
          NavContext.js: {}
          NavDropdown.d.ts: {}
          NavDropdown.js: {}
          NavItem.d.ts: {}
          NavItem.js: {}
          NavLink.d.ts: {}
          NavLink.js: {}
          Navbar.d.ts: {}
          Navbar.js: {}
          NavbarBrand.d.ts: {}
          NavbarBrand.js: {}
          NavbarCollapse.d.ts: {}
          NavbarCollapse.js: {}
          NavbarContext.d.ts: {}
          NavbarContext.js: {}
          NavbarOffcanvas.d.ts: {}
          NavbarOffcanvas.js: {}
          NavbarText.d.ts: {}
          NavbarText.js: {}
          NavbarToggle.d.ts: {}
          NavbarToggle.js: {}
          Offcanvas.d.ts: {}
          Offcanvas.js: {}
          OffcanvasBody.d.ts: {}
          OffcanvasBody.js: {}
          OffcanvasHeader.d.ts: {}
          OffcanvasHeader.js: {}
          OffcanvasTitle.d.ts: {}
          OffcanvasTitle.js: {}
          OffcanvasToggling.d.ts: {}
          OffcanvasToggling.js: {}
          Overlay.d.ts: {}
          Overlay.js: {}
          OverlayTrigger.d.ts: {}
          OverlayTrigger.js: {}
          PageItem.d.ts: {}
          PageItem.js: {}
          Pagination.d.ts: {}
          Pagination.js: {}
          Placeholder.d.ts: {}
          Placeholder.js: {}
          PlaceholderButton.d.ts: {}
          PlaceholderButton.js: {}
          Popover.d.ts: {}
          Popover.js: {}
          PopoverBody.d.ts: {}
          PopoverBody.js: {}
          PopoverHeader.d.ts: {}
          PopoverHeader.js: {}
          ProgressBar.d.ts: {}
          ProgressBar.js: {}
          Ratio.d.ts: {}
          Ratio.js: {}
          Row.d.ts: {}
          Row.js: {}
          SSRProvider.d.ts: {}
          SSRProvider.js: {}
          Spinner.d.ts: {}
          Spinner.js: {}
          SplitButton.d.ts: {}
          SplitButton.js: {}
          Stack.d.ts: {}
          Stack.js: {}
          Switch.d.ts: {}
          Switch.js: {}
          Tab.d.ts: {}
          Tab.js: {}
          TabContainer.d.ts: {}
          TabContainer.js: {}
          TabContent.d.ts: {}
          TabContent.js: {}
          TabPane.d.ts: {}
          TabPane.js: {}
          Table.d.ts: {}
          Table.js: {}
          Tabs.d.ts: {}
          Tabs.js: {}
          ThemeProvider.d.ts: {}
          ThemeProvider.js: {}
          Toast.d.ts: {}
          Toast.js: {}
          ToastBody.d.ts: {}
          ToastBody.js: {}
          ToastContainer.d.ts: {}
          ToastContainer.js: {}
          ToastContext.d.ts: {}
          ToastContext.js: {}
          ToastFade.d.ts: {}
          ToastFade.js: {}
          ToastHeader.d.ts: {}
          ToastHeader.js: {}
          ToggleButton.d.ts: {}
          ToggleButton.js: {}
          ToggleButtonGroup.d.ts: {}
          ToggleButtonGroup.js: {}
          Tooltip.d.ts: {}
          Tooltip.js: {}
          TransitionWrapper.d.ts: {}
          TransitionWrapper.js: {}
          createChainedFunction.d.ts: {}
          createChainedFunction.js: {}
          createUtilityClasses.d.ts: {}
          createUtilityClasses.js: {}
          createWithBsPrefix.d.ts: {}
          createWithBsPrefix.js: {}
          divWithClassName.d.ts: {}
          divWithClassName.js: {}
          getInitialPopperStyles.d.ts: {}
          getInitialPopperStyles.js: {}
          getTabTransitionComponent.d.ts: {}
          getTabTransitionComponent.js: {}
          helpers.d.ts: {}
          helpers.js: {}
          index.d.ts: {}
          index.js: {}
          safeFindDOMNode.d.ts: {}
          safeFindDOMNode.js: {}
          transitionEndListener.d.ts: {}
          transitionEndListener.js: {}
          triggerBrowserReflow.d.ts: {}
          triggerBrowserReflow.js: {}
          types.d.ts: {}
          types.js: {}
          useOverlayOffset.d.ts: {}
          useOverlayOffset.js: {}
          usePlaceholder.d.ts: {}
          usePlaceholder.js: {}
          useWrappedRefWithWarning.d.ts: {}
          useWrappedRefWithWarning.js: {}
        createChainedFunction:
          package.json: {}
        createUtilityClasses:
          package.json: {}
        createWithBsPrefix:
          package.json: {}
        dist:
          react-bootstrap.js: {}
          react-bootstrap.min.js: {}
          react-bootstrap.min.js.LICENSE.txt: {}
        divWithClassName:
          package.json: {}
        esm:
          AbstractModalHeader.d.ts: {}
          AbstractModalHeader.js: {}
          Accordion.d.ts: {}
          Accordion.js: {}
          AccordionBody.d.ts: {}
          AccordionBody.js: {}
          AccordionButton.d.ts: {}
          AccordionButton.js: {}
          AccordionCollapse.d.ts: {}
          AccordionCollapse.js: {}
          AccordionContext.d.ts: {}
          AccordionContext.js: {}
          AccordionHeader.d.ts: {}
          AccordionHeader.js: {}
          AccordionItem.d.ts: {}
          AccordionItem.js: {}
          AccordionItemContext.d.ts: {}
          AccordionItemContext.js: {}
          Alert.d.ts: {}
          Alert.js: {}
          AlertHeading.d.ts: {}
          AlertHeading.js: {}
          AlertLink.d.ts: {}
          AlertLink.js: {}
          Anchor.d.ts: {}
          Anchor.js: {}
          Badge.d.ts: {}
          Badge.js: {}
          BootstrapModalManager.d.ts: {}
          BootstrapModalManager.js: {}
          Breadcrumb.d.ts: {}
          Breadcrumb.js: {}
          BreadcrumbItem.d.ts: {}
          BreadcrumbItem.js: {}
          Button.d.ts: {}
          Button.js: {}
          ButtonGroup.d.ts: {}
          ButtonGroup.js: {}
          ButtonToolbar.d.ts: {}
          ButtonToolbar.js: {}
          Card.d.ts: {}
          Card.js: {}
          CardBody.d.ts: {}
          CardBody.js: {}
          CardFooter.d.ts: {}
          CardFooter.js: {}
          CardGroup.d.ts: {}
          CardGroup.js: {}
          CardHeader.d.ts: {}
          CardHeader.js: {}
          CardHeaderContext.d.ts: {}
          CardHeaderContext.js: {}
          CardImg.d.ts: {}
          CardImg.js: {}
          CardImgOverlay.d.ts: {}
          CardImgOverlay.js: {}
          CardLink.d.ts: {}
          CardLink.js: {}
          CardSubtitle.d.ts: {}
          CardSubtitle.js: {}
          CardText.d.ts: {}
          CardText.js: {}
          CardTitle.d.ts: {}
          CardTitle.js: {}
          Carousel.d.ts: {}
          Carousel.js: {}
          CarouselCaption.d.ts: {}
          CarouselCaption.js: {}
          CarouselItem.d.ts: {}
          CarouselItem.js: {}
          CloseButton.d.ts: {}
          CloseButton.js: {}
          Col.d.ts: {}
          Col.js: {}
          Collapse.d.ts: {}
          Collapse.js: {}
          Container.d.ts: {}
          Container.js: {}
          Dropdown.d.ts: {}
          Dropdown.js: {}
          DropdownButton.d.ts: {}
          DropdownButton.js: {}
          DropdownContext.d.ts: {}
          DropdownContext.js: {}
          DropdownDivider.d.ts: {}
          DropdownDivider.js: {}
          DropdownHeader.d.ts: {}
          DropdownHeader.js: {}
          DropdownItem.d.ts: {}
          DropdownItem.js: {}
          DropdownItemText.d.ts: {}
          DropdownItemText.js: {}
          DropdownMenu.d.ts: {}
          DropdownMenu.js: {}
          DropdownToggle.d.ts: {}
          DropdownToggle.js: {}
          ElementChildren.d.ts: {}
          ElementChildren.js: {}
          Fade.d.ts: {}
          Fade.js: {}
          Feedback.d.ts: {}
          Feedback.js: {}
          Figure.d.ts: {}
          Figure.js: {}
          FigureCaption.d.ts: {}
          FigureCaption.js: {}
          FigureImage.d.ts: {}
          FigureImage.js: {}
          FloatingLabel.d.ts: {}
          FloatingLabel.js: {}
          Form.d.ts: {}
          Form.js: {}
          FormCheck.d.ts: {}
          FormCheck.js: {}
          FormCheckInput.d.ts: {}
          FormCheckInput.js: {}
          FormCheckLabel.d.ts: {}
          FormCheckLabel.js: {}
          FormContext.d.ts: {}
          FormContext.js: {}
          FormControl.d.ts: {}
          FormControl.js: {}
          FormFloating.d.ts: {}
          FormFloating.js: {}
          FormGroup.d.ts: {}
          FormGroup.js: {}
          FormLabel.d.ts: {}
          FormLabel.js: {}
          FormRange.d.ts: {}
          FormRange.js: {}
          FormSelect.d.ts: {}
          FormSelect.js: {}
          FormText.d.ts: {}
          FormText.js: {}
          Image.d.ts: {}
          Image.js: {}
          InputGroup.d.ts: {}
          InputGroup.js: {}
          InputGroupContext.d.ts: {}
          InputGroupContext.js: {}
          InputGroupText.d.ts: {}
          InputGroupText.js: {}
          ListGroup.d.ts: {}
          ListGroup.js: {}
          ListGroupItem.d.ts: {}
          ListGroupItem.js: {}
          Modal.d.ts: {}
          Modal.js: {}
          ModalBody.d.ts: {}
          ModalBody.js: {}
          ModalContext.d.ts: {}
          ModalContext.js: {}
          ModalDialog.d.ts: {}
          ModalDialog.js: {}
          ModalFooter.d.ts: {}
          ModalFooter.js: {}
          ModalHeader.d.ts: {}
          ModalHeader.js: {}
          ModalTitle.d.ts: {}
          ModalTitle.js: {}
          Nav.d.ts: {}
          Nav.js: {}
          NavContext.d.ts: {}
          NavContext.js: {}
          NavDropdown.d.ts: {}
          NavDropdown.js: {}
          NavItem.d.ts: {}
          NavItem.js: {}
          NavLink.d.ts: {}
          NavLink.js: {}
          Navbar.d.ts: {}
          Navbar.js: {}
          NavbarBrand.d.ts: {}
          NavbarBrand.js: {}
          NavbarCollapse.d.ts: {}
          NavbarCollapse.js: {}
          NavbarContext.d.ts: {}
          NavbarContext.js: {}
          NavbarOffcanvas.d.ts: {}
          NavbarOffcanvas.js: {}
          NavbarText.d.ts: {}
          NavbarText.js: {}
          NavbarToggle.d.ts: {}
          NavbarToggle.js: {}
          Offcanvas.d.ts: {}
          Offcanvas.js: {}
          OffcanvasBody.d.ts: {}
          OffcanvasBody.js: {}
          OffcanvasHeader.d.ts: {}
          OffcanvasHeader.js: {}
          OffcanvasTitle.d.ts: {}
          OffcanvasTitle.js: {}
          OffcanvasToggling.d.ts: {}
          OffcanvasToggling.js: {}
          Overlay.d.ts: {}
          Overlay.js: {}
          OverlayTrigger.d.ts: {}
          OverlayTrigger.js: {}
          PageItem.d.ts: {}
          PageItem.js: {}
          Pagination.d.ts: {}
          Pagination.js: {}
          Placeholder.d.ts: {}
          Placeholder.js: {}
          PlaceholderButton.d.ts: {}
          PlaceholderButton.js: {}
          Popover.d.ts: {}
          Popover.js: {}
          PopoverBody.d.ts: {}
          PopoverBody.js: {}
          PopoverHeader.d.ts: {}
          PopoverHeader.js: {}
          ProgressBar.d.ts: {}
          ProgressBar.js: {}
          Ratio.d.ts: {}
          Ratio.js: {}
          Row.d.ts: {}
          Row.js: {}
          SSRProvider.d.ts: {}
          SSRProvider.js: {}
          Spinner.d.ts: {}
          Spinner.js: {}
          SplitButton.d.ts: {}
          SplitButton.js: {}
          Stack.d.ts: {}
          Stack.js: {}
          Switch.d.ts: {}
          Switch.js: {}
          Tab.d.ts: {}
          Tab.js: {}
          TabContainer.d.ts: {}
          TabContainer.js: {}
          TabContent.d.ts: {}
          TabContent.js: {}
          TabPane.d.ts: {}
          TabPane.js: {}
          Table.d.ts: {}
          Table.js: {}
          Tabs.d.ts: {}
          Tabs.js: {}
          ThemeProvider.d.ts: {}
          ThemeProvider.js: {}
          Toast.d.ts: {}
          Toast.js: {}
          ToastBody.d.ts: {}
          ToastBody.js: {}
          ToastContainer.d.ts: {}
          ToastContainer.js: {}
          ToastContext.d.ts: {}
          ToastContext.js: {}
          ToastFade.d.ts: {}
          ToastFade.js: {}
          ToastHeader.d.ts: {}
          ToastHeader.js: {}
          ToggleButton.d.ts: {}
          ToggleButton.js: {}
          ToggleButtonGroup.d.ts: {}
          ToggleButtonGroup.js: {}
          Tooltip.d.ts: {}
          Tooltip.js: {}
          TransitionWrapper.d.ts: {}
          TransitionWrapper.js: {}
          createChainedFunction.d.ts: {}
          createChainedFunction.js: {}
          createUtilityClasses.d.ts: {}
          createUtilityClasses.js: {}
          createWithBsPrefix.d.ts: {}
          createWithBsPrefix.js: {}
          divWithClassName.d.ts: {}
          divWithClassName.js: {}
          getInitialPopperStyles.d.ts: {}
          getInitialPopperStyles.js: {}
          getTabTransitionComponent.d.ts: {}
          getTabTransitionComponent.js: {}
          helpers.d.ts: {}
          helpers.js: {}
          index.d.ts: {}
          index.js: {}
          safeFindDOMNode.d.ts: {}
          safeFindDOMNode.js: {}
          transitionEndListener.d.ts: {}
          transitionEndListener.js: {}
          triggerBrowserReflow.d.ts: {}
          triggerBrowserReflow.js: {}
          types.d.ts: {}
          types.js: {}
          useOverlayOffset.d.ts: {}
          useOverlayOffset.js: {}
          usePlaceholder.d.ts: {}
          usePlaceholder.js: {}
          useWrappedRefWithWarning.d.ts: {}
          useWrappedRefWithWarning.js: {}
        getInitialPopperStyles:
          package.json: {}
        getTabTransitionComponent:
          package.json: {}
        helpers:
          package.json: {}
        package.json: {}
        safeFindDOMNode:
          package.json: {}
        transitionEndListener:
          package.json: {}
        triggerBrowserReflow:
          package.json: {}
        types:
          package.json: {}
        useOverlayOffset:
          package.json: {}
        usePlaceholder:
          package.json: {}
        useWrappedRefWithWarning:
          package.json: {}
      react-bootstrap-icons:
        .eslintrc: {}
        .prettierrc: {}
        LICENSE.md: {}
        README.md: {}
        _demo:
          .eslintrc.cjs: {}
          README.md: {}
          index.html: {}
          package.json: {}
          pnpm-lock.yaml: {}
          vite.config.js: {}
        build:
          index.js: {}
        dist:
          icons:
            0-circle-fill.js: {}
            0-circle.js: {}
            0-square-fill.js: {}
            0-square.js: {}
            1-circle-fill.js: {}
            1-circle.js: {}
            1-square-fill.js: {}
            1-square.js: {}
            123.js: {}
            2-circle-fill.js: {}
            2-circle.js: {}
            2-square-fill.js: {}
            2-square.js: {}
            3-circle-fill.js: {}
            3-circle.js: {}
            3-square-fill.js: {}
            3-square.js: {}
            4-circle-fill.js: {}
            4-circle.js: {}
            4-square-fill.js: {}
            4-square.js: {}
            5-circle-fill.js: {}
            5-circle.js: {}
            5-square-fill.js: {}
            5-square.js: {}
            6-circle-fill.js: {}
            6-circle.js: {}
            6-square-fill.js: {}
            6-square.js: {}
            7-circle-fill.js: {}
            7-circle.js: {}
            7-square-fill.js: {}
            7-square.js: {}
            8-circle-fill.js: {}
            8-circle.js: {}
            8-square-fill.js: {}
            8-square.js: {}
            9-circle-fill.js: {}
            9-circle.js: {}
            9-square-fill.js: {}
            9-square.js: {}
            activity.js: {}
            airplane-engines-fill.js: {}
            airplane-engines.js: {}
            airplane-fill.js: {}
            airplane.js: {}
            alarm-fill.js: {}
            alarm.js: {}
            alexa.js: {}
            align-bottom.js: {}
            align-center.js: {}
            align-end.js: {}
            align-middle.js: {}
            align-start.js: {}
            align-top.js: {}
            alipay.js: {}
            alphabet-uppercase.js: {}
            alphabet.js: {}
            alt.js: {}
            amazon.js: {}
            amd.js: {}
            android.js: {}
            android2.js: {}
            app-indicator.js: {}
            app.js: {}
            apple.js: {}
            archive-fill.js: {}
            archive.js: {}
            arrow-90deg-down.js: {}
            arrow-90deg-left.js: {}
            arrow-90deg-right.js: {}
            arrow-90deg-up.js: {}
            arrow-bar-down.js: {}
            arrow-bar-left.js: {}
            arrow-bar-right.js: {}
            arrow-bar-up.js: {}
            arrow-clockwise.js: {}
            arrow-counterclockwise.js: {}
            arrow-down-circle-fill.js: {}
            arrow-down-circle.js: {}
            arrow-down-left-circle-fill.js: {}
            arrow-down-left-circle.js: {}
            arrow-down-left-square-fill.js: {}
            arrow-down-left-square.js: {}
            arrow-down-left.js: {}
            arrow-down-right-circle-fill.js: {}
            arrow-down-right-circle.js: {}
            arrow-down-right-square-fill.js: {}
            arrow-down-right-square.js: {}
            arrow-down-right.js: {}
            arrow-down-short.js: {}
            arrow-down-square-fill.js: {}
            arrow-down-square.js: {}
            arrow-down-up.js: {}
            arrow-down.js: {}
            arrow-left-circle-fill.js: {}
            arrow-left-circle.js: {}
            arrow-left-right.js: {}
            arrow-left-short.js: {}
            arrow-left-square-fill.js: {}
            arrow-left-square.js: {}
            arrow-left.js: {}
            arrow-repeat.js: {}
            arrow-return-left.js: {}
            arrow-return-right.js: {}
            arrow-right-circle-fill.js: {}
            arrow-right-circle.js: {}
            arrow-right-short.js: {}
            arrow-right-square-fill.js: {}
            arrow-right-square.js: {}
            arrow-right.js: {}
            arrow-through-heart-fill.js: {}
            arrow-through-heart.js: {}
            arrow-up-circle-fill.js: {}
            arrow-up-circle.js: {}
            arrow-up-left-circle-fill.js: {}
            arrow-up-left-circle.js: {}
            arrow-up-left-square-fill.js: {}
            arrow-up-left-square.js: {}
            arrow-up-left.js: {}
            arrow-up-right-circle-fill.js: {}
            arrow-up-right-circle.js: {}
            arrow-up-right-square-fill.js: {}
            arrow-up-right-square.js: {}
            arrow-up-right.js: {}
            arrow-up-short.js: {}
            arrow-up-square-fill.js: {}
            arrow-up-square.js: {}
            arrow-up.js: {}
            arrows-angle-contract.js: {}
            arrows-angle-expand.js: {}
            arrows-collapse-vertical.js: {}
            arrows-collapse.js: {}
            arrows-expand-vertical.js: {}
            arrows-expand.js: {}
            arrows-fullscreen.js: {}
            arrows-move.js: {}
            arrows-vertical.js: {}
            arrows.js: {}
            aspect-ratio-fill.js: {}
            aspect-ratio.js: {}
            asterisk.js: {}
            at.js: {}
            award-fill.js: {}
            award.js: {}
            back.js: {}
            backpack-fill.js: {}
            backpack.js: {}
            backpack2-fill.js: {}
            backpack2.js: {}
            backpack3-fill.js: {}
            backpack3.js: {}
            backpack4-fill.js: {}
            backpack4.js: {}
            backspace-fill.js: {}
            backspace-reverse-fill.js: {}
            backspace-reverse.js: {}
            backspace.js: {}
            badge-3d-fill.js: {}
            badge-3d.js: {}
            badge-4k-fill.js: {}
            badge-4k.js: {}
            badge-8k-fill.js: {}
            badge-8k.js: {}
            badge-ad-fill.js: {}
            badge-ad.js: {}
            badge-ar-fill.js: {}
            badge-ar.js: {}
            badge-cc-fill.js: {}
            badge-cc.js: {}
            badge-hd-fill.js: {}
            badge-hd.js: {}
            badge-sd-fill.js: {}
            badge-sd.js: {}
            badge-tm-fill.js: {}
            badge-tm.js: {}
            badge-vo-fill.js: {}
            badge-vo.js: {}
            badge-vr-fill.js: {}
            badge-vr.js: {}
            badge-wc-fill.js: {}
            badge-wc.js: {}
            bag-check-fill.js: {}
            bag-check.js: {}
            bag-dash-fill.js: {}
            bag-dash.js: {}
            bag-fill.js: {}
            bag-heart-fill.js: {}
            bag-heart.js: {}
            bag-plus-fill.js: {}
            bag-plus.js: {}
            bag-x-fill.js: {}
            bag-x.js: {}
            bag.js: {}
            balloon-fill.js: {}
            balloon-heart-fill.js: {}
            balloon-heart.js: {}
            balloon.js: {}
            ban-fill.js: {}
            ban.js: {}
            bandaid-fill.js: {}
            bandaid.js: {}
            bank.js: {}
            bank2.js: {}
            bar-chart-fill.js: {}
            bar-chart-line-fill.js: {}
            bar-chart-line.js: {}
            bar-chart-steps.js: {}
            bar-chart.js: {}
            basket-fill.js: {}
            basket.js: {}
            basket2-fill.js: {}
            basket2.js: {}
            basket3-fill.js: {}
            basket3.js: {}
            battery-charging.js: {}
            battery-full.js: {}
            battery-half.js: {}
            battery.js: {}
            behance.js: {}
            bell-fill.js: {}
            bell-slash-fill.js: {}
            bell-slash.js: {}
            bell.js: {}
            bezier.js: {}
            bezier2.js: {}
            bicycle.js: {}
            bing.js: {}
            binoculars-fill.js: {}
            binoculars.js: {}
            blockquote-left.js: {}
            blockquote-right.js: {}
            bluetooth.js: {}
            body-text.js: {}
            book-fill.js: {}
            book-half.js: {}
            book.js: {}
            bookmark-check-fill.js: {}
            bookmark-check.js: {}
            bookmark-dash-fill.js: {}
            bookmark-dash.js: {}
            bookmark-fill.js: {}
            bookmark-heart-fill.js: {}
            bookmark-heart.js: {}
            bookmark-plus-fill.js: {}
            bookmark-plus.js: {}
            bookmark-star-fill.js: {}
            bookmark-star.js: {}
            bookmark-x-fill.js: {}
            bookmark-x.js: {}
            bookmark.js: {}
            bookmarks-fill.js: {}
            bookmarks.js: {}
            bookshelf.js: {}
            boombox-fill.js: {}
            boombox.js: {}
            bootstrap-fill.js: {}
            bootstrap-reboot.js: {}
            bootstrap.js: {}
            border-all.js: {}
            border-bottom.js: {}
            border-center.js: {}
            border-inner.js: {}
            border-left.js: {}
            border-middle.js: {}
            border-outer.js: {}
            border-right.js: {}
            border-style.js: {}
            border-top.js: {}
            border-width.js: {}
            border.js: {}
            bounding-box-circles.js: {}
            bounding-box.js: {}
            box-arrow-down-left.js: {}
            box-arrow-down-right.js: {}
            box-arrow-down.js: {}
            box-arrow-in-down-left.js: {}
            box-arrow-in-down-right.js: {}
            box-arrow-in-down.js: {}
            box-arrow-in-left.js: {}
            box-arrow-in-right.js: {}
            box-arrow-in-up-left.js: {}
            box-arrow-in-up-right.js: {}
            box-arrow-in-up.js: {}
            box-arrow-left.js: {}
            box-arrow-right.js: {}
            box-arrow-up-left.js: {}
            box-arrow-up-right.js: {}
            box-arrow-up.js: {}
            box-fill.js: {}
            box-seam-fill.js: {}
            box-seam.js: {}
            box.js: {}
            box2-fill.js: {}
            box2-heart-fill.js: {}
            box2-heart.js: {}
            box2.js: {}
            boxes.js: {}
            braces-asterisk.js: {}
            braces.js: {}
            bricks.js: {}
            briefcase-fill.js: {}
            briefcase.js: {}
            brightness-alt-high-fill.js: {}
            brightness-alt-high.js: {}
            brightness-alt-low-fill.js: {}
            brightness-alt-low.js: {}
            brightness-high-fill.js: {}
            brightness-high.js: {}
            brightness-low-fill.js: {}
            brightness-low.js: {}
            brilliance.js: {}
            broadcast-pin.js: {}
            broadcast.js: {}
            browser-chrome.js: {}
            browser-edge.js: {}
            browser-firefox.js: {}
            browser-safari.js: {}
            brush-fill.js: {}
            brush.js: {}
            bucket-fill.js: {}
            bucket.js: {}
            bug-fill.js: {}
            bug.js: {}
            building-add.js: {}
            building-check.js: {}
            building-dash.js: {}
            building-down.js: {}
            building-exclamation.js: {}
            building-fill-add.js: {}
            building-fill-check.js: {}
            building-fill-dash.js: {}
            building-fill-down.js: {}
            building-fill-exclamation.js: {}
            building-fill-gear.js: {}
            building-fill-lock.js: {}
            building-fill-slash.js: {}
            building-fill-up.js: {}
            building-fill-x.js: {}
            building-fill.js: {}
            building-gear.js: {}
            building-lock.js: {}
            building-slash.js: {}
            building-up.js: {}
            building-x.js: {}
            building.js: {}
            buildings-fill.js: {}
            buildings.js: {}
            bullseye.js: {}
            bus-front-fill.js: {}
            bus-front.js: {}
            c-circle-fill.js: {}
            c-circle.js: {}
            c-square-fill.js: {}
            c-square.js: {}
            cake-fill.js: {}
            cake.js: {}
            cake2-fill.js: {}
            cake2.js: {}
            calculator-fill.js: {}
            calculator.js: {}
            calendar-check-fill.js: {}
            calendar-check.js: {}
            calendar-date-fill.js: {}
            calendar-date.js: {}
            calendar-day-fill.js: {}
            calendar-day.js: {}
            calendar-event-fill.js: {}
            calendar-event.js: {}
            calendar-fill.js: {}
            calendar-heart-fill.js: {}
            calendar-heart.js: {}
            calendar-minus-fill.js: {}
            calendar-minus.js: {}
            calendar-month-fill.js: {}
            calendar-month.js: {}
            calendar-plus-fill.js: {}
            calendar-plus.js: {}
            calendar-range-fill.js: {}
            calendar-range.js: {}
            calendar-week-fill.js: {}
            calendar-week.js: {}
            calendar-x-fill.js: {}
            calendar-x.js: {}
            calendar.js: {}
            calendar2-check-fill.js: {}
            calendar2-check.js: {}
            calendar2-date-fill.js: {}
            calendar2-date.js: {}
            calendar2-day-fill.js: {}
            calendar2-day.js: {}
            calendar2-event-fill.js: {}
            calendar2-event.js: {}
            calendar2-fill.js: {}
            calendar2-heart-fill.js: {}
            calendar2-heart.js: {}
            calendar2-minus-fill.js: {}
            calendar2-minus.js: {}
            calendar2-month-fill.js: {}
            calendar2-month.js: {}
            calendar2-plus-fill.js: {}
            calendar2-plus.js: {}
            calendar2-range-fill.js: {}
            calendar2-range.js: {}
            calendar2-week-fill.js: {}
            calendar2-week.js: {}
            calendar2-x-fill.js: {}
            calendar2-x.js: {}
            calendar2.js: {}
            calendar3-event-fill.js: {}
            calendar3-event.js: {}
            calendar3-fill.js: {}
            calendar3-range-fill.js: {}
            calendar3-range.js: {}
            calendar3-week-fill.js: {}
            calendar3-week.js: {}
            calendar3.js: {}
            calendar4-event.js: {}
            calendar4-range.js: {}
            calendar4-week.js: {}
            calendar4.js: {}
            camera-fill.js: {}
            camera-reels-fill.js: {}
            camera-reels.js: {}
            camera-video-fill.js: {}
            camera-video-off-fill.js: {}
            camera-video-off.js: {}
            camera-video.js: {}
            camera.js: {}
            camera2.js: {}
            capslock-fill.js: {}
            capslock.js: {}
            capsule-pill.js: {}
            capsule.js: {}
            car-front-fill.js: {}
            car-front.js: {}
            card-checklist.js: {}
            card-heading.js: {}
            card-image.js: {}
            card-list.js: {}
            card-text.js: {}
            caret-down-fill.js: {}
            caret-down-square-fill.js: {}
            caret-down-square.js: {}
            caret-down.js: {}
            caret-left-fill.js: {}
            caret-left-square-fill.js: {}
            caret-left-square.js: {}
            caret-left.js: {}
            caret-right-fill.js: {}
            caret-right-square-fill.js: {}
            caret-right-square.js: {}
            caret-right.js: {}
            caret-up-fill.js: {}
            caret-up-square-fill.js: {}
            caret-up-square.js: {}
            caret-up.js: {}
            cart-check-fill.js: {}
            cart-check.js: {}
            cart-dash-fill.js: {}
            cart-dash.js: {}
            cart-fill.js: {}
            cart-plus-fill.js: {}
            cart-plus.js: {}
            cart-x-fill.js: {}
            cart-x.js: {}
            cart.js: {}
            cart2.js: {}
            cart3.js: {}
            cart4.js: {}
            cash-coin.js: {}
            cash-stack.js: {}
            cash.js: {}
            cassette-fill.js: {}
            cassette.js: {}
            cast.js: {}
            cc-circle-fill.js: {}
            cc-circle.js: {}
            cc-square-fill.js: {}
            cc-square.js: {}
            chat-dots-fill.js: {}
            chat-dots.js: {}
            chat-fill.js: {}
            chat-heart-fill.js: {}
            chat-heart.js: {}
            chat-left-dots-fill.js: {}
            chat-left-dots.js: {}
            chat-left-fill.js: {}
            chat-left-heart-fill.js: {}
            chat-left-heart.js: {}
            chat-left-quote-fill.js: {}
            chat-left-quote.js: {}
            chat-left-text-fill.js: {}
            chat-left-text.js: {}
            chat-left.js: {}
            chat-quote-fill.js: {}
            chat-quote.js: {}
            chat-right-dots-fill.js: {}
            chat-right-dots.js: {}
            chat-right-fill.js: {}
            chat-right-heart-fill.js: {}
            chat-right-heart.js: {}
            chat-right-quote-fill.js: {}
            chat-right-quote.js: {}
            chat-right-text-fill.js: {}
            chat-right-text.js: {}
            chat-right.js: {}
            chat-square-dots-fill.js: {}
            chat-square-dots.js: {}
            chat-square-fill.js: {}
            chat-square-heart-fill.js: {}
            chat-square-heart.js: {}
            chat-square-quote-fill.js: {}
            chat-square-quote.js: {}
            chat-square-text-fill.js: {}
            chat-square-text.js: {}
            chat-square.js: {}
            chat-text-fill.js: {}
            chat-text.js: {}
            chat.js: {}
            check-all.js: {}
            check-circle-fill.js: {}
            check-circle.js: {}
            check-lg.js: {}
            check-square-fill.js: {}
            check-square.js: {}
            check.js: {}
            check2-all.js: {}
            check2-circle.js: {}
            check2-square.js: {}
            check2.js: {}
            chevron-bar-contract.js: {}
            chevron-bar-down.js: {}
            chevron-bar-expand.js: {}
            chevron-bar-left.js: {}
            chevron-bar-right.js: {}
            chevron-bar-up.js: {}
            chevron-compact-down.js: {}
            chevron-compact-left.js: {}
            chevron-compact-right.js: {}
            chevron-compact-up.js: {}
            chevron-contract.js: {}
            chevron-double-down.js: {}
            chevron-double-left.js: {}
            chevron-double-right.js: {}
            chevron-double-up.js: {}
            chevron-down.js: {}
            chevron-expand.js: {}
            chevron-left.js: {}
            chevron-right.js: {}
            chevron-up.js: {}
            circle-fill.js: {}
            circle-half.js: {}
            circle-square.js: {}
            circle.js: {}
            clipboard-check-fill.js: {}
            clipboard-check.js: {}
            clipboard-data-fill.js: {}
            clipboard-data.js: {}
            clipboard-fill.js: {}
            clipboard-heart-fill.js: {}
            clipboard-heart.js: {}
            clipboard-minus-fill.js: {}
            clipboard-minus.js: {}
            clipboard-plus-fill.js: {}
            clipboard-plus.js: {}
            clipboard-pulse.js: {}
            clipboard-x-fill.js: {}
            clipboard-x.js: {}
            clipboard.js: {}
            clipboard2-check-fill.js: {}
            clipboard2-check.js: {}
            clipboard2-data-fill.js: {}
            clipboard2-data.js: {}
            clipboard2-fill.js: {}
            clipboard2-heart-fill.js: {}
            clipboard2-heart.js: {}
            clipboard2-minus-fill.js: {}
            clipboard2-minus.js: {}
            clipboard2-plus-fill.js: {}
            clipboard2-plus.js: {}
            clipboard2-pulse-fill.js: {}
            clipboard2-pulse.js: {}
            clipboard2-x-fill.js: {}
            clipboard2-x.js: {}
            clipboard2.js: {}
            clock-fill.js: {}
            clock-history.js: {}
            clock.js: {}
            cloud-arrow-down-fill.js: {}
            cloud-arrow-down.js: {}
            cloud-arrow-up-fill.js: {}
            cloud-arrow-up.js: {}
            cloud-check-fill.js: {}
            cloud-check.js: {}
            cloud-download-fill.js: {}
            cloud-download.js: {}
            cloud-drizzle-fill.js: {}
            cloud-drizzle.js: {}
            cloud-fill.js: {}
            cloud-fog-fill.js: {}
            cloud-fog.js: {}
            cloud-fog2-fill.js: {}
            cloud-fog2.js: {}
            cloud-hail-fill.js: {}
            cloud-hail.js: {}
            cloud-haze-fill.js: {}
            cloud-haze.js: {}
            cloud-haze2-fill.js: {}
            cloud-haze2.js: {}
            cloud-lightning-fill.js: {}
            cloud-lightning-rain-fill.js: {}
            cloud-lightning-rain.js: {}
            cloud-lightning.js: {}
            cloud-minus-fill.js: {}
            cloud-minus.js: {}
            cloud-moon-fill.js: {}
            cloud-moon.js: {}
            cloud-plus-fill.js: {}
            cloud-plus.js: {}
            cloud-rain-fill.js: {}
            cloud-rain-heavy-fill.js: {}
            cloud-rain-heavy.js: {}
            cloud-rain.js: {}
            cloud-slash-fill.js: {}
            cloud-slash.js: {}
            cloud-sleet-fill.js: {}
            cloud-sleet.js: {}
            cloud-snow-fill.js: {}
            cloud-snow.js: {}
            cloud-sun-fill.js: {}
            cloud-sun.js: {}
            cloud-upload-fill.js: {}
            cloud-upload.js: {}
            cloud.js: {}
            clouds-fill.js: {}
            clouds.js: {}
            cloudy-fill.js: {}
            cloudy.js: {}
            code-slash.js: {}
            code-square.js: {}
            code.js: {}
            coin.js: {}
            collection-fill.js: {}
            collection-play-fill.js: {}
            collection-play.js: {}
            collection.js: {}
            columns-gap.js: {}
            columns.js: {}
            command.js: {}
            compass-fill.js: {}
            compass.js: {}
            cone-striped.js: {}
            cone.js: {}
            controller.js: {}
            cookie.js: {}
            copy.js: {}
            cpu-fill.js: {}
            cpu.js: {}
            credit-card-2-back-fill.js: {}
            credit-card-2-back.js: {}
            credit-card-2-front-fill.js: {}
            credit-card-2-front.js: {}
            credit-card-fill.js: {}
            credit-card.js: {}
            crop.js: {}
            crosshair.js: {}
            crosshair2.js: {}
            cup-fill.js: {}
            cup-hot-fill.js: {}
            cup-hot.js: {}
            cup-straw.js: {}
            cup.js: {}
            currency-bitcoin.js: {}
            currency-dollar.js: {}
            currency-euro.js: {}
            currency-exchange.js: {}
            currency-pound.js: {}
            currency-rupee.js: {}
            currency-yen.js: {}
            cursor-fill.js: {}
            cursor-text.js: {}
            cursor.js: {}
            dash-circle-dotted.js: {}
            dash-circle-fill.js: {}
            dash-circle.js: {}
            dash-lg.js: {}
            dash-square-dotted.js: {}
            dash-square-fill.js: {}
            dash-square.js: {}
            dash.js: {}
            database-add.js: {}
            database-check.js: {}
            database-dash.js: {}
            database-down.js: {}
            database-exclamation.js: {}
            database-fill-add.js: {}
            database-fill-check.js: {}
            database-fill-dash.js: {}
            database-fill-down.js: {}
            database-fill-exclamation.js: {}
            database-fill-gear.js: {}
            database-fill-lock.js: {}
            database-fill-slash.js: {}
            database-fill-up.js: {}
            database-fill-x.js: {}
            database-fill.js: {}
            database-gear.js: {}
            database-lock.js: {}
            database-slash.js: {}
            database-up.js: {}
            database-x.js: {}
            database.js: {}
            device-hdd-fill.js: {}
            device-hdd.js: {}
            device-ssd-fill.js: {}
            device-ssd.js: {}
            diagram-2-fill.js: {}
            diagram-2.js: {}
            diagram-3-fill.js: {}
            diagram-3.js: {}
            diamond-fill.js: {}
            diamond-half.js: {}
            diamond.js: {}
            dice-1-fill.js: {}
            dice-1.js: {}
            dice-2-fill.js: {}
            dice-2.js: {}
            dice-3-fill.js: {}
            dice-3.js: {}
            dice-4-fill.js: {}
            dice-4.js: {}
            dice-5-fill.js: {}
            dice-5.js: {}
            dice-6-fill.js: {}
            dice-6.js: {}
            disc-fill.js: {}
            disc.js: {}
            discord.js: {}
            display-fill.js: {}
            display.js: {}
            displayport-fill.js: {}
            displayport.js: {}
            distribute-horizontal.js: {}
            distribute-vertical.js: {}
            door-closed-fill.js: {}
            door-closed.js: {}
            door-open-fill.js: {}
            door-open.js: {}
            dot.js: {}
            download.js: {}
            dpad-fill.js: {}
            dpad.js: {}
            dribbble.js: {}
            dropbox.js: {}
            droplet-fill.js: {}
            droplet-half.js: {}
            droplet.js: {}
            duffle-fill.js: {}
            duffle.js: {}
            ear-fill.js: {}
            ear.js: {}
            earbuds.js: {}
            easel-fill.js: {}
            easel.js: {}
            easel2-fill.js: {}
            easel2.js: {}
            easel3-fill.js: {}
            easel3.js: {}
            egg-fill.js: {}
            egg-fried.js: {}
            egg.js: {}
            eject-fill.js: {}
            eject.js: {}
            emoji-angry-fill.js: {}
            emoji-angry.js: {}
            emoji-astonished-fill.js: {}
            emoji-astonished.js: {}
            emoji-dizzy-fill.js: {}
            emoji-dizzy.js: {}
            emoji-expressionless-fill.js: {}
            emoji-expressionless.js: {}
            emoji-frown-fill.js: {}
            emoji-frown.js: {}
            emoji-grimace-fill.js: {}
            emoji-grimace.js: {}
            emoji-grin-fill.js: {}
            emoji-grin.js: {}
            emoji-heart-eyes-fill.js: {}
            emoji-heart-eyes.js: {}
            emoji-kiss-fill.js: {}
            emoji-kiss.js: {}
            emoji-laughing-fill.js: {}
            emoji-laughing.js: {}
            emoji-neutral-fill.js: {}
            emoji-neutral.js: {}
            emoji-smile-fill.js: {}
            emoji-smile-upside-down-fill.js: {}
            emoji-smile-upside-down.js: {}
            emoji-smile.js: {}
            emoji-sunglasses-fill.js: {}
            emoji-sunglasses.js: {}
            emoji-surprise-fill.js: {}
            emoji-surprise.js: {}
            emoji-tear-fill.js: {}
            emoji-tear.js: {}
            emoji-wink-fill.js: {}
            emoji-wink.js: {}
            envelope-arrow-down-fill.js: {}
            envelope-arrow-down.js: {}
            envelope-arrow-up-fill.js: {}
            envelope-arrow-up.js: {}
            envelope-at-fill.js: {}
            envelope-at.js: {}
            envelope-check-fill.js: {}
            envelope-check.js: {}
            envelope-dash-fill.js: {}
            envelope-dash.js: {}
            envelope-exclamation-fill.js: {}
            envelope-exclamation.js: {}
            envelope-fill.js: {}
            envelope-heart-fill.js: {}
            envelope-heart.js: {}
            envelope-open-fill.js: {}
            envelope-open-heart-fill.js: {}
            envelope-open-heart.js: {}
            envelope-open.js: {}
            envelope-paper-fill.js: {}
            envelope-paper-heart-fill.js: {}
            envelope-paper-heart.js: {}
            envelope-paper.js: {}
            envelope-plus-fill.js: {}
            envelope-plus.js: {}
            envelope-slash-fill.js: {}
            envelope-slash.js: {}
            envelope-x-fill.js: {}
            envelope-x.js: {}
            envelope.js: {}
            eraser-fill.js: {}
            eraser.js: {}
            escape.js: {}
            ethernet.js: {}
            ev-front-fill.js: {}
            ev-front.js: {}
            ev-station-fill.js: {}
            ev-station.js: {}
            exclamation-circle-fill.js: {}
            exclamation-circle.js: {}
            exclamation-diamond-fill.js: {}
            exclamation-diamond.js: {}
            exclamation-lg.js: {}
            exclamation-octagon-fill.js: {}
            exclamation-octagon.js: {}
            exclamation-square-fill.js: {}
            exclamation-square.js: {}
            exclamation-triangle-fill.js: {}
            exclamation-triangle.js: {}
            exclamation.js: {}
            exclude.js: {}
            explicit-fill.js: {}
            explicit.js: {}
            exposure.js: {}
            eye-fill.js: {}
            eye-slash-fill.js: {}
            eye-slash.js: {}
            eye.js: {}
            eyedropper.js: {}
            eyeglasses.js: {}
            facebook.js: {}
            fan.js: {}
            fast-forward-btn-fill.js: {}
            fast-forward-btn.js: {}
            fast-forward-circle-fill.js: {}
            fast-forward-circle.js: {}
            fast-forward-fill.js: {}
            fast-forward.js: {}
            feather.js: {}
            feather2.js: {}
            file-arrow-down-fill.js: {}
            file-arrow-down.js: {}
            file-arrow-up-fill.js: {}
            file-arrow-up.js: {}
            file-bar-graph-fill.js: {}
            file-bar-graph.js: {}
            file-binary-fill.js: {}
            file-binary.js: {}
            file-break-fill.js: {}
            file-break.js: {}
            file-check-fill.js: {}
            file-check.js: {}
            file-code-fill.js: {}
            file-code.js: {}
            file-diff-fill.js: {}
            file-diff.js: {}
            file-earmark-arrow-down-fill.js: {}
            file-earmark-arrow-down.js: {}
            file-earmark-arrow-up-fill.js: {}
            file-earmark-arrow-up.js: {}
            file-earmark-bar-graph-fill.js: {}
            file-earmark-bar-graph.js: {}
            file-earmark-binary-fill.js: {}
            file-earmark-binary.js: {}
            file-earmark-break-fill.js: {}
            file-earmark-break.js: {}
            file-earmark-check-fill.js: {}
            file-earmark-check.js: {}
            file-earmark-code-fill.js: {}
            file-earmark-code.js: {}
            file-earmark-diff-fill.js: {}
            file-earmark-diff.js: {}
            file-earmark-easel-fill.js: {}
            file-earmark-easel.js: {}
            file-earmark-excel-fill.js: {}
            file-earmark-excel.js: {}
            file-earmark-fill.js: {}
            file-earmark-font-fill.js: {}
            file-earmark-font.js: {}
            file-earmark-image-fill.js: {}
            file-earmark-image.js: {}
            file-earmark-lock-fill.js: {}
            file-earmark-lock.js: {}
            file-earmark-lock2-fill.js: {}
            file-earmark-lock2.js: {}
            file-earmark-medical-fill.js: {}
            file-earmark-medical.js: {}
            file-earmark-minus-fill.js: {}
            file-earmark-minus.js: {}
            file-earmark-music-fill.js: {}
            file-earmark-music.js: {}
            file-earmark-pdf-fill.js: {}
            file-earmark-pdf.js: {}
            file-earmark-person-fill.js: {}
            file-earmark-person.js: {}
            file-earmark-play-fill.js: {}
            file-earmark-play.js: {}
            file-earmark-plus-fill.js: {}
            file-earmark-plus.js: {}
            file-earmark-post-fill.js: {}
            file-earmark-post.js: {}
            file-earmark-ppt-fill.js: {}
            file-earmark-ppt.js: {}
            file-earmark-richtext-fill.js: {}
            file-earmark-richtext.js: {}
            file-earmark-ruled-fill.js: {}
            file-earmark-ruled.js: {}
            file-earmark-slides-fill.js: {}
            file-earmark-slides.js: {}
            file-earmark-spreadsheet-fill.js: {}
            file-earmark-spreadsheet.js: {}
            file-earmark-text-fill.js: {}
            file-earmark-text.js: {}
            file-earmark-word-fill.js: {}
            file-earmark-word.js: {}
            file-earmark-x-fill.js: {}
            file-earmark-x.js: {}
            file-earmark-zip-fill.js: {}
            file-earmark-zip.js: {}
            file-earmark.js: {}
            file-easel-fill.js: {}
            file-easel.js: {}
            file-excel-fill.js: {}
            file-excel.js: {}
            file-fill.js: {}
            file-font-fill.js: {}
            file-font.js: {}
            file-image-fill.js: {}
            file-image.js: {}
            file-lock-fill.js: {}
            file-lock.js: {}
            file-lock2-fill.js: {}
            file-lock2.js: {}
            file-medical-fill.js: {}
            file-medical.js: {}
            file-minus-fill.js: {}
            file-minus.js: {}
            file-music-fill.js: {}
            file-music.js: {}
            file-pdf-fill.js: {}
            file-pdf.js: {}
            file-person-fill.js: {}
            file-person.js: {}
            file-play-fill.js: {}
            file-play.js: {}
            file-plus-fill.js: {}
            file-plus.js: {}
            file-post-fill.js: {}
            file-post.js: {}
            file-ppt-fill.js: {}
            file-ppt.js: {}
            file-richtext-fill.js: {}
            file-richtext.js: {}
            file-ruled-fill.js: {}
            file-ruled.js: {}
            file-slides-fill.js: {}
            file-slides.js: {}
            file-spreadsheet-fill.js: {}
            file-spreadsheet.js: {}
            file-text-fill.js: {}
            file-text.js: {}
            file-word-fill.js: {}
            file-word.js: {}
            file-x-fill.js: {}
            file-x.js: {}
            file-zip-fill.js: {}
            file-zip.js: {}
            file.js: {}
            files-alt.js: {}
            files.js: {}
            filetype-aac.js: {}
            filetype-ai.js: {}
            filetype-bmp.js: {}
            filetype-cs.js: {}
            filetype-css.js: {}
            filetype-csv.js: {}
            filetype-doc.js: {}
            filetype-docx.js: {}
            filetype-exe.js: {}
            filetype-gif.js: {}
            filetype-heic.js: {}
            filetype-html.js: {}
            filetype-java.js: {}
            filetype-jpg.js: {}
            filetype-js.js: {}
            filetype-json.js: {}
            filetype-jsx.js: {}
            filetype-key.js: {}
            filetype-m4p.js: {}
            filetype-md.js: {}
            filetype-mdx.js: {}
            filetype-mov.js: {}
            filetype-mp3.js: {}
            filetype-mp4.js: {}
            filetype-otf.js: {}
            filetype-pdf.js: {}
            filetype-php.js: {}
            filetype-png.js: {}
            filetype-ppt.js: {}
            filetype-pptx.js: {}
            filetype-psd.js: {}
            filetype-py.js: {}
            filetype-raw.js: {}
            filetype-rb.js: {}
            filetype-sass.js: {}
            filetype-scss.js: {}
            filetype-sh.js: {}
            filetype-sql.js: {}
            filetype-svg.js: {}
            filetype-tiff.js: {}
            filetype-tsx.js: {}
            filetype-ttf.js: {}
            filetype-txt.js: {}
            filetype-wav.js: {}
            filetype-woff.js: {}
            filetype-xls.js: {}
            filetype-xlsx.js: {}
            filetype-xml.js: {}
            filetype-yml.js: {}
            film.js: {}
            filter-circle-fill.js: {}
            filter-circle.js: {}
            filter-left.js: {}
            filter-right.js: {}
            filter-square-fill.js: {}
            filter-square.js: {}
            filter.js: {}
            fingerprint.js: {}
            fire.js: {}
            flag-fill.js: {}
            flag.js: {}
            floppy-fill.js: {}
            floppy.js: {}
            floppy2-fill.js: {}
            floppy2.js: {}
            flower1.js: {}
            flower2.js: {}
            flower3.js: {}
            folder-check.js: {}
            folder-fill.js: {}
            folder-minus.js: {}
            folder-plus.js: {}
            folder-symlink-fill.js: {}
            folder-symlink.js: {}
            folder-x.js: {}
            folder.js: {}
            folder2-open.js: {}
            folder2.js: {}
            fonts.js: {}
            forward-fill.js: {}
            forward.js: {}
            front.js: {}
            fuel-pump-diesel-fill.js: {}
            fuel-pump-diesel.js: {}
            fuel-pump-fill.js: {}
            fuel-pump.js: {}
            fullscreen-exit.js: {}
            fullscreen.js: {}
            funnel-fill.js: {}
            funnel.js: {}
            gear-fill.js: {}
            gear-wide-connected.js: {}
            gear-wide.js: {}
            gear.js: {}
            gem.js: {}
            gender-ambiguous.js: {}
            gender-female.js: {}
            gender-male.js: {}
            gender-neuter.js: {}
            gender-trans.js: {}
            geo-alt-fill.js: {}
            geo-alt.js: {}
            geo-fill.js: {}
            geo.js: {}
            gift-fill.js: {}
            gift.js: {}
            git.js: {}
            github.js: {}
            gitlab.js: {}
            globe-americas.js: {}
            globe-asia-australia.js: {}
            globe-central-south-asia.js: {}
            globe-europe-africa.js: {}
            globe.js: {}
            globe2.js: {}
            google-play.js: {}
            google.js: {}
            gpu-card.js: {}
            graph-down-arrow.js: {}
            graph-down.js: {}
            graph-up-arrow.js: {}
            graph-up.js: {}
            grid-1x2-fill.js: {}
            grid-1x2.js: {}
            grid-3x2-gap-fill.js: {}
            grid-3x2-gap.js: {}
            grid-3x2.js: {}
            grid-3x3-gap-fill.js: {}
            grid-3x3-gap.js: {}
            grid-3x3.js: {}
            grid-fill.js: {}
            grid.js: {}
            grip-horizontal.js: {}
            grip-vertical.js: {}
            h-circle-fill.js: {}
            h-circle.js: {}
            h-square-fill.js: {}
            h-square.js: {}
            hammer.js: {}
            hand-index-fill.js: {}
            hand-index-thumb-fill.js: {}
            hand-index-thumb.js: {}
            hand-index.js: {}
            hand-thumbs-down-fill.js: {}
            hand-thumbs-down.js: {}
            hand-thumbs-up-fill.js: {}
            hand-thumbs-up.js: {}
            handbag-fill.js: {}
            handbag.js: {}
            hash.js: {}
            hdd-fill.js: {}
            hdd-network-fill.js: {}
            hdd-network.js: {}
            hdd-rack-fill.js: {}
            hdd-rack.js: {}
            hdd-stack-fill.js: {}
            hdd-stack.js: {}
            hdd.js: {}
            hdmi-fill.js: {}
            hdmi.js: {}
            headphones.js: {}
            headset-vr.js: {}
            headset.js: {}
            heart-arrow.js: {}
            heart-fill.js: {}
            heart-half.js: {}
            heart-pulse-fill.js: {}
            heart-pulse.js: {}
            heart.js: {}
            heartbreak-fill.js: {}
            heartbreak.js: {}
            hearts.js: {}
            heptagon-fill.js: {}
            heptagon-half.js: {}
            heptagon.js: {}
            hexagon-fill.js: {}
            hexagon-half.js: {}
            hexagon.js: {}
            highlighter.js: {}
            highlights.js: {}
            hospital-fill.js: {}
            hospital.js: {}
            hourglass-bottom.js: {}
            hourglass-split.js: {}
            hourglass-top.js: {}
            hourglass.js: {}
            house-add-fill.js: {}
            house-add.js: {}
            house-check-fill.js: {}
            house-check.js: {}
            house-dash-fill.js: {}
            house-dash.js: {}
            house-door-fill.js: {}
            house-door.js: {}
            house-down-fill.js: {}
            house-down.js: {}
            house-exclamation-fill.js: {}
            house-exclamation.js: {}
            house-fill.js: {}
            house-gear-fill.js: {}
            house-gear.js: {}
            house-heart-fill.js: {}
            house-heart.js: {}
            house-lock-fill.js: {}
            house-lock.js: {}
            house-slash-fill.js: {}
            house-slash.js: {}
            house-up-fill.js: {}
            house-up.js: {}
            house-x-fill.js: {}
            house-x.js: {}
            house.js: {}
            houses-fill.js: {}
            houses.js: {}
            hr.js: {}
            hurricane.js: {}
            hypnotize.js: {}
            image-alt.js: {}
            image-fill.js: {}
            image.js: {}
            images.js: {}
            inbox-fill.js: {}
            inbox.js: {}
            inboxes-fill.js: {}
            inboxes.js: {}
            incognito.js: {}
            indent.js: {}
            infinity.js: {}
            info-circle-fill.js: {}
            info-circle.js: {}
            info-lg.js: {}
            info-square-fill.js: {}
            info-square.js: {}
            info.js: {}
            input-cursor-text.js: {}
            input-cursor.js: {}
            instagram.js: {}
            intersect.js: {}
            journal-album.js: {}
            journal-arrow-down.js: {}
            journal-arrow-up.js: {}
            journal-bookmark-fill.js: {}
            journal-bookmark.js: {}
            journal-check.js: {}
            journal-code.js: {}
            journal-medical.js: {}
            journal-minus.js: {}
            journal-plus.js: {}
            journal-richtext.js: {}
            journal-text.js: {}
            journal-x.js: {}
            journal.js: {}
            journals.js: {}
            joystick.js: {}
            justify-left.js: {}
            justify-right.js: {}
            justify.js: {}
            kanban-fill.js: {}
            kanban.js: {}
            key-fill.js: {}
            key.js: {}
            keyboard-fill.js: {}
            keyboard.js: {}
            ladder.js: {}
            lamp-fill.js: {}
            lamp.js: {}
            laptop-fill.js: {}
            laptop.js: {}
            layer-backward.js: {}
            layer-forward.js: {}
            layers-fill.js: {}
            layers-half.js: {}
            layers.js: {}
            layout-sidebar-inset-reverse.js: {}
            layout-sidebar-inset.js: {}
            layout-sidebar-reverse.js: {}
            layout-sidebar.js: {}
            layout-split.js: {}
            layout-text-sidebar-reverse.js: {}
            layout-text-sidebar.js: {}
            layout-text-window-reverse.js: {}
            layout-text-window.js: {}
            layout-three-columns.js: {}
            layout-wtf.js: {}
            life-preserver.js: {}
            lightbulb-fill.js: {}
            lightbulb-off-fill.js: {}
            lightbulb-off.js: {}
            lightbulb.js: {}
            lightning-charge-fill.js: {}
            lightning-charge.js: {}
            lightning-fill.js: {}
            lightning.js: {}
            line.js: {}
            link-45deg.js: {}
            link.js: {}
            linkedin.js: {}
            list-check.js: {}
            list-columns-reverse.js: {}
            list-columns.js: {}
            list-nested.js: {}
            list-ol.js: {}
            list-stars.js: {}
            list-task.js: {}
            list-ul.js: {}
            list.js: {}
            lock-fill.js: {}
            lock.js: {}
            luggage-fill.js: {}
            luggage.js: {}
            lungs-fill.js: {}
            lungs.js: {}
            magic.js: {}
            magnet-fill.js: {}
            magnet.js: {}
            mailbox-flag.js: {}
            mailbox.js: {}
            mailbox2-flag.js: {}
            mailbox2.js: {}
            map-fill.js: {}
            map.js: {}
            markdown-fill.js: {}
            markdown.js: {}
            marker-tip.js: {}
            mask.js: {}
            mastodon.js: {}
            medium.js: {}
            megaphone-fill.js: {}
            megaphone.js: {}
            memory.js: {}
            menu-app-fill.js: {}
            menu-app.js: {}
            menu-button-fill.js: {}
            menu-button-wide-fill.js: {}
            menu-button-wide.js: {}
            menu-button.js: {}
            menu-down.js: {}
            menu-up.js: {}
            messenger.js: {}
            meta.js: {}
            mic-fill.js: {}
            mic-mute-fill.js: {}
            mic-mute.js: {}
            mic.js: {}
            microsoft-teams.js: {}
            microsoft.js: {}
            minecart-loaded.js: {}
            minecart.js: {}
            modem-fill.js: {}
            modem.js: {}
            moisture.js: {}
            moon-fill.js: {}
            moon-stars-fill.js: {}
            moon-stars.js: {}
            moon.js: {}
            mortarboard-fill.js: {}
            mortarboard.js: {}
            motherboard-fill.js: {}
            motherboard.js: {}
            mouse-fill.js: {}
            mouse.js: {}
            mouse2-fill.js: {}
            mouse2.js: {}
            mouse3-fill.js: {}
            mouse3.js: {}
            music-note-beamed.js: {}
            music-note-list.js: {}
            music-note.js: {}
            music-player-fill.js: {}
            music-player.js: {}
            newspaper.js: {}
            nintendo-switch.js: {}
            node-minus-fill.js: {}
            node-minus.js: {}
            node-plus-fill.js: {}
            node-plus.js: {}
            noise-reduction.js: {}
            nut-fill.js: {}
            nut.js: {}
            nvidia.js: {}
            nvme-fill.js: {}
            nvme.js: {}
            octagon-fill.js: {}
            octagon-half.js: {}
            octagon.js: {}
            opencollective.js: {}
            optical-audio-fill.js: {}
            optical-audio.js: {}
            option.js: {}
            outlet.js: {}
            p-circle-fill.js: {}
            p-circle.js: {}
            p-square-fill.js: {}
            p-square.js: {}
            paint-bucket.js: {}
            palette-fill.js: {}
            palette.js: {}
            palette2.js: {}
            paperclip.js: {}
            paragraph.js: {}
            pass-fill.js: {}
            pass.js: {}
            passport-fill.js: {}
            passport.js: {}
            patch-check-fill.js: {}
            patch-check.js: {}
            patch-exclamation-fill.js: {}
            patch-exclamation.js: {}
            patch-minus-fill.js: {}
            patch-minus.js: {}
            patch-plus-fill.js: {}
            patch-plus.js: {}
            patch-question-fill.js: {}
            patch-question.js: {}
            pause-btn-fill.js: {}
            pause-btn.js: {}
            pause-circle-fill.js: {}
            pause-circle.js: {}
            pause-fill.js: {}
            pause.js: {}
            paypal.js: {}
            pc-display-horizontal.js: {}
            pc-display.js: {}
            pc-horizontal.js: {}
            pc.js: {}
            pci-card-network.js: {}
            pci-card-sound.js: {}
            pci-card.js: {}
            peace-fill.js: {}
            peace.js: {}
            pen-fill.js: {}
            pen.js: {}
            pencil-fill.js: {}
            pencil-square.js: {}
            pencil.js: {}
            pentagon-fill.js: {}
            pentagon-half.js: {}
            pentagon.js: {}
            people-fill.js: {}
            people.js: {}
            percent.js: {}
            person-add.js: {}
            person-arms-up.js: {}
            person-badge-fill.js: {}
            person-badge.js: {}
            person-bounding-box.js: {}
            person-check-fill.js: {}
            person-check.js: {}
            person-circle.js: {}
            person-dash-fill.js: {}
            person-dash.js: {}
            person-down.js: {}
            person-exclamation.js: {}
            person-fill-add.js: {}
            person-fill-check.js: {}
            person-fill-dash.js: {}
            person-fill-down.js: {}
            person-fill-exclamation.js: {}
            person-fill-gear.js: {}
            person-fill-lock.js: {}
            person-fill-slash.js: {}
            person-fill-up.js: {}
            person-fill-x.js: {}
            person-fill.js: {}
            person-gear.js: {}
            person-heart.js: {}
            person-hearts.js: {}
            person-lines-fill.js: {}
            person-lock.js: {}
            person-plus-fill.js: {}
            person-plus.js: {}
            person-raised-hand.js: {}
            person-rolodex.js: {}
            person-slash.js: {}
            person-square.js: {}
            person-standing-dress.js: {}
            person-standing.js: {}
            person-up.js: {}
            person-vcard-fill.js: {}
            person-vcard.js: {}
            person-video.js: {}
            person-video2.js: {}
            person-video3.js: {}
            person-walking.js: {}
            person-wheelchair.js: {}
            person-workspace.js: {}
            person-x-fill.js: {}
            person-x.js: {}
            person.js: {}
            phone-fill.js: {}
            phone-flip.js: {}
            phone-landscape-fill.js: {}
            phone-landscape.js: {}
            phone-vibrate-fill.js: {}
            phone-vibrate.js: {}
            phone.js: {}
            pie-chart-fill.js: {}
            pie-chart.js: {}
            piggy-bank-fill.js: {}
            piggy-bank.js: {}
            pin-angle-fill.js: {}
            pin-angle.js: {}
            pin-fill.js: {}
            pin-map-fill.js: {}
            pin-map.js: {}
            pin.js: {}
            pinterest.js: {}
            pip-fill.js: {}
            pip.js: {}
            play-btn-fill.js: {}
            play-btn.js: {}
            play-circle-fill.js: {}
            play-circle.js: {}
            play-fill.js: {}
            play.js: {}
            playstation.js: {}
            plug-fill.js: {}
            plug.js: {}
            plugin.js: {}
            plus-circle-dotted.js: {}
            plus-circle-fill.js: {}
            plus-circle.js: {}
            plus-lg.js: {}
            plus-slash-minus.js: {}
            plus-square-dotted.js: {}
            plus-square-fill.js: {}
            plus-square.js: {}
            plus.js: {}
            postage-fill.js: {}
            postage-heart-fill.js: {}
            postage-heart.js: {}
            postage.js: {}
            postcard-fill.js: {}
            postcard-heart-fill.js: {}
            postcard-heart.js: {}
            postcard.js: {}
            power.js: {}
            prescription.js: {}
            prescription2.js: {}
            printer-fill.js: {}
            printer.js: {}
            projector-fill.js: {}
            projector.js: {}
            puzzle-fill.js: {}
            puzzle.js: {}
            qr-code-scan.js: {}
            qr-code.js: {}
            question-circle-fill.js: {}
            question-circle.js: {}
            question-diamond-fill.js: {}
            question-diamond.js: {}
            question-lg.js: {}
            question-octagon-fill.js: {}
            question-octagon.js: {}
            question-square-fill.js: {}
            question-square.js: {}
            question.js: {}
            quora.js: {}
            quote.js: {}
            r-circle-fill.js: {}
            r-circle.js: {}
            r-square-fill.js: {}
            r-square.js: {}
            radar.js: {}
            radioactive.js: {}
            rainbow.js: {}
            receipt-cutoff.js: {}
            receipt.js: {}
            reception-0.js: {}
            reception-1.js: {}
            reception-2.js: {}
            reception-3.js: {}
            reception-4.js: {}
            record-btn-fill.js: {}
            record-btn.js: {}
            record-circle-fill.js: {}
            record-circle.js: {}
            record-fill.js: {}
            record.js: {}
            record2-fill.js: {}
            record2.js: {}
            recycle.js: {}
            reddit.js: {}
            regex.js: {}
            repeat-1.js: {}
            repeat.js: {}
            reply-all-fill.js: {}
            reply-all.js: {}
            reply-fill.js: {}
            reply.js: {}
            rewind-btn-fill.js: {}
            rewind-btn.js: {}
            rewind-circle-fill.js: {}
            rewind-circle.js: {}
            rewind-fill.js: {}
            rewind.js: {}
            robot.js: {}
            rocket-fill.js: {}
            rocket-takeoff-fill.js: {}
            rocket-takeoff.js: {}
            rocket.js: {}
            router-fill.js: {}
            router.js: {}
            rss-fill.js: {}
            rss.js: {}
            rulers.js: {}
            safe-fill.js: {}
            safe.js: {}
            safe2-fill.js: {}
            safe2.js: {}
            save-fill.js: {}
            save.js: {}
            save2-fill.js: {}
            save2.js: {}
            scissors.js: {}
            scooter.js: {}
            screwdriver.js: {}
            sd-card-fill.js: {}
            sd-card.js: {}
            search-heart-fill.js: {}
            search-heart.js: {}
            search.js: {}
            segmented-nav.js: {}
            send-arrow-down-fill.js: {}
            send-arrow-down.js: {}
            send-arrow-up-fill.js: {}
            send-arrow-up.js: {}
            send-check-fill.js: {}
            send-check.js: {}
            send-dash-fill.js: {}
            send-dash.js: {}
            send-exclamation-fill.js: {}
            send-exclamation.js: {}
            send-fill.js: {}
            send-plus-fill.js: {}
            send-plus.js: {}
            send-slash-fill.js: {}
            send-slash.js: {}
            send-x-fill.js: {}
            send-x.js: {}
            send.js: {}
            server.js: {}
            shadows.js: {}
            share-fill.js: {}
            share.js: {}
            shield-check.js: {}
            shield-exclamation.js: {}
            shield-fill-check.js: {}
            shield-fill-exclamation.js: {}
            shield-fill-minus.js: {}
            shield-fill-plus.js: {}
            shield-fill-x.js: {}
            shield-fill.js: {}
            shield-lock-fill.js: {}
            shield-lock.js: {}
            shield-minus.js: {}
            shield-plus.js: {}
            shield-shaded.js: {}
            shield-slash-fill.js: {}
            shield-slash.js: {}
            shield-x.js: {}
            shield.js: {}
            shift-fill.js: {}
            shift.js: {}
            shop-window.js: {}
            shop.js: {}
            shuffle.js: {}
            sign-dead-end-fill.js: {}
            sign-dead-end.js: {}
            sign-do-not-enter-fill.js: {}
            sign-do-not-enter.js: {}
            sign-intersection-fill.js: {}
            sign-intersection-side-fill.js: {}
            sign-intersection-side.js: {}
            sign-intersection-t-fill.js: {}
            sign-intersection-t.js: {}
            sign-intersection-y-fill.js: {}
            sign-intersection-y.js: {}
            sign-intersection.js: {}
            sign-merge-left-fill.js: {}
            sign-merge-left.js: {}
            sign-merge-right-fill.js: {}
            sign-merge-right.js: {}
            sign-no-left-turn-fill.js: {}
            sign-no-left-turn.js: {}
            sign-no-parking-fill.js: {}
            sign-no-parking.js: {}
            sign-no-right-turn-fill.js: {}
            sign-no-right-turn.js: {}
            sign-railroad-fill.js: {}
            sign-railroad.js: {}
            sign-stop-fill.js: {}
            sign-stop-lights-fill.js: {}
            sign-stop-lights.js: {}
            sign-stop.js: {}
            sign-turn-left-fill.js: {}
            sign-turn-left.js: {}
            sign-turn-right-fill.js: {}
            sign-turn-right.js: {}
            sign-turn-slight-left-fill.js: {}
            sign-turn-slight-left.js: {}
            sign-turn-slight-right-fill.js: {}
            sign-turn-slight-right.js: {}
            sign-yield-fill.js: {}
            sign-yield.js: {}
            signal.js: {}
            signpost-2-fill.js: {}
            signpost-2.js: {}
            signpost-fill.js: {}
            signpost-split-fill.js: {}
            signpost-split.js: {}
            signpost.js: {}
            sim-fill.js: {}
            sim-slash-fill.js: {}
            sim-slash.js: {}
            sim.js: {}
            sina-weibo.js: {}
            skip-backward-btn-fill.js: {}
            skip-backward-btn.js: {}
            skip-backward-circle-fill.js: {}
            skip-backward-circle.js: {}
            skip-backward-fill.js: {}
            skip-backward.js: {}
            skip-end-btn-fill.js: {}
            skip-end-btn.js: {}
            skip-end-circle-fill.js: {}
            skip-end-circle.js: {}
            skip-end-fill.js: {}
            skip-end.js: {}
            skip-forward-btn-fill.js: {}
            skip-forward-btn.js: {}
            skip-forward-circle-fill.js: {}
            skip-forward-circle.js: {}
            skip-forward-fill.js: {}
            skip-forward.js: {}
            skip-start-btn-fill.js: {}
            skip-start-btn.js: {}
            skip-start-circle-fill.js: {}
            skip-start-circle.js: {}
            skip-start-fill.js: {}
            skip-start.js: {}
            skype.js: {}
            slack.js: {}
            slash-circle-fill.js: {}
            slash-circle.js: {}
            slash-lg.js: {}
            slash-square-fill.js: {}
            slash-square.js: {}
            slash.js: {}
            sliders.js: {}
            sliders2-vertical.js: {}
            sliders2.js: {}
            smartwatch.js: {}
            snapchat.js: {}
            snow.js: {}
            snow2.js: {}
            snow3.js: {}
            sort-alpha-down-alt.js: {}
            sort-alpha-down.js: {}
            sort-alpha-up-alt.js: {}
            sort-alpha-up.js: {}
            sort-down-alt.js: {}
            sort-down.js: {}
            sort-numeric-down-alt.js: {}
            sort-numeric-down.js: {}
            sort-numeric-up-alt.js: {}
            sort-numeric-up.js: {}
            sort-up-alt.js: {}
            sort-up.js: {}
            soundwave.js: {}
            sourceforge.js: {}
            speaker-fill.js: {}
            speaker.js: {}
            speedometer.js: {}
            speedometer2.js: {}
            spellcheck.js: {}
            spotify.js: {}
            square-fill.js: {}
            square-half.js: {}
            square.js: {}
            stack-overflow.js: {}
            stack.js: {}
            star-fill.js: {}
            star-half.js: {}
            star.js: {}
            stars.js: {}
            steam.js: {}
            stickies-fill.js: {}
            stickies.js: {}
            sticky-fill.js: {}
            sticky.js: {}
            stop-btn-fill.js: {}
            stop-btn.js: {}
            stop-circle-fill.js: {}
            stop-circle.js: {}
            stop-fill.js: {}
            stop.js: {}
            stoplights-fill.js: {}
            stoplights.js: {}
            stopwatch-fill.js: {}
            stopwatch.js: {}
            strava.js: {}
            stripe.js: {}
            subscript.js: {}
            substack.js: {}
            subtract.js: {}
            suit-club-fill.js: {}
            suit-club.js: {}
            suit-diamond-fill.js: {}
            suit-diamond.js: {}
            suit-heart-fill.js: {}
            suit-heart.js: {}
            suit-spade-fill.js: {}
            suit-spade.js: {}
            suitcase-fill.js: {}
            suitcase-lg-fill.js: {}
            suitcase-lg.js: {}
            suitcase.js: {}
            suitcase2-fill.js: {}
            suitcase2.js: {}
            sun-fill.js: {}
            sun.js: {}
            sunglasses.js: {}
            sunrise-fill.js: {}
            sunrise.js: {}
            sunset-fill.js: {}
            sunset.js: {}
            superscript.js: {}
            symmetry-horizontal.js: {}
            symmetry-vertical.js: {}
            table.js: {}
            tablet-fill.js: {}
            tablet-landscape-fill.js: {}
            tablet-landscape.js: {}
            tablet.js: {}
            tag-fill.js: {}
            tag.js: {}
            tags-fill.js: {}
            tags.js: {}
            taxi-front-fill.js: {}
            taxi-front.js: {}
            telegram.js: {}
            telephone-fill.js: {}
            telephone-forward-fill.js: {}
            telephone-forward.js: {}
            telephone-inbound-fill.js: {}
            telephone-inbound.js: {}
            telephone-minus-fill.js: {}
            telephone-minus.js: {}
            telephone-outbound-fill.js: {}
            telephone-outbound.js: {}
            telephone-plus-fill.js: {}
            telephone-plus.js: {}
            telephone-x-fill.js: {}
            telephone-x.js: {}
            telephone.js: {}
            tencent-qq.js: {}
            terminal-dash.js: {}
            terminal-fill.js: {}
            terminal-plus.js: {}
            terminal-split.js: {}
            terminal-x.js: {}
            terminal.js: {}
            text-center.js: {}
            text-indent-left.js: {}
            text-indent-right.js: {}
            text-left.js: {}
            text-paragraph.js: {}
            text-right.js: {}
            text-wrap.js: {}
            textarea-resize.js: {}
            textarea-t.js: {}
            textarea.js: {}
            thermometer-half.js: {}
            thermometer-high.js: {}
            thermometer-low.js: {}
            thermometer-snow.js: {}
            thermometer-sun.js: {}
            thermometer.js: {}
            threads-fill.js: {}
            threads.js: {}
            three-dots-vertical.js: {}
            three-dots.js: {}
            thunderbolt-fill.js: {}
            thunderbolt.js: {}
            ticket-detailed-fill.js: {}
            ticket-detailed.js: {}
            ticket-fill.js: {}
            ticket-perforated-fill.js: {}
            ticket-perforated.js: {}
            ticket.js: {}
            tiktok.js: {}
            toggle-off.js: {}
            toggle-on.js: {}
            toggle2-off.js: {}
            toggle2-on.js: {}
            toggles.js: {}
            toggles2.js: {}
            tools.js: {}
            tornado.js: {}
            train-freight-front-fill.js: {}
            train-freight-front.js: {}
            train-front-fill.js: {}
            train-front.js: {}
            train-lightrail-front-fill.js: {}
            train-lightrail-front.js: {}
            translate.js: {}
            transparency.js: {}
            trash-fill.js: {}
            trash.js: {}
            trash2-fill.js: {}
            trash2.js: {}
            trash3-fill.js: {}
            trash3.js: {}
            tree-fill.js: {}
            tree.js: {}
            trello.js: {}
            triangle-fill.js: {}
            triangle-half.js: {}
            triangle.js: {}
            trophy-fill.js: {}
            trophy.js: {}
            tropical-storm.js: {}
            truck-flatbed.js: {}
            truck-front-fill.js: {}
            truck-front.js: {}
            truck.js: {}
            tsunami.js: {}
            tv-fill.js: {}
            tv.js: {}
            twitch.js: {}
            twitter-x.js: {}
            twitter.js: {}
            type-bold.js: {}
            type-h1.js: {}
            type-h2.js: {}
            type-h3.js: {}
            type-h4.js: {}
            type-h5.js: {}
            type-h6.js: {}
            type-italic.js: {}
            type-strikethrough.js: {}
            type-underline.js: {}
            type.js: {}
            ubuntu.js: {}
            ui-checks-grid.js: {}
            ui-checks.js: {}
            ui-radios-grid.js: {}
            ui-radios.js: {}
            umbrella-fill.js: {}
            umbrella.js: {}
            unindent.js: {}
            union.js: {}
            unity.js: {}
            universal-access-circle.js: {}
            universal-access.js: {}
            unlock-fill.js: {}
            unlock.js: {}
            upc-scan.js: {}
            upc.js: {}
            upload.js: {}
            usb-c-fill.js: {}
            usb-c.js: {}
            usb-drive-fill.js: {}
            usb-drive.js: {}
            usb-fill.js: {}
            usb-micro-fill.js: {}
            usb-micro.js: {}
            usb-mini-fill.js: {}
            usb-mini.js: {}
            usb-plug-fill.js: {}
            usb-plug.js: {}
            usb-symbol.js: {}
            usb.js: {}
            valentine.js: {}
            valentine2.js: {}
            vector-pen.js: {}
            view-list.js: {}
            view-stacked.js: {}
            vignette.js: {}
            vimeo.js: {}
            vinyl-fill.js: {}
            vinyl.js: {}
            virus.js: {}
            virus2.js: {}
            voicemail.js: {}
            volume-down-fill.js: {}
            volume-down.js: {}
            volume-mute-fill.js: {}
            volume-mute.js: {}
            volume-off-fill.js: {}
            volume-off.js: {}
            volume-up-fill.js: {}
            volume-up.js: {}
            vr.js: {}
            wallet-fill.js: {}
            wallet.js: {}
            wallet2.js: {}
            watch.js: {}
            water.js: {}
            webcam-fill.js: {}
            webcam.js: {}
            wechat.js: {}
            whatsapp.js: {}
            wifi-1.js: {}
            wifi-2.js: {}
            wifi-off.js: {}
            wifi.js: {}
            wikipedia.js: {}
            wind.js: {}
            window-dash.js: {}
            window-desktop.js: {}
            window-dock.js: {}
            window-fullscreen.js: {}
            window-plus.js: {}
            window-sidebar.js: {}
            window-split.js: {}
            window-stack.js: {}
            window-x.js: {}
            window.js: {}
            windows.js: {}
            wordpress.js: {}
            wrench-adjustable-circle-fill.js: {}
            wrench-adjustable-circle.js: {}
            wrench-adjustable.js: {}
            wrench.js: {}
            x-circle-fill.js: {}
            x-circle.js: {}
            x-diamond-fill.js: {}
            x-diamond.js: {}
            x-lg.js: {}
            x-octagon-fill.js: {}
            x-octagon.js: {}
            x-square-fill.js: {}
            x-square.js: {}
            x.js: {}
            xbox.js: {}
            yelp.js: {}
            yin-yang.js: {}
            youtube.js: {}
            zoom-in.js: {}
            zoom-out.js: {}
          index.d.ts: {}
          index.js: {}
        package.json: {}
        rollup.config.js: {}
      react-dev-utils:
        FileSizeReporter.js: {}
        ForkTsCheckerWarningWebpackPlugin.js: {}
        ForkTsCheckerWebpackPlugin.js: {}
        InlineChunkHtmlPlugin.js: {}
        InterpolateHtmlPlugin.js: {}
        LICENSE: {}
        ModuleNotFoundPlugin.js: {}
        ModuleScopePlugin.js: {}
        README.md: {}
        WebpackDevServerUtils.js: {}
        browsersHelper.js: {}
        chalk.js: {}
        checkRequiredFiles.js: {}
        clearConsole.js: {}
        crossSpawn.js: {}
        errorOverlayMiddleware.js: {}
        eslintFormatter.js: {}
        evalSourceMapMiddleware.js: {}
        formatWebpackMessages.js: {}
        getCSSModuleLocalIdent.js: {}
        getCacheIdentifier.js: {}
        getProcessForPort.js: {}
        getPublicUrlOrPath.js: {}
        globby.js: {}
        ignoredFiles.js: {}
        immer.js: {}
        launchEditor.js: {}
        launchEditorEndpoint.js: {}
        node_modules:
          ansi-styles:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          chalk:
            index.d.ts: {}
            license: {}
            package.json: {}
            readme.md: {}
            source:
              index.js: {}
              templates.js: {}
              util.js: {}
          color-convert:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            conversions.js: {}
            index.js: {}
            package.json: {}
            route.js: {}
          color-name:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          escape-string-regexp:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          loader-utils:
            LICENSE: {}
            README.md: {}
            lib:
              getHashDigest.js: {}
              hash:
                BatchedHash.js: {}
                BulkUpdateDecorator.js: {}
                md4.js: {}
                wasm-hash.js: {}
                xxhash64.js: {}
              index.js: {}
              interpolateName.js: {}
              isUrlRequest.js: {}
              urlToRequest.js: {}
            package.json: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        noopServiceWorkerMiddleware.js: {}
        openBrowser.js: {}
        openChrome.applescript: {}
        package.json: {}
        printBuildError.js: {}
        printHostingInstructions.js: {}
        redirectServedPathMiddleware.js: {}
        refreshOverlayInterop.js: {}
        webpackHotDevClient.js: {}
      react-dom:
        LICENSE: {}
        README.md: {}
        cjs:
          react-dom-server-legacy.browser.development.js: {}
          react-dom-server-legacy.browser.production.min.js: {}
          react-dom-server-legacy.node.development.js: {}
          react-dom-server-legacy.node.production.min.js: {}
          react-dom-server.browser.development.js: {}
          react-dom-server.browser.production.min.js: {}
          react-dom-server.node.development.js: {}
          react-dom-server.node.production.min.js: {}
          react-dom-test-utils.development.js: {}
          react-dom-test-utils.production.min.js: {}
          react-dom.development.js: {}
          react-dom.production.min.js: {}
          react-dom.profiling.min.js: {}
        client.js: {}
        index.js: {}
        package.json: {}
        profiling.js: {}
        server.browser.js: {}
        server.js: {}
        server.node.js: {}
        test-utils.js: {}
        umd:
          react-dom-server-legacy.browser.development.js: {}
          react-dom-server-legacy.browser.production.min.js: {}
          react-dom-server.browser.development.js: {}
          react-dom-server.browser.production.min.js: {}
          react-dom-test-utils.development.js: {}
          react-dom-test-utils.production.min.js: {}
          react-dom.development.js: {}
          react-dom.production.min.js: {}
          react-dom.profiling.min.js: {}
      react-error-overlay:
        LICENSE: {}
        README.md: {}
        lib:
          index.js: {}
        package.json: {}
      react-is:
        LICENSE: {}
        README.md: {}
        build-info.json: {}
        cjs:
          react-is.development.js: {}
          react-is.production.min.js: {}
        index.js: {}
        package.json: {}
        umd:
          react-is.development.js: {}
          react-is.production.min.js: {}
      react-lifecycles-compat:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        package.json: {}
        react-lifecycles-compat.cjs.js: {}
        react-lifecycles-compat.es.js: {}
        react-lifecycles-compat.js: {}
        react-lifecycles-compat.min.js: {}
      react-markdown:
        index.d.ts: {}
        index.js: {}
        lib:
          index.d.ts: {}
          index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      react-refresh:
        LICENSE: {}
        README.md: {}
        babel.js: {}
        cjs:
          react-refresh-babel.development.js: {}
          react-refresh-babel.production.min.js: {}
          react-refresh-runtime.development.js: {}
          react-refresh-runtime.production.min.js: {}
        package.json: {}
        runtime.js: {}
      react-router:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        dist:
          index.d.ts: {}
          index.js: {}
          index.js.map: {}
          lib:
            components.d.ts: {}
            context.d.ts: {}
            hooks.d.ts: {}
          main.js: {}
          react-router.development.js: {}
          react-router.development.js.map: {}
          react-router.production.min.js: {}
          react-router.production.min.js.map: {}
          umd:
            react-router.development.js: {}
            react-router.development.js.map: {}
            react-router.production.min.js: {}
            react-router.production.min.js.map: {}
        package.json: {}
      react-router-dom:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        dist:
          dom.d.ts: {}
          index.d.ts: {}
          index.js: {}
          index.js.map: {}
          main.js: {}
          react-router-dom.development.js: {}
          react-router-dom.development.js.map: {}
          react-router-dom.production.min.js: {}
          react-router-dom.production.min.js.map: {}
          server.d.ts: {}
          server.js: {}
          server.mjs: {}
          umd:
            react-router-dom.development.js: {}
            react-router-dom.development.js.map: {}
            react-router-dom.production.min.js: {}
            react-router-dom.production.min.js.map: {}
        package.json: {}
        server.d.ts: {}
        server.js: {}
        server.mjs: {}
      react-scripts:
        LICENSE: {}
        README.md: {}
        bin:
          react-scripts.js: {}
        config:
          env.js: {}
          getHttpsConfig.js: {}
          jest:
            babelTransform.js: {}
            cssTransform.js: {}
            fileTransform.js: {}
          modules.js: {}
          paths.js: {}
          webpack:
            persistentCache:
              createEnvironmentHash.js: {}
          webpack.config.js: {}
          webpackDevServer.config.js: {}
        lib:
          react-app.d.ts: {}
        package.json: {}
        scripts:
          build.js: {}
          eject.js: {}
          init.js: {}
          start.js: {}
          test.js: {}
          utils:
            createJestConfig.js: {}
            verifyTypeScriptSetup.js: {}
        template:
          README.md: {}
        template-typescript:
          README.md: {}
      react-syntax-highlighter:
        .codecov.yml: {}
        .eslintignore: {}
        .eslintrc.js: {}
        .github:
          FUNDING.yml: {}
          ISSUE_TEMPLATE:
            bug_report.md: {}
            feature_request.md: {}
          workflows:
            codeql-analysis.yml: {}
            nodejs.yml: {}
        .prettierignore: {}
        .prettierrc: {}
        AVAILABLE_LANGUAGES_HLJS.MD: {}
        AVAILABLE_LANGUAGES_PRISM.MD: {}
        AVAILABLE_STYLES_HLJS.MD: {}
        AVAILABLE_STYLES_PRISM.MD: {}
        CHANGELOG.MD: {}
        CODE_OF_CONDUCT.md: {}
        LICENSE: {}
        README.md: {}
        create-element.js: {}
        dist:
          cjs:
            async-languages:
              create-language-async-loader.js: {}
              hljs.js: {}
              prism.js: {}
            async-syntax-highlighter.js: {}
            checkForListedLanguage.js: {}
            create-element.js: {}
            default-highlight.js: {}
            highlight.js: {}
            index.js: {}
            languages:
              hljs:
                1c.js: {}
                abnf.js: {}
                accesslog.js: {}
                actionscript.js: {}
                ada.js: {}
                angelscript.js: {}
                apache.js: {}
                applescript.js: {}
                arcade.js: {}
                arduino.js: {}
                armasm.js: {}
                asciidoc.js: {}
                aspectj.js: {}
                autohotkey.js: {}
                autoit.js: {}
                avrasm.js: {}
                awk.js: {}
                axapta.js: {}
                bash.js: {}
                basic.js: {}
                bnf.js: {}
                brainfuck.js: {}
                c-like.js: {}
                c.js: {}
                cal.js: {}
                capnproto.js: {}
                ceylon.js: {}
                clean.js: {}
                clojure-repl.js: {}
                clojure.js: {}
                cmake.js: {}
                coffeescript.js: {}
                coq.js: {}
                cos.js: {}
                cpp.js: {}
                crmsh.js: {}
                crystal.js: {}
                cs.js: {}
                csharp.js: {}
                csp.js: {}
                css.js: {}
                d.js: {}
                dart.js: {}
                delphi.js: {}
                diff.js: {}
                django.js: {}
                dns.js: {}
                dockerfile.js: {}
                dos.js: {}
                dsconfig.js: {}
                dts.js: {}
                dust.js: {}
                ebnf.js: {}
                elixir.js: {}
                elm.js: {}
                erb.js: {}
                erlang-repl.js: {}
                erlang.js: {}
                excel.js: {}
                fix.js: {}
                flix.js: {}
                fortran.js: {}
                fsharp.js: {}
                gams.js: {}
                gauss.js: {}
                gcode.js: {}
                gherkin.js: {}
                glsl.js: {}
                gml.js: {}
                go.js: {}
                golo.js: {}
                gradle.js: {}
                groovy.js: {}
                haml.js: {}
                handlebars.js: {}
                haskell.js: {}
                haxe.js: {}
                hsp.js: {}
                htmlbars.js: {}
                http.js: {}
                hy.js: {}
                index.js: {}
                inform7.js: {}
                ini.js: {}
                irpf90.js: {}
                isbl.js: {}
                java.js: {}
                javascript.js: {}
                jboss-cli.js: {}
                json.js: {}
                julia-repl.js: {}
                julia.js: {}
                kotlin.js: {}
                lasso.js: {}
                latex.js: {}
                ldif.js: {}
                leaf.js: {}
                less.js: {}
                lisp.js: {}
                livecodeserver.js: {}
                livescript.js: {}
                llvm.js: {}
                lsl.js: {}
                lua.js: {}
                makefile.js: {}
                markdown.js: {}
                mathematica.js: {}
                matlab.js: {}
                maxima.js: {}
                mel.js: {}
                mercury.js: {}
                mipsasm.js: {}
                mizar.js: {}
                mojolicious.js: {}
                monkey.js: {}
                moonscript.js: {}
                n1ql.js: {}
                nginx.js: {}
                nim.js: {}
                nimrod.js: {}
                nix.js: {}
                node-repl.js: {}
                nsis.js: {}
                objectivec.js: {}
                ocaml.js: {}
                openscad.js: {}
                oxygene.js: {}
                parser3.js: {}
                perl.js: {}
                pf.js: {}
                pgsql.js: {}
                php-template.js: {}
                php.js: {}
                plaintext.js: {}
                pony.js: {}
                powershell.js: {}
                processing.js: {}
                profile.js: {}
                prolog.js: {}
                properties.js: {}
                protobuf.js: {}
                puppet.js: {}
                purebasic.js: {}
                python-repl.js: {}
                python.js: {}
                q.js: {}
                qml.js: {}
                r.js: {}
                reasonml.js: {}
                rib.js: {}
                roboconf.js: {}
                routeros.js: {}
                rsl.js: {}
                ruby.js: {}
                ruleslanguage.js: {}
                rust.js: {}
                sas.js: {}
                scala.js: {}
                scheme.js: {}
                scilab.js: {}
                scss.js: {}
                shell.js: {}
                smali.js: {}
                smalltalk.js: {}
                sml.js: {}
                sqf.js: {}
                sql.js: {}
                sql_more.js: {}
                stan.js: {}
                stata.js: {}
                step21.js: {}
                stylus.js: {}
                subunit.js: {}
                supported-languages.js: {}
                swift.js: {}
                taggerscript.js: {}
                tap.js: {}
                tcl.js: {}
                tex.js: {}
                thrift.js: {}
                tp.js: {}
                twig.js: {}
                typescript.js: {}
                vala.js: {}
                vbnet.js: {}
                vbscript-html.js: {}
                vbscript.js: {}
                verilog.js: {}
                vhdl.js: {}
                vim.js: {}
                x86asm.js: {}
                xl.js: {}
                xml.js: {}
                xquery.js: {}
                yaml.js: {}
                zephir.js: {}
              prism:
                abap.js: {}
                abnf.js: {}
                actionscript.js: {}
                ada.js: {}
                agda.js: {}
                al.js: {}
                antlr4.js: {}
                apacheconf.js: {}
                apex.js: {}
                apl.js: {}
                applescript.js: {}
                aql.js: {}
                arduino.js: {}
                arff.js: {}
                asciidoc.js: {}
                asm6502.js: {}
                asmatmel.js: {}
                aspnet.js: {}
                autohotkey.js: {}
                autoit.js: {}
                avisynth.js: {}
                avro-idl.js: {}
                bash.js: {}
                basic.js: {}
                batch.js: {}
                bbcode.js: {}
                bicep.js: {}
                birb.js: {}
                bison.js: {}
                bnf.js: {}
                brainfuck.js: {}
                brightscript.js: {}
                bro.js: {}
                bsl.js: {}
                c.js: {}
                cfscript.js: {}
                chaiscript.js: {}
                cil.js: {}
                clike.js: {}
                clojure.js: {}
                cmake.js: {}
                cobol.js: {}
                coffeescript.js: {}
                concurnas.js: {}
                coq.js: {}
                core.js: {}
                cpp.js: {}
                crystal.js: {}
                csharp.js: {}
                cshtml.js: {}
                csp.js: {}
                css-extras.js: {}
                css.js: {}
                csv.js: {}
                cypher.js: {}
                d.js: {}
                dart.js: {}
                dataweave.js: {}
                dax.js: {}
                dhall.js: {}
                diff.js: {}
                django.js: {}
                dns-zone-file.js: {}
                docker.js: {}
                dot.js: {}
                ebnf.js: {}
                editorconfig.js: {}
                eiffel.js: {}
                ejs.js: {}
                elixir.js: {}
                elm.js: {}
                erb.js: {}
                erlang.js: {}
                etlua.js: {}
                excel-formula.js: {}
                factor.js: {}
                false.js: {}
                firestore-security-rules.js: {}
                flow.js: {}
                fortran.js: {}
                fsharp.js: {}
                ftl.js: {}
                gap.js: {}
                gcode.js: {}
                gdscript.js: {}
                gedcom.js: {}
                gherkin.js: {}
                git.js: {}
                glsl.js: {}
                gml.js: {}
                gn.js: {}
                go-module.js: {}
                go.js: {}
                graphql.js: {}
                groovy.js: {}
                haml.js: {}
                handlebars.js: {}
                haskell.js: {}
                haxe.js: {}
                hcl.js: {}
                hlsl.js: {}
                hoon.js: {}
                hpkp.js: {}
                hsts.js: {}
                http.js: {}
                ichigojam.js: {}
                icon.js: {}
                icu-message-format.js: {}
                idris.js: {}
                iecst.js: {}
                ignore.js: {}
                index.js: {}
                inform7.js: {}
                ini.js: {}
                io.js: {}
                j.js: {}
                java.js: {}
                javadoc.js: {}
                javadoclike.js: {}
                javascript.js: {}
                javastacktrace.js: {}
                jexl.js: {}
                jolie.js: {}
                jq.js: {}
                js-extras.js: {}
                js-templates.js: {}
                jsdoc.js: {}
                json.js: {}
                json5.js: {}
                jsonp.js: {}
                jsstacktrace.js: {}
                jsx.js: {}
                julia.js: {}
                keepalived.js: {}
                keyman.js: {}
                kotlin.js: {}
                kumir.js: {}
                kusto.js: {}
                latex.js: {}
                latte.js: {}
                less.js: {}
                lilypond.js: {}
                liquid.js: {}
                lisp.js: {}
                livescript.js: {}
                llvm.js: {}
                log.js: {}
                lolcode.js: {}
                lua.js: {}
                magma.js: {}
                makefile.js: {}
                markdown.js: {}
                markup-templating.js: {}
                markup.js: {}
                matlab.js: {}
                maxscript.js: {}
                mel.js: {}
                mermaid.js: {}
                mizar.js: {}
                mongodb.js: {}
                monkey.js: {}
                moonscript.js: {}
                n1ql.js: {}
                n4js.js: {}
                nand2tetris-hdl.js: {}
                naniscript.js: {}
                nasm.js: {}
                neon.js: {}
                nevod.js: {}
                nginx.js: {}
                nim.js: {}
                nix.js: {}
                nsis.js: {}
                objectivec.js: {}
                ocaml.js: {}
                opencl.js: {}
                openqasm.js: {}
                oz.js: {}
                parigp.js: {}
                parser.js: {}
                pascal.js: {}
                pascaligo.js: {}
                pcaxis.js: {}
                peoplecode.js: {}
                perl.js: {}
                php-extras.js: {}
                php.js: {}
                phpdoc.js: {}
                plsql.js: {}
                powerquery.js: {}
                powershell.js: {}
                processing.js: {}
                prolog.js: {}
                promql.js: {}
                properties.js: {}
                protobuf.js: {}
                psl.js: {}
                pug.js: {}
                puppet.js: {}
                pure.js: {}
                purebasic.js: {}
                purescript.js: {}
                python.js: {}
                q.js: {}
                qml.js: {}
                qore.js: {}
                qsharp.js: {}
                r.js: {}
                racket.js: {}
                reason.js: {}
                regex.js: {}
                rego.js: {}
                renpy.js: {}
                rest.js: {}
                rip.js: {}
                roboconf.js: {}
                robotframework.js: {}
                ruby.js: {}
                rust.js: {}
                sas.js: {}
                sass.js: {}
                scala.js: {}
                scheme.js: {}
                scss.js: {}
                shell-session.js: {}
                smali.js: {}
                smalltalk.js: {}
                smarty.js: {}
                sml.js: {}
                solidity.js: {}
                solution-file.js: {}
                soy.js: {}
                sparql.js: {}
                splunk-spl.js: {}
                sqf.js: {}
                sql.js: {}
                squirrel.js: {}
                stan.js: {}
                stylus.js: {}
                supported-languages.js: {}
                swift.js: {}
                systemd.js: {}
                t4-cs.js: {}
                t4-templating.js: {}
                t4-vb.js: {}
                tap.js: {}
                tcl.js: {}
                textile.js: {}
                toml.js: {}
                tremor.js: {}
                tsx.js: {}
                tt2.js: {}
                turtle.js: {}
                twig.js: {}
                typescript.js: {}
                typoscript.js: {}
                unrealscript.js: {}
                uorazor.js: {}
                uri.js: {}
                v.js: {}
                vala.js: {}
                vbnet.js: {}
                velocity.js: {}
                verilog.js: {}
                vhdl.js: {}
                vim.js: {}
                visual-basic.js: {}
                warpscript.js: {}
                wasm.js: {}
                web-idl.js: {}
                wiki.js: {}
                wolfram.js: {}
                wren.js: {}
                xeora.js: {}
                xml-doc.js: {}
                xojo.js: {}
                xquery.js: {}
                yaml.js: {}
                yang.js: {}
                zig.js: {}
            light-async.js: {}
            light.js: {}
            prism-async-light.js: {}
            prism-async.js: {}
            prism-light.js: {}
            prism.js: {}
            styles:
              hljs:
                a11y-dark.js: {}
                a11y-light.js: {}
                agate.js: {}
                an-old-hope.js: {}
                androidstudio.js: {}
                arduino-light.js: {}
                arta.js: {}
                ascetic.js: {}
                atelier-cave-dark.js: {}
                atelier-cave-light.js: {}
                atelier-dune-dark.js: {}
                atelier-dune-light.js: {}
                atelier-estuary-dark.js: {}
                atelier-estuary-light.js: {}
                atelier-forest-dark.js: {}
                atelier-forest-light.js: {}
                atelier-heath-dark.js: {}
                atelier-heath-light.js: {}
                atelier-lakeside-dark.js: {}
                atelier-lakeside-light.js: {}
                atelier-plateau-dark.js: {}
                atelier-plateau-light.js: {}
                atelier-savanna-dark.js: {}
                atelier-savanna-light.js: {}
                atelier-seaside-dark.js: {}
                atelier-seaside-light.js: {}
                atelier-sulphurpool-dark.js: {}
                atelier-sulphurpool-light.js: {}
                atom-one-dark-reasonable.js: {}
                atom-one-dark.js: {}
                atom-one-light.js: {}
                brown-paper.js: {}
                codepen-embed.js: {}
                color-brewer.js: {}
                darcula.js: {}
                dark.js: {}
                darkula.js: {}
                default-style.js: {}
                docco.js: {}
                dracula.js: {}
                far.js: {}
                foundation.js: {}
                github-gist.js: {}
                github.js: {}
                gml.js: {}
                googlecode.js: {}
                gradient-dark.js: {}
                gradient-light.js: {}
                grayscale.js: {}
                gruvbox-dark.js: {}
                gruvbox-light.js: {}
                hopscotch.js: {}
                hybrid.js: {}
                idea.js: {}
                index.js: {}
                ir-black.js: {}
                isbl-editor-dark.js: {}
                isbl-editor-light.js: {}
                kimbie.dark.js: {}
                kimbie.light.js: {}
                lightfair.js: {}
                lioshi.js: {}
                magula.js: {}
                mono-blue.js: {}
                monokai-sublime.js: {}
                monokai.js: {}
                night-owl.js: {}
                nnfx-dark.js: {}
                nnfx.js: {}
                nord.js: {}
                obsidian.js: {}
                ocean.js: {}
                paraiso-dark.js: {}
                paraiso-light.js: {}
                pojoaque.js: {}
                purebasic.js: {}
                qtcreator_dark.js: {}
                qtcreator_light.js: {}
                railscasts.js: {}
                rainbow.js: {}
                routeros.js: {}
                school-book.js: {}
                shades-of-purple.js: {}
                solarized-dark.js: {}
                solarized-light.js: {}
                srcery.js: {}
                stackoverflow-dark.js: {}
                stackoverflow-light.js: {}
                sunburst.js: {}
                tomorrow-night-blue.js: {}
                tomorrow-night-bright.js: {}
                tomorrow-night-eighties.js: {}
                tomorrow-night.js: {}
                tomorrow.js: {}
                vs.js: {}
                vs2015.js: {}
                xcode.js: {}
                xt256.js: {}
                zenburn.js: {}
              prism:
                a11y-dark.js: {}
                a11y-dark.min.js: {}
                atom-dark.js: {}
                atom-dark.min.js: {}
                base16-ateliersulphurpool.light.js: {}
                base16-ateliersulphurpool.light.min.js: {}
                cb.js: {}
                cb.min.js: {}
                coldark-cold.js: {}
                coldark-cold.min.js: {}
                coldark-dark.js: {}
                coldark-dark.min.js: {}
                coy-without-shadows.js: {}
                coy-without-shadows.min.js: {}
                coy.js: {}
                coy.min.js: {}
                darcula.js: {}
                darcula.min.js: {}
                dark.js: {}
                dark.min.js: {}
                dracula.js: {}
                dracula.min.js: {}
                duotone-dark.js: {}
                duotone-dark.min.js: {}
                duotone-earth.js: {}
                duotone-earth.min.js: {}
                duotone-forest.js: {}
                duotone-forest.min.js: {}
                duotone-light.js: {}
                duotone-light.min.js: {}
                duotone-sea.js: {}
                duotone-sea.min.js: {}
                duotone-space.js: {}
                duotone-space.min.js: {}
                funky.js: {}
                funky.min.js: {}
                ghcolors.js: {}
                ghcolors.min.js: {}
                gruvbox-dark.js: {}
                gruvbox-dark.min.js: {}
                gruvbox-light.js: {}
                gruvbox-light.min.js: {}
                holi-theme.js: {}
                holi-theme.min.js: {}
                hopscotch.js: {}
                hopscotch.min.js: {}
                index.js: {}
                lucario.js: {}
                lucario.min.js: {}
                material-dark.js: {}
                material-dark.min.js: {}
                material-light.js: {}
                material-light.min.js: {}
                material-oceanic.js: {}
                material-oceanic.min.js: {}
                night-owl.js: {}
                night-owl.min.js: {}
                nord.js: {}
                nord.min.js: {}
                okaidia.js: {}
                okaidia.min.js: {}
                one-dark.js: {}
                one-dark.min.js: {}
                one-light.js: {}
                one-light.min.js: {}
                pojoaque.js: {}
                pojoaque.min.js: {}
                prism.js: {}
                prism.min.js: {}
                shades-of-purple.js: {}
                shades-of-purple.min.js: {}
                solarized-dark-atom.js: {}
                solarized-dark-atom.min.js: {}
                solarizedlight.js: {}
                solarizedlight.min.js: {}
                synthwave84.js: {}
                synthwave84.min.js: {}
                tomorrow.js: {}
                tomorrow.min.js: {}
                twilight.js: {}
                twilight.min.js: {}
                vs-dark.js: {}
                vs.js: {}
                vs.min.js: {}
                vsc-dark-plus.js: {}
                vsc-dark-plus.min.js: {}
                xonokai.js: {}
                xonokai.min.js: {}
                z-touch.js: {}
                z-touch.min.js: {}
          esm:
            async-languages:
              create-language-async-loader.js: {}
              hljs.js: {}
              prism.js: {}
            async-syntax-highlighter.js: {}
            checkForListedLanguage.js: {}
            create-element.js: {}
            default-highlight.js: {}
            highlight.js: {}
            index.js: {}
            languages:
              hljs:
                1c.js: {}
                abnf.js: {}
                accesslog.js: {}
                actionscript.js: {}
                ada.js: {}
                angelscript.js: {}
                apache.js: {}
                applescript.js: {}
                arcade.js: {}
                arduino.js: {}
                armasm.js: {}
                asciidoc.js: {}
                aspectj.js: {}
                autohotkey.js: {}
                autoit.js: {}
                avrasm.js: {}
                awk.js: {}
                axapta.js: {}
                bash.js: {}
                basic.js: {}
                bnf.js: {}
                brainfuck.js: {}
                c-like.js: {}
                c.js: {}
                cal.js: {}
                capnproto.js: {}
                ceylon.js: {}
                clean.js: {}
                clojure-repl.js: {}
                clojure.js: {}
                cmake.js: {}
                coffeescript.js: {}
                coq.js: {}
                cos.js: {}
                cpp.js: {}
                crmsh.js: {}
                crystal.js: {}
                cs.js: {}
                csharp.js: {}
                csp.js: {}
                css.js: {}
                d.js: {}
                dart.js: {}
                delphi.js: {}
                diff.js: {}
                django.js: {}
                dns.js: {}
                dockerfile.js: {}
                dos.js: {}
                dsconfig.js: {}
                dts.js: {}
                dust.js: {}
                ebnf.js: {}
                elixir.js: {}
                elm.js: {}
                erb.js: {}
                erlang-repl.js: {}
                erlang.js: {}
                excel.js: {}
                fix.js: {}
                flix.js: {}
                fortran.js: {}
                fsharp.js: {}
                gams.js: {}
                gauss.js: {}
                gcode.js: {}
                gherkin.js: {}
                glsl.js: {}
                gml.js: {}
                go.js: {}
                golo.js: {}
                gradle.js: {}
                groovy.js: {}
                haml.js: {}
                handlebars.js: {}
                haskell.js: {}
                haxe.js: {}
                hsp.js: {}
                htmlbars.js: {}
                http.js: {}
                hy.js: {}
                index.js: {}
                inform7.js: {}
                ini.js: {}
                irpf90.js: {}
                isbl.js: {}
                java.js: {}
                javascript.js: {}
                jboss-cli.js: {}
                json.js: {}
                julia-repl.js: {}
                julia.js: {}
                kotlin.js: {}
                lasso.js: {}
                latex.js: {}
                ldif.js: {}
                leaf.js: {}
                less.js: {}
                lisp.js: {}
                livecodeserver.js: {}
                livescript.js: {}
                llvm.js: {}
                lsl.js: {}
                lua.js: {}
                makefile.js: {}
                markdown.js: {}
                mathematica.js: {}
                matlab.js: {}
                maxima.js: {}
                mel.js: {}
                mercury.js: {}
                mipsasm.js: {}
                mizar.js: {}
                mojolicious.js: {}
                monkey.js: {}
                moonscript.js: {}
                n1ql.js: {}
                nginx.js: {}
                nim.js: {}
                nimrod.js: {}
                nix.js: {}
                node-repl.js: {}
                nsis.js: {}
                objectivec.js: {}
                ocaml.js: {}
                openscad.js: {}
                oxygene.js: {}
                parser3.js: {}
                perl.js: {}
                pf.js: {}
                pgsql.js: {}
                php-template.js: {}
                php.js: {}
                plaintext.js: {}
                pony.js: {}
                powershell.js: {}
                processing.js: {}
                profile.js: {}
                prolog.js: {}
                properties.js: {}
                protobuf.js: {}
                puppet.js: {}
                purebasic.js: {}
                python-repl.js: {}
                python.js: {}
                q.js: {}
                qml.js: {}
                r.js: {}
                reasonml.js: {}
                rib.js: {}
                roboconf.js: {}
                routeros.js: {}
                rsl.js: {}
                ruby.js: {}
                ruleslanguage.js: {}
                rust.js: {}
                sas.js: {}
                scala.js: {}
                scheme.js: {}
                scilab.js: {}
                scss.js: {}
                shell.js: {}
                smali.js: {}
                smalltalk.js: {}
                sml.js: {}
                sqf.js: {}
                sql.js: {}
                sql_more.js: {}
                stan.js: {}
                stata.js: {}
                step21.js: {}
                stylus.js: {}
                subunit.js: {}
                supported-languages.js: {}
                swift.js: {}
                taggerscript.js: {}
                tap.js: {}
                tcl.js: {}
                tex.js: {}
                thrift.js: {}
                tp.js: {}
                twig.js: {}
                typescript.js: {}
                vala.js: {}
                vbnet.js: {}
                vbscript-html.js: {}
                vbscript.js: {}
                verilog.js: {}
                vhdl.js: {}
                vim.js: {}
                x86asm.js: {}
                xl.js: {}
                xml.js: {}
                xquery.js: {}
                yaml.js: {}
                zephir.js: {}
              prism:
                abap.js: {}
                abnf.js: {}
                actionscript.js: {}
                ada.js: {}
                agda.js: {}
                al.js: {}
                antlr4.js: {}
                apacheconf.js: {}
                apex.js: {}
                apl.js: {}
                applescript.js: {}
                aql.js: {}
                arduino.js: {}
                arff.js: {}
                asciidoc.js: {}
                asm6502.js: {}
                asmatmel.js: {}
                aspnet.js: {}
                autohotkey.js: {}
                autoit.js: {}
                avisynth.js: {}
                avro-idl.js: {}
                bash.js: {}
                basic.js: {}
                batch.js: {}
                bbcode.js: {}
                bicep.js: {}
                birb.js: {}
                bison.js: {}
                bnf.js: {}
                brainfuck.js: {}
                brightscript.js: {}
                bro.js: {}
                bsl.js: {}
                c.js: {}
                cfscript.js: {}
                chaiscript.js: {}
                cil.js: {}
                clike.js: {}
                clojure.js: {}
                cmake.js: {}
                cobol.js: {}
                coffeescript.js: {}
                concurnas.js: {}
                coq.js: {}
                core.js: {}
                cpp.js: {}
                crystal.js: {}
                csharp.js: {}
                cshtml.js: {}
                csp.js: {}
                css-extras.js: {}
                css.js: {}
                csv.js: {}
                cypher.js: {}
                d.js: {}
                dart.js: {}
                dataweave.js: {}
                dax.js: {}
                dhall.js: {}
                diff.js: {}
                django.js: {}
                dns-zone-file.js: {}
                docker.js: {}
                dot.js: {}
                ebnf.js: {}
                editorconfig.js: {}
                eiffel.js: {}
                ejs.js: {}
                elixir.js: {}
                elm.js: {}
                erb.js: {}
                erlang.js: {}
                etlua.js: {}
                excel-formula.js: {}
                factor.js: {}
                false.js: {}
                firestore-security-rules.js: {}
                flow.js: {}
                fortran.js: {}
                fsharp.js: {}
                ftl.js: {}
                gap.js: {}
                gcode.js: {}
                gdscript.js: {}
                gedcom.js: {}
                gherkin.js: {}
                git.js: {}
                glsl.js: {}
                gml.js: {}
                gn.js: {}
                go-module.js: {}
                go.js: {}
                graphql.js: {}
                groovy.js: {}
                haml.js: {}
                handlebars.js: {}
                haskell.js: {}
                haxe.js: {}
                hcl.js: {}
                hlsl.js: {}
                hoon.js: {}
                hpkp.js: {}
                hsts.js: {}
                http.js: {}
                ichigojam.js: {}
                icon.js: {}
                icu-message-format.js: {}
                idris.js: {}
                iecst.js: {}
                ignore.js: {}
                index.js: {}
                inform7.js: {}
                ini.js: {}
                io.js: {}
                j.js: {}
                java.js: {}
                javadoc.js: {}
                javadoclike.js: {}
                javascript.js: {}
                javastacktrace.js: {}
                jexl.js: {}
                jolie.js: {}
                jq.js: {}
                js-extras.js: {}
                js-templates.js: {}
                jsdoc.js: {}
                json.js: {}
                json5.js: {}
                jsonp.js: {}
                jsstacktrace.js: {}
                jsx.js: {}
                julia.js: {}
                keepalived.js: {}
                keyman.js: {}
                kotlin.js: {}
                kumir.js: {}
                kusto.js: {}
                latex.js: {}
                latte.js: {}
                less.js: {}
                lilypond.js: {}
                liquid.js: {}
                lisp.js: {}
                livescript.js: {}
                llvm.js: {}
                log.js: {}
                lolcode.js: {}
                lua.js: {}
                magma.js: {}
                makefile.js: {}
                markdown.js: {}
                markup-templating.js: {}
                markup.js: {}
                matlab.js: {}
                maxscript.js: {}
                mel.js: {}
                mermaid.js: {}
                mizar.js: {}
                mongodb.js: {}
                monkey.js: {}
                moonscript.js: {}
                n1ql.js: {}
                n4js.js: {}
                nand2tetris-hdl.js: {}
                naniscript.js: {}
                nasm.js: {}
                neon.js: {}
                nevod.js: {}
                nginx.js: {}
                nim.js: {}
                nix.js: {}
                nsis.js: {}
                objectivec.js: {}
                ocaml.js: {}
                opencl.js: {}
                openqasm.js: {}
                oz.js: {}
                parigp.js: {}
                parser.js: {}
                pascal.js: {}
                pascaligo.js: {}
                pcaxis.js: {}
                peoplecode.js: {}
                perl.js: {}
                php-extras.js: {}
                php.js: {}
                phpdoc.js: {}
                plsql.js: {}
                powerquery.js: {}
                powershell.js: {}
                processing.js: {}
                prolog.js: {}
                promql.js: {}
                properties.js: {}
                protobuf.js: {}
                psl.js: {}
                pug.js: {}
                puppet.js: {}
                pure.js: {}
                purebasic.js: {}
                purescript.js: {}
                python.js: {}
                q.js: {}
                qml.js: {}
                qore.js: {}
                qsharp.js: {}
                r.js: {}
                racket.js: {}
                reason.js: {}
                regex.js: {}
                rego.js: {}
                renpy.js: {}
                rest.js: {}
                rip.js: {}
                roboconf.js: {}
                robotframework.js: {}
                ruby.js: {}
                rust.js: {}
                sas.js: {}
                sass.js: {}
                scala.js: {}
                scheme.js: {}
                scss.js: {}
                shell-session.js: {}
                smali.js: {}
                smalltalk.js: {}
                smarty.js: {}
                sml.js: {}
                solidity.js: {}
                solution-file.js: {}
                soy.js: {}
                sparql.js: {}
                splunk-spl.js: {}
                sqf.js: {}
                sql.js: {}
                squirrel.js: {}
                stan.js: {}
                stylus.js: {}
                supported-languages.js: {}
                swift.js: {}
                systemd.js: {}
                t4-cs.js: {}
                t4-templating.js: {}
                t4-vb.js: {}
                tap.js: {}
                tcl.js: {}
                textile.js: {}
                toml.js: {}
                tremor.js: {}
                tsx.js: {}
                tt2.js: {}
                turtle.js: {}
                twig.js: {}
                typescript.js: {}
                typoscript.js: {}
                unrealscript.js: {}
                uorazor.js: {}
                uri.js: {}
                v.js: {}
                vala.js: {}
                vbnet.js: {}
                velocity.js: {}
                verilog.js: {}
                vhdl.js: {}
                vim.js: {}
                visual-basic.js: {}
                warpscript.js: {}
                wasm.js: {}
                web-idl.js: {}
                wiki.js: {}
                wolfram.js: {}
                wren.js: {}
                xeora.js: {}
                xml-doc.js: {}
                xojo.js: {}
                xquery.js: {}
                yaml.js: {}
                yang.js: {}
                zig.js: {}
            light-async.js: {}
            light.js: {}
            prism-async-light.js: {}
            prism-async.js: {}
            prism-light.js: {}
            prism.js: {}
            styles:
              hljs:
                a11y-dark.js: {}
                a11y-light.js: {}
                agate.js: {}
                an-old-hope.js: {}
                androidstudio.js: {}
                arduino-light.js: {}
                arta.js: {}
                ascetic.js: {}
                atelier-cave-dark.js: {}
                atelier-cave-light.js: {}
                atelier-dune-dark.js: {}
                atelier-dune-light.js: {}
                atelier-estuary-dark.js: {}
                atelier-estuary-light.js: {}
                atelier-forest-dark.js: {}
                atelier-forest-light.js: {}
                atelier-heath-dark.js: {}
                atelier-heath-light.js: {}
                atelier-lakeside-dark.js: {}
                atelier-lakeside-light.js: {}
                atelier-plateau-dark.js: {}
                atelier-plateau-light.js: {}
                atelier-savanna-dark.js: {}
                atelier-savanna-light.js: {}
                atelier-seaside-dark.js: {}
                atelier-seaside-light.js: {}
                atelier-sulphurpool-dark.js: {}
                atelier-sulphurpool-light.js: {}
                atom-one-dark-reasonable.js: {}
                atom-one-dark.js: {}
                atom-one-light.js: {}
                brown-paper.js: {}
                codepen-embed.js: {}
                color-brewer.js: {}
                darcula.js: {}
                dark.js: {}
                darkula.js: {}
                default-style.js: {}
                docco.js: {}
                dracula.js: {}
                far.js: {}
                foundation.js: {}
                github-gist.js: {}
                github.js: {}
                gml.js: {}
                googlecode.js: {}
                gradient-dark.js: {}
                gradient-light.js: {}
                grayscale.js: {}
                gruvbox-dark.js: {}
                gruvbox-light.js: {}
                hopscotch.js: {}
                hybrid.js: {}
                idea.js: {}
                index.js: {}
                ir-black.js: {}
                isbl-editor-dark.js: {}
                isbl-editor-light.js: {}
                kimbie.dark.js: {}
                kimbie.light.js: {}
                lightfair.js: {}
                lioshi.js: {}
                magula.js: {}
                mono-blue.js: {}
                monokai-sublime.js: {}
                monokai.js: {}
                night-owl.js: {}
                nnfx-dark.js: {}
                nnfx.js: {}
                nord.js: {}
                obsidian.js: {}
                ocean.js: {}
                paraiso-dark.js: {}
                paraiso-light.js: {}
                pojoaque.js: {}
                purebasic.js: {}
                qtcreator_dark.js: {}
                qtcreator_light.js: {}
                railscasts.js: {}
                rainbow.js: {}
                routeros.js: {}
                school-book.js: {}
                shades-of-purple.js: {}
                solarized-dark.js: {}
                solarized-light.js: {}
                srcery.js: {}
                stackoverflow-dark.js: {}
                stackoverflow-light.js: {}
                sunburst.js: {}
                tomorrow-night-blue.js: {}
                tomorrow-night-bright.js: {}
                tomorrow-night-eighties.js: {}
                tomorrow-night.js: {}
                tomorrow.js: {}
                vs.js: {}
                vs2015.js: {}
                xcode.js: {}
                xt256.js: {}
                zenburn.js: {}
              prism:
                a11y-dark.js: {}
                a11y-dark.min.js: {}
                atom-dark.js: {}
                atom-dark.min.js: {}
                base16-ateliersulphurpool.light.js: {}
                base16-ateliersulphurpool.light.min.js: {}
                cb.js: {}
                cb.min.js: {}
                coldark-cold.js: {}
                coldark-cold.min.js: {}
                coldark-dark.js: {}
                coldark-dark.min.js: {}
                coy-without-shadows.js: {}
                coy-without-shadows.min.js: {}
                coy.js: {}
                coy.min.js: {}
                darcula.js: {}
                darcula.min.js: {}
                dark.js: {}
                dark.min.js: {}
                dracula.js: {}
                dracula.min.js: {}
                duotone-dark.js: {}
                duotone-dark.min.js: {}
                duotone-earth.js: {}
                duotone-earth.min.js: {}
                duotone-forest.js: {}
                duotone-forest.min.js: {}
                duotone-light.js: {}
                duotone-light.min.js: {}
                duotone-sea.js: {}
                duotone-sea.min.js: {}
                duotone-space.js: {}
                duotone-space.min.js: {}
                funky.js: {}
                funky.min.js: {}
                ghcolors.js: {}
                ghcolors.min.js: {}
                gruvbox-dark.js: {}
                gruvbox-dark.min.js: {}
                gruvbox-light.js: {}
                gruvbox-light.min.js: {}
                holi-theme.js: {}
                holi-theme.min.js: {}
                hopscotch.js: {}
                hopscotch.min.js: {}
                index.js: {}
                lucario.js: {}
                lucario.min.js: {}
                material-dark.js: {}
                material-dark.min.js: {}
                material-light.js: {}
                material-light.min.js: {}
                material-oceanic.js: {}
                material-oceanic.min.js: {}
                night-owl.js: {}
                night-owl.min.js: {}
                nord.js: {}
                nord.min.js: {}
                okaidia.js: {}
                okaidia.min.js: {}
                one-dark.js: {}
                one-dark.min.js: {}
                one-light.js: {}
                one-light.min.js: {}
                pojoaque.js: {}
                pojoaque.min.js: {}
                prism.js: {}
                prism.min.js: {}
                shades-of-purple.js: {}
                shades-of-purple.min.js: {}
                solarized-dark-atom.js: {}
                solarized-dark-atom.min.js: {}
                solarizedlight.js: {}
                solarizedlight.min.js: {}
                synthwave84.js: {}
                synthwave84.min.js: {}
                tomorrow.js: {}
                tomorrow.min.js: {}
                twilight.js: {}
                twilight.min.js: {}
                vs-dark.js: {}
                vs.js: {}
                vs.min.js: {}
                vsc-dark-plus.js: {}
                vsc-dark-plus.min.js: {}
                xonokai.js: {}
                xonokai.min.js: {}
                z-touch.js: {}
                z-touch.min.js: {}
        package.json: {}
        scripts:
          build-languages-highlightjs.js: {}
          build-languages-refractor.js: {}
          build-stylesheets-highlightjs.js: {}
          build-stylesheets-refractor.js: {}
        src:
          async-languages:
            create-language-async-loader.js: {}
            hljs.js: {}
            prism.js: {}
          async-syntax-highlighter.js: {}
          checkForListedLanguage.js: {}
          create-element.js: {}
          default-highlight.js: {}
          highlight.js: {}
          index.js: {}
          languages:
            hljs:
              1c.js: {}
              abnf.js: {}
              accesslog.js: {}
              actionscript.js: {}
              ada.js: {}
              angelscript.js: {}
              apache.js: {}
              applescript.js: {}
              arcade.js: {}
              arduino.js: {}
              armasm.js: {}
              asciidoc.js: {}
              aspectj.js: {}
              autohotkey.js: {}
              autoit.js: {}
              avrasm.js: {}
              awk.js: {}
              axapta.js: {}
              bash.js: {}
              basic.js: {}
              bnf.js: {}
              brainfuck.js: {}
              c-like.js: {}
              c.js: {}
              cal.js: {}
              capnproto.js: {}
              ceylon.js: {}
              clean.js: {}
              clojure-repl.js: {}
              clojure.js: {}
              cmake.js: {}
              coffeescript.js: {}
              coq.js: {}
              cos.js: {}
              cpp.js: {}
              crmsh.js: {}
              crystal.js: {}
              cs.js: {}
              csharp.js: {}
              csp.js: {}
              css.js: {}
              d.js: {}
              dart.js: {}
              delphi.js: {}
              diff.js: {}
              django.js: {}
              dns.js: {}
              dockerfile.js: {}
              dos.js: {}
              dsconfig.js: {}
              dts.js: {}
              dust.js: {}
              ebnf.js: {}
              elixir.js: {}
              elm.js: {}
              erb.js: {}
              erlang-repl.js: {}
              erlang.js: {}
              excel.js: {}
              fix.js: {}
              flix.js: {}
              fortran.js: {}
              fsharp.js: {}
              gams.js: {}
              gauss.js: {}
              gcode.js: {}
              gherkin.js: {}
              glsl.js: {}
              gml.js: {}
              go.js: {}
              golo.js: {}
              gradle.js: {}
              groovy.js: {}
              haml.js: {}
              handlebars.js: {}
              haskell.js: {}
              haxe.js: {}
              hsp.js: {}
              htmlbars.js: {}
              http.js: {}
              hy.js: {}
              index.js: {}
              inform7.js: {}
              ini.js: {}
              irpf90.js: {}
              isbl.js: {}
              java.js: {}
              javascript.js: {}
              jboss-cli.js: {}
              json.js: {}
              julia-repl.js: {}
              julia.js: {}
              kotlin.js: {}
              lasso.js: {}
              latex.js: {}
              ldif.js: {}
              leaf.js: {}
              less.js: {}
              lisp.js: {}
              livecodeserver.js: {}
              livescript.js: {}
              llvm.js: {}
              lsl.js: {}
              lua.js: {}
              makefile.js: {}
              markdown.js: {}
              mathematica.js: {}
              matlab.js: {}
              maxima.js: {}
              mel.js: {}
              mercury.js: {}
              mipsasm.js: {}
              mizar.js: {}
              mojolicious.js: {}
              monkey.js: {}
              moonscript.js: {}
              n1ql.js: {}
              nginx.js: {}
              nim.js: {}
              nimrod.js: {}
              nix.js: {}
              node-repl.js: {}
              nsis.js: {}
              objectivec.js: {}
              ocaml.js: {}
              openscad.js: {}
              oxygene.js: {}
              parser3.js: {}
              perl.js: {}
              pf.js: {}
              pgsql.js: {}
              php-template.js: {}
              php.js: {}
              plaintext.js: {}
              pony.js: {}
              powershell.js: {}
              processing.js: {}
              profile.js: {}
              prolog.js: {}
              properties.js: {}
              protobuf.js: {}
              puppet.js: {}
              purebasic.js: {}
              python-repl.js: {}
              python.js: {}
              q.js: {}
              qml.js: {}
              r.js: {}
              reasonml.js: {}
              rib.js: {}
              roboconf.js: {}
              routeros.js: {}
              rsl.js: {}
              ruby.js: {}
              ruleslanguage.js: {}
              rust.js: {}
              sas.js: {}
              scala.js: {}
              scheme.js: {}
              scilab.js: {}
              scss.js: {}
              shell.js: {}
              smali.js: {}
              smalltalk.js: {}
              sml.js: {}
              sqf.js: {}
              sql.js: {}
              sql_more.js: {}
              stan.js: {}
              stata.js: {}
              step21.js: {}
              stylus.js: {}
              subunit.js: {}
              supported-languages.js: {}
              swift.js: {}
              taggerscript.js: {}
              tap.js: {}
              tcl.js: {}
              tex.js: {}
              thrift.js: {}
              tp.js: {}
              twig.js: {}
              typescript.js: {}
              vala.js: {}
              vbnet.js: {}
              vbscript-html.js: {}
              vbscript.js: {}
              verilog.js: {}
              vhdl.js: {}
              vim.js: {}
              x86asm.js: {}
              xl.js: {}
              xml.js: {}
              xquery.js: {}
              yaml.js: {}
              zephir.js: {}
            prism:
              abap.js: {}
              abnf.js: {}
              actionscript.js: {}
              ada.js: {}
              agda.js: {}
              al.js: {}
              antlr4.js: {}
              apacheconf.js: {}
              apex.js: {}
              apl.js: {}
              applescript.js: {}
              aql.js: {}
              arduino.js: {}
              arff.js: {}
              asciidoc.js: {}
              asm6502.js: {}
              asmatmel.js: {}
              aspnet.js: {}
              autohotkey.js: {}
              autoit.js: {}
              avisynth.js: {}
              avro-idl.js: {}
              bash.js: {}
              basic.js: {}
              batch.js: {}
              bbcode.js: {}
              bicep.js: {}
              birb.js: {}
              bison.js: {}
              bnf.js: {}
              brainfuck.js: {}
              brightscript.js: {}
              bro.js: {}
              bsl.js: {}
              c.js: {}
              cfscript.js: {}
              chaiscript.js: {}
              cil.js: {}
              clike.js: {}
              clojure.js: {}
              cmake.js: {}
              cobol.js: {}
              coffeescript.js: {}
              concurnas.js: {}
              coq.js: {}
              core.js: {}
              cpp.js: {}
              crystal.js: {}
              csharp.js: {}
              cshtml.js: {}
              csp.js: {}
              css-extras.js: {}
              css.js: {}
              csv.js: {}
              cypher.js: {}
              d.js: {}
              dart.js: {}
              dataweave.js: {}
              dax.js: {}
              dhall.js: {}
              diff.js: {}
              django.js: {}
              dns-zone-file.js: {}
              docker.js: {}
              dot.js: {}
              ebnf.js: {}
              editorconfig.js: {}
              eiffel.js: {}
              ejs.js: {}
              elixir.js: {}
              elm.js: {}
              erb.js: {}
              erlang.js: {}
              etlua.js: {}
              excel-formula.js: {}
              factor.js: {}
              false.js: {}
              firestore-security-rules.js: {}
              flow.js: {}
              fortran.js: {}
              fsharp.js: {}
              ftl.js: {}
              gap.js: {}
              gcode.js: {}
              gdscript.js: {}
              gedcom.js: {}
              gherkin.js: {}
              git.js: {}
              glsl.js: {}
              gml.js: {}
              gn.js: {}
              go-module.js: {}
              go.js: {}
              graphql.js: {}
              groovy.js: {}
              haml.js: {}
              handlebars.js: {}
              haskell.js: {}
              haxe.js: {}
              hcl.js: {}
              hlsl.js: {}
              hoon.js: {}
              hpkp.js: {}
              hsts.js: {}
              http.js: {}
              ichigojam.js: {}
              icon.js: {}
              icu-message-format.js: {}
              idris.js: {}
              iecst.js: {}
              ignore.js: {}
              index.js: {}
              inform7.js: {}
              ini.js: {}
              io.js: {}
              j.js: {}
              java.js: {}
              javadoc.js: {}
              javadoclike.js: {}
              javascript.js: {}
              javastacktrace.js: {}
              jexl.js: {}
              jolie.js: {}
              jq.js: {}
              js-extras.js: {}
              js-templates.js: {}
              jsdoc.js: {}
              json.js: {}
              json5.js: {}
              jsonp.js: {}
              jsstacktrace.js: {}
              jsx.js: {}
              julia.js: {}
              keepalived.js: {}
              keyman.js: {}
              kotlin.js: {}
              kumir.js: {}
              kusto.js: {}
              latex.js: {}
              latte.js: {}
              less.js: {}
              lilypond.js: {}
              liquid.js: {}
              lisp.js: {}
              livescript.js: {}
              llvm.js: {}
              log.js: {}
              lolcode.js: {}
              lua.js: {}
              magma.js: {}
              makefile.js: {}
              markdown.js: {}
              markup-templating.js: {}
              markup.js: {}
              matlab.js: {}
              maxscript.js: {}
              mel.js: {}
              mermaid.js: {}
              mizar.js: {}
              mongodb.js: {}
              monkey.js: {}
              moonscript.js: {}
              n1ql.js: {}
              n4js.js: {}
              nand2tetris-hdl.js: {}
              naniscript.js: {}
              nasm.js: {}
              neon.js: {}
              nevod.js: {}
              nginx.js: {}
              nim.js: {}
              nix.js: {}
              nsis.js: {}
              objectivec.js: {}
              ocaml.js: {}
              opencl.js: {}
              openqasm.js: {}
              oz.js: {}
              parigp.js: {}
              parser.js: {}
              pascal.js: {}
              pascaligo.js: {}
              pcaxis.js: {}
              peoplecode.js: {}
              perl.js: {}
              php-extras.js: {}
              php.js: {}
              phpdoc.js: {}
              plsql.js: {}
              powerquery.js: {}
              powershell.js: {}
              processing.js: {}
              prolog.js: {}
              promql.js: {}
              properties.js: {}
              protobuf.js: {}
              psl.js: {}
              pug.js: {}
              puppet.js: {}
              pure.js: {}
              purebasic.js: {}
              purescript.js: {}
              python.js: {}
              q.js: {}
              qml.js: {}
              qore.js: {}
              qsharp.js: {}
              r.js: {}
              racket.js: {}
              reason.js: {}
              regex.js: {}
              rego.js: {}
              renpy.js: {}
              rest.js: {}
              rip.js: {}
              roboconf.js: {}
              robotframework.js: {}
              ruby.js: {}
              rust.js: {}
              sas.js: {}
              sass.js: {}
              scala.js: {}
              scheme.js: {}
              scss.js: {}
              shell-session.js: {}
              smali.js: {}
              smalltalk.js: {}
              smarty.js: {}
              sml.js: {}
              solidity.js: {}
              solution-file.js: {}
              soy.js: {}
              sparql.js: {}
              splunk-spl.js: {}
              sqf.js: {}
              sql.js: {}
              squirrel.js: {}
              stan.js: {}
              stylus.js: {}
              supported-languages.js: {}
              swift.js: {}
              systemd.js: {}
              t4-cs.js: {}
              t4-templating.js: {}
              t4-vb.js: {}
              tap.js: {}
              tcl.js: {}
              textile.js: {}
              toml.js: {}
              tremor.js: {}
              tsx.js: {}
              tt2.js: {}
              turtle.js: {}
              twig.js: {}
              typescript.js: {}
              typoscript.js: {}
              unrealscript.js: {}
              uorazor.js: {}
              uri.js: {}
              v.js: {}
              vala.js: {}
              vbnet.js: {}
              velocity.js: {}
              verilog.js: {}
              vhdl.js: {}
              vim.js: {}
              visual-basic.js: {}
              warpscript.js: {}
              wasm.js: {}
              web-idl.js: {}
              wiki.js: {}
              wolfram.js: {}
              wren.js: {}
              xeora.js: {}
              xml-doc.js: {}
              xojo.js: {}
              xquery.js: {}
              yaml.js: {}
              yang.js: {}
              zig.js: {}
          light-async.js: {}
          light.js: {}
          prism-async-light.js: {}
          prism-async.js: {}
          prism-light.js: {}
          prism.js: {}
          styles:
            hljs:
              a11y-dark.js: {}
              a11y-light.js: {}
              agate.js: {}
              an-old-hope.js: {}
              androidstudio.js: {}
              arduino-light.js: {}
              arta.js: {}
              ascetic.js: {}
              atelier-cave-dark.js: {}
              atelier-cave-light.js: {}
              atelier-dune-dark.js: {}
              atelier-dune-light.js: {}
              atelier-estuary-dark.js: {}
              atelier-estuary-light.js: {}
              atelier-forest-dark.js: {}
              atelier-forest-light.js: {}
              atelier-heath-dark.js: {}
              atelier-heath-light.js: {}
              atelier-lakeside-dark.js: {}
              atelier-lakeside-light.js: {}
              atelier-plateau-dark.js: {}
              atelier-plateau-light.js: {}
              atelier-savanna-dark.js: {}
              atelier-savanna-light.js: {}
              atelier-seaside-dark.js: {}
              atelier-seaside-light.js: {}
              atelier-sulphurpool-dark.js: {}
              atelier-sulphurpool-light.js: {}
              atom-one-dark-reasonable.js: {}
              atom-one-dark.js: {}
              atom-one-light.js: {}
              brown-paper.js: {}
              codepen-embed.js: {}
              color-brewer.js: {}
              darcula.js: {}
              dark.js: {}
              darkula.js: {}
              default-style.js: {}
              docco.js: {}
              dracula.js: {}
              far.js: {}
              foundation.js: {}
              github-gist.js: {}
              github.js: {}
              gml.js: {}
              googlecode.js: {}
              gradient-dark.js: {}
              gradient-light.js: {}
              grayscale.js: {}
              gruvbox-dark.js: {}
              gruvbox-light.js: {}
              hopscotch.js: {}
              hybrid.js: {}
              idea.js: {}
              index.js: {}
              ir-black.js: {}
              isbl-editor-dark.js: {}
              isbl-editor-light.js: {}
              kimbie.dark.js: {}
              kimbie.light.js: {}
              lightfair.js: {}
              lioshi.js: {}
              magula.js: {}
              mono-blue.js: {}
              monokai-sublime.js: {}
              monokai.js: {}
              night-owl.js: {}
              nnfx-dark.js: {}
              nnfx.js: {}
              nord.js: {}
              obsidian.js: {}
              ocean.js: {}
              paraiso-dark.js: {}
              paraiso-light.js: {}
              pojoaque.js: {}
              purebasic.js: {}
              qtcreator_dark.js: {}
              qtcreator_light.js: {}
              railscasts.js: {}
              rainbow.js: {}
              routeros.js: {}
              school-book.js: {}
              shades-of-purple.js: {}
              solarized-dark.js: {}
              solarized-light.js: {}
              srcery.js: {}
              stackoverflow-dark.js: {}
              stackoverflow-light.js: {}
              sunburst.js: {}
              tomorrow-night-blue.js: {}
              tomorrow-night-bright.js: {}
              tomorrow-night-eighties.js: {}
              tomorrow-night.js: {}
              tomorrow.js: {}
              vs.js: {}
              vs2015.js: {}
              xcode.js: {}
              xt256.js: {}
              zenburn.js: {}
            prism:
              a11y-dark.js: {}
              atom-dark.js: {}
              base16-ateliersulphurpool.light.js: {}
              cb.js: {}
              coldark-cold.js: {}
              coldark-dark.js: {}
              coy-without-shadows.js: {}
              coy.js: {}
              darcula.js: {}
              dark.js: {}
              dracula.js: {}
              duotone-dark.js: {}
              duotone-earth.js: {}
              duotone-forest.js: {}
              duotone-light.js: {}
              duotone-sea.js: {}
              duotone-space.js: {}
              funky.js: {}
              ghcolors.js: {}
              gruvbox-dark.js: {}
              gruvbox-light.js: {}
              holi-theme.js: {}
              hopscotch.js: {}
              index.js: {}
              lucario.js: {}
              material-dark.js: {}
              material-light.js: {}
              material-oceanic.js: {}
              night-owl.js: {}
              nord.js: {}
              okaidia.js: {}
              one-dark.js: {}
              one-light.js: {}
              pojoaque.js: {}
              prism.js: {}
              shades-of-purple.js: {}
              solarized-dark-atom.js: {}
              solarizedlight.js: {}
              synthwave84.js: {}
              tomorrow.js: {}
              twilight.js: {}
              vs-dark.js: {}
              vs.js: {}
              vsc-dark-plus.js: {}
              xonokai.js: {}
              z-touch.js: {}
      react-transition-group:
        CSSTransition:
          package.json: {}
        LICENSE: {}
        README.md: {}
        ReplaceTransition:
          package.json: {}
        SwitchTransition:
          package.json: {}
        Transition:
          package.json: {}
        TransitionGroup:
          package.json: {}
        TransitionGroupContext:
          package.json: {}
        cjs:
          CSSTransition.js: {}
          ReplaceTransition.js: {}
          SwitchTransition.js: {}
          Transition.js: {}
          TransitionGroup.js: {}
          TransitionGroupContext.js: {}
          config.js: {}
          index.js: {}
          utils:
            ChildMapping.js: {}
            PropTypes.js: {}
            SimpleSet.js: {}
            reflow.js: {}
        config:
          package.json: {}
        dist:
          react-transition-group.js: {}
          react-transition-group.min.js: {}
        esm:
          CSSTransition.js: {}
          ReplaceTransition.js: {}
          SwitchTransition.js: {}
          Transition.js: {}
          TransitionGroup.js: {}
          TransitionGroupContext.js: {}
          config.js: {}
          index.js: {}
          utils:
            ChildMapping.js: {}
            PropTypes.js: {}
            SimpleSet.js: {}
            reflow.js: {}
        package.json: {}
      read:
        LICENSE: {}
        README.md: {}
        lib:
          read.js: {}
        package.json: {}
      read-cache:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      readable-stream:
        CONTRIBUTING.md: {}
        GOVERNANCE.md: {}
        LICENSE: {}
        README.md: {}
        errors-browser.js: {}
        errors.js: {}
        experimentalWarning.js: {}
        lib:
          _stream_duplex.js: {}
          _stream_passthrough.js: {}
          _stream_readable.js: {}
          _stream_transform.js: {}
          _stream_writable.js: {}
          internal:
            streams:
              async_iterator.js: {}
              buffer_list.js: {}
              destroy.js: {}
              end-of-stream.js: {}
              from-browser.js: {}
              from.js: {}
              pipeline.js: {}
              state.js: {}
              stream-browser.js: {}
              stream.js: {}
        package.json: {}
        readable-browser.js: {}
        readable.js: {}
      readdirp:
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
      recursive-readdir:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      redent:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      reflect.getprototypeof:
        .eslintrc: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        auto.js: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        polyfill.js: {}
        shim.js: {}
        test:
          implementation.js: {}
          index.js: {}
          index.mjs: {}
          shimmed.js: {}
          tests.js: {}
      refractor:
        core.js: {}
        index.js: {}
        lang:
          abap.js: {}
          abnf.js: {}
          actionscript.js: {}
          ada.js: {}
          agda.js: {}
          al.js: {}
          antlr4.js: {}
          apacheconf.js: {}
          apex.js: {}
          apl.js: {}
          applescript.js: {}
          aql.js: {}
          arduino.js: {}
          arff.js: {}
          asciidoc.js: {}
          asm6502.js: {}
          asmatmel.js: {}
          aspnet.js: {}
          autohotkey.js: {}
          autoit.js: {}
          avisynth.js: {}
          avro-idl.js: {}
          bash.js: {}
          basic.js: {}
          batch.js: {}
          bbcode.js: {}
          bicep.js: {}
          birb.js: {}
          bison.js: {}
          bnf.js: {}
          brainfuck.js: {}
          brightscript.js: {}
          bro.js: {}
          bsl.js: {}
          c.js: {}
          cfscript.js: {}
          chaiscript.js: {}
          cil.js: {}
          clike.js: {}
          clojure.js: {}
          cmake.js: {}
          cobol.js: {}
          coffeescript.js: {}
          concurnas.js: {}
          coq.js: {}
          cpp.js: {}
          crystal.js: {}
          csharp.js: {}
          cshtml.js: {}
          csp.js: {}
          css-extras.js: {}
          css.js: {}
          csv.js: {}
          cypher.js: {}
          d.js: {}
          dart.js: {}
          dataweave.js: {}
          dax.js: {}
          dhall.js: {}
          diff.js: {}
          django.js: {}
          dns-zone-file.js: {}
          docker.js: {}
          dot.js: {}
          ebnf.js: {}
          editorconfig.js: {}
          eiffel.js: {}
          ejs.js: {}
          elixir.js: {}
          elm.js: {}
          erb.js: {}
          erlang.js: {}
          etlua.js: {}
          excel-formula.js: {}
          factor.js: {}
          false.js: {}
          firestore-security-rules.js: {}
          flow.js: {}
          fortran.js: {}
          fsharp.js: {}
          ftl.js: {}
          gap.js: {}
          gcode.js: {}
          gdscript.js: {}
          gedcom.js: {}
          gherkin.js: {}
          git.js: {}
          glsl.js: {}
          gml.js: {}
          gn.js: {}
          go-module.js: {}
          go.js: {}
          graphql.js: {}
          groovy.js: {}
          haml.js: {}
          handlebars.js: {}
          haskell.js: {}
          haxe.js: {}
          hcl.js: {}
          hlsl.js: {}
          hoon.js: {}
          hpkp.js: {}
          hsts.js: {}
          http.js: {}
          ichigojam.js: {}
          icon.js: {}
          icu-message-format.js: {}
          idris.js: {}
          iecst.js: {}
          ignore.js: {}
          inform7.js: {}
          ini.js: {}
          io.js: {}
          j.js: {}
          java.js: {}
          javadoc.js: {}
          javadoclike.js: {}
          javascript.js: {}
          javastacktrace.js: {}
          jexl.js: {}
          jolie.js: {}
          jq.js: {}
          js-extras.js: {}
          js-templates.js: {}
          jsdoc.js: {}
          json.js: {}
          json5.js: {}
          jsonp.js: {}
          jsstacktrace.js: {}
          jsx.js: {}
          julia.js: {}
          keepalived.js: {}
          keyman.js: {}
          kotlin.js: {}
          kumir.js: {}
          kusto.js: {}
          latex.js: {}
          latte.js: {}
          less.js: {}
          lilypond.js: {}
          liquid.js: {}
          lisp.js: {}
          livescript.js: {}
          llvm.js: {}
          log.js: {}
          lolcode.js: {}
          lua.js: {}
          magma.js: {}
          makefile.js: {}
          markdown.js: {}
          markup-templating.js: {}
          markup.js: {}
          matlab.js: {}
          maxscript.js: {}
          mel.js: {}
          mermaid.js: {}
          mizar.js: {}
          mongodb.js: {}
          monkey.js: {}
          moonscript.js: {}
          n1ql.js: {}
          n4js.js: {}
          nand2tetris-hdl.js: {}
          naniscript.js: {}
          nasm.js: {}
          neon.js: {}
          nevod.js: {}
          nginx.js: {}
          nim.js: {}
          nix.js: {}
          nsis.js: {}
          objectivec.js: {}
          ocaml.js: {}
          opencl.js: {}
          openqasm.js: {}
          oz.js: {}
          parigp.js: {}
          parser.js: {}
          pascal.js: {}
          pascaligo.js: {}
          pcaxis.js: {}
          peoplecode.js: {}
          perl.js: {}
          php-extras.js: {}
          php.js: {}
          phpdoc.js: {}
          plsql.js: {}
          powerquery.js: {}
          powershell.js: {}
          processing.js: {}
          prolog.js: {}
          promql.js: {}
          properties.js: {}
          protobuf.js: {}
          psl.js: {}
          pug.js: {}
          puppet.js: {}
          pure.js: {}
          purebasic.js: {}
          purescript.js: {}
          python.js: {}
          q.js: {}
          qml.js: {}
          qore.js: {}
          qsharp.js: {}
          r.js: {}
          racket.js: {}
          reason.js: {}
          regex.js: {}
          rego.js: {}
          renpy.js: {}
          rest.js: {}
          rip.js: {}
          roboconf.js: {}
          robotframework.js: {}
          ruby.js: {}
          rust.js: {}
          sas.js: {}
          sass.js: {}
          scala.js: {}
          scheme.js: {}
          scss.js: {}
          shell-session.js: {}
          smali.js: {}
          smalltalk.js: {}
          smarty.js: {}
          sml.js: {}
          solidity.js: {}
          solution-file.js: {}
          soy.js: {}
          sparql.js: {}
          splunk-spl.js: {}
          sqf.js: {}
          sql.js: {}
          squirrel.js: {}
          stan.js: {}
          stylus.js: {}
          swift.js: {}
          systemd.js: {}
          t4-cs.js: {}
          t4-templating.js: {}
          t4-vb.js: {}
          tap.js: {}
          tcl.js: {}
          textile.js: {}
          toml.js: {}
          tremor.js: {}
          tsx.js: {}
          tt2.js: {}
          turtle.js: {}
          twig.js: {}
          typescript.js: {}
          typoscript.js: {}
          unrealscript.js: {}
          uorazor.js: {}
          uri.js: {}
          v.js: {}
          vala.js: {}
          vbnet.js: {}
          velocity.js: {}
          verilog.js: {}
          vhdl.js: {}
          vim.js: {}
          visual-basic.js: {}
          warpscript.js: {}
          wasm.js: {}
          web-idl.js: {}
          wiki.js: {}
          wolfram.js: {}
          wren.js: {}
          xeora.js: {}
          xml-doc.js: {}
          xojo.js: {}
          xquery.js: {}
          yaml.js: {}
          yang.js: {}
          zig.js: {}
        license: {}
        node_modules:
          character-entities:
            index.json: {}
            license: {}
            package.json: {}
            readme.md: {}
          character-entities-legacy:
            index.json: {}
            license: {}
            package.json: {}
            readme.md: {}
          character-reference-invalid:
            index.json: {}
            license: {}
            package.json: {}
            readme.md: {}
          is-alphabetical:
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          is-alphanumerical:
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          is-decimal:
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          is-hexadecimal:
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          parse-entities:
            decode-entity.browser.js: {}
            decode-entity.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
            types:
              index.d.ts: {}
          prismjs:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            components:
              index.js: {}
              prism-abap.js: {}
              prism-abap.min.js: {}
              prism-abnf.js: {}
              prism-abnf.min.js: {}
              prism-actionscript.js: {}
              prism-actionscript.min.js: {}
              prism-ada.js: {}
              prism-ada.min.js: {}
              prism-agda.js: {}
              prism-agda.min.js: {}
              prism-al.js: {}
              prism-al.min.js: {}
              prism-antlr4.js: {}
              prism-antlr4.min.js: {}
              prism-apacheconf.js: {}
              prism-apacheconf.min.js: {}
              prism-apex.js: {}
              prism-apex.min.js: {}
              prism-apl.js: {}
              prism-apl.min.js: {}
              prism-applescript.js: {}
              prism-applescript.min.js: {}
              prism-aql.js: {}
              prism-aql.min.js: {}
              prism-arduino.js: {}
              prism-arduino.min.js: {}
              prism-arff.js: {}
              prism-arff.min.js: {}
              prism-asciidoc.js: {}
              prism-asciidoc.min.js: {}
              prism-asm6502.js: {}
              prism-asm6502.min.js: {}
              prism-asmatmel.js: {}
              prism-asmatmel.min.js: {}
              prism-aspnet.js: {}
              prism-aspnet.min.js: {}
              prism-autohotkey.js: {}
              prism-autohotkey.min.js: {}
              prism-autoit.js: {}
              prism-autoit.min.js: {}
              prism-avisynth.js: {}
              prism-avisynth.min.js: {}
              prism-avro-idl.js: {}
              prism-avro-idl.min.js: {}
              prism-bash.js: {}
              prism-bash.min.js: {}
              prism-basic.js: {}
              prism-basic.min.js: {}
              prism-batch.js: {}
              prism-batch.min.js: {}
              prism-bbcode.js: {}
              prism-bbcode.min.js: {}
              prism-bicep.js: {}
              prism-bicep.min.js: {}
              prism-birb.js: {}
              prism-birb.min.js: {}
              prism-bison.js: {}
              prism-bison.min.js: {}
              prism-bnf.js: {}
              prism-bnf.min.js: {}
              prism-brainfuck.js: {}
              prism-brainfuck.min.js: {}
              prism-brightscript.js: {}
              prism-brightscript.min.js: {}
              prism-bro.js: {}
              prism-bro.min.js: {}
              prism-bsl.js: {}
              prism-bsl.min.js: {}
              prism-c.js: {}
              prism-c.min.js: {}
              prism-cfscript.js: {}
              prism-cfscript.min.js: {}
              prism-chaiscript.js: {}
              prism-chaiscript.min.js: {}
              prism-cil.js: {}
              prism-cil.min.js: {}
              prism-clike.js: {}
              prism-clike.min.js: {}
              prism-clojure.js: {}
              prism-clojure.min.js: {}
              prism-cmake.js: {}
              prism-cmake.min.js: {}
              prism-cobol.js: {}
              prism-cobol.min.js: {}
              prism-coffeescript.js: {}
              prism-coffeescript.min.js: {}
              prism-concurnas.js: {}
              prism-concurnas.min.js: {}
              prism-coq.js: {}
              prism-coq.min.js: {}
              prism-core.js: {}
              prism-core.min.js: {}
              prism-cpp.js: {}
              prism-cpp.min.js: {}
              prism-crystal.js: {}
              prism-crystal.min.js: {}
              prism-csharp.js: {}
              prism-csharp.min.js: {}
              prism-cshtml.js: {}
              prism-cshtml.min.js: {}
              prism-csp.js: {}
              prism-csp.min.js: {}
              prism-css-extras.js: {}
              prism-css-extras.min.js: {}
              prism-css.js: {}
              prism-css.min.js: {}
              prism-csv.js: {}
              prism-csv.min.js: {}
              prism-cypher.js: {}
              prism-cypher.min.js: {}
              prism-d.js: {}
              prism-d.min.js: {}
              prism-dart.js: {}
              prism-dart.min.js: {}
              prism-dataweave.js: {}
              prism-dataweave.min.js: {}
              prism-dax.js: {}
              prism-dax.min.js: {}
              prism-dhall.js: {}
              prism-dhall.min.js: {}
              prism-diff.js: {}
              prism-diff.min.js: {}
              prism-django.js: {}
              prism-django.min.js: {}
              prism-dns-zone-file.js: {}
              prism-dns-zone-file.min.js: {}
              prism-docker.js: {}
              prism-docker.min.js: {}
              prism-dot.js: {}
              prism-dot.min.js: {}
              prism-ebnf.js: {}
              prism-ebnf.min.js: {}
              prism-editorconfig.js: {}
              prism-editorconfig.min.js: {}
              prism-eiffel.js: {}
              prism-eiffel.min.js: {}
              prism-ejs.js: {}
              prism-ejs.min.js: {}
              prism-elixir.js: {}
              prism-elixir.min.js: {}
              prism-elm.js: {}
              prism-elm.min.js: {}
              prism-erb.js: {}
              prism-erb.min.js: {}
              prism-erlang.js: {}
              prism-erlang.min.js: {}
              prism-etlua.js: {}
              prism-etlua.min.js: {}
              prism-excel-formula.js: {}
              prism-excel-formula.min.js: {}
              prism-factor.js: {}
              prism-factor.min.js: {}
              prism-false.js: {}
              prism-false.min.js: {}
              prism-firestore-security-rules.js: {}
              prism-firestore-security-rules.min.js: {}
              prism-flow.js: {}
              prism-flow.min.js: {}
              prism-fortran.js: {}
              prism-fortran.min.js: {}
              prism-fsharp.js: {}
              prism-fsharp.min.js: {}
              prism-ftl.js: {}
              prism-ftl.min.js: {}
              prism-gap.js: {}
              prism-gap.min.js: {}
              prism-gcode.js: {}
              prism-gcode.min.js: {}
              prism-gdscript.js: {}
              prism-gdscript.min.js: {}
              prism-gedcom.js: {}
              prism-gedcom.min.js: {}
              prism-gherkin.js: {}
              prism-gherkin.min.js: {}
              prism-git.js: {}
              prism-git.min.js: {}
              prism-glsl.js: {}
              prism-glsl.min.js: {}
              prism-gml.js: {}
              prism-gml.min.js: {}
              prism-gn.js: {}
              prism-gn.min.js: {}
              prism-go-module.js: {}
              prism-go-module.min.js: {}
              prism-go.js: {}
              prism-go.min.js: {}
              prism-graphql.js: {}
              prism-graphql.min.js: {}
              prism-groovy.js: {}
              prism-groovy.min.js: {}
              prism-haml.js: {}
              prism-haml.min.js: {}
              prism-handlebars.js: {}
              prism-handlebars.min.js: {}
              prism-haskell.js: {}
              prism-haskell.min.js: {}
              prism-haxe.js: {}
              prism-haxe.min.js: {}
              prism-hcl.js: {}
              prism-hcl.min.js: {}
              prism-hlsl.js: {}
              prism-hlsl.min.js: {}
              prism-hoon.js: {}
              prism-hoon.min.js: {}
              prism-hpkp.js: {}
              prism-hpkp.min.js: {}
              prism-hsts.js: {}
              prism-hsts.min.js: {}
              prism-http.js: {}
              prism-http.min.js: {}
              prism-ichigojam.js: {}
              prism-ichigojam.min.js: {}
              prism-icon.js: {}
              prism-icon.min.js: {}
              prism-icu-message-format.js: {}
              prism-icu-message-format.min.js: {}
              prism-idris.js: {}
              prism-idris.min.js: {}
              prism-iecst.js: {}
              prism-iecst.min.js: {}
              prism-ignore.js: {}
              prism-ignore.min.js: {}
              prism-inform7.js: {}
              prism-inform7.min.js: {}
              prism-ini.js: {}
              prism-ini.min.js: {}
              prism-io.js: {}
              prism-io.min.js: {}
              prism-j.js: {}
              prism-j.min.js: {}
              prism-java.js: {}
              prism-java.min.js: {}
              prism-javadoc.js: {}
              prism-javadoc.min.js: {}
              prism-javadoclike.js: {}
              prism-javadoclike.min.js: {}
              prism-javascript.js: {}
              prism-javascript.min.js: {}
              prism-javastacktrace.js: {}
              prism-javastacktrace.min.js: {}
              prism-jexl.js: {}
              prism-jexl.min.js: {}
              prism-jolie.js: {}
              prism-jolie.min.js: {}
              prism-jq.js: {}
              prism-jq.min.js: {}
              prism-js-extras.js: {}
              prism-js-extras.min.js: {}
              prism-js-templates.js: {}
              prism-js-templates.min.js: {}
              prism-jsdoc.js: {}
              prism-jsdoc.min.js: {}
              prism-json.js: {}
              prism-json.min.js: {}
              prism-json5.js: {}
              prism-json5.min.js: {}
              prism-jsonp.js: {}
              prism-jsonp.min.js: {}
              prism-jsstacktrace.js: {}
              prism-jsstacktrace.min.js: {}
              prism-jsx.js: {}
              prism-jsx.min.js: {}
              prism-julia.js: {}
              prism-julia.min.js: {}
              prism-keepalived.js: {}
              prism-keepalived.min.js: {}
              prism-keyman.js: {}
              prism-keyman.min.js: {}
              prism-kotlin.js: {}
              prism-kotlin.min.js: {}
              prism-kumir.js: {}
              prism-kumir.min.js: {}
              prism-kusto.js: {}
              prism-kusto.min.js: {}
              prism-latex.js: {}
              prism-latex.min.js: {}
              prism-latte.js: {}
              prism-latte.min.js: {}
              prism-less.js: {}
              prism-less.min.js: {}
              prism-lilypond.js: {}
              prism-lilypond.min.js: {}
              prism-liquid.js: {}
              prism-liquid.min.js: {}
              prism-lisp.js: {}
              prism-lisp.min.js: {}
              prism-livescript.js: {}
              prism-livescript.min.js: {}
              prism-llvm.js: {}
              prism-llvm.min.js: {}
              prism-log.js: {}
              prism-log.min.js: {}
              prism-lolcode.js: {}
              prism-lolcode.min.js: {}
              prism-lua.js: {}
              prism-lua.min.js: {}
              prism-magma.js: {}
              prism-magma.min.js: {}
              prism-makefile.js: {}
              prism-makefile.min.js: {}
              prism-markdown.js: {}
              prism-markdown.min.js: {}
              prism-markup-templating.js: {}
              prism-markup-templating.min.js: {}
              prism-markup.js: {}
              prism-markup.min.js: {}
              prism-matlab.js: {}
              prism-matlab.min.js: {}
              prism-maxscript.js: {}
              prism-maxscript.min.js: {}
              prism-mel.js: {}
              prism-mel.min.js: {}
              prism-mermaid.js: {}
              prism-mermaid.min.js: {}
              prism-mizar.js: {}
              prism-mizar.min.js: {}
              prism-mongodb.js: {}
              prism-mongodb.min.js: {}
              prism-monkey.js: {}
              prism-monkey.min.js: {}
              prism-moonscript.js: {}
              prism-moonscript.min.js: {}
              prism-n1ql.js: {}
              prism-n1ql.min.js: {}
              prism-n4js.js: {}
              prism-n4js.min.js: {}
              prism-nand2tetris-hdl.js: {}
              prism-nand2tetris-hdl.min.js: {}
              prism-naniscript.js: {}
              prism-naniscript.min.js: {}
              prism-nasm.js: {}
              prism-nasm.min.js: {}
              prism-neon.js: {}
              prism-neon.min.js: {}
              prism-nevod.js: {}
              prism-nevod.min.js: {}
              prism-nginx.js: {}
              prism-nginx.min.js: {}
              prism-nim.js: {}
              prism-nim.min.js: {}
              prism-nix.js: {}
              prism-nix.min.js: {}
              prism-nsis.js: {}
              prism-nsis.min.js: {}
              prism-objectivec.js: {}
              prism-objectivec.min.js: {}
              prism-ocaml.js: {}
              prism-ocaml.min.js: {}
              prism-opencl.js: {}
              prism-opencl.min.js: {}
              prism-openqasm.js: {}
              prism-openqasm.min.js: {}
              prism-oz.js: {}
              prism-oz.min.js: {}
              prism-parigp.js: {}
              prism-parigp.min.js: {}
              prism-parser.js: {}
              prism-parser.min.js: {}
              prism-pascal.js: {}
              prism-pascal.min.js: {}
              prism-pascaligo.js: {}
              prism-pascaligo.min.js: {}
              prism-pcaxis.js: {}
              prism-pcaxis.min.js: {}
              prism-peoplecode.js: {}
              prism-peoplecode.min.js: {}
              prism-perl.js: {}
              prism-perl.min.js: {}
              prism-php-extras.js: {}
              prism-php-extras.min.js: {}
              prism-php.js: {}
              prism-php.min.js: {}
              prism-phpdoc.js: {}
              prism-phpdoc.min.js: {}
              prism-plsql.js: {}
              prism-plsql.min.js: {}
              prism-powerquery.js: {}
              prism-powerquery.min.js: {}
              prism-powershell.js: {}
              prism-powershell.min.js: {}
              prism-processing.js: {}
              prism-processing.min.js: {}
              prism-prolog.js: {}
              prism-prolog.min.js: {}
              prism-promql.js: {}
              prism-promql.min.js: {}
              prism-properties.js: {}
              prism-properties.min.js: {}
              prism-protobuf.js: {}
              prism-protobuf.min.js: {}
              prism-psl.js: {}
              prism-psl.min.js: {}
              prism-pug.js: {}
              prism-pug.min.js: {}
              prism-puppet.js: {}
              prism-puppet.min.js: {}
              prism-pure.js: {}
              prism-pure.min.js: {}
              prism-purebasic.js: {}
              prism-purebasic.min.js: {}
              prism-purescript.js: {}
              prism-purescript.min.js: {}
              prism-python.js: {}
              prism-python.min.js: {}
              prism-q.js: {}
              prism-q.min.js: {}
              prism-qml.js: {}
              prism-qml.min.js: {}
              prism-qore.js: {}
              prism-qore.min.js: {}
              prism-qsharp.js: {}
              prism-qsharp.min.js: {}
              prism-r.js: {}
              prism-r.min.js: {}
              prism-racket.js: {}
              prism-racket.min.js: {}
              prism-reason.js: {}
              prism-reason.min.js: {}
              prism-regex.js: {}
              prism-regex.min.js: {}
              prism-rego.js: {}
              prism-rego.min.js: {}
              prism-renpy.js: {}
              prism-renpy.min.js: {}
              prism-rest.js: {}
              prism-rest.min.js: {}
              prism-rip.js: {}
              prism-rip.min.js: {}
              prism-roboconf.js: {}
              prism-roboconf.min.js: {}
              prism-robotframework.js: {}
              prism-robotframework.min.js: {}
              prism-ruby.js: {}
              prism-ruby.min.js: {}
              prism-rust.js: {}
              prism-rust.min.js: {}
              prism-sas.js: {}
              prism-sas.min.js: {}
              prism-sass.js: {}
              prism-sass.min.js: {}
              prism-scala.js: {}
              prism-scala.min.js: {}
              prism-scheme.js: {}
              prism-scheme.min.js: {}
              prism-scss.js: {}
              prism-scss.min.js: {}
              prism-shell-session.js: {}
              prism-shell-session.min.js: {}
              prism-smali.js: {}
              prism-smali.min.js: {}
              prism-smalltalk.js: {}
              prism-smalltalk.min.js: {}
              prism-smarty.js: {}
              prism-smarty.min.js: {}
              prism-sml.js: {}
              prism-sml.min.js: {}
              prism-solidity.js: {}
              prism-solidity.min.js: {}
              prism-solution-file.js: {}
              prism-solution-file.min.js: {}
              prism-soy.js: {}
              prism-soy.min.js: {}
              prism-sparql.js: {}
              prism-sparql.min.js: {}
              prism-splunk-spl.js: {}
              prism-splunk-spl.min.js: {}
              prism-sqf.js: {}
              prism-sqf.min.js: {}
              prism-sql.js: {}
              prism-sql.min.js: {}
              prism-squirrel.js: {}
              prism-squirrel.min.js: {}
              prism-stan.js: {}
              prism-stan.min.js: {}
              prism-stylus.js: {}
              prism-stylus.min.js: {}
              prism-swift.js: {}
              prism-swift.min.js: {}
              prism-systemd.js: {}
              prism-systemd.min.js: {}
              prism-t4-cs.js: {}
              prism-t4-cs.min.js: {}
              prism-t4-templating.js: {}
              prism-t4-templating.min.js: {}
              prism-t4-vb.js: {}
              prism-t4-vb.min.js: {}
              prism-tap.js: {}
              prism-tap.min.js: {}
              prism-tcl.js: {}
              prism-tcl.min.js: {}
              prism-textile.js: {}
              prism-textile.min.js: {}
              prism-toml.js: {}
              prism-toml.min.js: {}
              prism-tremor.js: {}
              prism-tremor.min.js: {}
              prism-tsx.js: {}
              prism-tsx.min.js: {}
              prism-tt2.js: {}
              prism-tt2.min.js: {}
              prism-turtle.js: {}
              prism-turtle.min.js: {}
              prism-twig.js: {}
              prism-twig.min.js: {}
              prism-typescript.js: {}
              prism-typescript.min.js: {}
              prism-typoscript.js: {}
              prism-typoscript.min.js: {}
              prism-unrealscript.js: {}
              prism-unrealscript.min.js: {}
              prism-uorazor.js: {}
              prism-uorazor.min.js: {}
              prism-uri.js: {}
              prism-uri.min.js: {}
              prism-v.js: {}
              prism-v.min.js: {}
              prism-vala.js: {}
              prism-vala.min.js: {}
              prism-vbnet.js: {}
              prism-vbnet.min.js: {}
              prism-velocity.js: {}
              prism-velocity.min.js: {}
              prism-verilog.js: {}
              prism-verilog.min.js: {}
              prism-vhdl.js: {}
              prism-vhdl.min.js: {}
              prism-vim.js: {}
              prism-vim.min.js: {}
              prism-visual-basic.js: {}
              prism-visual-basic.min.js: {}
              prism-warpscript.js: {}
              prism-warpscript.min.js: {}
              prism-wasm.js: {}
              prism-wasm.min.js: {}
              prism-web-idl.js: {}
              prism-web-idl.min.js: {}
              prism-wiki.js: {}
              prism-wiki.min.js: {}
              prism-wolfram.js: {}
              prism-wolfram.min.js: {}
              prism-wren.js: {}
              prism-wren.min.js: {}
              prism-xeora.js: {}
              prism-xeora.min.js: {}
              prism-xml-doc.js: {}
              prism-xml-doc.min.js: {}
              prism-xojo.js: {}
              prism-xojo.min.js: {}
              prism-xquery.js: {}
              prism-xquery.min.js: {}
              prism-yaml.js: {}
              prism-yaml.min.js: {}
              prism-yang.js: {}
              prism-yang.min.js: {}
              prism-zig.js: {}
              prism-zig.min.js: {}
            components.js: {}
            components.json: {}
            dependencies.js: {}
            package.json: {}
            plugins:
              autolinker:
                prism-autolinker.css: {}
                prism-autolinker.js: {}
                prism-autolinker.min.css: {}
                prism-autolinker.min.js: {}
              autoloader:
                prism-autoloader.js: {}
                prism-autoloader.min.js: {}
              command-line:
                prism-command-line.css: {}
                prism-command-line.js: {}
                prism-command-line.min.css: {}
                prism-command-line.min.js: {}
              copy-to-clipboard:
                prism-copy-to-clipboard.js: {}
                prism-copy-to-clipboard.min.js: {}
              custom-class:
                prism-custom-class.js: {}
                prism-custom-class.min.js: {}
              data-uri-highlight:
                prism-data-uri-highlight.js: {}
                prism-data-uri-highlight.min.js: {}
              diff-highlight:
                prism-diff-highlight.css: {}
                prism-diff-highlight.js: {}
                prism-diff-highlight.min.css: {}
                prism-diff-highlight.min.js: {}
              download-button:
                prism-download-button.js: {}
                prism-download-button.min.js: {}
              file-highlight:
                prism-file-highlight.js: {}
                prism-file-highlight.min.js: {}
              filter-highlight-all:
                prism-filter-highlight-all.js: {}
                prism-filter-highlight-all.min.js: {}
              highlight-keywords:
                prism-highlight-keywords.js: {}
                prism-highlight-keywords.min.js: {}
              inline-color:
                prism-inline-color.css: {}
                prism-inline-color.js: {}
                prism-inline-color.min.css: {}
                prism-inline-color.min.js: {}
              jsonp-highlight:
                prism-jsonp-highlight.js: {}
                prism-jsonp-highlight.min.js: {}
              keep-markup:
                prism-keep-markup.js: {}
                prism-keep-markup.min.js: {}
              line-highlight:
                prism-line-highlight.css: {}
                prism-line-highlight.js: {}
                prism-line-highlight.min.css: {}
                prism-line-highlight.min.js: {}
              line-numbers:
                prism-line-numbers.css: {}
                prism-line-numbers.js: {}
                prism-line-numbers.min.css: {}
                prism-line-numbers.min.js: {}
              match-braces:
                prism-match-braces.css: {}
                prism-match-braces.js: {}
                prism-match-braces.min.css: {}
                prism-match-braces.min.js: {}
              normalize-whitespace:
                prism-normalize-whitespace.js: {}
                prism-normalize-whitespace.min.js: {}
              previewers:
                prism-previewers.css: {}
                prism-previewers.js: {}
                prism-previewers.min.css: {}
                prism-previewers.min.js: {}
              remove-initial-line-feed:
                prism-remove-initial-line-feed.js: {}
                prism-remove-initial-line-feed.min.js: {}
              show-invisibles:
                prism-show-invisibles.css: {}
                prism-show-invisibles.js: {}
                prism-show-invisibles.min.css: {}
                prism-show-invisibles.min.js: {}
              show-language:
                prism-show-language.js: {}
                prism-show-language.min.js: {}
              toolbar:
                prism-toolbar.css: {}
                prism-toolbar.js: {}
                prism-toolbar.min.css: {}
                prism-toolbar.min.js: {}
              treeview:
                prism-treeview.css: {}
                prism-treeview.js: {}
                prism-treeview.min.css: {}
                prism-treeview.min.js: {}
              unescaped-markup:
                prism-unescaped-markup.css: {}
                prism-unescaped-markup.js: {}
                prism-unescaped-markup.min.css: {}
                prism-unescaped-markup.min.js: {}
              wpd:
                prism-wpd.css: {}
                prism-wpd.js: {}
                prism-wpd.min.css: {}
                prism-wpd.min.js: {}
            prism.js: {}
            themes:
              prism-coy.css: {}
              prism-coy.min.css: {}
              prism-dark.css: {}
              prism-dark.min.css: {}
              prism-funky.css: {}
              prism-funky.min.css: {}
              prism-okaidia.css: {}
              prism-okaidia.min.css: {}
              prism-solarizedlight.css: {}
              prism-solarizedlight.min.css: {}
              prism-tomorrow.css: {}
              prism-tomorrow.min.css: {}
              prism-twilight.css: {}
              prism-twilight.min.css: {}
              prism.css: {}
              prism.min.css: {}
        package.json: {}
        readme.md: {}
      regenerate:
        LICENSE-MIT.txt: {}
        README.md: {}
        package.json: {}
        regenerate.js: {}
      regenerate-unicode-properties:
        Binary_Property:
          ASCII.js: {}
          ASCII_Hex_Digit.js: {}
          Alphabetic.js: {}
          Any.js: {}
          Assigned.js: {}
          Bidi_Control.js: {}
          Bidi_Mirrored.js: {}
          Case_Ignorable.js: {}
          Cased.js: {}
          Changes_When_Casefolded.js: {}
          Changes_When_Casemapped.js: {}
          Changes_When_Lowercased.js: {}
          Changes_When_NFKC_Casefolded.js: {}
          Changes_When_Titlecased.js: {}
          Changes_When_Uppercased.js: {}
          Dash.js: {}
          Default_Ignorable_Code_Point.js: {}
          Deprecated.js: {}
          Diacritic.js: {}
          Emoji.js: {}
          Emoji_Component.js: {}
          Emoji_Modifier.js: {}
          Emoji_Modifier_Base.js: {}
          Emoji_Presentation.js: {}
          Extended_Pictographic.js: {}
          Extender.js: {}
          Grapheme_Base.js: {}
          Grapheme_Extend.js: {}
          Hex_Digit.js: {}
          IDS_Binary_Operator.js: {}
          IDS_Trinary_Operator.js: {}
          ID_Continue.js: {}
          ID_Start.js: {}
          Ideographic.js: {}
          Join_Control.js: {}
          Logical_Order_Exception.js: {}
          Lowercase.js: {}
          Math.js: {}
          Noncharacter_Code_Point.js: {}
          Pattern_Syntax.js: {}
          Pattern_White_Space.js: {}
          Quotation_Mark.js: {}
          Radical.js: {}
          Regional_Indicator.js: {}
          Sentence_Terminal.js: {}
          Soft_Dotted.js: {}
          Terminal_Punctuation.js: {}
          Unified_Ideograph.js: {}
          Uppercase.js: {}
          Variation_Selector.js: {}
          White_Space.js: {}
          XID_Continue.js: {}
          XID_Start.js: {}
        General_Category:
          Cased_Letter.js: {}
          Close_Punctuation.js: {}
          Connector_Punctuation.js: {}
          Control.js: {}
          Currency_Symbol.js: {}
          Dash_Punctuation.js: {}
          Decimal_Number.js: {}
          Enclosing_Mark.js: {}
          Final_Punctuation.js: {}
          Format.js: {}
          Initial_Punctuation.js: {}
          Letter.js: {}
          Letter_Number.js: {}
          Line_Separator.js: {}
          Lowercase_Letter.js: {}
          Mark.js: {}
          Math_Symbol.js: {}
          Modifier_Letter.js: {}
          Modifier_Symbol.js: {}
          Nonspacing_Mark.js: {}
          Number.js: {}
          Open_Punctuation.js: {}
          Other.js: {}
          Other_Letter.js: {}
          Other_Number.js: {}
          Other_Punctuation.js: {}
          Other_Symbol.js: {}
          Paragraph_Separator.js: {}
          Private_Use.js: {}
          Punctuation.js: {}
          Separator.js: {}
          Space_Separator.js: {}
          Spacing_Mark.js: {}
          Surrogate.js: {}
          Symbol.js: {}
          Titlecase_Letter.js: {}
          Unassigned.js: {}
          Uppercase_Letter.js: {}
        LICENSE-MIT.txt: {}
        Property_of_Strings:
          Basic_Emoji.js: {}
          Emoji_Keycap_Sequence.js: {}
          RGI_Emoji.js: {}
          RGI_Emoji_Flag_Sequence.js: {}
          RGI_Emoji_Modifier_Sequence.js: {}
          RGI_Emoji_Tag_Sequence.js: {}
          RGI_Emoji_ZWJ_Sequence.js: {}
        README.md: {}
        Script:
          Adlam.js: {}
          Ahom.js: {}
          Anatolian_Hieroglyphs.js: {}
          Arabic.js: {}
          Armenian.js: {}
          Avestan.js: {}
          Balinese.js: {}
          Bamum.js: {}
          Bassa_Vah.js: {}
          Batak.js: {}
          Bengali.js: {}
          Bhaiksuki.js: {}
          Bopomofo.js: {}
          Brahmi.js: {}
          Braille.js: {}
          Buginese.js: {}
          Buhid.js: {}
          Canadian_Aboriginal.js: {}
          Carian.js: {}
          Caucasian_Albanian.js: {}
          Chakma.js: {}
          Cham.js: {}
          Cherokee.js: {}
          Chorasmian.js: {}
          Common.js: {}
          Coptic.js: {}
          Cuneiform.js: {}
          Cypriot.js: {}
          Cypro_Minoan.js: {}
          Cyrillic.js: {}
          Deseret.js: {}
          Devanagari.js: {}
          Dives_Akuru.js: {}
          Dogra.js: {}
          Duployan.js: {}
          Egyptian_Hieroglyphs.js: {}
          Elbasan.js: {}
          Elymaic.js: {}
          Ethiopic.js: {}
          Georgian.js: {}
          Glagolitic.js: {}
          Gothic.js: {}
          Grantha.js: {}
          Greek.js: {}
          Gujarati.js: {}
          Gunjala_Gondi.js: {}
          Gurmukhi.js: {}
          Han.js: {}
          Hangul.js: {}
          Hanifi_Rohingya.js: {}
          Hanunoo.js: {}
          Hatran.js: {}
          Hebrew.js: {}
          Hiragana.js: {}
          Imperial_Aramaic.js: {}
          Inherited.js: {}
          Inscriptional_Pahlavi.js: {}
          Inscriptional_Parthian.js: {}
          Javanese.js: {}
          Kaithi.js: {}
          Kannada.js: {}
          Katakana.js: {}
          Kawi.js: {}
          Kayah_Li.js: {}
          Kharoshthi.js: {}
          Khitan_Small_Script.js: {}
          Khmer.js: {}
          Khojki.js: {}
          Khudawadi.js: {}
          Lao.js: {}
          Latin.js: {}
          Lepcha.js: {}
          Limbu.js: {}
          Linear_A.js: {}
          Linear_B.js: {}
          Lisu.js: {}
          Lycian.js: {}
          Lydian.js: {}
          Mahajani.js: {}
          Makasar.js: {}
          Malayalam.js: {}
          Mandaic.js: {}
          Manichaean.js: {}
          Marchen.js: {}
          Masaram_Gondi.js: {}
          Medefaidrin.js: {}
          Meetei_Mayek.js: {}
          Mende_Kikakui.js: {}
          Meroitic_Cursive.js: {}
          Meroitic_Hieroglyphs.js: {}
          Miao.js: {}
          Modi.js: {}
          Mongolian.js: {}
          Mro.js: {}
          Multani.js: {}
          Myanmar.js: {}
          Nabataean.js: {}
          Nag_Mundari.js: {}
          Nandinagari.js: {}
          New_Tai_Lue.js: {}
          Newa.js: {}
          Nko.js: {}
          Nushu.js: {}
          Nyiakeng_Puachue_Hmong.js: {}
          Ogham.js: {}
          Ol_Chiki.js: {}
          Old_Hungarian.js: {}
          Old_Italic.js: {}
          Old_North_Arabian.js: {}
          Old_Permic.js: {}
          Old_Persian.js: {}
          Old_Sogdian.js: {}
          Old_South_Arabian.js: {}
          Old_Turkic.js: {}
          Old_Uyghur.js: {}
          Oriya.js: {}
          Osage.js: {}
          Osmanya.js: {}
          Pahawh_Hmong.js: {}
          Palmyrene.js: {}
          Pau_Cin_Hau.js: {}
          Phags_Pa.js: {}
          Phoenician.js: {}
          Psalter_Pahlavi.js: {}
          Rejang.js: {}
          Runic.js: {}
          Samaritan.js: {}
          Saurashtra.js: {}
          Sharada.js: {}
          Shavian.js: {}
          Siddham.js: {}
          SignWriting.js: {}
          Sinhala.js: {}
          Sogdian.js: {}
          Sora_Sompeng.js: {}
          Soyombo.js: {}
          Sundanese.js: {}
          Syloti_Nagri.js: {}
          Syriac.js: {}
          Tagalog.js: {}
          Tagbanwa.js: {}
          Tai_Le.js: {}
          Tai_Tham.js: {}
          Tai_Viet.js: {}
          Takri.js: {}
          Tamil.js: {}
          Tangsa.js: {}
          Tangut.js: {}
          Telugu.js: {}
          Thaana.js: {}
          Thai.js: {}
          Tibetan.js: {}
          Tifinagh.js: {}
          Tirhuta.js: {}
          Toto.js: {}
          Ugaritic.js: {}
          Vai.js: {}
          Vithkuqi.js: {}
          Wancho.js: {}
          Warang_Citi.js: {}
          Yezidi.js: {}
          Yi.js: {}
          Zanabazar_Square.js: {}
        Script_Extensions:
          Adlam.js: {}
          Ahom.js: {}
          Anatolian_Hieroglyphs.js: {}
          Arabic.js: {}
          Armenian.js: {}
          Avestan.js: {}
          Balinese.js: {}
          Bamum.js: {}
          Bassa_Vah.js: {}
          Batak.js: {}
          Bengali.js: {}
          Bhaiksuki.js: {}
          Bopomofo.js: {}
          Brahmi.js: {}
          Braille.js: {}
          Buginese.js: {}
          Buhid.js: {}
          Canadian_Aboriginal.js: {}
          Carian.js: {}
          Caucasian_Albanian.js: {}
          Chakma.js: {}
          Cham.js: {}
          Cherokee.js: {}
          Chorasmian.js: {}
          Common.js: {}
          Coptic.js: {}
          Cuneiform.js: {}
          Cypriot.js: {}
          Cypro_Minoan.js: {}
          Cyrillic.js: {}
          Deseret.js: {}
          Devanagari.js: {}
          Dives_Akuru.js: {}
          Dogra.js: {}
          Duployan.js: {}
          Egyptian_Hieroglyphs.js: {}
          Elbasan.js: {}
          Elymaic.js: {}
          Ethiopic.js: {}
          Georgian.js: {}
          Glagolitic.js: {}
          Gothic.js: {}
          Grantha.js: {}
          Greek.js: {}
          Gujarati.js: {}
          Gunjala_Gondi.js: {}
          Gurmukhi.js: {}
          Han.js: {}
          Hangul.js: {}
          Hanifi_Rohingya.js: {}
          Hanunoo.js: {}
          Hatran.js: {}
          Hebrew.js: {}
          Hiragana.js: {}
          Imperial_Aramaic.js: {}
          Inherited.js: {}
          Inscriptional_Pahlavi.js: {}
          Inscriptional_Parthian.js: {}
          Javanese.js: {}
          Kaithi.js: {}
          Kannada.js: {}
          Katakana.js: {}
          Kawi.js: {}
          Kayah_Li.js: {}
          Kharoshthi.js: {}
          Khitan_Small_Script.js: {}
          Khmer.js: {}
          Khojki.js: {}
          Khudawadi.js: {}
          Lao.js: {}
          Latin.js: {}
          Lepcha.js: {}
          Limbu.js: {}
          Linear_A.js: {}
          Linear_B.js: {}
          Lisu.js: {}
          Lycian.js: {}
          Lydian.js: {}
          Mahajani.js: {}
          Makasar.js: {}
          Malayalam.js: {}
          Mandaic.js: {}
          Manichaean.js: {}
          Marchen.js: {}
          Masaram_Gondi.js: {}
          Medefaidrin.js: {}
          Meetei_Mayek.js: {}
          Mende_Kikakui.js: {}
          Meroitic_Cursive.js: {}
          Meroitic_Hieroglyphs.js: {}
          Miao.js: {}
          Modi.js: {}
          Mongolian.js: {}
          Mro.js: {}
          Multani.js: {}
          Myanmar.js: {}
          Nabataean.js: {}
          Nag_Mundari.js: {}
          Nandinagari.js: {}
          New_Tai_Lue.js: {}
          Newa.js: {}
          Nko.js: {}
          Nushu.js: {}
          Nyiakeng_Puachue_Hmong.js: {}
          Ogham.js: {}
          Ol_Chiki.js: {}
          Old_Hungarian.js: {}
          Old_Italic.js: {}
          Old_North_Arabian.js: {}
          Old_Permic.js: {}
          Old_Persian.js: {}
          Old_Sogdian.js: {}
          Old_South_Arabian.js: {}
          Old_Turkic.js: {}
          Old_Uyghur.js: {}
          Oriya.js: {}
          Osage.js: {}
          Osmanya.js: {}
          Pahawh_Hmong.js: {}
          Palmyrene.js: {}
          Pau_Cin_Hau.js: {}
          Phags_Pa.js: {}
          Phoenician.js: {}
          Psalter_Pahlavi.js: {}
          Rejang.js: {}
          Runic.js: {}
          Samaritan.js: {}
          Saurashtra.js: {}
          Sharada.js: {}
          Shavian.js: {}
          Siddham.js: {}
          SignWriting.js: {}
          Sinhala.js: {}
          Sogdian.js: {}
          Sora_Sompeng.js: {}
          Soyombo.js: {}
          Sundanese.js: {}
          Syloti_Nagri.js: {}
          Syriac.js: {}
          Tagalog.js: {}
          Tagbanwa.js: {}
          Tai_Le.js: {}
          Tai_Tham.js: {}
          Tai_Viet.js: {}
          Takri.js: {}
          Tamil.js: {}
          Tangsa.js: {}
          Tangut.js: {}
          Telugu.js: {}
          Thaana.js: {}
          Thai.js: {}
          Tibetan.js: {}
          Tifinagh.js: {}
          Tirhuta.js: {}
          Toto.js: {}
          Ugaritic.js: {}
          Vai.js: {}
          Vithkuqi.js: {}
          Wancho.js: {}
          Warang_Citi.js: {}
          Yezidi.js: {}
          Yi.js: {}
          Zanabazar_Square.js: {}
        index.js: {}
        package.json: {}
        unicode-version.js: {}
      regenerator-runtime:
        LICENSE: {}
        README.md: {}
        package.json: {}
        path.js: {}
        runtime.js: {}
      regenerator-transform:
        LICENSE: {}
        README.md: {}
        lib:
          emit.js: {}
          hoist.js: {}
          index.js: {}
          leap.js: {}
          meta.js: {}
          replaceShorthandObjectMethod.js: {}
          util.js: {}
          visit.js: {}
        package.json: {}
        src:
          emit.js: {}
          hoist.js: {}
          index.js: {}
          leap.js: {}
          meta.js: {}
          replaceShorthandObjectMethod.js: {}
          util.js: {}
          visit.js: {}
      regex-parser:
        LICENSE: {}
        README.md: {}
        lib:
          index.js: {}
          typings:
            regex-parser.d.ts: {}
        package.json: {}
      regexp.prototype.flags:
        .editorconfig: {}
        .eslintrc: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        auto.js: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        polyfill.js: {}
        shim.js: {}
        test:
          implementation.js: {}
          index.js: {}
          shimmed.js: {}
          tests.js: {}
      regexpu-core:
        LICENSE-MIT.txt: {}
        README.md: {}
        data:
          character-class-escape-sets.js: {}
          iu-mappings.js: {}
        package.json: {}
        rewrite-pattern.js: {}
      regjsparser:
        LICENSE.BSD: {}
        README.md: {}
        bin:
          parser: {}
        node_modules:
          .bin:
            jsesc: {}
          jsesc:
            LICENSE-MIT.txt: {}
            README.md: {}
            bin:
              jsesc: {}
            jsesc.js: {}
            man:
              jsesc.1: {}
            package.json: {}
        package.json: {}
        parser.d.ts: {}
        parser.js: {}
      relateurl:
        README.md: {}
        lib:
          constants.js: {}
          format.js: {}
          index.js: {}
          options.js: {}
          parse:
            host.js: {}
            hrefInfo.js: {}
            index.js: {}
            path.js: {}
            port.js: {}
            query.js: {}
            urlstring.js: {}
          relate:
            absolutize.js: {}
            findRelation.js: {}
            index.js: {}
            relativize.js: {}
          util:
            devlog.js: {}
            object.js: {}
            path.js: {}
        license: {}
        package.json: {}
      remark-parse:
        index.d.ts: {}
        index.js: {}
        lib:
          index.d.ts: {}
          index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      remark-rehype:
        index.d.ts: {}
        index.js: {}
        lib:
          index.d.ts: {}
          index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      renderkid:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        SECURITY.md: {}
        docs:
          images:
            bullets-1.png: {}
            display.png: {}
            usage.png: {}
        lib:
          AnsiPainter.js: {}
          Layout.js: {}
          RenderKid.js: {}
          ansiPainter:
            styles.js: {}
            tags.js: {}
          layout:
            Block.js: {}
            SpecialString.js: {}
            block:
              blockAppendor:
                Default.js: {}
                _BlockAppendor.js: {}
              blockPrependor:
                Default.js: {}
                _BlockPrependor.js: {}
              lineAppendor:
                Default.js: {}
                _LineAppendor.js: {}
              linePrependor:
                Default.js: {}
                _LinePrependor.js: {}
              lineWrapper:
                Default.js: {}
                _LineWrapper.js: {}
          renderKid:
            Styles.js: {}
            styleApplier:
              _common.js: {}
              block.js: {}
              inline.js: {}
            styles:
              Rule.js: {}
              StyleSheet.js: {}
              rule:
                DeclarationBlock.js: {}
                MixedDeclarationSet.js: {}
                Selector.js: {}
                declarationBlock:
                  Arbitrary.js: {}
                  Background.js: {}
                  Bullet.js: {}
                  Color.js: {}
                  Display.js: {}
                  Height.js: {}
                  Margin.js: {}
                  MarginBottom.js: {}
                  MarginLeft.js: {}
                  MarginRight.js: {}
                  MarginTop.js: {}
                  Padding.js: {}
                  PaddingBottom.js: {}
                  PaddingLeft.js: {}
                  PaddingRight.js: {}
                  PaddingTop.js: {}
                  Width.js: {}
                  _Declaration.js: {}
                  _Length.js: {}
          tools.js: {}
        package.json: {}
      require-directory:
        .jshintrc: {}
        .npmignore: {}
        .travis.yml: {}
        LICENSE: {}
        README.markdown: {}
        index.js: {}
        package.json: {}
      require-from-string:
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      require-in-the-middle:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      requires-port:
        .npmignore: {}
        .travis.yml: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test.js: {}
      resolve:
        .editorconfig: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        LICENSE: {}
        SECURITY.md: {}
        async.js: {}
        bin:
          resolve: {}
        example:
          async.js: {}
          sync.js: {}
        index.js: {}
        lib:
          async.js: {}
          caller.js: {}
          core.js: {}
          core.json: {}
          homedir.js: {}
          is-core.js: {}
          node-modules-paths.js: {}
          normalize-options.js: {}
          sync.js: {}
        package.json: {}
        readme.markdown: {}
        sync.js: {}
        test:
          core.js: {}
          dotdot:
            abc:
              index.js: {}
            index.js: {}
          dotdot.js: {}
          faulty_basedir.js: {}
          filter.js: {}
          filter_sync.js: {}
          home_paths.js: {}
          home_paths_sync.js: {}
          mock.js: {}
          mock_sync.js: {}
          module_dir:
            xmodules:
              aaa:
                index.js: {}
            ymodules:
              aaa:
                index.js: {}
            zmodules:
              bbb:
                main.js: {}
                package.json: {}
          module_dir.js: {}
          node-modules-paths.js: {}
          node_path:
            x:
              aaa:
                index.js: {}
              ccc:
                index.js: {}
            y:
              bbb:
                index.js: {}
              ccc:
                index.js: {}
          node_path.js: {}
          nonstring.js: {}
          pathfilter:
            deep_ref:
              main.js: {}
          pathfilter.js: {}
          precedence:
            aaa:
              index.js: {}
              main.js: {}
            aaa.js: {}
            bbb:
              main.js: {}
            bbb.js: {}
          precedence.js: {}
          resolver:
            baz:
              doom.js: {}
              package.json: {}
              quux.js: {}
            browser_field:
              a.js: {}
              b.js: {}
              package.json: {}
            cup.coffee: {}
            dot_main:
              index.js: {}
              package.json: {}
            dot_slash_main:
              index.js: {}
              package.json: {}
            false_main:
              index.js: {}
              package.json: {}
            foo.js: {}
            incorrect_main:
              index.js: {}
              package.json: {}
            invalid_main:
              package.json: {}
            mug.coffee: {}
            mug.js: {}
            multirepo:
              lerna.json: {}
              package.json: {}
              packages:
                package-a:
                  index.js: {}
                  package.json: {}
                package-b:
                  index.js: {}
                  package.json: {}
            nested_symlinks:
              mylib:
                async.js: {}
                package.json: {}
                sync.js: {}
            other_path:
              lib:
                other-lib.js: {}
              root.js: {}
            quux:
              foo:
                index.js: {}
            same_names:
              foo:
                index.js: {}
              foo.js: {}
            symlinked:
              _:
                node_modules:
                  foo.js: {}
                symlink_target:
                  .gitkeep: {}
              package:
                bar.js: {}
                package.json: {}
            without_basedir:
              main.js: {}
          resolver.js: {}
          resolver_sync.js: {}
          shadowed_core:
            node_modules:
              util:
                index.js: {}
          shadowed_core.js: {}
          subdirs.js: {}
          symlinks.js: {}
      resolve-cwd:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      resolve-from:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      resolve-url-loader:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        docs:
          advanced-features.md: {}
          basic-problem.svg: {}
          contributing.md: {}
          detailed-problem.svg: {}
          how-it-works.md: {}
          troubleshooting.md: {}
        index.js: {}
        lib:
          engine:
            fail-initialisation.js: {}
            fail-processing.js: {}
            postcss.js: {}
            rework.js: {}
          file-protocol.js: {}
          join-function:
            debug.js: {}
            fs-utils.js: {}
            index.js: {}
          log-to-test-harness.js: {}
          position-algerbra.js: {}
          value-processor.js: {}
        node_modules:
          convert-source-map:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          picocolors:
            LICENSE: {}
            README.md: {}
            package.json: {}
            picocolors.browser.js: {}
            picocolors.d.ts: {}
            picocolors.js: {}
            types.ts: {}
          postcss:
            LICENSE: {}
            README.md: {}
            lib:
              at-rule.js: {}
              comment.js: {}
              container.js: {}
              css-syntax-error.js: {}
              declaration.js: {}
              input.js: {}
              lazy-result.js: {}
              list.js: {}
              map-generator.js: {}
              node.js: {}
              parse.js: {}
              parser.js: {}
              postcss.d.ts: {}
              postcss.js: {}
              previous-map.js: {}
              processor.js: {}
              result.js: {}
              root.js: {}
              rule.js: {}
              stringifier.js: {}
              stringify.js: {}
              terminal-highlight.js: {}
              tokenize.js: {}
              vendor.js: {}
              warn-once.js: {}
              warning.js: {}
            package.json: {}
          source-map:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            dist:
              source-map.debug.js: {}
              source-map.js: {}
              source-map.min.js: {}
              source-map.min.js.map: {}
            lib:
              array-set.js: {}
              base64-vlq.js: {}
              base64.js: {}
              binary-search.js: {}
              mapping-list.js: {}
              quick-sort.js: {}
              source-map-consumer.js: {}
              source-map-generator.js: {}
              source-node.js: {}
              util.js: {}
            package.json: {}
            source-map.d.ts: {}
            source-map.js: {}
        package.json: {}
      resolve.exports:
        dist:
          index.js: {}
          index.mjs: {}
        index.d.ts: {}
        license: {}
        package.json: {}
        readme.md: {}
      retry:
        License: {}
        README.md: {}
        example:
          dns.js: {}
          stop.js: {}
        index.js: {}
        lib:
          retry.js: {}
          retry_operation.js: {}
        package.json: {}
      reusify:
        .coveralls.yml: {}
        .travis.yml: {}
        LICENSE: {}
        README.md: {}
        benchmarks:
          createNoCodeFunction.js: {}
          fib.js: {}
          reuseNoCodeFunction.js: {}
        package.json: {}
        reusify.js: {}
        test.js: {}
      rimraf:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        bin.js: {}
        package.json: {}
        rimraf.js: {}
      rollup:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        dist:
          bin:
            rollup: {}
          es:
            package.json: {}
            rollup.browser.js: {}
            rollup.js: {}
            shared:
              rollup.js: {}
              watch.js: {}
          loadConfigFile.js: {}
          rollup.browser.js: {}
          rollup.browser.js.map: {}
          rollup.d.ts: {}
          rollup.js: {}
          shared:
            index.js: {}
            loadConfigFile.js: {}
            mergeOptions.js: {}
            rollup.js: {}
            watch-cli.js: {}
            watch.js: {}
        package.json: {}
      rollup-plugin-terser:
        LICENSE: {}
        README.md: {}
        node_modules:
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          jest-worker:
            LICENSE: {}
            README.md: {}
            build:
              Farm.d.ts: {}
              Farm.js: {}
              WorkerPool.d.ts: {}
              WorkerPool.js: {}
              base:
                BaseWorkerPool.d.ts: {}
                BaseWorkerPool.js: {}
              index.d.ts: {}
              index.js: {}
              types.d.ts: {}
              types.js: {}
              workers:
                ChildProcessWorker.d.ts: {}
                ChildProcessWorker.js: {}
                NodeThreadsWorker.d.ts: {}
                NodeThreadsWorker.js: {}
                messageParent.d.ts: {}
                messageParent.js: {}
                processChild.d.ts: {}
                processChild.js: {}
                threadChild.d.ts: {}
                threadChild.js: {}
            package.json: {}
          serialize-javascript:
            .vscode:
              settings.json: {}
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
        rollup-plugin-terser.d.ts: {}
        rollup-plugin-terser.js: {}
        rollup-plugin-terser.mjs: {}
        transform.js: {}
      run-parallel:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      run-series:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      safe-array-concat:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      safe-buffer:
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
      safe-regex-test:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      safer-buffer:
        LICENSE: {}
        Porting-Buffer.md: {}
        Readme.md: {}
        dangerous.js: {}
        package.json: {}
        safer.js: {}
        tests.js: {}
      sanitize.css:
        LICENSE.md: {}
        README.md: {}
        assets.css: {}
        forms.css: {}
        package.json: {}
        reduce-motion.css: {}
        sanitize.css: {}
        system-ui.css: {}
        typography.css: {}
        ui-monospace.css: {}
      sass-loader:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        dist:
          SassError.js: {}
          SassWarning.js: {}
          cjs.js: {}
          index.js: {}
          options.json: {}
          utils.js: {}
        package.json: {}
      sax:
        LICENSE: {}
        README.md: {}
        lib:
          sax.js: {}
        package.json: {}
      saxes:
        README.md: {}
        package.json: {}
        saxes.d.ts: {}
        saxes.js: {}
        saxes.js.map: {}
      scheduler:
        LICENSE: {}
        README.md: {}
        cjs:
          scheduler-unstable_mock.development.js: {}
          scheduler-unstable_mock.production.min.js: {}
          scheduler-unstable_post_task.development.js: {}
          scheduler-unstable_post_task.production.min.js: {}
          scheduler.development.js: {}
          scheduler.production.min.js: {}
        index.js: {}
        package.json: {}
        umd:
          scheduler-unstable_mock.development.js: {}
          scheduler-unstable_mock.production.min.js: {}
          scheduler.development.js: {}
          scheduler.production.min.js: {}
          scheduler.profiling.min.js: {}
        unstable_mock.js: {}
        unstable_post_task.js: {}
      schema-utils:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        declarations:
          ValidationError.d.ts: {}
          index.d.ts: {}
          keywords:
            absolutePath.d.ts: {}
            undefinedAsNull.d.ts: {}
          util:
            Range.d.ts: {}
            hints.d.ts: {}
          validate.d.ts: {}
        dist:
          ValidationError.js: {}
          index.js: {}
          keywords:
            absolutePath.js: {}
            undefinedAsNull.js: {}
          util:
            Range.js: {}
            hints.js: {}
          validate.js: {}
        package.json: {}
      select-hose:
        .jscsrc: {}
        .jshintrc: {}
        .npmignore: {}
        .travis.yml: {}
        README.md: {}
        lib:
          hose.js: {}
        package.json: {}
        test:
          api-test.js: {}
          fixtures.js: {}
      selfsigned:
        .jshintrc: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          tests.js: {}
      semver:
        LICENSE: {}
        README.md: {}
        bin:
          semver.js: {}
        classes:
          comparator.js: {}
          index.js: {}
          range.js: {}
          semver.js: {}
        functions:
          clean.js: {}
          cmp.js: {}
          coerce.js: {}
          compare-build.js: {}
          compare-loose.js: {}
          compare.js: {}
          diff.js: {}
          eq.js: {}
          gt.js: {}
          gte.js: {}
          inc.js: {}
          lt.js: {}
          lte.js: {}
          major.js: {}
          minor.js: {}
          neq.js: {}
          parse.js: {}
          patch.js: {}
          prerelease.js: {}
          rcompare.js: {}
          rsort.js: {}
          satisfies.js: {}
          sort.js: {}
          valid.js: {}
        index.js: {}
        internal:
          constants.js: {}
          debug.js: {}
          identifiers.js: {}
          parse-options.js: {}
          re.js: {}
        node_modules:
          lru-cache:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          yallist:
            LICENSE: {}
            README.md: {}
            iterator.js: {}
            package.json: {}
            yallist.js: {}
        package.json: {}
        preload.js: {}
        range.bnf: {}
        ranges:
          gtr.js: {}
          intersects.js: {}
          ltr.js: {}
          max-satisfying.js: {}
          min-satisfying.js: {}
          min-version.js: {}
          outside.js: {}
          simplify.js: {}
          subset.js: {}
          to-comparators.js: {}
          valid.js: {}
      send:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        SECURITY.md: {}
        index.js: {}
        node_modules:
          debug:
            .coveralls.yml: {}
            .eslintrc: {}
            .npmignore: {}
            .travis.yml: {}
            CHANGELOG.md: {}
            LICENSE: {}
            Makefile: {}
            README.md: {}
            component.json: {}
            karma.conf.js: {}
            node.js: {}
            node_modules:
              ms:
                index.js: {}
                license.md: {}
                package.json: {}
                readme.md: {}
            package.json: {}
            src:
              browser.js: {}
              debug.js: {}
              index.js: {}
              inspector-log.js: {}
              node.js: {}
          ms:
            index.js: {}
            license.md: {}
            package.json: {}
            readme.md: {}
        package.json: {}
      serialize-javascript:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      serve-index:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        node_modules:
          debug:
            .coveralls.yml: {}
            .eslintrc: {}
            .npmignore: {}
            .travis.yml: {}
            CHANGELOG.md: {}
            LICENSE: {}
            Makefile: {}
            README.md: {}
            component.json: {}
            karma.conf.js: {}
            node.js: {}
            package.json: {}
            src:
              browser.js: {}
              debug.js: {}
              index.js: {}
              inspector-log.js: {}
              node.js: {}
          depd:
            History.md: {}
            LICENSE: {}
            Readme.md: {}
            index.js: {}
            lib:
              browser:
                index.js: {}
              compat:
                callsite-tostring.js: {}
                event-listener-count.js: {}
                index.js: {}
            package.json: {}
          http-errors:
            HISTORY.md: {}
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          inherits:
            LICENSE: {}
            README.md: {}
            inherits.js: {}
            inherits_browser.js: {}
            package.json: {}
          ms:
            index.js: {}
            license.md: {}
            package.json: {}
            readme.md: {}
          setprototypeof:
            LICENSE: {}
            README.md: {}
            index.d.ts: {}
            index.js: {}
            package.json: {}
          statuses:
            HISTORY.md: {}
            LICENSE: {}
            README.md: {}
            codes.json: {}
            index.js: {}
            package.json: {}
        package.json: {}
        public:
          directory.html: {}
          icons:
            application_xp.png: {}
            application_xp_terminal.png: {}
            box.png: {}
            cd.png: {}
            controller.png: {}
            drive.png: {}
            film.png: {}
            folder.png: {}
            font.png: {}
            image.png: {}
            map.png: {}
            page.png: {}
            page_add.png: {}
            page_attach.png: {}
            page_code.png: {}
            page_copy.png: {}
            page_delete.png: {}
            page_edit.png: {}
            page_error.png: {}
            page_excel.png: {}
            page_find.png: {}
            page_gear.png: {}
            page_go.png: {}
            page_green.png: {}
            page_key.png: {}
            page_lightning.png: {}
            page_link.png: {}
            page_paintbrush.png: {}
            page_paste.png: {}
            page_red.png: {}
            page_refresh.png: {}
            page_save.png: {}
            page_white.png: {}
            page_white_acrobat.png: {}
            page_white_actionscript.png: {}
            page_white_add.png: {}
            page_white_c.png: {}
            page_white_camera.png: {}
            page_white_cd.png: {}
            page_white_code.png: {}
            page_white_code_red.png: {}
            page_white_coldfusion.png: {}
            page_white_compressed.png: {}
            page_white_copy.png: {}
            page_white_cplusplus.png: {}
            page_white_csharp.png: {}
            page_white_cup.png: {}
            page_white_database.png: {}
            page_white_delete.png: {}
            page_white_dvd.png: {}
            page_white_edit.png: {}
            page_white_error.png: {}
            page_white_excel.png: {}
            page_white_find.png: {}
            page_white_flash.png: {}
            page_white_freehand.png: {}
            page_white_gear.png: {}
            page_white_get.png: {}
            page_white_go.png: {}
            page_white_h.png: {}
            page_white_horizontal.png: {}
            page_white_key.png: {}
            page_white_lightning.png: {}
            page_white_link.png: {}
            page_white_magnify.png: {}
            page_white_medal.png: {}
            page_white_office.png: {}
            page_white_paint.png: {}
            page_white_paintbrush.png: {}
            page_white_paste.png: {}
            page_white_php.png: {}
            page_white_picture.png: {}
            page_white_powerpoint.png: {}
            page_white_put.png: {}
            page_white_ruby.png: {}
            page_white_stack.png: {}
            page_white_star.png: {}
            page_white_swoosh.png: {}
            page_white_text.png: {}
            page_white_text_width.png: {}
            page_white_tux.png: {}
            page_white_vector.png: {}
            page_white_visualstudio.png: {}
            page_white_width.png: {}
            page_white_word.png: {}
            page_white_world.png: {}
            page_white_wrench.png: {}
            page_white_zip.png: {}
            page_word.png: {}
            page_world.png: {}
          style.css: {}
      serve-static:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      set-function-length:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        env.d.ts: {}
        env.js: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        tsconfig.json: {}
      set-function-name:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        tsconfig.json: {}
      setprototypeof:
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      shebang-command:
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      shebang-regex:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      shell-quote:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        example:
          env.js: {}
          op.js: {}
          parse.js: {}
          quote.js: {}
        index.js: {}
        package.json: {}
        parse.js: {}
        quote.js: {}
        security.md: {}
        test:
          comment.js: {}
          env.js: {}
          env_fn.js: {}
          op.js: {}
          parse.js: {}
          quote.js: {}
          set.js: {}
      shimmer:
        .travis.yml: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          init.tap.js: {}
          massUnwrap.tap.js: {}
          massWrap.tap.js: {}
          unwrap.tap.js: {}
          wrap.tap.js: {}
      side-channel:
        .editorconfig: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      signal-exit:
        LICENSE.txt: {}
        README.md: {}
        index.js: {}
        package.json: {}
        signals.js: {}
      sisteransi:
        license: {}
        package.json: {}
        readme.md: {}
        src:
          index.js: {}
          sisteransi.d.ts: {}
      slash:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      smart-buffer:
        .prettierrc.yaml: {}
        .travis.yml: {}
        LICENSE: {}
        README.md: {}
        build:
          smartbuffer.js: {}
          smartbuffer.js.map: {}
          utils.js: {}
          utils.js.map: {}
        docs:
          CHANGELOG.md: {}
          README_v3.md: {}
          ROADMAP.md: {}
        package.json: {}
        typings:
          smartbuffer.d.ts: {}
          utils.d.ts: {}
      socket.io-client:
        LICENSE: {}
        README.md: {}
        build:
          cjs:
            browser-entrypoint.d.ts: {}
            browser-entrypoint.js: {}
            contrib:
              backo2.d.ts: {}
              backo2.js: {}
            index.d.ts: {}
            index.js: {}
            manager.d.ts: {}
            manager.js: {}
            on.d.ts: {}
            on.js: {}
            socket.d.ts: {}
            socket.js: {}
            url.d.ts: {}
            url.js: {}
          esm:
            browser-entrypoint.d.ts: {}
            browser-entrypoint.js: {}
            contrib:
              backo2.d.ts: {}
              backo2.js: {}
            index.d.ts: {}
            index.js: {}
            manager.d.ts: {}
            manager.js: {}
            on.d.ts: {}
            on.js: {}
            package.json: {}
            socket.d.ts: {}
            socket.js: {}
            url.d.ts: {}
            url.js: {}
          esm-debug:
            browser-entrypoint.d.ts: {}
            browser-entrypoint.js: {}
            contrib:
              backo2.d.ts: {}
              backo2.js: {}
            index.d.ts: {}
            index.js: {}
            manager.d.ts: {}
            manager.js: {}
            on.d.ts: {}
            on.js: {}
            package.json: {}
            socket.d.ts: {}
            socket.js: {}
            url.d.ts: {}
            url.js: {}
        dist:
          socket.io.esm.min.js: {}
          socket.io.esm.min.js.map: {}
          socket.io.js: {}
          socket.io.js.map: {}
          socket.io.min.js: {}
          socket.io.min.js.map: {}
          socket.io.msgpack.min.js: {}
          socket.io.msgpack.min.js.map: {}
        package.json: {}
      socket.io-parser:
        LICENSE: {}
        Readme.md: {}
        build:
          cjs:
            binary.d.ts: {}
            binary.js: {}
            index.d.ts: {}
            index.js: {}
            is-binary.d.ts: {}
            is-binary.js: {}
            package.json: {}
          esm:
            binary.d.ts: {}
            binary.js: {}
            index.d.ts: {}
            index.js: {}
            is-binary.d.ts: {}
            is-binary.js: {}
            package.json: {}
          esm-debug:
            binary.d.ts: {}
            binary.js: {}
            index.d.ts: {}
            index.js: {}
            is-binary.d.ts: {}
            is-binary.js: {}
            package.json: {}
        package.json: {}
      sockjs:
        COPYING: {}
        Changelog: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        lib:
          chunking-test.js: {}
          iframe.js: {}
          sockjs.js: {}
          trans-eventsource.js: {}
          trans-htmlfile.js: {}
          trans-jsonp.js: {}
          trans-websocket.js: {}
          trans-xhr.js: {}
          transport.js: {}
          utils.js: {}
          webjs.js: {}
        package.json: {}
      socks:
        .eslintrc.cjs: {}
        .prettierrc.yaml: {}
        LICENSE: {}
        README.md: {}
        build:
          client:
            socksclient.js: {}
            socksclient.js.map: {}
          common:
            constants.js: {}
            constants.js.map: {}
            helpers.js: {}
            helpers.js.map: {}
            receivebuffer.js: {}
            receivebuffer.js.map: {}
            util.js: {}
            util.js.map: {}
          index.js: {}
          index.js.map: {}
        docs:
          examples:
            index.md: {}
            javascript:
              associateExample.md: {}
              bindExample.md: {}
              connectExample.md: {}
            typescript:
              associateExample.md: {}
              bindExample.md: {}
              connectExample.md: {}
          index.md: {}
          migratingFromV1.md: {}
        package.json: {}
        typings:
          client:
            socksclient.d.ts: {}
          common:
            constants.d.ts: {}
            helpers.d.ts: {}
            receivebuffer.d.ts: {}
            util.d.ts: {}
          index.d.ts: {}
      socks-proxy-agent:
        LICENSE: {}
        README.md: {}
        dist:
          index.d.ts: {}
          index.d.ts.map: {}
          index.js: {}
          index.js.map: {}
        node_modules:
          agent-base:
            LICENSE: {}
            README.md: {}
            dist:
              helpers.d.ts: {}
              helpers.d.ts.map: {}
              helpers.js: {}
              helpers.js.map: {}
              index.d.ts: {}
              index.d.ts.map: {}
              index.js: {}
              index.js.map: {}
            package.json: {}
        package.json: {}
      source-list-map:
        LICENSE: {}
        README.md: {}
        lib:
          CodeNode.js: {}
          MappingsContext.js: {}
          SingleLineNode.js: {}
          SourceListMap.js: {}
          SourceNode.js: {}
          base64-vlq.js: {}
          fromStringWithSourceMap.js: {}
          helpers.js: {}
          index.js: {}
        package.json: {}
      source-map:
        LICENSE: {}
        README.md: {}
        dist:
          source-map.js: {}
        lib:
          array-set.js: {}
          base64-vlq.js: {}
          base64.js: {}
          binary-search.js: {}
          mapping-list.js: {}
          mappings.wasm: {}
          read-wasm.js: {}
          source-map-consumer.js: {}
          source-map-generator.js: {}
          source-node.js: {}
          util.js: {}
          wasm.js: {}
        package.json: {}
        source-map.d.ts: {}
        source-map.js: {}
      source-map-js:
        LICENSE: {}
        README.md: {}
        lib:
          array-set.js: {}
          base64-vlq.js: {}
          base64.js: {}
          binary-search.js: {}
          mapping-list.js: {}
          quick-sort.js: {}
          source-map-consumer.js: {}
          source-map-generator.js: {}
          source-node.js: {}
          util.js: {}
        package.json: {}
        source-map.d.ts: {}
        source-map.js: {}
      source-map-loader:
        LICENSE: {}
        README.md: {}
        dist:
          cjs.js: {}
          index.js: {}
          labels-to-names.js: {}
          options.json: {}
          parse-data-url.js: {}
          utils.js: {}
        package.json: {}
      source-map-support:
        LICENSE.md: {}
        README.md: {}
        browser-source-map-support.js: {}
        node_modules:
          source-map:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            dist:
              source-map.debug.js: {}
              source-map.js: {}
              source-map.min.js: {}
              source-map.min.js.map: {}
            lib:
              array-set.js: {}
              base64-vlq.js: {}
              base64.js: {}
              binary-search.js: {}
              mapping-list.js: {}
              quick-sort.js: {}
              source-map-consumer.js: {}
              source-map-generator.js: {}
              source-node.js: {}
              util.js: {}
            package.json: {}
            source-map.d.ts: {}
            source-map.js: {}
        package.json: {}
        register-hook-require.js: {}
        register.js: {}
        source-map-support.js: {}
      sourcemap-codec:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        dist:
          sourcemap-codec.es.js: {}
          sourcemap-codec.es.js.map: {}
          sourcemap-codec.umd.js: {}
          sourcemap-codec.umd.js.map: {}
          types:
            sourcemap-codec.d.ts: {}
        package.json: {}
      space-separated-tokens:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      spdy:
        .travis.yml: {}
        README.md: {}
        lib:
          spdy:
            agent.js: {}
            handle.js: {}
            request.js: {}
            response.js: {}
            server.js: {}
            socket.js: {}
          spdy.js: {}
        package.json: {}
        test:
          client-test.js: {}
          fixtures.js: {}
          server-test.js: {}
      spdy-transport:
        .travis.yml: {}
        README.md: {}
        lib:
          spdy-transport:
            connection.js: {}
            priority.js: {}
            protocol:
              base:
                constants.js: {}
                framer.js: {}
                index.js: {}
                parser.js: {}
                scheduler.js: {}
                utils.js: {}
              http2:
                constants.js: {}
                framer.js: {}
                hpack-pool.js: {}
                index.js: {}
                parser.js: {}
              spdy:
                constants.js: {}
                dictionary.js: {}
                framer.js: {}
                index.js: {}
                parser.js: {}
                zlib-pool.js: {}
            stream.js: {}
            utils.js: {}
            window.js: {}
          spdy-transport.js: {}
        package.json: {}
      sprintf-js:
        .npmignore: {}
        LICENSE: {}
        README.md: {}
        bower.json: {}
        demo:
          angular.html: {}
        dist:
          angular-sprintf.min.js: {}
          angular-sprintf.min.js.map: {}
          angular-sprintf.min.map: {}
          sprintf.min.js: {}
          sprintf.min.js.map: {}
          sprintf.min.map: {}
        gruntfile.js: {}
        package.json: {}
        src:
          angular-sprintf.js: {}
          sprintf.js: {}
        test:
          test.js: {}
      stable:
        README.md: {}
        index.d.ts: {}
        package.json: {}
        stable.js: {}
        stable.min.js: {}
      stack-utils:
        LICENSE.md: {}
        index.js: {}
        node_modules:
          escape-string-regexp:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
        readme.md: {}
      stackframe:
        LICENSE: {}
        README.md: {}
        dist:
          stackframe.js: {}
          stackframe.min.js: {}
          stackframe.min.js.map: {}
        package.json: {}
        stackframe.d.ts: {}
        stackframe.js: {}
      static-eval:
        .travis.yml: {}
        LICENSE: {}
        example:
          eval.js: {}
          vars.js: {}
        index.js: {}
        node_modules:
          .bin:
            escodegen: {}
            esgenerate: {}
          escodegen:
            LICENSE.BSD: {}
            README.md: {}
            bin:
              escodegen.js: {}
              esgenerate.js: {}
            escodegen.js: {}
            package.json: {}
          estraverse:
            .jshintrc: {}
            LICENSE.BSD: {}
            README.md: {}
            estraverse.js: {}
            gulpfile.js: {}
            package.json: {}
          levn:
            LICENSE: {}
            README.md: {}
            lib:
              cast.js: {}
              coerce.js: {}
              index.js: {}
              parse-string.js: {}
              parse.js: {}
            package.json: {}
          optionator:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            lib:
              help.js: {}
              index.js: {}
              util.js: {}
            package.json: {}
          prelude-ls:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            lib:
              Func.js: {}
              List.js: {}
              Num.js: {}
              Obj.js: {}
              Str.js: {}
              index.js: {}
            package.json: {}
          source-map:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            dist:
              source-map.debug.js: {}
              source-map.js: {}
              source-map.min.js: {}
              source-map.min.js.map: {}
            lib:
              array-set.js: {}
              base64-vlq.js: {}
              base64.js: {}
              binary-search.js: {}
              mapping-list.js: {}
              quick-sort.js: {}
              source-map-consumer.js: {}
              source-map-generator.js: {}
              source-node.js: {}
              util.js: {}
            package.json: {}
            source-map.d.ts: {}
            source-map.js: {}
          type-check:
            LICENSE: {}
            README.md: {}
            lib:
              check.js: {}
              index.js: {}
              parse-type.js: {}
            package.json: {}
        package.json: {}
        readme.markdown: {}
        test:
          eval.js: {}
          prop.js: {}
          template-strings.js: {}
      statuses:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        codes.json: {}
        index.js: {}
        package.json: {}
      stop-iteration-iterator:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      string-length:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      string-natural-compare:
        LICENSE.txt: {}
        README.md: {}
        natural-compare.js: {}
        package.json: {}
      string-width:
        index.d.ts: {}
        index.js: {}
        license: {}
        node_modules:
          emoji-regex:
            LICENSE-MIT.txt: {}
            README.md: {}
            es2015:
              index.js: {}
              text.js: {}
            index.d.ts: {}
            index.js: {}
            package.json: {}
            text.js: {}
        package.json: {}
        readme.md: {}
      string-width-cjs:
        index.d.ts: {}
        index.js: {}
        license: {}
        node_modules:
          emoji-regex:
            LICENSE-MIT.txt: {}
            README.md: {}
            es2015:
              index.js: {}
              text.js: {}
            index.d.ts: {}
            index.js: {}
            package.json: {}
            text.js: {}
        package.json: {}
        readme.md: {}
      string.prototype.matchall:
        .editorconfig: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        auto.js: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        polyfill-regexp-matchall.js: {}
        polyfill.js: {}
        regexp-matchall.js: {}
        shim.js: {}
        test:
          index.js: {}
          shimmed.js: {}
          tests.js: {}
      string.prototype.trim:
        .editorconfig: {}
        .eslintrc: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        auto.js: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        polyfill.js: {}
        shim.js: {}
        test:
          implementation.js: {}
          index.js: {}
          shimmed.js: {}
          tests.js: {}
      string.prototype.trimend:
        .editorconfig: {}
        .eslintrc: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        auto.js: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        polyfill.js: {}
        shim.js: {}
        test:
          implementation.js: {}
          index.js: {}
          shimmed.js: {}
          tests.js: {}
      string.prototype.trimstart:
        .editorconfig: {}
        .eslintrc: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        auto.js: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        polyfill.js: {}
        shim.js: {}
        test:
          implementation.js: {}
          index.js: {}
          shimmed.js: {}
          tests.js: {}
      string_decoder:
        LICENSE: {}
        README.md: {}
        lib:
          string_decoder.js: {}
        package.json: {}
      stringify-entities:
        index.d.ts: {}
        index.js: {}
        lib:
          constant:
            dangerous.d.ts: {}
            dangerous.js: {}
          core.d.ts: {}
          core.js: {}
          index.d.ts: {}
          index.js: {}
          util:
            format-basic.d.ts: {}
            format-basic.js: {}
            format-smart.d.ts: {}
            format-smart.js: {}
            to-decimal.d.ts: {}
            to-decimal.js: {}
            to-hexadecimal.d.ts: {}
            to-hexadecimal.js: {}
            to-named.d.ts: {}
            to-named.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      stringify-object:
        LICENSE: {}
        index.js: {}
        package.json: {}
        readme.md: {}
      strip-ansi:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      strip-ansi-cjs:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      strip-bom:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      strip-comments:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        lib:
          Node.js: {}
          compile.js: {}
          languages.js: {}
          parse.js: {}
        package.json: {}
      strip-final-newline:
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      strip-indent:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      strip-json-comments:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      style-loader:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        dist:
          cjs.js: {}
          index.js: {}
          options.json: {}
          runtime:
            injectStylesIntoLinkTag.js: {}
            injectStylesIntoStyleTag.js: {}
            insertBySelector.js: {}
            insertStyleElement.js: {}
            isEqualLocals.js: {}
            isOldIE.js: {}
            setAttributesWithAttributes.js: {}
            setAttributesWithAttributesAndNonce.js: {}
            setAttributesWithoutAttributes.js: {}
            singletonStyleDomAPI.js: {}
            styleDomAPI.js: {}
            styleTagTransform.js: {}
          utils.js: {}
        package.json: {}
      style-to-object:
        LICENSE: {}
        README.md: {}
        cjs:
          index.d.ts: {}
          index.d.ts.map: {}
          index.js: {}
          index.js.map: {}
        dist:
          style-to-object.js: {}
          style-to-object.js.map: {}
          style-to-object.min.js: {}
          style-to-object.min.js.map: {}
        esm:
          index.d.mts: {}
          index.mjs: {}
        package.json: {}
        src:
          index.ts: {}
      stylehacks:
        LICENSE-MIT: {}
        README.md: {}
        package.json: {}
        src:
          dictionary:
            browsers.js: {}
            identifiers.js: {}
            postcss.js: {}
            tags.js: {}
          exists.js: {}
          index.js: {}
          isMixin.js: {}
          plugin.js: {}
          plugins:
            bodyEmpty.js: {}
            htmlCombinatorCommentBody.js: {}
            htmlFirstChild.js: {}
            important.js: {}
            index.js: {}
            leadingStar.js: {}
            leadingUnderscore.js: {}
            mediaSlash0.js: {}
            mediaSlash0Slash9.js: {}
            mediaSlash9.js: {}
            slash9.js: {}
            starHtml.js: {}
            trailingSlashComma.js: {}
        types:
          dictionary:
            browsers.d.ts: {}
            identifiers.d.ts: {}
            postcss.d.ts: {}
            tags.d.ts: {}
          exists.d.ts: {}
          index.d.ts: {}
          isMixin.d.ts: {}
          plugin.d.ts: {}
          plugins:
            bodyEmpty.d.ts: {}
            htmlCombinatorCommentBody.d.ts: {}
            htmlFirstChild.d.ts: {}
            important.d.ts: {}
            index.d.ts: {}
            leadingStar.d.ts: {}
            leadingUnderscore.d.ts: {}
            mediaSlash0.d.ts: {}
            mediaSlash0Slash9.d.ts: {}
            mediaSlash9.d.ts: {}
            slash9.d.ts: {}
            starHtml.d.ts: {}
            trailingSlashComma.d.ts: {}
      sucrase:
        LICENSE: {}
        README.md: {}
        bin:
          sucrase: {}
          sucrase-node: {}
        dist:
          CJSImportProcessor.js: {}
          HelperManager.js: {}
          NameManager.js: {}
          Options-gen-types.js: {}
          Options.js: {}
          TokenProcessor.js: {}
          cli.js: {}
          computeSourceMap.js: {}
          esm:
            CJSImportProcessor.js: {}
            HelperManager.js: {}
            NameManager.js: {}
            Options-gen-types.js: {}
            Options.js: {}
            TokenProcessor.js: {}
            cli.js: {}
            computeSourceMap.js: {}
            identifyShadowedGlobals.js: {}
            index.js: {}
            parser:
              index.js: {}
              plugins:
                flow.js: {}
                jsx:
                  index.js: {}
                  xhtml.js: {}
                types.js: {}
                typescript.js: {}
              tokenizer:
                index.js: {}
                keywords.js: {}
                readWord.js: {}
                readWordTree.js: {}
                state.js: {}
                types.js: {}
              traverser:
                base.js: {}
                expression.js: {}
                index.js: {}
                lval.js: {}
                statement.js: {}
                util.js: {}
              util:
                charcodes.js: {}
                identifier.js: {}
                whitespace.js: {}
            register.js: {}
            transformers:
              CJSImportTransformer.js: {}
              ESMImportTransformer.js: {}
              FlowTransformer.js: {}
              JSXTransformer.js: {}
              JestHoistTransformer.js: {}
              NumericSeparatorTransformer.js: {}
              OptionalCatchBindingTransformer.js: {}
              OptionalChainingNullishTransformer.js: {}
              ReactDisplayNameTransformer.js: {}
              ReactHotLoaderTransformer.js: {}
              RootTransformer.js: {}
              Transformer.js: {}
              TypeScriptTransformer.js: {}
            util:
              elideImportEquals.js: {}
              formatTokens.js: {}
              getClassInfo.js: {}
              getDeclarationInfo.js: {}
              getIdentifierNames.js: {}
              getImportExportSpecifierInfo.js: {}
              getJSXPragmaInfo.js: {}
              getNonTypeIdentifiers.js: {}
              getTSImportedNames.js: {}
              isAsyncOperation.js: {}
              isExportFrom.js: {}
              isIdentifier.js: {}
              removeMaybeImportAttributes.js: {}
              shouldElideDefaultExport.js: {}
          identifyShadowedGlobals.js: {}
          index.js: {}
          parser:
            index.js: {}
            plugins:
              flow.js: {}
              jsx:
                index.js: {}
                xhtml.js: {}
              types.js: {}
              typescript.js: {}
            tokenizer:
              index.js: {}
              keywords.js: {}
              readWord.js: {}
              readWordTree.js: {}
              state.js: {}
              types.js: {}
            traverser:
              base.js: {}
              expression.js: {}
              index.js: {}
              lval.js: {}
              statement.js: {}
              util.js: {}
            util:
              charcodes.js: {}
              identifier.js: {}
              whitespace.js: {}
          register.js: {}
          transformers:
            CJSImportTransformer.js: {}
            ESMImportTransformer.js: {}
            FlowTransformer.js: {}
            JSXTransformer.js: {}
            JestHoistTransformer.js: {}
            NumericSeparatorTransformer.js: {}
            OptionalCatchBindingTransformer.js: {}
            OptionalChainingNullishTransformer.js: {}
            ReactDisplayNameTransformer.js: {}
            ReactHotLoaderTransformer.js: {}
            RootTransformer.js: {}
            Transformer.js: {}
            TypeScriptTransformer.js: {}
          types:
            CJSImportProcessor.d.ts: {}
            HelperManager.d.ts: {}
            NameManager.d.ts: {}
            Options-gen-types.d.ts: {}
            Options.d.ts: {}
            TokenProcessor.d.ts: {}
            cli.d.ts: {}
            computeSourceMap.d.ts: {}
            identifyShadowedGlobals.d.ts: {}
            index.d.ts: {}
            parser:
              index.d.ts: {}
              plugins:
                flow.d.ts: {}
                jsx:
                  index.d.ts: {}
                  xhtml.d.ts: {}
                types.d.ts: {}
                typescript.d.ts: {}
              tokenizer:
                index.d.ts: {}
                keywords.d.ts: {}
                readWord.d.ts: {}
                readWordTree.d.ts: {}
                state.d.ts: {}
                types.d.ts: {}
              traverser:
                base.d.ts: {}
                expression.d.ts: {}
                index.d.ts: {}
                lval.d.ts: {}
                statement.d.ts: {}
                util.d.ts: {}
              util:
                charcodes.d.ts: {}
                identifier.d.ts: {}
                whitespace.d.ts: {}
            register.d.ts: {}
            transformers:
              CJSImportTransformer.d.ts: {}
              ESMImportTransformer.d.ts: {}
              FlowTransformer.d.ts: {}
              JSXTransformer.d.ts: {}
              JestHoistTransformer.d.ts: {}
              NumericSeparatorTransformer.d.ts: {}
              OptionalCatchBindingTransformer.d.ts: {}
              OptionalChainingNullishTransformer.d.ts: {}
              ReactDisplayNameTransformer.d.ts: {}
              ReactHotLoaderTransformer.d.ts: {}
              RootTransformer.d.ts: {}
              Transformer.d.ts: {}
              TypeScriptTransformer.d.ts: {}
            util:
              elideImportEquals.d.ts: {}
              formatTokens.d.ts: {}
              getClassInfo.d.ts: {}
              getDeclarationInfo.d.ts: {}
              getIdentifierNames.d.ts: {}
              getImportExportSpecifierInfo.d.ts: {}
              getJSXPragmaInfo.d.ts: {}
              getNonTypeIdentifiers.d.ts: {}
              getTSImportedNames.d.ts: {}
              isAsyncOperation.d.ts: {}
              isExportFrom.d.ts: {}
              isIdentifier.d.ts: {}
              removeMaybeImportAttributes.d.ts: {}
              shouldElideDefaultExport.d.ts: {}
          util:
            elideImportEquals.js: {}
            formatTokens.js: {}
            getClassInfo.js: {}
            getDeclarationInfo.js: {}
            getIdentifierNames.js: {}
            getImportExportSpecifierInfo.js: {}
            getJSXPragmaInfo.js: {}
            getNonTypeIdentifiers.js: {}
            getTSImportedNames.js: {}
            isAsyncOperation.js: {}
            isExportFrom.js: {}
            isIdentifier.js: {}
            removeMaybeImportAttributes.js: {}
            shouldElideDefaultExport.js: {}
        node_modules:
          .bin:
            glob: {}
          brace-expansion:
            .github:
              FUNDING.yml: {}
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
          commander:
            CHANGELOG.md: {}
            LICENSE: {}
            Readme.md: {}
            index.js: {}
            package.json: {}
            typings:
              index.d.ts: {}
          glob:
            LICENSE: {}
            README.md: {}
            dist:
              commonjs:
                glob.d.ts: {}
                glob.d.ts.map: {}
                glob.js: {}
                glob.js.map: {}
                has-magic.d.ts: {}
                has-magic.d.ts.map: {}
                has-magic.js: {}
                has-magic.js.map: {}
                ignore.d.ts: {}
                ignore.d.ts.map: {}
                ignore.js: {}
                ignore.js.map: {}
                index.d.ts: {}
                index.d.ts.map: {}
                index.js: {}
                index.js.map: {}
                package.json: {}
                pattern.d.ts: {}
                pattern.d.ts.map: {}
                pattern.js: {}
                pattern.js.map: {}
                processor.d.ts: {}
                processor.d.ts.map: {}
                processor.js: {}
                processor.js.map: {}
                walker.d.ts: {}
                walker.d.ts.map: {}
                walker.js: {}
                walker.js.map: {}
              esm:
                bin.d.mts: {}
                bin.d.mts.map: {}
                bin.mjs: {}
                bin.mjs.map: {}
                glob.d.ts: {}
                glob.d.ts.map: {}
                glob.js: {}
                glob.js.map: {}
                has-magic.d.ts: {}
                has-magic.d.ts.map: {}
                has-magic.js: {}
                has-magic.js.map: {}
                ignore.d.ts: {}
                ignore.d.ts.map: {}
                ignore.js: {}
                ignore.js.map: {}
                index.d.ts: {}
                index.d.ts.map: {}
                index.js: {}
                index.js.map: {}
                package.json: {}
                pattern.d.ts: {}
                pattern.d.ts.map: {}
                pattern.js: {}
                pattern.js.map: {}
                processor.d.ts: {}
                processor.d.ts.map: {}
                processor.js: {}
                processor.js.map: {}
                walker.d.ts: {}
                walker.d.ts.map: {}
                walker.js: {}
                walker.js.map: {}
            package.json: {}
          minimatch:
            LICENSE: {}
            README.md: {}
            dist:
              commonjs:
                assert-valid-pattern.d.ts: {}
                assert-valid-pattern.d.ts.map: {}
                assert-valid-pattern.js: {}
                assert-valid-pattern.js.map: {}
                ast.d.ts: {}
                ast.d.ts.map: {}
                ast.js: {}
                ast.js.map: {}
                brace-expressions.d.ts: {}
                brace-expressions.d.ts.map: {}
                brace-expressions.js: {}
                brace-expressions.js.map: {}
                escape.d.ts: {}
                escape.d.ts.map: {}
                escape.js: {}
                escape.js.map: {}
                index.d.ts: {}
                index.d.ts.map: {}
                index.js: {}
                index.js.map: {}
                package.json: {}
                unescape.d.ts: {}
                unescape.d.ts.map: {}
                unescape.js: {}
                unescape.js.map: {}
              esm:
                assert-valid-pattern.d.ts: {}
                assert-valid-pattern.d.ts.map: {}
                assert-valid-pattern.js: {}
                assert-valid-pattern.js.map: {}
                ast.d.ts: {}
                ast.d.ts.map: {}
                ast.js: {}
                ast.js.map: {}
                brace-expressions.d.ts: {}
                brace-expressions.d.ts.map: {}
                brace-expressions.js: {}
                brace-expressions.js.map: {}
                escape.d.ts: {}
                escape.d.ts.map: {}
                escape.js: {}
                escape.js.map: {}
                index.d.ts: {}
                index.d.ts.map: {}
                index.js: {}
                index.js.map: {}
                package.json: {}
                unescape.d.ts: {}
                unescape.d.ts.map: {}
                unescape.js: {}
                unescape.js.map: {}
            package.json: {}
        package.json: {}
        register:
          index.js: {}
          js.js: {}
          jsx.js: {}
          ts-legacy-module-interop.js: {}
          ts.js: {}
          tsx-legacy-module-interop.js: {}
          tsx.js: {}
        ts-node-plugin:
          index.js: {}
      supports-color:
        browser.js: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      supports-hyperlinks:
        browser.js: {}
        index.js: {}
        license: {}
        node_modules:
          has-flag:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          supports-color:
            browser.js: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
        readme.md: {}
      supports-preserve-symlinks-flag:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        browser.js: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      svg-parser:
        CHANGELOG.md: {}
        README.md: {}
        dist:
          svg-parser.esm.js: {}
          svg-parser.esm.js.map: {}
          svg-parser.umd.js: {}
          svg-parser.umd.js.map: {}
        package.json: {}
      svgo:
        .svgo.yml: {}
        CHANGELOG.md: {}
        LICENSE: {}
        Makefile: {}
        README.md: {}
        README.ru.md: {}
        bin:
          svgo: {}
        lib:
          css-tools.js: {}
          svgo:
            coa.js: {}
            config.js: {}
            css-class-list.js: {}
            css-select-adapter.js: {}
            css-style-declaration.js: {}
            js2svg.js: {}
            jsAPI.js: {}
            plugins.js: {}
            svg2js.js: {}
            tools.js: {}
          svgo.js: {}
        node_modules:
          css-select:
            LICENSE: {}
            README.md: {}
            index.d.ts: {}
            index.js: {}
            lib:
              attributes.js: {}
              compile.js: {}
              general.js: {}
              procedure.json: {}
              pseudos.js: {}
              sort.js: {}
            package.json: {}
          css-what:
            LICENSE: {}
            lib:
              index.d.ts: {}
              index.d.ts.map: {}
              index.js: {}
              parse.d.ts: {}
              parse.d.ts.map: {}
              parse.js: {}
              stringify.d.ts: {}
              stringify.d.ts.map: {}
              stringify.js: {}
            package.json: {}
            readme.md: {}
          dom-serializer:
            LICENSE: {}
            README.md: {}
            foreignNames.json: {}
            index.d.ts: {}
            index.js: {}
            package.json: {}
          domutils:
            .travis.yml: {}
            LICENSE: {}
            index.js: {}
            lib:
              helpers.js: {}
              legacy.js: {}
              manipulation.js: {}
              querying.js: {}
              stringify.js: {}
              traversal.js: {}
            node_modules:
              domelementtype:
                LICENSE: {}
                index.js: {}
                package.json: {}
                readme.md: {}
            package.json: {}
            readme.md: {}
            test:
              fixture.js: {}
              tests:
                helpers.js: {}
                legacy.js: {}
                traversal.js: {}
              utils.js: {}
          nth-check:
            LICENSE: {}
            README.md: {}
            compile.js: {}
            index.js: {}
            package.json: {}
            parse.js: {}
        package.json: {}
        plugins:
          _collections.js: {}
          _path.js: {}
          _transforms.js: {}
          addAttributesToSVGElement.js: {}
          addClassesToSVGElement.js: {}
          cleanupAttrs.js: {}
          cleanupEnableBackground.js: {}
          cleanupIDs.js: {}
          cleanupListOfValues.js: {}
          cleanupNumericValues.js: {}
          collapseGroups.js: {}
          convertColors.js: {}
          convertEllipseToCircle.js: {}
          convertPathData.js: {}
          convertShapeToPath.js: {}
          convertStyleToAttrs.js: {}
          convertTransform.js: {}
          inlineStyles.js: {}
          mergePaths.js: {}
          minifyStyles.js: {}
          moveElemsAttrsToGroup.js: {}
          moveGroupAttrsToElems.js: {}
          prefixIds.js: {}
          removeAttributesBySelector.js: {}
          removeAttrs.js: {}
          removeComments.js: {}
          removeDesc.js: {}
          removeDimensions.js: {}
          removeDoctype.js: {}
          removeEditorsNSData.js: {}
          removeElementsByAttr.js: {}
          removeEmptyAttrs.js: {}
          removeEmptyContainers.js: {}
          removeEmptyText.js: {}
          removeHiddenElems.js: {}
          removeMetadata.js: {}
          removeNonInheritableGroupAttrs.js: {}
          removeOffCanvasPaths.js: {}
          removeRasterImages.js: {}
          removeScriptElement.js: {}
          removeStyleElement.js: {}
          removeTitle.js: {}
          removeUnknownsAndDefaults.js: {}
          removeUnusedNS.js: {}
          removeUselessDefs.js: {}
          removeUselessStrokeAndFill.js: {}
          removeViewBox.js: {}
          removeXMLNS.js: {}
          removeXMLProcInst.js: {}
          reusePaths.js: {}
          sortAttrs.js: {}
          sortDefsChildren.js: {}
      symbol-tree:
        LICENSE: {}
        README.md: {}
        lib:
          SymbolTree.js: {}
          SymbolTreeNode.js: {}
          TreeIterator.js: {}
          TreePosition.js: {}
        package.json: {}
      systeminformation:
        LICENSE: {}
        README.md: {}
        lib:
          audio.js: {}
          battery.js: {}
          bluetooth.js: {}
          cli.js: {}
          cpu.js: {}
          docker.js: {}
          dockerSocket.js: {}
          filesystem.js: {}
          graphics.js: {}
          index.d.ts: {}
          index.js: {}
          internet.js: {}
          memory.js: {}
          network.js: {}
          osinfo.js: {}
          printer.js: {}
          processes.js: {}
          system.js: {}
          usb.js: {}
          users.js: {}
          util.js: {}
          virtualbox.js: {}
          wifi.js: {}
        package.json: {}
      tailwindcss:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        base.css: {}
        colors.d.ts: {}
        colors.js: {}
        components.css: {}
        defaultConfig.d.ts: {}
        defaultConfig.js: {}
        defaultTheme.d.ts: {}
        defaultTheme.js: {}
        lib:
          cli:
            build:
              deps.js: {}
              index.js: {}
              plugin.js: {}
              utils.js: {}
              watching.js: {}
            help:
              index.js: {}
            index.js: {}
            init:
              index.js: {}
          cli-peer-dependencies.js: {}
          cli.js: {}
          corePluginList.js: {}
          corePlugins.js: {}
          css:
            LICENSE: {}
            preflight.css: {}
          featureFlags.js: {}
          index.js: {}
          lib:
            cacheInvalidation.js: {}
            collapseAdjacentRules.js: {}
            collapseDuplicateDeclarations.js: {}
            content.js: {}
            defaultExtractor.js: {}
            evaluateTailwindFunctions.js: {}
            expandApplyAtRules.js: {}
            expandTailwindAtRules.js: {}
            findAtConfigPath.js: {}
            generateRules.js: {}
            getModuleDependencies.js: {}
            load-config.js: {}
            normalizeTailwindDirectives.js: {}
            offsets.js: {}
            partitionApplyAtRules.js: {}
            regex.js: {}
            remap-bitfield.js: {}
            resolveDefaultsAtRules.js: {}
            setupContextUtils.js: {}
            setupTrackingContext.js: {}
            sharedState.js: {}
            substituteScreenAtRules.js: {}
          plugin.js: {}
          postcss-plugins:
            nesting:
              README.md: {}
              index.js: {}
              plugin.js: {}
          processTailwindFeatures.js: {}
          public:
            colors.js: {}
            create-plugin.js: {}
            default-config.js: {}
            default-theme.js: {}
            load-config.js: {}
            resolve-config.js: {}
          util:
            applyImportantSelector.js: {}
            bigSign.js: {}
            buildMediaQuery.js: {}
            cloneDeep.js: {}
            cloneNodes.js: {}
            color.js: {}
            colorNames.js: {}
            configurePlugins.js: {}
            createPlugin.js: {}
            createUtilityPlugin.js: {}
            dataTypes.js: {}
            defaults.js: {}
            escapeClassName.js: {}
            escapeCommas.js: {}
            flattenColorPalette.js: {}
            formatVariantSelector.js: {}
            getAllConfigs.js: {}
            hashConfig.js: {}
            isKeyframeRule.js: {}
            isPlainObject.js: {}
            isSyntacticallyValidPropertyValue.js: {}
            log.js: {}
            nameClass.js: {}
            negateValue.js: {}
            normalizeConfig.js: {}
            normalizeScreens.js: {}
            parseAnimationValue.js: {}
            parseBoxShadowValue.js: {}
            parseDependency.js: {}
            parseGlob.js: {}
            parseObjectStyles.js: {}
            pluginUtils.js: {}
            prefixSelector.js: {}
            pseudoElements.js: {}
            removeAlphaVariables.js: {}
            resolveConfig.js: {}
            resolveConfigPath.js: {}
            responsive.js: {}
            splitAtTopLevelOnly.js: {}
            tap.js: {}
            toColorValue.js: {}
            toPath.js: {}
            transformThemeValue.js: {}
            validateConfig.js: {}
            validateFormalSyntax.js: {}
            withAlphaVariable.js: {}
          value-parser:
            LICENSE: {}
            README.md: {}
            index.d.js: {}
            index.js: {}
            parse.js: {}
            stringify.js: {}
            unit.js: {}
            walk.js: {}
        loadConfig.d.ts: {}
        loadConfig.js: {}
        nesting:
          index.d.ts: {}
          index.js: {}
        package.json: {}
        peers:
          index.js: {}
        plugin.d.ts: {}
        plugin.js: {}
        prettier.config.js: {}
        resolveConfig.d.ts: {}
        resolveConfig.js: {}
        screens.css: {}
        scripts:
          create-plugin-list.js: {}
          generate-types.js: {}
          release-channel.js: {}
          release-notes.js: {}
          type-utils.js: {}
        src:
          cli:
            build:
              deps.js: {}
              index.js: {}
              plugin.js: {}
              utils.js: {}
              watching.js: {}
            help:
              index.js: {}
            index.js: {}
            init:
              index.js: {}
          cli-peer-dependencies.js: {}
          cli.js: {}
          corePluginList.js: {}
          corePlugins.js: {}
          css:
            LICENSE: {}
            preflight.css: {}
          featureFlags.js: {}
          index.js: {}
          lib:
            cacheInvalidation.js: {}
            collapseAdjacentRules.js: {}
            collapseDuplicateDeclarations.js: {}
            content.js: {}
            defaultExtractor.js: {}
            evaluateTailwindFunctions.js: {}
            expandApplyAtRules.js: {}
            expandTailwindAtRules.js: {}
            findAtConfigPath.js: {}
            generateRules.js: {}
            getModuleDependencies.js: {}
            load-config.ts: {}
            normalizeTailwindDirectives.js: {}
            offsets.js: {}
            partitionApplyAtRules.js: {}
            regex.js: {}
            remap-bitfield.js: {}
            resolveDefaultsAtRules.js: {}
            setupContextUtils.js: {}
            setupTrackingContext.js: {}
            sharedState.js: {}
            substituteScreenAtRules.js: {}
          plugin.js: {}
          postcss-plugins:
            nesting:
              README.md: {}
              index.js: {}
              plugin.js: {}
          processTailwindFeatures.js: {}
          public:
            colors.js: {}
            create-plugin.js: {}
            default-config.js: {}
            default-theme.js: {}
            load-config.js: {}
            resolve-config.js: {}
          util:
            applyImportantSelector.js: {}
            bigSign.js: {}
            buildMediaQuery.js: {}
            cloneDeep.js: {}
            cloneNodes.js: {}
            color.js: {}
            colorNames.js: {}
            configurePlugins.js: {}
            createPlugin.js: {}
            createUtilityPlugin.js: {}
            dataTypes.js: {}
            defaults.js: {}
            escapeClassName.js: {}
            escapeCommas.js: {}
            flattenColorPalette.js: {}
            formatVariantSelector.js: {}
            getAllConfigs.js: {}
            hashConfig.js: {}
            isKeyframeRule.js: {}
            isPlainObject.js: {}
            isSyntacticallyValidPropertyValue.js: {}
            log.js: {}
            nameClass.js: {}
            negateValue.js: {}
            normalizeConfig.js: {}
            normalizeScreens.js: {}
            parseAnimationValue.js: {}
            parseBoxShadowValue.js: {}
            parseDependency.js: {}
            parseGlob.js: {}
            parseObjectStyles.js: {}
            pluginUtils.js: {}
            prefixSelector.js: {}
            pseudoElements.js: {}
            removeAlphaVariables.js: {}
            resolveConfig.js: {}
            resolveConfigPath.js: {}
            responsive.js: {}
            splitAtTopLevelOnly.js: {}
            tap.js: {}
            toColorValue.js: {}
            toPath.js: {}
            transformThemeValue.js: {}
            validateConfig.js: {}
            validateFormalSyntax.js: {}
            withAlphaVariable.js: {}
          value-parser:
            LICENSE: {}
            README.md: {}
            index.d.ts: {}
            index.js: {}
            parse.js: {}
            stringify.js: {}
            unit.js: {}
            walk.js: {}
        stubs:
          .npmignore: {}
          .prettierrc.json: {}
          config.full.js: {}
          config.simple.js: {}
          postcss.config.cjs: {}
          postcss.config.js: {}
          tailwind.config.cjs: {}
          tailwind.config.js: {}
          tailwind.config.ts: {}
        tailwind.css: {}
        types:
          config.d.ts: {}
          generated:
            .gitkeep: {}
            colors.d.ts: {}
            corePluginList.d.ts: {}
            default-theme.d.ts: {}
          index.d.ts: {}
        utilities.css: {}
        variants.css: {}
      tapable:
        LICENSE: {}
        README.md: {}
        lib:
          AsyncParallelBailHook.js: {}
          AsyncParallelHook.js: {}
          AsyncSeriesBailHook.js: {}
          AsyncSeriesHook.js: {}
          AsyncSeriesLoopHook.js: {}
          AsyncSeriesWaterfallHook.js: {}
          Hook.js: {}
          HookCodeFactory.js: {}
          HookMap.js: {}
          MultiHook.js: {}
          SyncBailHook.js: {}
          SyncHook.js: {}
          SyncLoopHook.js: {}
          SyncWaterfallHook.js: {}
          index.js: {}
          util-browser.js: {}
        package.json: {}
        tapable.d.ts: {}
      temp-dir:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      tempy:
        index.d.ts: {}
        index.js: {}
        license: {}
        node_modules:
          type-fest:
            index.d.ts: {}
            license: {}
            package.json: {}
            readme.md: {}
            source:
              async-return-type.d.ts: {}
              basic.d.ts: {}
              conditional-except.d.ts: {}
              conditional-keys.d.ts: {}
              conditional-pick.d.ts: {}
              except.d.ts: {}
              fixed-length-array.d.ts: {}
              literal-union.d.ts: {}
              merge-exclusive.d.ts: {}
              merge.d.ts: {}
              mutable.d.ts: {}
              opaque.d.ts: {}
              package-json.d.ts: {}
              partial-deep.d.ts: {}
              promisable.d.ts: {}
              promise-value.d.ts: {}
              readonly-deep.d.ts: {}
              require-at-least-one.d.ts: {}
              require-exactly-one.d.ts: {}
              set-optional.d.ts: {}
              set-required.d.ts: {}
              stringified.d.ts: {}
              tsconfig-json.d.ts: {}
              union-to-intersection.d.ts: {}
              value-of.d.ts: {}
        package.json: {}
        readme.md: {}
      terminal-link:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      terser:
        CHANGELOG.md: {}
        LICENSE: {}
        PATRONS.md: {}
        README.md: {}
        bin:
          package.json: {}
          terser: {}
          uglifyjs: {}
        dist:
          .gitkeep: {}
          bundle.min.js: {}
          package.json: {}
        lib:
          ast.js: {}
          cli.js: {}
          compress:
            common.js: {}
            compressor-flags.js: {}
            drop-side-effect-free.js: {}
            drop-unused.js: {}
            evaluate.js: {}
            global-defs.js: {}
            index.js: {}
            inference.js: {}
            inline.js: {}
            native-objects.js: {}
            reduce-vars.js: {}
            tighten-body.js: {}
          equivalent-to.js: {}
          minify.js: {}
          mozilla-ast.js: {}
          output.js: {}
          parse.js: {}
          propmangle.js: {}
          scope.js: {}
          size.js: {}
          sourcemap.js: {}
          transform.js: {}
          utils:
            first_in_statement.js: {}
            index.js: {}
        main.js: {}
        node_modules:
          commander:
            CHANGELOG.md: {}
            LICENSE: {}
            Readme.md: {}
            index.js: {}
            package.json: {}
            typings:
              index.d.ts: {}
        package.json: {}
        tools:
          domprops.js: {}
          exit.cjs: {}
          props.html: {}
          terser.d.ts: {}
      terser-webpack-plugin:
        LICENSE: {}
        README.md: {}
        dist:
          index.js: {}
          minify.js: {}
          options.json: {}
          utils.js: {}
        package.json: {}
        types:
          index.d.ts: {}
          minify.d.ts: {}
          utils.d.ts: {}
      test-exclude:
        CHANGELOG.md: {}
        LICENSE.txt: {}
        README.md: {}
        index.js: {}
        is-outside-dir-posix.js: {}
        is-outside-dir-win32.js: {}
        is-outside-dir.js: {}
        package.json: {}
      text-table:
        .travis.yml: {}
        LICENSE: {}
        example:
          align.js: {}
          center.js: {}
          dotalign.js: {}
          doubledot.js: {}
          table.js: {}
        index.js: {}
        package.json: {}
        readme.markdown: {}
        test:
          align.js: {}
          ansi-colors.js: {}
          center.js: {}
          dotalign.js: {}
          doubledot.js: {}
          table.js: {}
      thenify:
        History.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      thenify-all:
        History.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      throat:
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        index.js.flow: {}
        package.json: {}
      thunky:
        .travis.yml: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        promise.js: {}
        test.js: {}
      tmpl:
        lib:
          tmpl.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      to-fast-properties:
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      to-regex-range:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      toidentifier:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      tough-cookie:
        LICENSE: {}
        README.md: {}
        lib:
          cookie.js: {}
          memstore.js: {}
          pathMatch.js: {}
          permuteDomain.js: {}
          pubsuffix-psl.js: {}
          store.js: {}
          utilHelper.js: {}
          validators.js: {}
          version.js: {}
        node_modules:
          universalify:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
        package.json: {}
      tr46:
        LICENSE.md: {}
        README.md: {}
        index.js: {}
        lib:
          mappingTable.json: {}
          regexes.js: {}
          statusMapping.js: {}
        package.json: {}
      trim-lines:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      trough:
        index.d.ts: {}
        index.d.ts.map: {}
        index.js: {}
        lib:
          index.d.ts: {}
          index.d.ts.map: {}
          index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      tryer:
        .gitlab-ci.yml: {}
        .jshintrc: {}
        .travis.yml: {}
        AUTHORS: {}
        CHANGES.md: {}
        COPYING: {}
        README.md: {}
        bower.json: {}
        component.json: {}
        lib:
          tryer.min.js: {}
        package.json: {}
        src:
          tryer.js: {}
        test:
          index.html: {}
          unit.js: {}
      ts-interface-checker:
        LICENSE: {}
        README.md: {}
        dist:
          index.d.ts: {}
          index.js: {}
          types.d.ts: {}
          types.js: {}
          util.d.ts: {}
          util.js: {}
        package.json: {}
      tsconfig-paths:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        lib:
          __tests__:
            config-loader.test.d.ts: {}
            config-loader.test.js: {}
            config-loader.test.js.map: {}
            data:
              match-path-data.d.ts: {}
              match-path-data.js: {}
              match-path-data.js.map: {}
            filesystem.test.d.ts: {}
            filesystem.test.js: {}
            filesystem.test.js.map: {}
            mapping-entry.test.d.ts: {}
            mapping-entry.test.js: {}
            mapping-entry.test.js.map: {}
            match-path-async.test.d.ts: {}
            match-path-async.test.js: {}
            match-path-async.test.js.map: {}
            match-path-sync.test.d.ts: {}
            match-path-sync.test.js: {}
            match-path-sync.test.js.map: {}
            try-path.test.d.ts: {}
            try-path.test.js: {}
            try-path.test.js.map: {}
            tsconfig-loader.test.d.ts: {}
            tsconfig-loader.test.js: {}
            tsconfig-loader.test.js.map: {}
          config-loader.d.ts: {}
          config-loader.js: {}
          config-loader.js.map: {}
          filesystem.d.ts: {}
          filesystem.js: {}
          filesystem.js.map: {}
          index.d.ts: {}
          index.js: {}
          index.js.map: {}
          mapping-entry.d.ts: {}
          mapping-entry.js: {}
          mapping-entry.js.map: {}
          match-path-async.d.ts: {}
          match-path-async.js: {}
          match-path-async.js.map: {}
          match-path-sync.d.ts: {}
          match-path-sync.js: {}
          match-path-sync.js.map: {}
          options.d.ts: {}
          options.js: {}
          options.js.map: {}
          register.d.ts: {}
          register.js: {}
          register.js.map: {}
          try-path.d.ts: {}
          try-path.js: {}
          try-path.js.map: {}
          tsconfig-loader.d.ts: {}
          tsconfig-loader.js: {}
          tsconfig-loader.js.map: {}
        node_modules:
          .bin:
            json5: {}
          json5:
            LICENSE.md: {}
            README.md: {}
            dist:
              index.js: {}
            lib:
              cli.js: {}
              index.js: {}
              parse.js: {}
              register.js: {}
              require.js: {}
              stringify.js: {}
              unicode.js: {}
              util.js: {}
            package.json: {}
          strip-bom:
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
        register.js: {}
        src:
          __tests__:
            config-loader.test.ts: {}
            data:
              match-path-data.ts: {}
            filesystem.test.ts: {}
            mapping-entry.test.ts: {}
            match-path-async.test.ts: {}
            match-path-sync.test.ts: {}
            try-path.test.ts: {}
            tsconfig-loader.test.ts: {}
            tsconfig-named.json: {}
          config-loader.ts: {}
          filesystem.ts: {}
          index.ts: {}
          mapping-entry.ts: {}
          match-path-async.ts: {}
          match-path-sync.ts: {}
          options.ts: {}
          register.ts: {}
          try-path.ts: {}
          tsconfig-loader.ts: {}
      tslib:
        CopyrightNotice.txt: {}
        LICENSE.txt: {}
        README.md: {}
        SECURITY.md: {}
        modules:
          index.d.ts: {}
          index.js: {}
          package.json: {}
        package.json: {}
        tslib.d.ts: {}
        tslib.es6.html: {}
        tslib.es6.js: {}
        tslib.es6.mjs: {}
        tslib.html: {}
        tslib.js: {}
      tsutils:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        index.js.map: {}
        node_modules:
          tslib:
            CopyrightNotice.txt: {}
            LICENSE.txt: {}
            README.md: {}
            modules:
              index.js: {}
              package.json: {}
            package.json: {}
            test:
              validateModuleExportsMatchCommonJS:
                index.js: {}
                package.json: {}
            tslib.d.ts: {}
            tslib.es6.html: {}
            tslib.es6.js: {}
            tslib.html: {}
            tslib.js: {}
        package.json: {}
        typeguard:
          '2.8':
            index.d.ts: {}
            index.js: {}
            index.js.map: {}
            node.d.ts: {}
            node.js: {}
            node.js.map: {}
            type.d.ts: {}
            type.js: {}
            type.js.map: {}
          '2.9':
            index.d.ts: {}
            index.js: {}
            index.js.map: {}
            node.d.ts: {}
            node.js: {}
            node.js.map: {}
            type.d.ts: {}
            type.js: {}
            type.js.map: {}
          '3.0':
            index.d.ts: {}
            index.js: {}
            index.js.map: {}
            node.d.ts: {}
            node.js: {}
            node.js.map: {}
            type.d.ts: {}
            type.js: {}
            type.js.map: {}
          '3.2':
            index.d.ts: {}
            index.js: {}
            index.js.map: {}
            node.d.ts: {}
            node.js: {}
            node.js.map: {}
            type.d.ts: {}
            type.js: {}
            type.js.map: {}
          index.d.ts: {}
          index.js: {}
          index.js.map: {}
          next:
            index.d.ts: {}
            index.js: {}
            index.js.map: {}
            node.d.ts: {}
            node.js: {}
            node.js.map: {}
            type.d.ts: {}
            type.js: {}
            type.js.map: {}
          node.d.ts: {}
          node.js: {}
          node.js.map: {}
          type.d.ts: {}
          type.js: {}
          type.js.map: {}
        util:
          control-flow.d.ts: {}
          control-flow.js: {}
          control-flow.js.map: {}
          convert-ast.d.ts: {}
          convert-ast.js: {}
          convert-ast.js.map: {}
          index.d.ts: {}
          index.js: {}
          index.js.map: {}
          type.d.ts: {}
          type.js: {}
          type.js.map: {}
          usage.d.ts: {}
          usage.js: {}
          usage.js.map: {}
          util.d.ts: {}
          util.js: {}
          util.js.map: {}
      tv4:
        LICENSE.txt: {}
        README.md: {}
        lang:
          de.js: {}
          es.js: {}
          fr.js: {}
          nb.js: {}
          pl-PL.js: {}
          pt-PT.js: {}
          sv-SE.js: {}
          zh-CN.js: {}
        package.json: {}
        tv4.async-jquery.js: {}
        tv4.js: {}
      tx2:
        .travis.yml: {}
        API.md: {}
        LICENSE: {}
        README.md: {}
        example:
          events.js: {}
        index.js: {}
        package.json: {}
        src:
          actions.js: {}
          events.js: {}
          index.js: {}
          issues.js: {}
          metrics.js: {}
          utils:
            probes:
              BinaryHeap.js: {}
              Counter.js: {}
              EDS.js: {}
              EWMA.js: {}
              Histogram.js: {}
              Meter.js: {}
              units.js: {}
        test:
          action.mocha.js: {}
          event.mocha.js: {}
          issue.mocha.js: {}
          metric.mocha.js: {}
      type-check:
        LICENSE: {}
        README.md: {}
        lib:
          check.js: {}
          index.js: {}
          parse-type.js: {}
        package.json: {}
      type-detect:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        type-detect.js: {}
      type-fest:
        base.d.ts: {}
        index.d.ts: {}
        license: {}
        package.json: {}
        readme.md: {}
        source:
          async-return-type.d.ts: {}
          asyncify.d.ts: {}
          basic.d.ts: {}
          conditional-except.d.ts: {}
          conditional-keys.d.ts: {}
          conditional-pick.d.ts: {}
          entries.d.ts: {}
          entry.d.ts: {}
          except.d.ts: {}
          fixed-length-array.d.ts: {}
          iterable-element.d.ts: {}
          literal-union.d.ts: {}
          merge-exclusive.d.ts: {}
          merge.d.ts: {}
          mutable.d.ts: {}
          opaque.d.ts: {}
          package-json.d.ts: {}
          partial-deep.d.ts: {}
          promisable.d.ts: {}
          promise-value.d.ts: {}
          readonly-deep.d.ts: {}
          require-at-least-one.d.ts: {}
          require-exactly-one.d.ts: {}
          set-optional.d.ts: {}
          set-required.d.ts: {}
          set-return-type.d.ts: {}
          simplify.d.ts: {}
          stringified.d.ts: {}
          tsconfig-json.d.ts: {}
          typed-array.d.ts: {}
          union-to-intersection.d.ts: {}
          utilities.d.ts: {}
          value-of.d.ts: {}
        ts41:
          camel-case.d.ts: {}
          delimiter-case.d.ts: {}
          get.d.ts: {}
          index.d.ts: {}
          kebab-case.d.ts: {}
          pascal-case.d.ts: {}
          snake-case.d.ts: {}
          utilities.d.ts: {}
      type-is:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      typed-array-buffer:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      typed-array-byte-length:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      typed-array-byte-offset:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      typed-array-length:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      typedarray-to-buffer:
        .airtap.yml: {}
        .travis.yml: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          basic.js: {}
      typescript:
        LICENSE.txt: {}
        README.md: {}
        SECURITY.md: {}
        ThirdPartyNoticeText.txt: {}
        bin:
          tsc: {}
          tsserver: {}
        lib:
          README.md: {}
          cancellationToken.js: {}
          cs:
            diagnosticMessages.generated.json: {}
          de:
            diagnosticMessages.generated.json: {}
          dynamicImportCompat.js: {}
          es:
            diagnosticMessages.generated.json: {}
          fr:
            diagnosticMessages.generated.json: {}
          it:
            diagnosticMessages.generated.json: {}
          ja:
            diagnosticMessages.generated.json: {}
          ko:
            diagnosticMessages.generated.json: {}
          lib.d.ts: {}
          lib.dom.d.ts: {}
          lib.dom.iterable.d.ts: {}
          lib.es2015.collection.d.ts: {}
          lib.es2015.core.d.ts: {}
          lib.es2015.d.ts: {}
          lib.es2015.generator.d.ts: {}
          lib.es2015.iterable.d.ts: {}
          lib.es2015.promise.d.ts: {}
          lib.es2015.proxy.d.ts: {}
          lib.es2015.reflect.d.ts: {}
          lib.es2015.symbol.d.ts: {}
          lib.es2015.symbol.wellknown.d.ts: {}
          lib.es2016.array.include.d.ts: {}
          lib.es2016.d.ts: {}
          lib.es2016.full.d.ts: {}
          lib.es2017.d.ts: {}
          lib.es2017.full.d.ts: {}
          lib.es2017.intl.d.ts: {}
          lib.es2017.object.d.ts: {}
          lib.es2017.sharedmemory.d.ts: {}
          lib.es2017.string.d.ts: {}
          lib.es2017.typedarrays.d.ts: {}
          lib.es2018.asyncgenerator.d.ts: {}
          lib.es2018.asynciterable.d.ts: {}
          lib.es2018.d.ts: {}
          lib.es2018.full.d.ts: {}
          lib.es2018.intl.d.ts: {}
          lib.es2018.promise.d.ts: {}
          lib.es2018.regexp.d.ts: {}
          lib.es2019.array.d.ts: {}
          lib.es2019.d.ts: {}
          lib.es2019.full.d.ts: {}
          lib.es2019.intl.d.ts: {}
          lib.es2019.object.d.ts: {}
          lib.es2019.string.d.ts: {}
          lib.es2019.symbol.d.ts: {}
          lib.es2020.bigint.d.ts: {}
          lib.es2020.d.ts: {}
          lib.es2020.date.d.ts: {}
          lib.es2020.full.d.ts: {}
          lib.es2020.intl.d.ts: {}
          lib.es2020.number.d.ts: {}
          lib.es2020.promise.d.ts: {}
          lib.es2020.sharedmemory.d.ts: {}
          lib.es2020.string.d.ts: {}
          lib.es2020.symbol.wellknown.d.ts: {}
          lib.es2021.d.ts: {}
          lib.es2021.full.d.ts: {}
          lib.es2021.intl.d.ts: {}
          lib.es2021.promise.d.ts: {}
          lib.es2021.string.d.ts: {}
          lib.es2021.weakref.d.ts: {}
          lib.es2022.array.d.ts: {}
          lib.es2022.d.ts: {}
          lib.es2022.error.d.ts: {}
          lib.es2022.full.d.ts: {}
          lib.es2022.intl.d.ts: {}
          lib.es2022.object.d.ts: {}
          lib.es2022.sharedmemory.d.ts: {}
          lib.es2022.string.d.ts: {}
          lib.es5.d.ts: {}
          lib.es6.d.ts: {}
          lib.esnext.d.ts: {}
          lib.esnext.full.d.ts: {}
          lib.esnext.intl.d.ts: {}
          lib.esnext.promise.d.ts: {}
          lib.esnext.string.d.ts: {}
          lib.esnext.weakref.d.ts: {}
          lib.scripthost.d.ts: {}
          lib.webworker.d.ts: {}
          lib.webworker.importscripts.d.ts: {}
          lib.webworker.iterable.d.ts: {}
          pl:
            diagnosticMessages.generated.json: {}
          protocol.d.ts: {}
          pt-br:
            diagnosticMessages.generated.json: {}
          ru:
            diagnosticMessages.generated.json: {}
          tr:
            diagnosticMessages.generated.json: {}
          tsc.js: {}
          tsserver.js: {}
          tsserverlibrary.d.ts: {}
          tsserverlibrary.js: {}
          typesMap.json: {}
          typescript.d.ts: {}
          typescript.js: {}
          typescriptServices.d.ts: {}
          typescriptServices.js: {}
          typingsInstaller.js: {}
          watchGuard.js: {}
          zh-cn:
            diagnosticMessages.generated.json: {}
          zh-tw:
            diagnosticMessages.generated.json: {}
        package.json: {}
      unbox-primitive:
        .editorconfig: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      uncontrollable:
        .babelrc: {}
        .travis.yml: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        lib:
          LICENSE: {}
          README.md: {}
          cjs:
            hook.d.ts: {}
            hook.js: {}
            index.d.ts: {}
            index.js: {}
            uncontrollable.js: {}
            utils.d.ts: {}
            utils.js: {}
          esm:
            hook.d.ts: {}
            hook.js: {}
            index.d.ts: {}
            index.js: {}
            uncontrollable.js: {}
            utils.d.ts: {}
            utils.js: {}
          hook.js: {}
          index.js: {}
          package.json: {}
          utils.js: {}
        manual-releases.md: {}
        package.json: {}
        test:
          .eslintrc: {}
          test.js: {}
          types-test.tsx: {}
        tsconfig.json: {}
      underscore:
        LICENSE: {}
        README.md: {}
        amd:
          _apply.js: {}
          _applyProperty.js: {}
          _arrayAccessors.js: {}
          _arrayMutators.js: {}
          _baseCreate.js: {}
          _baseIteratee.js: {}
          _binarySearch.js: {}
          _bindCb.js: {}
          _bindCb4.js: {}
          _byValue.js: {}
          _cb.js: {}
          _chainResult.js: {}
          _collectNonEnumProps.js: {}
          _createAssigner.js: {}
          _createEscaper.js: {}
          _createIndexFinder.js: {}
          _createPredicateIndexFinder.js: {}
          _createReduce.js: {}
          _createSizePropertyCheck.js: {}
          _deepGet.js: {}
          _escapeMap.js: {}
          _executeBound.js: {}
          _extremum.js: {}
          _flatten.js: {}
          _forceNumericMinMax.js: {}
          _getByteLength.js: {}
          _getLength.js: {}
          _greater.js: {}
          _group.js: {}
          _has.js: {}
          _hasObjectTag.js: {}
          _isArrayLike.js: {}
          _isBufferLike.js: {}
          _keyInObj.js: {}
          _less.js: {}
          _lessEqual.js: {}
          _linearSearch.js: {}
          _mapReduce.js: {}
          _methodFingerprint.js: {}
          _optimizeCb.js: {}
          _push.js: {}
          _pusher.js: {}
          _sequence.js: {}
          _setup.js: {}
          _shallowProperty.js: {}
          _slice.js: {}
          _strictEqual.js: {}
          _stringTagBug.js: {}
          _tagTester.js: {}
          _toBufferView.js: {}
          _toPath.js: {}
          _unescapeMap.js: {}
          _unmethodize.js: {}
          _wrapArrayAccessor.js: {}
          _wrapArrayMutator.js: {}
          after.js: {}
          allKeys.js: {}
          before.js: {}
          bind.js: {}
          bindAll.js: {}
          chain.js: {}
          chunk.js: {}
          clone.js: {}
          compact.js: {}
          compose.js: {}
          concat.js: {}
          constant.js: {}
          contains.js: {}
          countBy.js: {}
          create.js: {}
          debounce.js: {}
          defaults.js: {}
          defer.js: {}
          delay.js: {}
          difference.js: {}
          each.js: {}
          escape.js: {}
          every.js: {}
          extend.js: {}
          extendOwn.js: {}
          filter.js: {}
          find.js: {}
          findIndex.js: {}
          findKey.js: {}
          findLastIndex.js: {}
          findWhere.js: {}
          first.js: {}
          flatten.js: {}
          functions.js: {}
          get.js: {}
          groupBy.js: {}
          has.js: {}
          identity.js: {}
          index-default.js: {}
          index.js: {}
          indexBy.js: {}
          indexOf.js: {}
          initial.js: {}
          intersection.js: {}
          invert.js: {}
          invoke.js: {}
          isArguments.js: {}
          isArray.js: {}
          isArrayBuffer.js: {}
          isBoolean.js: {}
          isDataView.js: {}
          isDate.js: {}
          isElement.js: {}
          isEmpty.js: {}
          isEqual.js: {}
          isError.js: {}
          isFinite.js: {}
          isFunction.js: {}
          isMap.js: {}
          isMatch.js: {}
          isNaN.js: {}
          isNull.js: {}
          isNumber.js: {}
          isObject.js: {}
          isRegExp.js: {}
          isSet.js: {}
          isString.js: {}
          isSymbol.js: {}
          isTypedArray.js: {}
          isUndefined.js: {}
          isWeakMap.js: {}
          isWeakSet.js: {}
          iteratee.js: {}
          join.js: {}
          keys.js: {}
          last.js: {}
          lastIndexOf.js: {}
          map.js: {}
          mapObject.js: {}
          matcher.js: {}
          max.js: {}
          memoize.js: {}
          min.js: {}
          mixin.js: {}
          negate.js: {}
          noop.js: {}
          now.js: {}
          object.js: {}
          omit.js: {}
          once.js: {}
          pairs.js: {}
          partial.js: {}
          partition.js: {}
          pick.js: {}
          pluck.js: {}
          pop.js: {}
          property.js: {}
          propertyOf.js: {}
          push.js: {}
          random.js: {}
          range.js: {}
          reduce.js: {}
          reduceRight.js: {}
          reject.js: {}
          rest.js: {}
          restArguments.js: {}
          result.js: {}
          reverse.js: {}
          sample.js: {}
          shift.js: {}
          shuffle.js: {}
          size.js: {}
          slice.js: {}
          some.js: {}
          sort.js: {}
          sortBy.js: {}
          sortedIndex.js: {}
          sortedLastIndex.js: {}
          splice.js: {}
          tap.js: {}
          template.js: {}
          templateSettings.js: {}
          throttle.js: {}
          times.js: {}
          toArray.js: {}
          toPath.js: {}
          toString.js: {}
          underscore-array-methods.js: {}
          underscore.js: {}
          unescape.js: {}
          union.js: {}
          uniq.js: {}
          uniqueId.js: {}
          unshift.js: {}
          unzip.js: {}
          value.js: {}
          values.js: {}
          where.js: {}
          without.js: {}
          wrap.js: {}
          zip.js: {}
        cjs:
          _apply.js: {}
          _applyProperty.js: {}
          _arrayAccessors.js: {}
          _arrayMutators.js: {}
          _baseCreate.js: {}
          _baseIteratee.js: {}
          _binarySearch.js: {}
          _bindCb.js: {}
          _bindCb4.js: {}
          _byValue.js: {}
          _cb.js: {}
          _chainResult.js: {}
          _collectNonEnumProps.js: {}
          _createAssigner.js: {}
          _createEscaper.js: {}
          _createIndexFinder.js: {}
          _createPredicateIndexFinder.js: {}
          _createReduce.js: {}
          _createSizePropertyCheck.js: {}
          _deepGet.js: {}
          _escapeMap.js: {}
          _executeBound.js: {}
          _extremum.js: {}
          _flatten.js: {}
          _forceNumericMinMax.js: {}
          _getByteLength.js: {}
          _getLength.js: {}
          _greater.js: {}
          _group.js: {}
          _has.js: {}
          _hasObjectTag.js: {}
          _isArrayLike.js: {}
          _isBufferLike.js: {}
          _keyInObj.js: {}
          _less.js: {}
          _lessEqual.js: {}
          _linearSearch.js: {}
          _mapReduce.js: {}
          _methodFingerprint.js: {}
          _optimizeCb.js: {}
          _push.js: {}
          _pusher.js: {}
          _sequence.js: {}
          _setup.js: {}
          _shallowProperty.js: {}
          _slice.js: {}
          _strictEqual.js: {}
          _stringTagBug.js: {}
          _tagTester.js: {}
          _toBufferView.js: {}
          _toPath.js: {}
          _unescapeMap.js: {}
          _unmethodize.js: {}
          _wrapArrayAccessor.js: {}
          _wrapArrayMutator.js: {}
          after.js: {}
          allKeys.js: {}
          before.js: {}
          bind.js: {}
          bindAll.js: {}
          chain.js: {}
          chunk.js: {}
          clone.js: {}
          compact.js: {}
          compose.js: {}
          concat.js: {}
          constant.js: {}
          contains.js: {}
          countBy.js: {}
          create.js: {}
          debounce.js: {}
          defaults.js: {}
          defer.js: {}
          delay.js: {}
          difference.js: {}
          each.js: {}
          escape.js: {}
          every.js: {}
          extend.js: {}
          extendOwn.js: {}
          filter.js: {}
          find.js: {}
          findIndex.js: {}
          findKey.js: {}
          findLastIndex.js: {}
          findWhere.js: {}
          first.js: {}
          flatten.js: {}
          functions.js: {}
          get.js: {}
          groupBy.js: {}
          has.js: {}
          identity.js: {}
          index-default.js: {}
          index.js: {}
          indexBy.js: {}
          indexOf.js: {}
          initial.js: {}
          intersection.js: {}
          invert.js: {}
          invoke.js: {}
          isArguments.js: {}
          isArray.js: {}
          isArrayBuffer.js: {}
          isBoolean.js: {}
          isDataView.js: {}
          isDate.js: {}
          isElement.js: {}
          isEmpty.js: {}
          isEqual.js: {}
          isError.js: {}
          isFinite.js: {}
          isFunction.js: {}
          isMap.js: {}
          isMatch.js: {}
          isNaN.js: {}
          isNull.js: {}
          isNumber.js: {}
          isObject.js: {}
          isRegExp.js: {}
          isSet.js: {}
          isString.js: {}
          isSymbol.js: {}
          isTypedArray.js: {}
          isUndefined.js: {}
          isWeakMap.js: {}
          isWeakSet.js: {}
          iteratee.js: {}
          join.js: {}
          keys.js: {}
          last.js: {}
          lastIndexOf.js: {}
          map.js: {}
          mapObject.js: {}
          matcher.js: {}
          max.js: {}
          memoize.js: {}
          min.js: {}
          mixin.js: {}
          negate.js: {}
          noop.js: {}
          now.js: {}
          object.js: {}
          omit.js: {}
          once.js: {}
          pairs.js: {}
          partial.js: {}
          partition.js: {}
          pick.js: {}
          pluck.js: {}
          pop.js: {}
          property.js: {}
          propertyOf.js: {}
          push.js: {}
          random.js: {}
          range.js: {}
          reduce.js: {}
          reduceRight.js: {}
          reject.js: {}
          rest.js: {}
          restArguments.js: {}
          result.js: {}
          reverse.js: {}
          sample.js: {}
          shift.js: {}
          shuffle.js: {}
          size.js: {}
          slice.js: {}
          some.js: {}
          sort.js: {}
          sortBy.js: {}
          sortedIndex.js: {}
          sortedLastIndex.js: {}
          splice.js: {}
          tap.js: {}
          template.js: {}
          templateSettings.js: {}
          throttle.js: {}
          times.js: {}
          toArray.js: {}
          toPath.js: {}
          toString.js: {}
          underscore-array-methods.js: {}
          underscore.js: {}
          unescape.js: {}
          union.js: {}
          uniq.js: {}
          uniqueId.js: {}
          unshift.js: {}
          unzip.js: {}
          value.js: {}
          values.js: {}
          where.js: {}
          without.js: {}
          wrap.js: {}
          zip.js: {}
        modules:
          .eslintrc: {}
          _baseCreate.js: {}
          _baseIteratee.js: {}
          _cb.js: {}
          _chainResult.js: {}
          _collectNonEnumProps.js: {}
          _createAssigner.js: {}
          _createEscaper.js: {}
          _createIndexFinder.js: {}
          _createPredicateIndexFinder.js: {}
          _createReduce.js: {}
          _createSizePropertyCheck.js: {}
          _deepGet.js: {}
          _escapeMap.js: {}
          _executeBound.js: {}
          _flatten.js: {}
          _getByteLength.js: {}
          _getLength.js: {}
          _group.js: {}
          _has.js: {}
          _hasObjectTag.js: {}
          _isArrayLike.js: {}
          _isBufferLike.js: {}
          _keyInObj.js: {}
          _methodFingerprint.js: {}
          _optimizeCb.js: {}
          _setup.js: {}
          _shallowProperty.js: {}
          _stringTagBug.js: {}
          _tagTester.js: {}
          _toBufferView.js: {}
          _toPath.js: {}
          _unescapeMap.js: {}
          after.js: {}
          allKeys.js: {}
          before.js: {}
          bind.js: {}
          bindAll.js: {}
          chain.js: {}
          chunk.js: {}
          clone.js: {}
          compact.js: {}
          compose.js: {}
          constant.js: {}
          contains.js: {}
          countBy.js: {}
          create.js: {}
          debounce.js: {}
          defaults.js: {}
          defer.js: {}
          delay.js: {}
          difference.js: {}
          each.js: {}
          escape.js: {}
          every.js: {}
          extend.js: {}
          extendOwn.js: {}
          filter.js: {}
          find.js: {}
          findIndex.js: {}
          findKey.js: {}
          findLastIndex.js: {}
          findWhere.js: {}
          first.js: {}
          flatten.js: {}
          functions.js: {}
          get.js: {}
          groupBy.js: {}
          has.js: {}
          identity.js: {}
          index-all.js: {}
          index-default.js: {}
          index.js: {}
          indexBy.js: {}
          indexOf.js: {}
          initial.js: {}
          intersection.js: {}
          invert.js: {}
          invoke.js: {}
          isArguments.js: {}
          isArray.js: {}
          isArrayBuffer.js: {}
          isBoolean.js: {}
          isDataView.js: {}
          isDate.js: {}
          isElement.js: {}
          isEmpty.js: {}
          isEqual.js: {}
          isError.js: {}
          isFinite.js: {}
          isFunction.js: {}
          isMap.js: {}
          isMatch.js: {}
          isNaN.js: {}
          isNull.js: {}
          isNumber.js: {}
          isObject.js: {}
          isRegExp.js: {}
          isSet.js: {}
          isString.js: {}
          isSymbol.js: {}
          isTypedArray.js: {}
          isUndefined.js: {}
          isWeakMap.js: {}
          isWeakSet.js: {}
          iteratee.js: {}
          keys.js: {}
          last.js: {}
          lastIndexOf.js: {}
          map.js: {}
          mapObject.js: {}
          matcher.js: {}
          max.js: {}
          memoize.js: {}
          min.js: {}
          mixin.js: {}
          negate.js: {}
          noop.js: {}
          now.js: {}
          object.js: {}
          omit.js: {}
          once.js: {}
          pairs.js: {}
          partial.js: {}
          partition.js: {}
          pick.js: {}
          pluck.js: {}
          property.js: {}
          propertyOf.js: {}
          random.js: {}
          range.js: {}
          reduce.js: {}
          reduceRight.js: {}
          reject.js: {}
          rest.js: {}
          restArguments.js: {}
          result.js: {}
          sample.js: {}
          shuffle.js: {}
          size.js: {}
          some.js: {}
          sortBy.js: {}
          sortedIndex.js: {}
          tap.js: {}
          template.js: {}
          templateSettings.js: {}
          throttle.js: {}
          times.js: {}
          toArray.js: {}
          toPath.js: {}
          underscore-array-methods.js: {}
          underscore.js: {}
          unescape.js: {}
          union.js: {}
          uniq.js: {}
          uniqueId.js: {}
          unzip.js: {}
          values.js: {}
          where.js: {}
          without.js: {}
          wrap.js: {}
          zip.js: {}
        package.json: {}
        underscore-esm-min.js: {}
        underscore-esm-min.js.map: {}
        underscore-esm.js: {}
        underscore-esm.js.map: {}
        underscore-min.js: {}
        underscore-min.js.map: {}
        underscore.js: {}
        underscore.js.map: {}
      undici-types:
        README.md: {}
        agent.d.ts: {}
        api.d.ts: {}
        balanced-pool.d.ts: {}
        cache.d.ts: {}
        client.d.ts: {}
        connector.d.ts: {}
        content-type.d.ts: {}
        cookies.d.ts: {}
        diagnostics-channel.d.ts: {}
        dispatcher.d.ts: {}
        errors.d.ts: {}
        fetch.d.ts: {}
        file.d.ts: {}
        filereader.d.ts: {}
        formdata.d.ts: {}
        global-dispatcher.d.ts: {}
        global-origin.d.ts: {}
        handlers.d.ts: {}
        header.d.ts: {}
        index.d.ts: {}
        interceptors.d.ts: {}
        mock-agent.d.ts: {}
        mock-client.d.ts: {}
        mock-errors.d.ts: {}
        mock-interceptor.d.ts: {}
        mock-pool.d.ts: {}
        package.json: {}
        patch.d.ts: {}
        pool-stats.d.ts: {}
        pool.d.ts: {}
        proxy-agent.d.ts: {}
        readable.d.ts: {}
        webidl.d.ts: {}
        websocket.d.ts: {}
      unicode-canonical-property-names-ecmascript:
        LICENSE-MIT.txt: {}
        README.md: {}
        index.js: {}
        package.json: {}
      unicode-match-property-ecmascript:
        LICENSE-MIT.txt: {}
        README.md: {}
        index.js: {}
        package.json: {}
      unicode-match-property-value-ecmascript:
        LICENSE-MIT.txt: {}
        README.md: {}
        data:
          mappings.js: {}
        index.js: {}
        package.json: {}
      unicode-property-aliases-ecmascript:
        LICENSE-MIT.txt: {}
        README.md: {}
        index.js: {}
        package.json: {}
      unified:
        index.d.ts: {}
        index.js: {}
        lib:
          callable-instance.d.ts: {}
          callable-instance.d.ts.map: {}
          callable-instance.js: {}
          index.d.ts: {}
          index.d.ts.map: {}
          index.js: {}
        license: {}
        node_modules:
          is-plain-obj:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
        package.json: {}
        readme.md: {}
      unique-string:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      unist-util-is:
        index.d.ts: {}
        index.js: {}
        lib:
          index.d.ts: {}
          index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      unist-util-position:
        index.d.ts: {}
        index.js: {}
        lib:
          index.d.ts: {}
          index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      unist-util-remove-position:
        index.d.ts: {}
        index.js: {}
        lib:
          index.d.ts: {}
          index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      unist-util-stringify-position:
        index.d.ts: {}
        index.js: {}
        lib:
          index.d.ts: {}
          index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      unist-util-visit:
        index.d.ts: {}
        index.js: {}
        lib:
          index.d.ts: {}
          index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      unist-util-visit-parents:
        index.d.ts: {}
        index.js: {}
        lib:
          color.d.ts: {}
          color.js: {}
          color.node.d.ts: {}
          color.node.js: {}
          index.d.ts: {}
          index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      universalify:
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      unpipe:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      unquote:
        .npmignore: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      upath:
        LICENSE: {}
        build:
          code:
            upath.js: {}
        package.json: {}
        readme.md: {}
        upath.d.ts: {}
      update-browserslist-db:
        LICENSE: {}
        README.md: {}
        check-npm-version.js: {}
        cli.js: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        utils.js: {}
      uri-js:
        LICENSE: {}
        README.md: {}
        dist:
          es5:
            uri.all.d.ts: {}
            uri.all.js: {}
            uri.all.js.map: {}
            uri.all.min.d.ts: {}
            uri.all.min.js: {}
            uri.all.min.js.map: {}
          esnext:
            index.d.ts: {}
            index.js: {}
            index.js.map: {}
            regexps-iri.d.ts: {}
            regexps-iri.js: {}
            regexps-iri.js.map: {}
            regexps-uri.d.ts: {}
            regexps-uri.js: {}
            regexps-uri.js.map: {}
            schemes:
              http.d.ts: {}
              http.js: {}
              http.js.map: {}
              https.d.ts: {}
              https.js: {}
              https.js.map: {}
              mailto.d.ts: {}
              mailto.js: {}
              mailto.js.map: {}
              urn-uuid.d.ts: {}
              urn-uuid.js: {}
              urn-uuid.js.map: {}
              urn.d.ts: {}
              urn.js: {}
              urn.js.map: {}
              ws.d.ts: {}
              ws.js: {}
              ws.js.map: {}
              wss.d.ts: {}
              wss.js: {}
              wss.js.map: {}
            uri.d.ts: {}
            uri.js: {}
            uri.js.map: {}
            util.d.ts: {}
            util.js: {}
            util.js.map: {}
        package.json: {}
        yarn.lock: {}
      url-parse:
        LICENSE: {}
        README.md: {}
        dist:
          url-parse.js: {}
          url-parse.min.js: {}
          url-parse.min.js.map: {}
        index.js: {}
        package.json: {}
      use-immer:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        dist:
          index.d.ts: {}
          use-immer.js: {}
          use-immer.js.map: {}
          use-immer.modern.js: {}
          use-immer.modern.js.map: {}
          use-immer.module.js: {}
          use-immer.module.js.map: {}
          use-immer.umd.js: {}
          use-immer.umd.js.map: {}
        package.json: {}
      util-deprecate:
        History.md: {}
        LICENSE: {}
        README.md: {}
        browser.js: {}
        node.js: {}
        package.json: {}
      util.promisify:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
          workflows:
            rebase.yml: {}
        .travis.yml: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        auto.js: {}
        implementation.js: {}
        index.js: {}
        package.json: {}
        polyfill.js: {}
        shim.js: {}
      utila:
        .npmignore: {}
        LICENSE: {}
        README.md: {}
        lib:
          Emitter.js: {}
          _common.js: {}
          array.js: {}
          classic.js: {}
          object.js: {}
          string.js: {}
          utila.js: {}
        package.json: {}
        test:
          _prepare.coffee: {}
          array.coffee: {}
          object.coffee: {}
      utils-merge:
        .npmignore: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      uuid:
        CHANGELOG.md: {}
        CONTRIBUTING.md: {}
        LICENSE.md: {}
        README.md: {}
        dist:
          bin:
            uuid: {}
          esm-browser:
            index.js: {}
            md5.js: {}
            nil.js: {}
            parse.js: {}
            regex.js: {}
            rng.js: {}
            sha1.js: {}
            stringify.js: {}
            v1.js: {}
            v3.js: {}
            v35.js: {}
            v4.js: {}
            v5.js: {}
            validate.js: {}
            version.js: {}
          esm-node:
            index.js: {}
            md5.js: {}
            nil.js: {}
            parse.js: {}
            regex.js: {}
            rng.js: {}
            sha1.js: {}
            stringify.js: {}
            v1.js: {}
            v3.js: {}
            v35.js: {}
            v4.js: {}
            v5.js: {}
            validate.js: {}
            version.js: {}
          index.js: {}
          md5-browser.js: {}
          md5.js: {}
          nil.js: {}
          parse.js: {}
          regex.js: {}
          rng-browser.js: {}
          rng.js: {}
          sha1-browser.js: {}
          sha1.js: {}
          stringify.js: {}
          umd:
            uuid.min.js: {}
            uuidNIL.min.js: {}
            uuidParse.min.js: {}
            uuidStringify.min.js: {}
            uuidValidate.min.js: {}
            uuidVersion.min.js: {}
            uuidv1.min.js: {}
            uuidv3.min.js: {}
            uuidv4.min.js: {}
            uuidv5.min.js: {}
          uuid-bin.js: {}
          v1.js: {}
          v3.js: {}
          v35.js: {}
          v4.js: {}
          v5.js: {}
          validate.js: {}
          version.js: {}
        package.json: {}
        wrapper.mjs: {}
      v8-to-istanbul:
        CHANGELOG.md: {}
        LICENSE.txt: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        lib:
          branch.js: {}
          function.js: {}
          line.js: {}
          range.js: {}
          source.js: {}
          v8-to-istanbul.js: {}
        node_modules:
          convert-source-map:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
        package.json: {}
      vary:
        HISTORY.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      vfile:
        index.d.ts: {}
        index.js: {}
        lib:
          index.d.ts: {}
          index.js: {}
          minpath.browser.d.ts: {}
          minpath.browser.js: {}
          minpath.d.ts: {}
          minpath.js: {}
          minproc.browser.d.ts: {}
          minproc.browser.js: {}
          minproc.d.ts: {}
          minproc.js: {}
          minurl.browser.d.ts: {}
          minurl.browser.js: {}
          minurl.d.ts: {}
          minurl.js: {}
          minurl.shared.d.ts: {}
          minurl.shared.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      vfile-message:
        index.d.ts: {}
        index.js: {}
        lib:
          index.d.ts: {}
          index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      vizion:
        .travis.yml: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        lib:
          cliCommand.js: {}
          git:
            git.js: {}
            js-git-service.js: {}
          helper.js: {}
          hg:
            hg.js: {}
          identify.js: {}
          svn:
            svn.js: {}
          vizion.js: {}
        node_modules:
          async:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            all.js: {}
            allLimit.js: {}
            allSeries.js: {}
            any.js: {}
            anyLimit.js: {}
            anySeries.js: {}
            apply.js: {}
            applyEach.js: {}
            applyEachSeries.js: {}
            asyncify.js: {}
            auto.js: {}
            autoInject.js: {}
            bower.json: {}
            cargo.js: {}
            compose.js: {}
            concat.js: {}
            concatLimit.js: {}
            concatSeries.js: {}
            constant.js: {}
            detect.js: {}
            detectLimit.js: {}
            detectSeries.js: {}
            dir.js: {}
            dist:
              async.js: {}
              async.min.js: {}
              async.min.map: {}
            doDuring.js: {}
            doUntil.js: {}
            doWhilst.js: {}
            during.js: {}
            each.js: {}
            eachLimit.js: {}
            eachOf.js: {}
            eachOfLimit.js: {}
            eachOfSeries.js: {}
            eachSeries.js: {}
            ensureAsync.js: {}
            every.js: {}
            everyLimit.js: {}
            everySeries.js: {}
            filter.js: {}
            filterLimit.js: {}
            filterSeries.js: {}
            find.js: {}
            findLimit.js: {}
            findSeries.js: {}
            foldl.js: {}
            foldr.js: {}
            forEach.js: {}
            forEachLimit.js: {}
            forEachOf.js: {}
            forEachOfLimit.js: {}
            forEachOfSeries.js: {}
            forEachSeries.js: {}
            forever.js: {}
            groupBy.js: {}
            groupByLimit.js: {}
            groupBySeries.js: {}
            index.js: {}
            inject.js: {}
            internal:
              DoublyLinkedList.js: {}
              applyEach.js: {}
              breakLoop.js: {}
              consoleFunc.js: {}
              createTester.js: {}
              doLimit.js: {}
              doParallel.js: {}
              doParallelLimit.js: {}
              eachOfLimit.js: {}
              filter.js: {}
              findGetResult.js: {}
              getIterator.js: {}
              initialParams.js: {}
              iterator.js: {}
              map.js: {}
              notId.js: {}
              once.js: {}
              onlyOnce.js: {}
              parallel.js: {}
              queue.js: {}
              reject.js: {}
              setImmediate.js: {}
              slice.js: {}
              withoutIndex.js: {}
              wrapAsync.js: {}
            log.js: {}
            map.js: {}
            mapLimit.js: {}
            mapSeries.js: {}
            mapValues.js: {}
            mapValuesLimit.js: {}
            mapValuesSeries.js: {}
            memoize.js: {}
            nextTick.js: {}
            package.json: {}
            parallel.js: {}
            parallelLimit.js: {}
            priorityQueue.js: {}
            queue.js: {}
            race.js: {}
            reduce.js: {}
            reduceRight.js: {}
            reflect.js: {}
            reflectAll.js: {}
            reject.js: {}
            rejectLimit.js: {}
            rejectSeries.js: {}
            retry.js: {}
            retryable.js: {}
            select.js: {}
            selectLimit.js: {}
            selectSeries.js: {}
            seq.js: {}
            series.js: {}
            setImmediate.js: {}
            some.js: {}
            someLimit.js: {}
            someSeries.js: {}
            sortBy.js: {}
            timeout.js: {}
            times.js: {}
            timesLimit.js: {}
            timesSeries.js: {}
            transform.js: {}
            tryEach.js: {}
            unmemoize.js: {}
            until.js: {}
            waterfall.js: {}
            whilst.js: {}
            wrapSync.js: {}
        package.json: {}
        test:
          fixtures:
            test_hg:
              contributors.txt: {}
            test_svn:
              branches:
                development:
                  LICENSE: {}
                  README.md: {}
              trunk:
                LICENSE: {}
                README.md: {}
          functional:
            cliCommand.test.js: {}
            git.test.js: {}
            svn-hg.test.js: {}
          mocha.opts: {}
          support:
            env.js: {}
          unit:
            git.test.js: {}
            helper.test.js: {}
      w3c-hr-time:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        index.js: {}
        lib:
          calculate-clock-offset.js: {}
          clock-is-accurate.js: {}
          global-monotonic-clock.js: {}
          performance.js: {}
          utils.js: {}
        package.json: {}
      w3c-xmlserializer:
        LICENSE.md: {}
        README.md: {}
        lib:
          attributes.js: {}
          constants.js: {}
          serialize.js: {}
        package.json: {}
      walker:
        .travis.yml: {}
        LICENSE: {}
        lib:
          walker.js: {}
        package.json: {}
        readme.md: {}
      warning:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        package.json: {}
        warning.js: {}
      watchpack:
        LICENSE: {}
        README.md: {}
        lib:
          DirectoryWatcher.js: {}
          LinkResolver.js: {}
          getWatcherManager.js: {}
          reducePlan.js: {}
          watchEventSource.js: {}
          watchpack.js: {}
        package.json: {}
      wbuf:
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          wbuf-test.js: {}
      web-vitals:
        LICENSE: {}
        README.md: {}
        base.d.ts: {}
        base.js: {}
        dist:
          modules:
            getCLS.d.ts: {}
            getCLS.js: {}
            getFCP.d.ts: {}
            getFCP.js: {}
            getFID.d.ts: {}
            getFID.js: {}
            getLCP.d.ts: {}
            getLCP.js: {}
            getTTFB.d.ts: {}
            getTTFB.js: {}
            index.d.ts: {}
            index.js: {}
            lib:
              bindReporter.d.ts: {}
              bindReporter.js: {}
              generateUniqueID.d.ts: {}
              generateUniqueID.js: {}
              getVisibilityWatcher.d.ts: {}
              getVisibilityWatcher.js: {}
              initMetric.d.ts: {}
              initMetric.js: {}
              observe.d.ts: {}
              observe.js: {}
              onBFCacheRestore.d.ts: {}
              onBFCacheRestore.js: {}
              onHidden.d.ts: {}
              onHidden.js: {}
              polyfills:
                firstInputPolyfill.d.ts: {}
                firstInputPolyfill.js: {}
                getFirstHiddenTimePolyfill.d.ts: {}
                getFirstHiddenTimePolyfill.js: {}
            polyfill.d.ts: {}
            polyfill.js: {}
            types.d.ts: {}
            types.js: {}
          polyfill.js: {}
          web-vitals.base.iife.js: {}
          web-vitals.base.js: {}
          web-vitals.base.umd.js: {}
          web-vitals.iife.js: {}
          web-vitals.js: {}
          web-vitals.umd.js: {}
        package.json: {}
        src:
          getCLS.ts: {}
          getFCP.ts: {}
          getFID.ts: {}
          getLCP.ts: {}
          getTTFB.ts: {}
          index.ts: {}
          lib:
            bindReporter.ts: {}
            generateUniqueID.ts: {}
            getVisibilityWatcher.ts: {}
            initMetric.ts: {}
            observe.ts: {}
            onBFCacheRestore.ts: {}
            onHidden.ts: {}
            polyfills:
              firstInputPolyfill.ts: {}
              getFirstHiddenTimePolyfill.ts: {}
          polyfill.ts: {}
          types.ts: {}
      webidl-conversions:
        LICENSE.md: {}
        README.md: {}
        lib:
          index.js: {}
        package.json: {}
      webpack:
        LICENSE: {}
        README.md: {}
        SECURITY.md: {}
        bin:
          webpack.js: {}
        hot:
          dev-server.js: {}
          emitter.js: {}
          lazy-compilation-node.js: {}
          lazy-compilation-web.js: {}
          log-apply-result.js: {}
          log.js: {}
          only-dev-server.js: {}
          poll.js: {}
          signal.js: {}
        lib:
          APIPlugin.js: {}
          AbstractMethodError.js: {}
          AsyncDependenciesBlock.js: {}
          AsyncDependencyToInitialChunkError.js: {}
          AutomaticPrefetchPlugin.js: {}
          BannerPlugin.js: {}
          Cache.js: {}
          CacheFacade.js: {}
          CaseSensitiveModulesWarning.js: {}
          Chunk.js: {}
          ChunkGraph.js: {}
          ChunkGroup.js: {}
          ChunkRenderError.js: {}
          ChunkTemplate.js: {}
          CleanPlugin.js: {}
          CodeGenerationError.js: {}
          CodeGenerationResults.js: {}
          CommentCompilationWarning.js: {}
          CompatibilityPlugin.js: {}
          Compilation.js: {}
          Compiler.js: {}
          ConcatenationScope.js: {}
          ConcurrentCompilationError.js: {}
          ConditionalInitFragment.js: {}
          ConstPlugin.js: {}
          ContextExclusionPlugin.js: {}
          ContextModule.js: {}
          ContextModuleFactory.js: {}
          ContextReplacementPlugin.js: {}
          CssModule.js: {}
          DefinePlugin.js: {}
          DelegatedModule.js: {}
          DelegatedModuleFactoryPlugin.js: {}
          DelegatedPlugin.js: {}
          DependenciesBlock.js: {}
          Dependency.js: {}
          DependencyTemplate.js: {}
          DependencyTemplates.js: {}
          DllEntryPlugin.js: {}
          DllModule.js: {}
          DllModuleFactory.js: {}
          DllPlugin.js: {}
          DllReferencePlugin.js: {}
          DynamicEntryPlugin.js: {}
          EntryOptionPlugin.js: {}
          EntryPlugin.js: {}
          Entrypoint.js: {}
          EnvironmentNotSupportAsyncWarning.js: {}
          EnvironmentPlugin.js: {}
          ErrorHelpers.js: {}
          EvalDevToolModulePlugin.js: {}
          EvalSourceMapDevToolPlugin.js: {}
          ExportsInfo.js: {}
          ExportsInfoApiPlugin.js: {}
          ExternalModule.js: {}
          ExternalModuleFactoryPlugin.js: {}
          ExternalsPlugin.js: {}
          FileSystemInfo.js: {}
          FlagAllModulesAsUsedPlugin.js: {}
          FlagDependencyExportsPlugin.js: {}
          FlagDependencyUsagePlugin.js: {}
          FlagEntryExportAsUsedPlugin.js: {}
          Generator.js: {}
          GraphHelpers.js: {}
          HarmonyLinkingError.js: {}
          HookWebpackError.js: {}
          HotModuleReplacementPlugin.js: {}
          HotUpdateChunk.js: {}
          IgnoreErrorModuleFactory.js: {}
          IgnorePlugin.js: {}
          IgnoreWarningsPlugin.js: {}
          InitFragment.js: {}
          InvalidDependenciesModuleWarning.js: {}
          JavascriptMetaInfoPlugin.js: {}
          LibManifestPlugin.js: {}
          LibraryTemplatePlugin.js: {}
          LoaderOptionsPlugin.js: {}
          LoaderTargetPlugin.js: {}
          MainTemplate.js: {}
          Module.js: {}
          ModuleBuildError.js: {}
          ModuleDependencyError.js: {}
          ModuleDependencyWarning.js: {}
          ModuleError.js: {}
          ModuleFactory.js: {}
          ModuleFilenameHelpers.js: {}
          ModuleGraph.js: {}
          ModuleGraphConnection.js: {}
          ModuleHashingError.js: {}
          ModuleInfoHeaderPlugin.js: {}
          ModuleNotFoundError.js: {}
          ModuleParseError.js: {}
          ModuleProfile.js: {}
          ModuleRestoreError.js: {}
          ModuleStoreError.js: {}
          ModuleTemplate.js: {}
          ModuleTypeConstants.js: {}
          ModuleWarning.js: {}
          MultiCompiler.js: {}
          MultiStats.js: {}
          MultiWatching.js: {}
          NoEmitOnErrorsPlugin.js: {}
          NoModeWarning.js: {}
          NodeStuffInWebError.js: {}
          NodeStuffPlugin.js: {}
          NormalModule.js: {}
          NormalModuleFactory.js: {}
          NormalModuleReplacementPlugin.js: {}
          NullFactory.js: {}
          OptimizationStages.js: {}
          OptionsApply.js: {}
          Parser.js: {}
          PrefetchPlugin.js: {}
          ProgressPlugin.js: {}
          ProvidePlugin.js: {}
          RawModule.js: {}
          RecordIdsPlugin.js: {}
          RequestShortener.js: {}
          RequireJsStuffPlugin.js: {}
          ResolverFactory.js: {}
          RuntimeGlobals.js: {}
          RuntimeModule.js: {}
          RuntimePlugin.js: {}
          RuntimeTemplate.js: {}
          SelfModuleFactory.js: {}
          SingleEntryPlugin.js: {}
          SizeFormatHelpers.js: {}
          SourceMapDevToolModuleOptionsPlugin.js: {}
          SourceMapDevToolPlugin.js: {}
          Stats.js: {}
          Template.js: {}
          TemplatedPathPlugin.js: {}
          UnhandledSchemeError.js: {}
          UnsupportedFeatureWarning.js: {}
          UseStrictPlugin.js: {}
          WarnCaseSensitiveModulesPlugin.js: {}
          WarnDeprecatedOptionPlugin.js: {}
          WarnNoModeSetPlugin.js: {}
          WatchIgnorePlugin.js: {}
          Watching.js: {}
          WebpackError.js: {}
          WebpackIsIncludedPlugin.js: {}
          WebpackOptionsApply.js: {}
          WebpackOptionsDefaulter.js: {}
          asset:
            AssetGenerator.js: {}
            AssetModulesPlugin.js: {}
            AssetParser.js: {}
            AssetSourceGenerator.js: {}
            AssetSourceParser.js: {}
            RawDataUrlModule.js: {}
          async-modules:
            AwaitDependenciesInitFragment.js: {}
            InferAsyncModulesPlugin.js: {}
          buildChunkGraph.js: {}
          cache:
            AddBuildDependenciesPlugin.js: {}
            AddManagedPathsPlugin.js: {}
            IdleFileCachePlugin.js: {}
            MemoryCachePlugin.js: {}
            MemoryWithGcCachePlugin.js: {}
            PackFileCacheStrategy.js: {}
            ResolverCachePlugin.js: {}
            getLazyHashedEtag.js: {}
            mergeEtags.js: {}
          cli.js: {}
          config:
            browserslistTargetHandler.js: {}
            defaults.js: {}
            normalization.js: {}
            target.js: {}
          container:
            ContainerEntryDependency.js: {}
            ContainerEntryModule.js: {}
            ContainerEntryModuleFactory.js: {}
            ContainerExposedDependency.js: {}
            ContainerPlugin.js: {}
            ContainerReferencePlugin.js: {}
            FallbackDependency.js: {}
            FallbackItemDependency.js: {}
            FallbackModule.js: {}
            FallbackModuleFactory.js: {}
            ModuleFederationPlugin.js: {}
            RemoteModule.js: {}
            RemoteRuntimeModule.js: {}
            RemoteToExternalDependency.js: {}
            options.js: {}
          css:
            CssExportsGenerator.js: {}
            CssGenerator.js: {}
            CssLoadingRuntimeModule.js: {}
            CssModulesPlugin.js: {}
            CssParser.js: {}
            walkCssTokens.js: {}
          debug:
            ProfilingPlugin.js: {}
          dependencies:
            AMDDefineDependency.js: {}
            AMDDefineDependencyParserPlugin.js: {}
            AMDPlugin.js: {}
            AMDRequireArrayDependency.js: {}
            AMDRequireContextDependency.js: {}
            AMDRequireDependenciesBlock.js: {}
            AMDRequireDependenciesBlockParserPlugin.js: {}
            AMDRequireDependency.js: {}
            AMDRequireItemDependency.js: {}
            AMDRuntimeModules.js: {}
            CachedConstDependency.js: {}
            CommonJsDependencyHelpers.js: {}
            CommonJsExportRequireDependency.js: {}
            CommonJsExportsDependency.js: {}
            CommonJsExportsParserPlugin.js: {}
            CommonJsFullRequireDependency.js: {}
            CommonJsImportsParserPlugin.js: {}
            CommonJsPlugin.js: {}
            CommonJsRequireContextDependency.js: {}
            CommonJsRequireDependency.js: {}
            CommonJsSelfReferenceDependency.js: {}
            ConstDependency.js: {}
            ContextDependency.js: {}
            ContextDependencyHelpers.js: {}
            ContextDependencyTemplateAsId.js: {}
            ContextDependencyTemplateAsRequireCall.js: {}
            ContextElementDependency.js: {}
            CreateScriptUrlDependency.js: {}
            CriticalDependencyWarning.js: {}
            CssExportDependency.js: {}
            CssImportDependency.js: {}
            CssLocalIdentifierDependency.js: {}
            CssSelfLocalIdentifierDependency.js: {}
            CssUrlDependency.js: {}
            DelegatedSourceDependency.js: {}
            DllEntryDependency.js: {}
            DynamicExports.js: {}
            EntryDependency.js: {}
            ExportsInfoDependency.js: {}
            ExternalModuleDependency.js: {}
            ExternalModuleInitFragment.js: {}
            HarmonyAcceptDependency.js: {}
            HarmonyAcceptImportDependency.js: {}
            HarmonyCompatibilityDependency.js: {}
            HarmonyDetectionParserPlugin.js: {}
            HarmonyEvaluatedImportSpecifierDependency.js: {}
            HarmonyExportDependencyParserPlugin.js: {}
            HarmonyExportExpressionDependency.js: {}
            HarmonyExportHeaderDependency.js: {}
            HarmonyExportImportedSpecifierDependency.js: {}
            HarmonyExportInitFragment.js: {}
            HarmonyExportSpecifierDependency.js: {}
            HarmonyExports.js: {}
            HarmonyImportDependency.js: {}
            HarmonyImportDependencyParserPlugin.js: {}
            HarmonyImportSideEffectDependency.js: {}
            HarmonyImportSpecifierDependency.js: {}
            HarmonyModulesPlugin.js: {}
            HarmonyTopLevelThisParserPlugin.js: {}
            ImportContextDependency.js: {}
            ImportDependency.js: {}
            ImportEagerDependency.js: {}
            ImportMetaContextDependency.js: {}
            ImportMetaContextDependencyParserPlugin.js: {}
            ImportMetaContextPlugin.js: {}
            ImportMetaHotAcceptDependency.js: {}
            ImportMetaHotDeclineDependency.js: {}
            ImportMetaPlugin.js: {}
            ImportParserPlugin.js: {}
            ImportPlugin.js: {}
            ImportWeakDependency.js: {}
            JsonExportsDependency.js: {}
            LoaderDependency.js: {}
            LoaderImportDependency.js: {}
            LoaderPlugin.js: {}
            LocalModule.js: {}
            LocalModuleDependency.js: {}
            LocalModulesHelpers.js: {}
            ModuleDecoratorDependency.js: {}
            ModuleDependency.js: {}
            ModuleDependencyTemplateAsId.js: {}
            ModuleDependencyTemplateAsRequireId.js: {}
            ModuleHotAcceptDependency.js: {}
            ModuleHotDeclineDependency.js: {}
            NullDependency.js: {}
            PrefetchDependency.js: {}
            ProvidedDependency.js: {}
            PureExpressionDependency.js: {}
            RequireContextDependency.js: {}
            RequireContextDependencyParserPlugin.js: {}
            RequireContextPlugin.js: {}
            RequireEnsureDependenciesBlock.js: {}
            RequireEnsureDependenciesBlockParserPlugin.js: {}
            RequireEnsureDependency.js: {}
            RequireEnsureItemDependency.js: {}
            RequireEnsurePlugin.js: {}
            RequireHeaderDependency.js: {}
            RequireIncludeDependency.js: {}
            RequireIncludeDependencyParserPlugin.js: {}
            RequireIncludePlugin.js: {}
            RequireResolveContextDependency.js: {}
            RequireResolveDependency.js: {}
            RequireResolveHeaderDependency.js: {}
            RuntimeRequirementsDependency.js: {}
            StaticExportsDependency.js: {}
            SystemPlugin.js: {}
            SystemRuntimeModule.js: {}
            URLDependency.js: {}
            URLPlugin.js: {}
            UnsupportedDependency.js: {}
            WebAssemblyExportImportedDependency.js: {}
            WebAssemblyImportDependency.js: {}
            WebpackIsIncludedDependency.js: {}
            WorkerDependency.js: {}
            WorkerPlugin.js: {}
            getFunctionExpression.js: {}
            processExportInfo.js: {}
          electron:
            ElectronTargetPlugin.js: {}
          errors:
            BuildCycleError.js: {}
          esm:
            ExportWebpackRequireRuntimeModule.js: {}
            ModuleChunkFormatPlugin.js: {}
            ModuleChunkLoadingPlugin.js: {}
            ModuleChunkLoadingRuntimeModule.js: {}
          formatLocation.js: {}
          hmr:
            HotModuleReplacement.runtime.js: {}
            HotModuleReplacementRuntimeModule.js: {}
            JavascriptHotModuleReplacement.runtime.js: {}
            LazyCompilationPlugin.js: {}
            lazyCompilationBackend.js: {}
          ids:
            ChunkModuleIdRangePlugin.js: {}
            DeterministicChunkIdsPlugin.js: {}
            DeterministicModuleIdsPlugin.js: {}
            HashedModuleIdsPlugin.js: {}
            IdHelpers.js: {}
            NamedChunkIdsPlugin.js: {}
            NamedModuleIdsPlugin.js: {}
            NaturalChunkIdsPlugin.js: {}
            NaturalModuleIdsPlugin.js: {}
            OccurrenceChunkIdsPlugin.js: {}
            OccurrenceModuleIdsPlugin.js: {}
            SyncModuleIdsPlugin.js: {}
          index.js: {}
          javascript:
            ArrayPushCallbackChunkFormatPlugin.js: {}
            BasicEvaluatedExpression.js: {}
            ChunkHelpers.js: {}
            CommonJsChunkFormatPlugin.js: {}
            EnableChunkLoadingPlugin.js: {}
            JavascriptGenerator.js: {}
            JavascriptModulesPlugin.js: {}
            JavascriptParser.js: {}
            JavascriptParserHelpers.js: {}
            StartupHelpers.js: {}
          json:
            JsonData.js: {}
            JsonGenerator.js: {}
            JsonModulesPlugin.js: {}
            JsonParser.js: {}
          library:
            AbstractLibraryPlugin.js: {}
            AmdLibraryPlugin.js: {}
            AssignLibraryPlugin.js: {}
            EnableLibraryPlugin.js: {}
            ExportPropertyLibraryPlugin.js: {}
            JsonpLibraryPlugin.js: {}
            ModuleLibraryPlugin.js: {}
            SystemLibraryPlugin.js: {}
            UmdLibraryPlugin.js: {}
          logging:
            Logger.js: {}
            createConsoleLogger.js: {}
            runtime.js: {}
            truncateArgs.js: {}
          node:
            CommonJsChunkLoadingPlugin.js: {}
            NodeEnvironmentPlugin.js: {}
            NodeSourcePlugin.js: {}
            NodeTargetPlugin.js: {}
            NodeTemplatePlugin.js: {}
            NodeWatchFileSystem.js: {}
            ReadFileChunkLoadingRuntimeModule.js: {}
            ReadFileCompileAsyncWasmPlugin.js: {}
            ReadFileCompileWasmPlugin.js: {}
            RequireChunkLoadingRuntimeModule.js: {}
            nodeConsole.js: {}
          optimize:
            AggressiveMergingPlugin.js: {}
            AggressiveSplittingPlugin.js: {}
            ConcatenatedModule.js: {}
            EnsureChunkConditionsPlugin.js: {}
            FlagIncludedChunksPlugin.js: {}
            InnerGraph.js: {}
            InnerGraphPlugin.js: {}
            LimitChunkCountPlugin.js: {}
            MangleExportsPlugin.js: {}
            MergeDuplicateChunksPlugin.js: {}
            MinChunkSizePlugin.js: {}
            MinMaxSizeWarning.js: {}
            ModuleConcatenationPlugin.js: {}
            RealContentHashPlugin.js: {}
            RemoveEmptyChunksPlugin.js: {}
            RemoveParentModulesPlugin.js: {}
            RuntimeChunkPlugin.js: {}
            SideEffectsFlagPlugin.js: {}
            SplitChunksPlugin.js: {}
          performance:
            AssetsOverSizeLimitWarning.js: {}
            EntrypointsOverSizeLimitWarning.js: {}
            NoAsyncChunksWarning.js: {}
            SizeLimitsPlugin.js: {}
          prefetch:
            ChunkPrefetchFunctionRuntimeModule.js: {}
            ChunkPrefetchPreloadPlugin.js: {}
            ChunkPrefetchStartupRuntimeModule.js: {}
            ChunkPrefetchTriggerRuntimeModule.js: {}
            ChunkPreloadTriggerRuntimeModule.js: {}
          rules:
            BasicEffectRulePlugin.js: {}
            BasicMatcherRulePlugin.js: {}
            ObjectMatcherRulePlugin.js: {}
            RuleSetCompiler.js: {}
            UseEffectRulePlugin.js: {}
          runtime:
            AsyncModuleRuntimeModule.js: {}
            AutoPublicPathRuntimeModule.js: {}
            BaseUriRuntimeModule.js: {}
            ChunkNameRuntimeModule.js: {}
            CompatGetDefaultExportRuntimeModule.js: {}
            CompatRuntimeModule.js: {}
            CreateFakeNamespaceObjectRuntimeModule.js: {}
            CreateScriptRuntimeModule.js: {}
            CreateScriptUrlRuntimeModule.js: {}
            DefinePropertyGettersRuntimeModule.js: {}
            EnsureChunkRuntimeModule.js: {}
            GetChunkFilenameRuntimeModule.js: {}
            GetFullHashRuntimeModule.js: {}
            GetMainFilenameRuntimeModule.js: {}
            GetTrustedTypesPolicyRuntimeModule.js: {}
            GlobalRuntimeModule.js: {}
            HasOwnPropertyRuntimeModule.js: {}
            HelperRuntimeModule.js: {}
            LoadScriptRuntimeModule.js: {}
            MakeNamespaceObjectRuntimeModule.js: {}
            NonceRuntimeModule.js: {}
            OnChunksLoadedRuntimeModule.js: {}
            PublicPathRuntimeModule.js: {}
            RelativeUrlRuntimeModule.js: {}
            RuntimeIdRuntimeModule.js: {}
            StartupChunkDependenciesPlugin.js: {}
            StartupChunkDependenciesRuntimeModule.js: {}
            StartupEntrypointRuntimeModule.js: {}
            SystemContextRuntimeModule.js: {}
          schemes:
            DataUriPlugin.js: {}
            FileUriPlugin.js: {}
            HttpUriPlugin.js: {}
          serialization:
            ArraySerializer.js: {}
            BinaryMiddleware.js: {}
            DateObjectSerializer.js: {}
            ErrorObjectSerializer.js: {}
            FileMiddleware.js: {}
            MapObjectSerializer.js: {}
            NullPrototypeObjectSerializer.js: {}
            ObjectMiddleware.js: {}
            PlainObjectSerializer.js: {}
            RegExpObjectSerializer.js: {}
            Serializer.js: {}
            SerializerMiddleware.js: {}
            SetObjectSerializer.js: {}
            SingleItemMiddleware.js: {}
            types.js: {}
          sharing:
            ConsumeSharedFallbackDependency.js: {}
            ConsumeSharedModule.js: {}
            ConsumeSharedPlugin.js: {}
            ConsumeSharedRuntimeModule.js: {}
            ProvideForSharedDependency.js: {}
            ProvideSharedDependency.js: {}
            ProvideSharedModule.js: {}
            ProvideSharedModuleFactory.js: {}
            ProvideSharedPlugin.js: {}
            SharePlugin.js: {}
            ShareRuntimeModule.js: {}
            resolveMatchedConfigs.js: {}
            utils.js: {}
          stats:
            DefaultStatsFactoryPlugin.js: {}
            DefaultStatsPresetPlugin.js: {}
            DefaultStatsPrinterPlugin.js: {}
            StatsFactory.js: {}
            StatsPrinter.js: {}
          util:
            ArrayHelpers.js: {}
            ArrayQueue.js: {}
            AsyncQueue.js: {}
            Hash.js: {}
            IterableHelpers.js: {}
            LazyBucketSortedSet.js: {}
            LazySet.js: {}
            MapHelpers.js: {}
            ParallelismFactorCalculator.js: {}
            Queue.js: {}
            Semaphore.js: {}
            SetHelpers.js: {}
            SortableSet.js: {}
            StackedCacheMap.js: {}
            StackedMap.js: {}
            StringXor.js: {}
            TupleQueue.js: {}
            TupleSet.js: {}
            URLAbsoluteSpecifier.js: {}
            WeakTupleMap.js: {}
            binarySearchBounds.js: {}
            chainedImports.js: {}
            cleverMerge.js: {}
            comparators.js: {}
            compileBooleanMatcher.js: {}
            conventions.js: {}
            create-schema-validation.js: {}
            createHash.js: {}
            deprecation.js: {}
            deterministicGrouping.js: {}
            extractUrlAndGlobal.js: {}
            findGraphRoots.js: {}
            fs.js: {}
            hash:
              BatchedHash.js: {}
              md4.js: {}
              wasm-hash.js: {}
              xxhash64.js: {}
            identifier.js: {}
            internalSerializables.js: {}
            makeSerializable.js: {}
            memoize.js: {}
            nonNumericOnlyHash.js: {}
            numberHash.js: {}
            objectToMap.js: {}
            processAsyncTree.js: {}
            propertyAccess.js: {}
            propertyName.js: {}
            registerExternalSerializer.js: {}
            runtime.js: {}
            semver.js: {}
            serialization.js: {}
            smartGrouping.js: {}
            source.js: {}
          validateSchema.js: {}
          wasm:
            EnableWasmLoadingPlugin.js: {}
          wasm-async:
            AsyncWasmLoadingRuntimeModule.js: {}
            AsyncWebAssemblyGenerator.js: {}
            AsyncWebAssemblyJavascriptGenerator.js: {}
            AsyncWebAssemblyModulesPlugin.js: {}
            AsyncWebAssemblyParser.js: {}
          wasm-sync:
            UnsupportedWebAssemblyFeatureError.js: {}
            WasmChunkLoadingRuntimeModule.js: {}
            WasmFinalizeExportsPlugin.js: {}
            WebAssemblyGenerator.js: {}
            WebAssemblyInInitialChunkError.js: {}
            WebAssemblyJavascriptGenerator.js: {}
            WebAssemblyModulesPlugin.js: {}
            WebAssemblyParser.js: {}
            WebAssemblyUtils.js: {}
          web:
            FetchCompileAsyncWasmPlugin.js: {}
            FetchCompileWasmPlugin.js: {}
            JsonpChunkLoadingPlugin.js: {}
            JsonpChunkLoadingRuntimeModule.js: {}
            JsonpTemplatePlugin.js: {}
          webpack.js: {}
          webworker:
            ImportScriptsChunkLoadingPlugin.js: {}
            ImportScriptsChunkLoadingRuntimeModule.js: {}
            WebWorkerTemplatePlugin.js: {}
        module.d.ts: {}
        node_modules:
          eslint-scope:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            lib:
              definition.js: {}
              index.js: {}
              pattern-visitor.js: {}
              reference.js: {}
              referencer.js: {}
              scope-manager.js: {}
              scope.js: {}
              variable.js: {}
            package.json: {}
          estraverse:
            .jshintrc: {}
            LICENSE.BSD: {}
            README.md: {}
            estraverse.js: {}
            gulpfile.js: {}
            package.json: {}
        package.json: {}
        schemas:
          WebpackOptions.check.d.ts: {}
          WebpackOptions.check.js: {}
          WebpackOptions.json: {}
          _container.json: {}
          _sharing.json: {}
          plugins:
            BannerPlugin.check.d.ts: {}
            BannerPlugin.check.js: {}
            BannerPlugin.json: {}
            DllPlugin.check.d.ts: {}
            DllPlugin.check.js: {}
            DllPlugin.json: {}
            DllReferencePlugin.check.d.ts: {}
            DllReferencePlugin.check.js: {}
            DllReferencePlugin.json: {}
            HashedModuleIdsPlugin.check.d.ts: {}
            HashedModuleIdsPlugin.check.js: {}
            HashedModuleIdsPlugin.json: {}
            IgnorePlugin.check.d.ts: {}
            IgnorePlugin.check.js: {}
            IgnorePlugin.json: {}
            JsonModulesPluginParser.check.d.ts: {}
            JsonModulesPluginParser.check.js: {}
            JsonModulesPluginParser.json: {}
            LoaderOptionsPlugin.check.d.ts: {}
            LoaderOptionsPlugin.check.js: {}
            LoaderOptionsPlugin.json: {}
            ProgressPlugin.check.d.ts: {}
            ProgressPlugin.check.js: {}
            ProgressPlugin.json: {}
            SourceMapDevToolPlugin.check.d.ts: {}
            SourceMapDevToolPlugin.check.js: {}
            SourceMapDevToolPlugin.json: {}
            WatchIgnorePlugin.check.d.ts: {}
            WatchIgnorePlugin.check.js: {}
            WatchIgnorePlugin.json: {}
            asset:
              AssetGeneratorOptions.check.d.ts: {}
              AssetGeneratorOptions.check.js: {}
              AssetGeneratorOptions.json: {}
              AssetInlineGeneratorOptions.check.d.ts: {}
              AssetInlineGeneratorOptions.check.js: {}
              AssetInlineGeneratorOptions.json: {}
              AssetParserOptions.check.d.ts: {}
              AssetParserOptions.check.js: {}
              AssetParserOptions.json: {}
              AssetResourceGeneratorOptions.check.d.ts: {}
              AssetResourceGeneratorOptions.check.js: {}
              AssetResourceGeneratorOptions.json: {}
            container:
              ContainerPlugin.check.d.ts: {}
              ContainerPlugin.check.js: {}
              ContainerPlugin.json: {}
              ContainerReferencePlugin.check.d.ts: {}
              ContainerReferencePlugin.check.js: {}
              ContainerReferencePlugin.json: {}
              ExternalsType.check.d.ts: {}
              ExternalsType.check.js: {}
              ExternalsType.json: {}
              ModuleFederationPlugin.check.d.ts: {}
              ModuleFederationPlugin.check.js: {}
              ModuleFederationPlugin.json: {}
            css:
              CssAutoGeneratorOptions.check.d.ts: {}
              CssAutoGeneratorOptions.check.js: {}
              CssAutoGeneratorOptions.json: {}
              CssAutoParserOptions.check.d.ts: {}
              CssAutoParserOptions.check.js: {}
              CssAutoParserOptions.json: {}
              CssGeneratorOptions.check.d.ts: {}
              CssGeneratorOptions.check.js: {}
              CssGeneratorOptions.json: {}
              CssGlobalGeneratorOptions.check.d.ts: {}
              CssGlobalGeneratorOptions.check.js: {}
              CssGlobalGeneratorOptions.json: {}
              CssGlobalParserOptions.check.d.ts: {}
              CssGlobalParserOptions.check.js: {}
              CssGlobalParserOptions.json: {}
              CssModuleGeneratorOptions.check.d.ts: {}
              CssModuleGeneratorOptions.check.js: {}
              CssModuleGeneratorOptions.json: {}
              CssModuleParserOptions.check.d.ts: {}
              CssModuleParserOptions.check.js: {}
              CssModuleParserOptions.json: {}
              CssParserOptions.check.d.ts: {}
              CssParserOptions.check.js: {}
              CssParserOptions.json: {}
            debug:
              ProfilingPlugin.check.d.ts: {}
              ProfilingPlugin.check.js: {}
              ProfilingPlugin.json: {}
            ids:
              OccurrenceChunkIdsPlugin.check.d.ts: {}
              OccurrenceChunkIdsPlugin.check.js: {}
              OccurrenceChunkIdsPlugin.json: {}
              OccurrenceModuleIdsPlugin.check.d.ts: {}
              OccurrenceModuleIdsPlugin.check.js: {}
              OccurrenceModuleIdsPlugin.json: {}
            optimize:
              AggressiveSplittingPlugin.check.d.ts: {}
              AggressiveSplittingPlugin.check.js: {}
              AggressiveSplittingPlugin.json: {}
              LimitChunkCountPlugin.check.d.ts: {}
              LimitChunkCountPlugin.check.js: {}
              LimitChunkCountPlugin.json: {}
              MinChunkSizePlugin.check.d.ts: {}
              MinChunkSizePlugin.check.js: {}
              MinChunkSizePlugin.json: {}
            schemes:
              HttpUriPlugin.check.d.ts: {}
              HttpUriPlugin.check.js: {}
              HttpUriPlugin.json: {}
            sharing:
              ConsumeSharedPlugin.check.d.ts: {}
              ConsumeSharedPlugin.check.js: {}
              ConsumeSharedPlugin.json: {}
              ProvideSharedPlugin.check.d.ts: {}
              ProvideSharedPlugin.check.js: {}
              ProvideSharedPlugin.json: {}
              SharePlugin.check.d.ts: {}
              SharePlugin.check.js: {}
              SharePlugin.json: {}
        types.d.ts: {}
      webpack-dev-middleware:
        LICENSE: {}
        README.md: {}
        dist:
          index.js: {}
          middleware.js: {}
          options.json: {}
          utils:
            compatibleAPI.js: {}
            getFilenameFromUrl.js: {}
            getPaths.js: {}
            ready.js: {}
            setupHooks.js: {}
            setupOutputFileSystem.js: {}
            setupWriteToDisk.js: {}
        node_modules:
          ajv:
            .runkit_example.js: {}
            LICENSE: {}
            README.md: {}
            dist:
              2019.d.ts: {}
              2019.js: {}
              2019.js.map: {}
              2020.d.ts: {}
              2020.js: {}
              2020.js.map: {}
              ajv.d.ts: {}
              ajv.js: {}
              ajv.js.map: {}
              compile:
                codegen:
                  code.d.ts: {}
                  code.js: {}
                  code.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  scope.d.ts: {}
                  scope.js: {}
                  scope.js.map: {}
                errors.d.ts: {}
                errors.js: {}
                errors.js.map: {}
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                jtd:
                  parse.d.ts: {}
                  parse.js: {}
                  parse.js.map: {}
                  serialize.d.ts: {}
                  serialize.js: {}
                  serialize.js.map: {}
                  types.d.ts: {}
                  types.js: {}
                  types.js.map: {}
                names.d.ts: {}
                names.js: {}
                names.js.map: {}
                ref_error.d.ts: {}
                ref_error.js: {}
                ref_error.js.map: {}
                resolve.d.ts: {}
                resolve.js: {}
                resolve.js.map: {}
                rules.d.ts: {}
                rules.js: {}
                rules.js.map: {}
                util.d.ts: {}
                util.js: {}
                util.js.map: {}
                validate:
                  applicability.d.ts: {}
                  applicability.js: {}
                  applicability.js.map: {}
                  boolSchema.d.ts: {}
                  boolSchema.js: {}
                  boolSchema.js.map: {}
                  dataType.d.ts: {}
                  dataType.js: {}
                  dataType.js.map: {}
                  defaults.d.ts: {}
                  defaults.js: {}
                  defaults.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  keyword.d.ts: {}
                  keyword.js: {}
                  keyword.js.map: {}
                  subschema.d.ts: {}
                  subschema.js: {}
                  subschema.js.map: {}
              core.d.ts: {}
              core.js: {}
              core.js.map: {}
              jtd.d.ts: {}
              jtd.js: {}
              jtd.js.map: {}
              refs:
                data.json: {}
                json-schema-2019-09:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format.json: {}
                    meta-data.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-2020-12:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format-annotation.json: {}
                    meta-data.json: {}
                    unevaluated.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-draft-06.json: {}
                json-schema-draft-07.json: {}
                json-schema-secure.json: {}
                jtd-schema.d.ts: {}
                jtd-schema.js: {}
                jtd-schema.js.map: {}
              runtime:
                equal.d.ts: {}
                equal.js: {}
                equal.js.map: {}
                parseJson.d.ts: {}
                parseJson.js: {}
                parseJson.js.map: {}
                quote.d.ts: {}
                quote.js: {}
                quote.js.map: {}
                re2.d.ts: {}
                re2.js: {}
                re2.js.map: {}
                timestamp.d.ts: {}
                timestamp.js: {}
                timestamp.js.map: {}
                ucs2length.d.ts: {}
                ucs2length.js: {}
                ucs2length.js.map: {}
                uri.d.ts: {}
                uri.js: {}
                uri.js.map: {}
                validation_error.d.ts: {}
                validation_error.js: {}
                validation_error.js.map: {}
              standalone:
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                instance.d.ts: {}
                instance.js: {}
                instance.js.map: {}
              types:
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                json-schema.d.ts: {}
                json-schema.js: {}
                json-schema.js.map: {}
                jtd-schema.d.ts: {}
                jtd-schema.js: {}
                jtd-schema.js.map: {}
              vocabularies:
                applicator:
                  additionalItems.d.ts: {}
                  additionalItems.js: {}
                  additionalItems.js.map: {}
                  additionalProperties.d.ts: {}
                  additionalProperties.js: {}
                  additionalProperties.js.map: {}
                  allOf.d.ts: {}
                  allOf.js: {}
                  allOf.js.map: {}
                  anyOf.d.ts: {}
                  anyOf.js: {}
                  anyOf.js.map: {}
                  contains.d.ts: {}
                  contains.js: {}
                  contains.js.map: {}
                  dependencies.d.ts: {}
                  dependencies.js: {}
                  dependencies.js.map: {}
                  dependentSchemas.d.ts: {}
                  dependentSchemas.js: {}
                  dependentSchemas.js.map: {}
                  if.d.ts: {}
                  if.js: {}
                  if.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  items.d.ts: {}
                  items.js: {}
                  items.js.map: {}
                  items2020.d.ts: {}
                  items2020.js: {}
                  items2020.js.map: {}
                  not.d.ts: {}
                  not.js: {}
                  not.js.map: {}
                  oneOf.d.ts: {}
                  oneOf.js: {}
                  oneOf.js.map: {}
                  patternProperties.d.ts: {}
                  patternProperties.js: {}
                  patternProperties.js.map: {}
                  prefixItems.d.ts: {}
                  prefixItems.js: {}
                  prefixItems.js.map: {}
                  properties.d.ts: {}
                  properties.js: {}
                  properties.js.map: {}
                  propertyNames.d.ts: {}
                  propertyNames.js: {}
                  propertyNames.js.map: {}
                  thenElse.d.ts: {}
                  thenElse.js: {}
                  thenElse.js.map: {}
                code.d.ts: {}
                code.js: {}
                code.js.map: {}
                core:
                  id.d.ts: {}
                  id.js: {}
                  id.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  ref.d.ts: {}
                  ref.js: {}
                  ref.js.map: {}
                discriminator:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  types.d.ts: {}
                  types.js: {}
                  types.js.map: {}
                draft2020.d.ts: {}
                draft2020.js: {}
                draft2020.js.map: {}
                draft7.d.ts: {}
                draft7.js: {}
                draft7.js.map: {}
                dynamic:
                  dynamicAnchor.d.ts: {}
                  dynamicAnchor.js: {}
                  dynamicAnchor.js.map: {}
                  dynamicRef.d.ts: {}
                  dynamicRef.js: {}
                  dynamicRef.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  recursiveAnchor.d.ts: {}
                  recursiveAnchor.js: {}
                  recursiveAnchor.js.map: {}
                  recursiveRef.d.ts: {}
                  recursiveRef.js: {}
                  recursiveRef.js.map: {}
                errors.d.ts: {}
                errors.js: {}
                errors.js.map: {}
                format:
                  format.d.ts: {}
                  format.js: {}
                  format.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                jtd:
                  discriminator.d.ts: {}
                  discriminator.js: {}
                  discriminator.js.map: {}
                  elements.d.ts: {}
                  elements.js: {}
                  elements.js.map: {}
                  enum.d.ts: {}
                  enum.js: {}
                  enum.js.map: {}
                  error.d.ts: {}
                  error.js: {}
                  error.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  metadata.d.ts: {}
                  metadata.js: {}
                  metadata.js.map: {}
                  nullable.d.ts: {}
                  nullable.js: {}
                  nullable.js.map: {}
                  optionalProperties.d.ts: {}
                  optionalProperties.js: {}
                  optionalProperties.js.map: {}
                  properties.d.ts: {}
                  properties.js: {}
                  properties.js.map: {}
                  ref.d.ts: {}
                  ref.js: {}
                  ref.js.map: {}
                  type.d.ts: {}
                  type.js: {}
                  type.js.map: {}
                  union.d.ts: {}
                  union.js: {}
                  union.js.map: {}
                  values.d.ts: {}
                  values.js: {}
                  values.js.map: {}
                metadata.d.ts: {}
                metadata.js: {}
                metadata.js.map: {}
                next.d.ts: {}
                next.js: {}
                next.js.map: {}
                unevaluated:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  unevaluatedItems.d.ts: {}
                  unevaluatedItems.js: {}
                  unevaluatedItems.js.map: {}
                  unevaluatedProperties.d.ts: {}
                  unevaluatedProperties.js: {}
                  unevaluatedProperties.js.map: {}
                validation:
                  const.d.ts: {}
                  const.js: {}
                  const.js.map: {}
                  dependentRequired.d.ts: {}
                  dependentRequired.js: {}
                  dependentRequired.js.map: {}
                  enum.d.ts: {}
                  enum.js: {}
                  enum.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  limitContains.d.ts: {}
                  limitContains.js: {}
                  limitContains.js.map: {}
                  limitItems.d.ts: {}
                  limitItems.js: {}
                  limitItems.js.map: {}
                  limitLength.d.ts: {}
                  limitLength.js: {}
                  limitLength.js.map: {}
                  limitNumber.d.ts: {}
                  limitNumber.js: {}
                  limitNumber.js.map: {}
                  limitProperties.d.ts: {}
                  limitProperties.js: {}
                  limitProperties.js.map: {}
                  multipleOf.d.ts: {}
                  multipleOf.js: {}
                  multipleOf.js.map: {}
                  pattern.d.ts: {}
                  pattern.js: {}
                  pattern.js.map: {}
                  required.d.ts: {}
                  required.js: {}
                  required.js.map: {}
                  uniqueItems.d.ts: {}
                  uniqueItems.js: {}
                  uniqueItems.js.map: {}
            lib:
              2019.ts: {}
              2020.ts: {}
              ajv.ts: {}
              compile:
                codegen:
                  code.ts: {}
                  index.ts: {}
                  scope.ts: {}
                errors.ts: {}
                index.ts: {}
                jtd:
                  parse.ts: {}
                  serialize.ts: {}
                  types.ts: {}
                names.ts: {}
                ref_error.ts: {}
                resolve.ts: {}
                rules.ts: {}
                util.ts: {}
                validate:
                  applicability.ts: {}
                  boolSchema.ts: {}
                  dataType.ts: {}
                  defaults.ts: {}
                  index.ts: {}
                  keyword.ts: {}
                  subschema.ts: {}
              core.ts: {}
              jtd.ts: {}
              refs:
                data.json: {}
                json-schema-2019-09:
                  index.ts: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format.json: {}
                    meta-data.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-2020-12:
                  index.ts: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format-annotation.json: {}
                    meta-data.json: {}
                    unevaluated.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-draft-06.json: {}
                json-schema-draft-07.json: {}
                json-schema-secure.json: {}
                jtd-schema.ts: {}
              runtime:
                equal.ts: {}
                parseJson.ts: {}
                quote.ts: {}
                re2.ts: {}
                timestamp.ts: {}
                ucs2length.ts: {}
                uri.ts: {}
                validation_error.ts: {}
              standalone:
                index.ts: {}
                instance.ts: {}
              types:
                index.ts: {}
                json-schema.ts: {}
                jtd-schema.ts: {}
              vocabularies:
                applicator:
                  additionalItems.ts: {}
                  additionalProperties.ts: {}
                  allOf.ts: {}
                  anyOf.ts: {}
                  contains.ts: {}
                  dependencies.ts: {}
                  dependentSchemas.ts: {}
                  if.ts: {}
                  index.ts: {}
                  items.ts: {}
                  items2020.ts: {}
                  not.ts: {}
                  oneOf.ts: {}
                  patternProperties.ts: {}
                  prefixItems.ts: {}
                  properties.ts: {}
                  propertyNames.ts: {}
                  thenElse.ts: {}
                code.ts: {}
                core:
                  id.ts: {}
                  index.ts: {}
                  ref.ts: {}
                discriminator:
                  index.ts: {}
                  types.ts: {}
                draft2020.ts: {}
                draft7.ts: {}
                dynamic:
                  dynamicAnchor.ts: {}
                  dynamicRef.ts: {}
                  index.ts: {}
                  recursiveAnchor.ts: {}
                  recursiveRef.ts: {}
                errors.ts: {}
                format:
                  format.ts: {}
                  index.ts: {}
                jtd:
                  discriminator.ts: {}
                  elements.ts: {}
                  enum.ts: {}
                  error.ts: {}
                  index.ts: {}
                  metadata.ts: {}
                  nullable.ts: {}
                  optionalProperties.ts: {}
                  properties.ts: {}
                  ref.ts: {}
                  type.ts: {}
                  union.ts: {}
                  values.ts: {}
                metadata.ts: {}
                next.ts: {}
                unevaluated:
                  index.ts: {}
                  unevaluatedItems.ts: {}
                  unevaluatedProperties.ts: {}
                validation:
                  const.ts: {}
                  dependentRequired.ts: {}
                  enum.ts: {}
                  index.ts: {}
                  limitContains.ts: {}
                  limitItems.ts: {}
                  limitLength.ts: {}
                  limitNumber.ts: {}
                  limitProperties.ts: {}
                  multipleOf.ts: {}
                  pattern.ts: {}
                  required.ts: {}
                  uniqueItems.ts: {}
            package.json: {}
          ajv-keywords:
            LICENSE: {}
            README.md: {}
            dist:
              definitions:
                _range.d.ts: {}
                _range.js: {}
                _range.js.map: {}
                _required.d.ts: {}
                _required.js: {}
                _required.js.map: {}
                _types.d.ts: {}
                _types.js: {}
                _types.js.map: {}
                _util.d.ts: {}
                _util.js: {}
                _util.js.map: {}
                allRequired.d.ts: {}
                allRequired.js: {}
                allRequired.js.map: {}
                anyRequired.d.ts: {}
                anyRequired.js: {}
                anyRequired.js.map: {}
                deepProperties.d.ts: {}
                deepProperties.js: {}
                deepProperties.js.map: {}
                deepRequired.d.ts: {}
                deepRequired.js: {}
                deepRequired.js.map: {}
                dynamicDefaults.d.ts: {}
                dynamicDefaults.js: {}
                dynamicDefaults.js.map: {}
                exclusiveRange.d.ts: {}
                exclusiveRange.js: {}
                exclusiveRange.js.map: {}
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                instanceof.d.ts: {}
                instanceof.js: {}
                instanceof.js.map: {}
                oneRequired.d.ts: {}
                oneRequired.js: {}
                oneRequired.js.map: {}
                patternRequired.d.ts: {}
                patternRequired.js: {}
                patternRequired.js.map: {}
                prohibited.d.ts: {}
                prohibited.js: {}
                prohibited.js.map: {}
                range.d.ts: {}
                range.js: {}
                range.js.map: {}
                regexp.d.ts: {}
                regexp.js: {}
                regexp.js.map: {}
                select.d.ts: {}
                select.js: {}
                select.js.map: {}
                transform.d.ts: {}
                transform.js: {}
                transform.js.map: {}
                typeof.d.ts: {}
                typeof.js: {}
                typeof.js.map: {}
                uniqueItemProperties.d.ts: {}
                uniqueItemProperties.js: {}
                uniqueItemProperties.js.map: {}
              index.d.ts: {}
              index.js: {}
              index.js.map: {}
              keywords:
                allRequired.d.ts: {}
                allRequired.js: {}
                allRequired.js.map: {}
                anyRequired.d.ts: {}
                anyRequired.js: {}
                anyRequired.js.map: {}
                deepProperties.d.ts: {}
                deepProperties.js: {}
                deepProperties.js.map: {}
                deepRequired.d.ts: {}
                deepRequired.js: {}
                deepRequired.js.map: {}
                dynamicDefaults.d.ts: {}
                dynamicDefaults.js: {}
                dynamicDefaults.js.map: {}
                exclusiveRange.d.ts: {}
                exclusiveRange.js: {}
                exclusiveRange.js.map: {}
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                instanceof.d.ts: {}
                instanceof.js: {}
                instanceof.js.map: {}
                oneRequired.d.ts: {}
                oneRequired.js: {}
                oneRequired.js.map: {}
                patternRequired.d.ts: {}
                patternRequired.js: {}
                patternRequired.js.map: {}
                prohibited.d.ts: {}
                prohibited.js: {}
                prohibited.js.map: {}
                range.d.ts: {}
                range.js: {}
                range.js.map: {}
                regexp.d.ts: {}
                regexp.js: {}
                regexp.js.map: {}
                select.d.ts: {}
                select.js: {}
                select.js.map: {}
                transform.d.ts: {}
                transform.js: {}
                transform.js.map: {}
                typeof.d.ts: {}
                typeof.js: {}
                typeof.js.map: {}
                uniqueItemProperties.d.ts: {}
                uniqueItemProperties.js: {}
                uniqueItemProperties.js.map: {}
            package.json: {}
            src:
              definitions:
                _range.ts: {}
                _required.ts: {}
                _types.ts: {}
                _util.ts: {}
                allRequired.ts: {}
                anyRequired.ts: {}
                deepProperties.ts: {}
                deepRequired.ts: {}
                dynamicDefaults.ts: {}
                exclusiveRange.ts: {}
                index.ts: {}
                instanceof.ts: {}
                oneRequired.ts: {}
                patternRequired.ts: {}
                prohibited.ts: {}
                range.ts: {}
                regexp.ts: {}
                select.ts: {}
                transform.ts: {}
                typeof.ts: {}
                uniqueItemProperties.ts: {}
              index.ts: {}
              keywords:
                allRequired.ts: {}
                anyRequired.ts: {}
                deepProperties.ts: {}
                deepRequired.ts: {}
                dynamicDefaults.ts: {}
                exclusiveRange.ts: {}
                index.ts: {}
                instanceof.ts: {}
                oneRequired.ts: {}
                patternRequired.ts: {}
                prohibited.ts: {}
                range.ts: {}
                regexp.ts: {}
                select.ts: {}
                transform.ts: {}
                typeof.ts: {}
                uniqueItemProperties.ts: {}
          json-schema-traverse:
            .eslintrc.yml: {}
            .github:
              FUNDING.yml: {}
              workflows:
                build.yml: {}
                publish.yml: {}
            LICENSE: {}
            README.md: {}
            index.d.ts: {}
            index.js: {}
            package.json: {}
            spec:
              .eslintrc.yml: {}
              fixtures:
                schema.js: {}
              index.spec.js: {}
          schema-utils:
            LICENSE: {}
            README.md: {}
            declarations:
              ValidationError.d.ts: {}
              index.d.ts: {}
              keywords:
                absolutePath.d.ts: {}
                undefinedAsNull.d.ts: {}
              util:
                Range.d.ts: {}
                hints.d.ts: {}
                memorize.d.ts: {}
              validate.d.ts: {}
            dist:
              ValidationError.js: {}
              index.js: {}
              keywords:
                absolutePath.js: {}
                undefinedAsNull.js: {}
              util:
                Range.js: {}
                hints.js: {}
                memorize.js: {}
              validate.js: {}
            package.json: {}
        package.json: {}
        types:
          index.d.ts: {}
          middleware.d.ts: {}
          utils:
            compatibleAPI.d.ts: {}
            getFilenameFromUrl.d.ts: {}
            getPaths.d.ts: {}
            ready.d.ts: {}
            setupHooks.d.ts: {}
            setupOutputFileSystem.d.ts: {}
            setupWriteToDisk.d.ts: {}
      webpack-dev-server:
        LICENSE: {}
        README.md: {}
        bin:
          cli-flags.js: {}
          process-arguments.js: {}
          webpack-dev-server.js: {}
        client:
          clients:
            SockJSClient.js: {}
            WebSocketClient.js: {}
          index.js: {}
          modules:
            logger:
              index.js: {}
            sockjs-client:
              index.js: {}
          overlay:
            fsm.js: {}
            runtime-error.js: {}
            state-machine.js: {}
            styles.js: {}
          overlay.js: {}
          socket.js: {}
          utils:
            createSocketURL.js: {}
            getCurrentScriptSource.js: {}
            log.js: {}
            parseURL.js: {}
            reloadApp.js: {}
            sendMessage.js: {}
            stripAnsi.js: {}
        lib:
          Server.js: {}
          getPort.js: {}
          options.json: {}
          servers:
            BaseServer.js: {}
            SockJSServer.js: {}
            WebsocketServer.js: {}
        node_modules:
          ajv:
            .runkit_example.js: {}
            LICENSE: {}
            README.md: {}
            dist:
              2019.d.ts: {}
              2019.js: {}
              2019.js.map: {}
              2020.d.ts: {}
              2020.js: {}
              2020.js.map: {}
              ajv.d.ts: {}
              ajv.js: {}
              ajv.js.map: {}
              compile:
                codegen:
                  code.d.ts: {}
                  code.js: {}
                  code.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  scope.d.ts: {}
                  scope.js: {}
                  scope.js.map: {}
                errors.d.ts: {}
                errors.js: {}
                errors.js.map: {}
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                jtd:
                  parse.d.ts: {}
                  parse.js: {}
                  parse.js.map: {}
                  serialize.d.ts: {}
                  serialize.js: {}
                  serialize.js.map: {}
                  types.d.ts: {}
                  types.js: {}
                  types.js.map: {}
                names.d.ts: {}
                names.js: {}
                names.js.map: {}
                ref_error.d.ts: {}
                ref_error.js: {}
                ref_error.js.map: {}
                resolve.d.ts: {}
                resolve.js: {}
                resolve.js.map: {}
                rules.d.ts: {}
                rules.js: {}
                rules.js.map: {}
                util.d.ts: {}
                util.js: {}
                util.js.map: {}
                validate:
                  applicability.d.ts: {}
                  applicability.js: {}
                  applicability.js.map: {}
                  boolSchema.d.ts: {}
                  boolSchema.js: {}
                  boolSchema.js.map: {}
                  dataType.d.ts: {}
                  dataType.js: {}
                  dataType.js.map: {}
                  defaults.d.ts: {}
                  defaults.js: {}
                  defaults.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  keyword.d.ts: {}
                  keyword.js: {}
                  keyword.js.map: {}
                  subschema.d.ts: {}
                  subschema.js: {}
                  subschema.js.map: {}
              core.d.ts: {}
              core.js: {}
              core.js.map: {}
              jtd.d.ts: {}
              jtd.js: {}
              jtd.js.map: {}
              refs:
                data.json: {}
                json-schema-2019-09:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format.json: {}
                    meta-data.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-2020-12:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format-annotation.json: {}
                    meta-data.json: {}
                    unevaluated.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-draft-06.json: {}
                json-schema-draft-07.json: {}
                json-schema-secure.json: {}
                jtd-schema.d.ts: {}
                jtd-schema.js: {}
                jtd-schema.js.map: {}
              runtime:
                equal.d.ts: {}
                equal.js: {}
                equal.js.map: {}
                parseJson.d.ts: {}
                parseJson.js: {}
                parseJson.js.map: {}
                quote.d.ts: {}
                quote.js: {}
                quote.js.map: {}
                re2.d.ts: {}
                re2.js: {}
                re2.js.map: {}
                timestamp.d.ts: {}
                timestamp.js: {}
                timestamp.js.map: {}
                ucs2length.d.ts: {}
                ucs2length.js: {}
                ucs2length.js.map: {}
                uri.d.ts: {}
                uri.js: {}
                uri.js.map: {}
                validation_error.d.ts: {}
                validation_error.js: {}
                validation_error.js.map: {}
              standalone:
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                instance.d.ts: {}
                instance.js: {}
                instance.js.map: {}
              types:
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                json-schema.d.ts: {}
                json-schema.js: {}
                json-schema.js.map: {}
                jtd-schema.d.ts: {}
                jtd-schema.js: {}
                jtd-schema.js.map: {}
              vocabularies:
                applicator:
                  additionalItems.d.ts: {}
                  additionalItems.js: {}
                  additionalItems.js.map: {}
                  additionalProperties.d.ts: {}
                  additionalProperties.js: {}
                  additionalProperties.js.map: {}
                  allOf.d.ts: {}
                  allOf.js: {}
                  allOf.js.map: {}
                  anyOf.d.ts: {}
                  anyOf.js: {}
                  anyOf.js.map: {}
                  contains.d.ts: {}
                  contains.js: {}
                  contains.js.map: {}
                  dependencies.d.ts: {}
                  dependencies.js: {}
                  dependencies.js.map: {}
                  dependentSchemas.d.ts: {}
                  dependentSchemas.js: {}
                  dependentSchemas.js.map: {}
                  if.d.ts: {}
                  if.js: {}
                  if.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  items.d.ts: {}
                  items.js: {}
                  items.js.map: {}
                  items2020.d.ts: {}
                  items2020.js: {}
                  items2020.js.map: {}
                  not.d.ts: {}
                  not.js: {}
                  not.js.map: {}
                  oneOf.d.ts: {}
                  oneOf.js: {}
                  oneOf.js.map: {}
                  patternProperties.d.ts: {}
                  patternProperties.js: {}
                  patternProperties.js.map: {}
                  prefixItems.d.ts: {}
                  prefixItems.js: {}
                  prefixItems.js.map: {}
                  properties.d.ts: {}
                  properties.js: {}
                  properties.js.map: {}
                  propertyNames.d.ts: {}
                  propertyNames.js: {}
                  propertyNames.js.map: {}
                  thenElse.d.ts: {}
                  thenElse.js: {}
                  thenElse.js.map: {}
                code.d.ts: {}
                code.js: {}
                code.js.map: {}
                core:
                  id.d.ts: {}
                  id.js: {}
                  id.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  ref.d.ts: {}
                  ref.js: {}
                  ref.js.map: {}
                discriminator:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  types.d.ts: {}
                  types.js: {}
                  types.js.map: {}
                draft2020.d.ts: {}
                draft2020.js: {}
                draft2020.js.map: {}
                draft7.d.ts: {}
                draft7.js: {}
                draft7.js.map: {}
                dynamic:
                  dynamicAnchor.d.ts: {}
                  dynamicAnchor.js: {}
                  dynamicAnchor.js.map: {}
                  dynamicRef.d.ts: {}
                  dynamicRef.js: {}
                  dynamicRef.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  recursiveAnchor.d.ts: {}
                  recursiveAnchor.js: {}
                  recursiveAnchor.js.map: {}
                  recursiveRef.d.ts: {}
                  recursiveRef.js: {}
                  recursiveRef.js.map: {}
                errors.d.ts: {}
                errors.js: {}
                errors.js.map: {}
                format:
                  format.d.ts: {}
                  format.js: {}
                  format.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                jtd:
                  discriminator.d.ts: {}
                  discriminator.js: {}
                  discriminator.js.map: {}
                  elements.d.ts: {}
                  elements.js: {}
                  elements.js.map: {}
                  enum.d.ts: {}
                  enum.js: {}
                  enum.js.map: {}
                  error.d.ts: {}
                  error.js: {}
                  error.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  metadata.d.ts: {}
                  metadata.js: {}
                  metadata.js.map: {}
                  nullable.d.ts: {}
                  nullable.js: {}
                  nullable.js.map: {}
                  optionalProperties.d.ts: {}
                  optionalProperties.js: {}
                  optionalProperties.js.map: {}
                  properties.d.ts: {}
                  properties.js: {}
                  properties.js.map: {}
                  ref.d.ts: {}
                  ref.js: {}
                  ref.js.map: {}
                  type.d.ts: {}
                  type.js: {}
                  type.js.map: {}
                  union.d.ts: {}
                  union.js: {}
                  union.js.map: {}
                  values.d.ts: {}
                  values.js: {}
                  values.js.map: {}
                metadata.d.ts: {}
                metadata.js: {}
                metadata.js.map: {}
                next.d.ts: {}
                next.js: {}
                next.js.map: {}
                unevaluated:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  unevaluatedItems.d.ts: {}
                  unevaluatedItems.js: {}
                  unevaluatedItems.js.map: {}
                  unevaluatedProperties.d.ts: {}
                  unevaluatedProperties.js: {}
                  unevaluatedProperties.js.map: {}
                validation:
                  const.d.ts: {}
                  const.js: {}
                  const.js.map: {}
                  dependentRequired.d.ts: {}
                  dependentRequired.js: {}
                  dependentRequired.js.map: {}
                  enum.d.ts: {}
                  enum.js: {}
                  enum.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  limitContains.d.ts: {}
                  limitContains.js: {}
                  limitContains.js.map: {}
                  limitItems.d.ts: {}
                  limitItems.js: {}
                  limitItems.js.map: {}
                  limitLength.d.ts: {}
                  limitLength.js: {}
                  limitLength.js.map: {}
                  limitNumber.d.ts: {}
                  limitNumber.js: {}
                  limitNumber.js.map: {}
                  limitProperties.d.ts: {}
                  limitProperties.js: {}
                  limitProperties.js.map: {}
                  multipleOf.d.ts: {}
                  multipleOf.js: {}
                  multipleOf.js.map: {}
                  pattern.d.ts: {}
                  pattern.js: {}
                  pattern.js.map: {}
                  required.d.ts: {}
                  required.js: {}
                  required.js.map: {}
                  uniqueItems.d.ts: {}
                  uniqueItems.js: {}
                  uniqueItems.js.map: {}
            lib:
              2019.ts: {}
              2020.ts: {}
              ajv.ts: {}
              compile:
                codegen:
                  code.ts: {}
                  index.ts: {}
                  scope.ts: {}
                errors.ts: {}
                index.ts: {}
                jtd:
                  parse.ts: {}
                  serialize.ts: {}
                  types.ts: {}
                names.ts: {}
                ref_error.ts: {}
                resolve.ts: {}
                rules.ts: {}
                util.ts: {}
                validate:
                  applicability.ts: {}
                  boolSchema.ts: {}
                  dataType.ts: {}
                  defaults.ts: {}
                  index.ts: {}
                  keyword.ts: {}
                  subschema.ts: {}
              core.ts: {}
              jtd.ts: {}
              refs:
                data.json: {}
                json-schema-2019-09:
                  index.ts: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format.json: {}
                    meta-data.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-2020-12:
                  index.ts: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format-annotation.json: {}
                    meta-data.json: {}
                    unevaluated.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-draft-06.json: {}
                json-schema-draft-07.json: {}
                json-schema-secure.json: {}
                jtd-schema.ts: {}
              runtime:
                equal.ts: {}
                parseJson.ts: {}
                quote.ts: {}
                re2.ts: {}
                timestamp.ts: {}
                ucs2length.ts: {}
                uri.ts: {}
                validation_error.ts: {}
              standalone:
                index.ts: {}
                instance.ts: {}
              types:
                index.ts: {}
                json-schema.ts: {}
                jtd-schema.ts: {}
              vocabularies:
                applicator:
                  additionalItems.ts: {}
                  additionalProperties.ts: {}
                  allOf.ts: {}
                  anyOf.ts: {}
                  contains.ts: {}
                  dependencies.ts: {}
                  dependentSchemas.ts: {}
                  if.ts: {}
                  index.ts: {}
                  items.ts: {}
                  items2020.ts: {}
                  not.ts: {}
                  oneOf.ts: {}
                  patternProperties.ts: {}
                  prefixItems.ts: {}
                  properties.ts: {}
                  propertyNames.ts: {}
                  thenElse.ts: {}
                code.ts: {}
                core:
                  id.ts: {}
                  index.ts: {}
                  ref.ts: {}
                discriminator:
                  index.ts: {}
                  types.ts: {}
                draft2020.ts: {}
                draft7.ts: {}
                dynamic:
                  dynamicAnchor.ts: {}
                  dynamicRef.ts: {}
                  index.ts: {}
                  recursiveAnchor.ts: {}
                  recursiveRef.ts: {}
                errors.ts: {}
                format:
                  format.ts: {}
                  index.ts: {}
                jtd:
                  discriminator.ts: {}
                  elements.ts: {}
                  enum.ts: {}
                  error.ts: {}
                  index.ts: {}
                  metadata.ts: {}
                  nullable.ts: {}
                  optionalProperties.ts: {}
                  properties.ts: {}
                  ref.ts: {}
                  type.ts: {}
                  union.ts: {}
                  values.ts: {}
                metadata.ts: {}
                next.ts: {}
                unevaluated:
                  index.ts: {}
                  unevaluatedItems.ts: {}
                  unevaluatedProperties.ts: {}
                validation:
                  const.ts: {}
                  dependentRequired.ts: {}
                  enum.ts: {}
                  index.ts: {}
                  limitContains.ts: {}
                  limitItems.ts: {}
                  limitLength.ts: {}
                  limitNumber.ts: {}
                  limitProperties.ts: {}
                  multipleOf.ts: {}
                  pattern.ts: {}
                  required.ts: {}
                  uniqueItems.ts: {}
            package.json: {}
          ajv-keywords:
            LICENSE: {}
            README.md: {}
            dist:
              definitions:
                _range.d.ts: {}
                _range.js: {}
                _range.js.map: {}
                _required.d.ts: {}
                _required.js: {}
                _required.js.map: {}
                _types.d.ts: {}
                _types.js: {}
                _types.js.map: {}
                _util.d.ts: {}
                _util.js: {}
                _util.js.map: {}
                allRequired.d.ts: {}
                allRequired.js: {}
                allRequired.js.map: {}
                anyRequired.d.ts: {}
                anyRequired.js: {}
                anyRequired.js.map: {}
                deepProperties.d.ts: {}
                deepProperties.js: {}
                deepProperties.js.map: {}
                deepRequired.d.ts: {}
                deepRequired.js: {}
                deepRequired.js.map: {}
                dynamicDefaults.d.ts: {}
                dynamicDefaults.js: {}
                dynamicDefaults.js.map: {}
                exclusiveRange.d.ts: {}
                exclusiveRange.js: {}
                exclusiveRange.js.map: {}
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                instanceof.d.ts: {}
                instanceof.js: {}
                instanceof.js.map: {}
                oneRequired.d.ts: {}
                oneRequired.js: {}
                oneRequired.js.map: {}
                patternRequired.d.ts: {}
                patternRequired.js: {}
                patternRequired.js.map: {}
                prohibited.d.ts: {}
                prohibited.js: {}
                prohibited.js.map: {}
                range.d.ts: {}
                range.js: {}
                range.js.map: {}
                regexp.d.ts: {}
                regexp.js: {}
                regexp.js.map: {}
                select.d.ts: {}
                select.js: {}
                select.js.map: {}
                transform.d.ts: {}
                transform.js: {}
                transform.js.map: {}
                typeof.d.ts: {}
                typeof.js: {}
                typeof.js.map: {}
                uniqueItemProperties.d.ts: {}
                uniqueItemProperties.js: {}
                uniqueItemProperties.js.map: {}
              index.d.ts: {}
              index.js: {}
              index.js.map: {}
              keywords:
                allRequired.d.ts: {}
                allRequired.js: {}
                allRequired.js.map: {}
                anyRequired.d.ts: {}
                anyRequired.js: {}
                anyRequired.js.map: {}
                deepProperties.d.ts: {}
                deepProperties.js: {}
                deepProperties.js.map: {}
                deepRequired.d.ts: {}
                deepRequired.js: {}
                deepRequired.js.map: {}
                dynamicDefaults.d.ts: {}
                dynamicDefaults.js: {}
                dynamicDefaults.js.map: {}
                exclusiveRange.d.ts: {}
                exclusiveRange.js: {}
                exclusiveRange.js.map: {}
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                instanceof.d.ts: {}
                instanceof.js: {}
                instanceof.js.map: {}
                oneRequired.d.ts: {}
                oneRequired.js: {}
                oneRequired.js.map: {}
                patternRequired.d.ts: {}
                patternRequired.js: {}
                patternRequired.js.map: {}
                prohibited.d.ts: {}
                prohibited.js: {}
                prohibited.js.map: {}
                range.d.ts: {}
                range.js: {}
                range.js.map: {}
                regexp.d.ts: {}
                regexp.js: {}
                regexp.js.map: {}
                select.d.ts: {}
                select.js: {}
                select.js.map: {}
                transform.d.ts: {}
                transform.js: {}
                transform.js.map: {}
                typeof.d.ts: {}
                typeof.js: {}
                typeof.js.map: {}
                uniqueItemProperties.d.ts: {}
                uniqueItemProperties.js: {}
                uniqueItemProperties.js.map: {}
            package.json: {}
            src:
              definitions:
                _range.ts: {}
                _required.ts: {}
                _types.ts: {}
                _util.ts: {}
                allRequired.ts: {}
                anyRequired.ts: {}
                deepProperties.ts: {}
                deepRequired.ts: {}
                dynamicDefaults.ts: {}
                exclusiveRange.ts: {}
                index.ts: {}
                instanceof.ts: {}
                oneRequired.ts: {}
                patternRequired.ts: {}
                prohibited.ts: {}
                range.ts: {}
                regexp.ts: {}
                select.ts: {}
                transform.ts: {}
                typeof.ts: {}
                uniqueItemProperties.ts: {}
              index.ts: {}
              keywords:
                allRequired.ts: {}
                anyRequired.ts: {}
                deepProperties.ts: {}
                deepRequired.ts: {}
                dynamicDefaults.ts: {}
                exclusiveRange.ts: {}
                index.ts: {}
                instanceof.ts: {}
                oneRequired.ts: {}
                patternRequired.ts: {}
                prohibited.ts: {}
                range.ts: {}
                regexp.ts: {}
                select.ts: {}
                transform.ts: {}
                typeof.ts: {}
                uniqueItemProperties.ts: {}
          json-schema-traverse:
            .eslintrc.yml: {}
            .github:
              FUNDING.yml: {}
              workflows:
                build.yml: {}
                publish.yml: {}
            LICENSE: {}
            README.md: {}
            index.d.ts: {}
            index.js: {}
            package.json: {}
            spec:
              .eslintrc.yml: {}
              fixtures:
                schema.js: {}
              index.spec.js: {}
          schema-utils:
            LICENSE: {}
            README.md: {}
            declarations:
              ValidationError.d.ts: {}
              index.d.ts: {}
              keywords:
                absolutePath.d.ts: {}
                undefinedAsNull.d.ts: {}
              util:
                Range.d.ts: {}
                hints.d.ts: {}
                memorize.d.ts: {}
              validate.d.ts: {}
            dist:
              ValidationError.js: {}
              index.js: {}
              keywords:
                absolutePath.js: {}
                undefinedAsNull.js: {}
              util:
                Range.js: {}
                hints.js: {}
                memorize.js: {}
              validate.js: {}
            package.json: {}
          ws:
            LICENSE: {}
            README.md: {}
            browser.js: {}
            index.js: {}
            lib:
              buffer-util.js: {}
              constants.js: {}
              event-target.js: {}
              extension.js: {}
              limiter.js: {}
              permessage-deflate.js: {}
              receiver.js: {}
              sender.js: {}
              stream.js: {}
              subprotocol.js: {}
              validation.js: {}
              websocket-server.js: {}
              websocket.js: {}
            package.json: {}
            wrapper.mjs: {}
        package.json: {}
        types:
          bin:
            cli-flags.d.ts: {}
            process-arguments.d.ts: {}
            webpack-dev-server.d.ts: {}
          lib:
            Server.d.ts: {}
            getPort.d.ts: {}
            servers:
              BaseServer.d.ts: {}
              SockJSServer.d.ts: {}
              WebsocketServer.d.ts: {}
      webpack-manifest-plugin:
        LICENSE: {}
        README.md: {}
        dist:
          helpers.d.ts: {}
          helpers.js: {}
          helpers.js.map: {}
          hooks.d.ts: {}
          hooks.js: {}
          hooks.js.map: {}
          index.d.ts: {}
          index.js: {}
          index.js.map: {}
        node_modules:
          source-map:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            dist:
              source-map.debug.js: {}
              source-map.js: {}
              source-map.min.js: {}
              source-map.min.js.map: {}
            lib:
              array-set.js: {}
              base64-vlq.js: {}
              base64.js: {}
              binary-search.js: {}
              mapping-list.js: {}
              quick-sort.js: {}
              source-map-consumer.js: {}
              source-map-generator.js: {}
              source-node.js: {}
              util.js: {}
            package.json: {}
            source-map.d.ts: {}
            source-map.js: {}
          webpack-sources:
            LICENSE: {}
            README.md: {}
            lib:
              CachedSource.js: {}
              CompatSource.js: {}
              ConcatSource.js: {}
              OriginalSource.js: {}
              PrefixSource.js: {}
              RawSource.js: {}
              ReplaceSource.js: {}
              SizeOnlySource.js: {}
              Source.js: {}
              SourceMapSource.js: {}
              applySourceMap.js: {}
              helpers.js: {}
              index.js: {}
            package.json: {}
        package.json: {}
      webpack-sources:
        LICENSE: {}
        README.md: {}
        lib:
          CachedSource.js: {}
          CompatSource.js: {}
          ConcatSource.js: {}
          OriginalSource.js: {}
          PrefixSource.js: {}
          RawSource.js: {}
          ReplaceSource.js: {}
          SizeOnlySource.js: {}
          Source.js: {}
          SourceMapSource.js: {}
          helpers:
            createMappingsSerializer.js: {}
            getFromStreamChunks.js: {}
            getGeneratedSourceInfo.js: {}
            getName.js: {}
            getSource.js: {}
            readMappings.js: {}
            splitIntoLines.js: {}
            splitIntoPotentialTokens.js: {}
            streamAndGetSourceAndMap.js: {}
            streamChunks.js: {}
            streamChunksOfCombinedSourceMap.js: {}
            streamChunksOfRawSource.js: {}
            streamChunksOfSourceMap.js: {}
          index.js: {}
        package.json: {}
      websocket-driver:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        lib:
          websocket:
            driver:
              base.js: {}
              client.js: {}
              draft75.js: {}
              draft76.js: {}
              headers.js: {}
              hybi:
                frame.js: {}
                message.js: {}
              hybi.js: {}
              proxy.js: {}
              server.js: {}
              stream_reader.js: {}
            driver.js: {}
            http_parser.js: {}
            streams.js: {}
        package.json: {}
      websocket-extensions:
        CHANGELOG.md: {}
        LICENSE.md: {}
        README.md: {}
        lib:
          parser.js: {}
          pipeline:
            README.md: {}
            cell.js: {}
            functor.js: {}
            index.js: {}
            pledge.js: {}
            ring_buffer.js: {}
          websocket_extensions.js: {}
        package.json: {}
      whatwg-encoding:
        LICENSE.txt: {}
        README.md: {}
        lib:
          labels-to-names.json: {}
          supported-names.json: {}
          whatwg-encoding.js: {}
        node_modules:
          iconv-lite:
            Changelog.md: {}
            LICENSE: {}
            README.md: {}
            encodings:
              dbcs-codec.js: {}
              dbcs-data.js: {}
              index.js: {}
              internal.js: {}
              sbcs-codec.js: {}
              sbcs-data-generated.js: {}
              sbcs-data.js: {}
              tables:
                big5-added.json: {}
                cp936.json: {}
                cp949.json: {}
                cp950.json: {}
                eucjp.json: {}
                gb18030-ranges.json: {}
                gbk-added.json: {}
                shiftjis.json: {}
              utf16.js: {}
              utf7.js: {}
            lib:
              bom-handling.js: {}
              extend-node.js: {}
              index.d.ts: {}
              index.js: {}
              streams.js: {}
            package.json: {}
        package.json: {}
      whatwg-fetch:
        LICENSE: {}
        README.md: {}
        dist:
          fetch.umd.js: {}
          fetch.umd.js.flow: {}
        fetch.js: {}
        fetch.js.flow: {}
        package.json: {}
      whatwg-mimetype:
        LICENSE.txt: {}
        README.md: {}
        lib:
          mime-type.js: {}
          parser.js: {}
          serializer.js: {}
          utils.js: {}
        package.json: {}
      whatwg-url:
        LICENSE.txt: {}
        README.md: {}
        dist:
          Function.js: {}
          URL-impl.js: {}
          URL.js: {}
          URLSearchParams-impl.js: {}
          URLSearchParams.js: {}
          VoidFunction.js: {}
          encoding.js: {}
          infra.js: {}
          percent-encoding.js: {}
          url-state-machine.js: {}
          urlencoded.js: {}
          utils.js: {}
        index.js: {}
        package.json: {}
        webidl2js-wrapper.js: {}
      which:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        bin:
          node-which: {}
        package.json: {}
        which.js: {}
      which-boxed-primitive:
        .editorconfig: {}
        .eslintignore: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      which-builtin-type:
        .eslintrc: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
      which-collection:
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      which-typed-array:
        .editorconfig: {}
        .eslintrc: {}
        .github:
          FUNDING.yml: {}
        .nycrc: {}
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
        test:
          index.js: {}
        tsconfig.json: {}
      word-wrap:
        LICENSE: {}
        README.md: {}
        index.d.ts: {}
        index.js: {}
        package.json: {}
      workbox-background-sync:
        BackgroundSyncPlugin.d.ts: {}
        BackgroundSyncPlugin.js: {}
        BackgroundSyncPlugin.mjs: {}
        LICENSE: {}
        Queue.d.ts: {}
        Queue.js: {}
        Queue.mjs: {}
        QueueStore.d.ts: {}
        QueueStore.js: {}
        QueueStore.mjs: {}
        README.md: {}
        StorableRequest.d.ts: {}
        StorableRequest.js: {}
        StorableRequest.mjs: {}
        _version.d.ts: {}
        _version.js: {}
        _version.mjs: {}
        build:
          workbox-background-sync.dev.js: {}
          workbox-background-sync.dev.js.map: {}
          workbox-background-sync.prod.js: {}
          workbox-background-sync.prod.js.map: {}
        index.d.ts: {}
        index.js: {}
        index.mjs: {}
        lib:
          QueueDb.d.ts: {}
          QueueDb.js: {}
          QueueDb.mjs: {}
          QueueStore.d.ts: {}
          QueueStore.js: {}
          QueueStore.mjs: {}
          StorableRequest.d.ts: {}
          StorableRequest.js: {}
          StorableRequest.mjs: {}
        package.json: {}
        src:
          BackgroundSyncPlugin.ts: {}
          Queue.ts: {}
          QueueStore.ts: {}
          StorableRequest.ts: {}
          _version.ts: {}
          index.ts: {}
          lib:
            QueueDb.ts: {}
            QueueStore.ts: {}
            StorableRequest.ts: {}
        tsconfig.json: {}
        tsconfig.tsbuildinfo: {}
      workbox-broadcast-update:
        BroadcastCacheUpdate.d.ts: {}
        BroadcastCacheUpdate.js: {}
        BroadcastCacheUpdate.mjs: {}
        BroadcastUpdatePlugin.d.ts: {}
        BroadcastUpdatePlugin.js: {}
        BroadcastUpdatePlugin.mjs: {}
        LICENSE: {}
        README.md: {}
        _version.d.ts: {}
        _version.js: {}
        _version.mjs: {}
        build:
          workbox-broadcast-update.dev.js: {}
          workbox-broadcast-update.dev.js.map: {}
          workbox-broadcast-update.prod.js: {}
          workbox-broadcast-update.prod.js.map: {}
        index.d.ts: {}
        index.js: {}
        index.mjs: {}
        package.json: {}
        responsesAreSame.d.ts: {}
        responsesAreSame.js: {}
        responsesAreSame.mjs: {}
        src:
          BroadcastCacheUpdate.ts: {}
          BroadcastUpdatePlugin.ts: {}
          _version.ts: {}
          index.ts: {}
          responsesAreSame.ts: {}
          utils:
            constants.ts: {}
        tsconfig.json: {}
        tsconfig.tsbuildinfo: {}
        utils:
          constants.d.ts: {}
          constants.js: {}
          constants.mjs: {}
      workbox-build:
        .ncurc.js: {}
        LICENSE: {}
        README.md: {}
        build:
          cdn-details.json: {}
          generate-sw.d.ts: {}
          generate-sw.js: {}
          get-manifest.d.ts: {}
          get-manifest.js: {}
          index.d.ts: {}
          index.js: {}
          inject-manifest.d.ts: {}
          inject-manifest.js: {}
          lib:
            additional-manifest-entries-transform.d.ts: {}
            additional-manifest-entries-transform.js: {}
            bundle.d.ts: {}
            bundle.js: {}
            cdn-utils.d.ts: {}
            cdn-utils.js: {}
            copy-workbox-libraries.d.ts: {}
            copy-workbox-libraries.js: {}
            errors.d.ts: {}
            errors.js: {}
            escape-regexp.d.ts: {}
            escape-regexp.js: {}
            get-composite-details.d.ts: {}
            get-composite-details.js: {}
            get-file-details.d.ts: {}
            get-file-details.js: {}
            get-file-hash.d.ts: {}
            get-file-hash.js: {}
            get-file-manifest-entries.d.ts: {}
            get-file-manifest-entries.js: {}
            get-file-size.d.ts: {}
            get-file-size.js: {}
            get-source-map-url.d.ts: {}
            get-source-map-url.js: {}
            get-string-details.d.ts: {}
            get-string-details.js: {}
            get-string-hash.d.ts: {}
            get-string-hash.js: {}
            maximum-size-transform.d.ts: {}
            maximum-size-transform.js: {}
            modify-url-prefix-transform.d.ts: {}
            modify-url-prefix-transform.js: {}
            module-registry.d.ts: {}
            module-registry.js: {}
            no-revision-for-urls-matching-transform.d.ts: {}
            no-revision-for-urls-matching-transform.js: {}
            populate-sw-template.d.ts: {}
            populate-sw-template.js: {}
            rebase-path.d.ts: {}
            rebase-path.js: {}
            replace-and-update-source-map.d.ts: {}
            replace-and-update-source-map.js: {}
            runtime-caching-converter.d.ts: {}
            runtime-caching-converter.js: {}
            stringify-without-comments.d.ts: {}
            stringify-without-comments.js: {}
            transform-manifest.d.ts: {}
            transform-manifest.js: {}
            translate-url-to-sourcemap-paths.d.ts: {}
            translate-url-to-sourcemap-paths.js: {}
            validate-options.d.ts: {}
            validate-options.js: {}
            write-sw-using-default-template.d.ts: {}
            write-sw-using-default-template.js: {}
          schema:
            GenerateSWOptions.json: {}
            GetManifestOptions.json: {}
            InjectManifestOptions.json: {}
            WebpackGenerateSWOptions.json: {}
            WebpackInjectManifestOptions.json: {}
          templates:
            sw-template.d.ts: {}
            sw-template.js: {}
          types.d.ts: {}
          types.js: {}
        node_modules:
          '@apideck':
            better-ajv-errors:
              LICENSE: {}
              README.md: {}
              dist:
                better-ajv-errors.cjs.development.js: {}
                better-ajv-errors.cjs.development.js.map: {}
                better-ajv-errors.cjs.production.min.js: {}
                better-ajv-errors.cjs.production.min.js.map: {}
                better-ajv-errors.esm.js: {}
                better-ajv-errors.esm.js.map: {}
                constants.d.ts: {}
                index.d.ts: {}
                index.js: {}
                lib:
                  filter.d.ts: {}
                  suggestions.d.ts: {}
                  utils.d.ts: {}
                types:
                  ValidationError.d.ts: {}
              package.json: {}
              src:
                constants.ts: {}
                index.test.ts: {}
                index.ts: {}
                lib:
                  filter.ts: {}
                  suggestions.ts: {}
                  utils.ts: {}
                types:
                  ValidationError.ts: {}
          ajv:
            .runkit_example.js: {}
            LICENSE: {}
            README.md: {}
            dist:
              2019.d.ts: {}
              2019.js: {}
              2019.js.map: {}
              2020.d.ts: {}
              2020.js: {}
              2020.js.map: {}
              ajv.d.ts: {}
              ajv.js: {}
              ajv.js.map: {}
              compile:
                codegen:
                  code.d.ts: {}
                  code.js: {}
                  code.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  scope.d.ts: {}
                  scope.js: {}
                  scope.js.map: {}
                errors.d.ts: {}
                errors.js: {}
                errors.js.map: {}
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                jtd:
                  parse.d.ts: {}
                  parse.js: {}
                  parse.js.map: {}
                  serialize.d.ts: {}
                  serialize.js: {}
                  serialize.js.map: {}
                  types.d.ts: {}
                  types.js: {}
                  types.js.map: {}
                names.d.ts: {}
                names.js: {}
                names.js.map: {}
                ref_error.d.ts: {}
                ref_error.js: {}
                ref_error.js.map: {}
                resolve.d.ts: {}
                resolve.js: {}
                resolve.js.map: {}
                rules.d.ts: {}
                rules.js: {}
                rules.js.map: {}
                util.d.ts: {}
                util.js: {}
                util.js.map: {}
                validate:
                  applicability.d.ts: {}
                  applicability.js: {}
                  applicability.js.map: {}
                  boolSchema.d.ts: {}
                  boolSchema.js: {}
                  boolSchema.js.map: {}
                  dataType.d.ts: {}
                  dataType.js: {}
                  dataType.js.map: {}
                  defaults.d.ts: {}
                  defaults.js: {}
                  defaults.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  keyword.d.ts: {}
                  keyword.js: {}
                  keyword.js.map: {}
                  subschema.d.ts: {}
                  subschema.js: {}
                  subschema.js.map: {}
              core.d.ts: {}
              core.js: {}
              core.js.map: {}
              jtd.d.ts: {}
              jtd.js: {}
              jtd.js.map: {}
              refs:
                data.json: {}
                json-schema-2019-09:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format.json: {}
                    meta-data.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-2020-12:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format-annotation.json: {}
                    meta-data.json: {}
                    unevaluated.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-draft-06.json: {}
                json-schema-draft-07.json: {}
                json-schema-secure.json: {}
                jtd-schema.d.ts: {}
                jtd-schema.js: {}
                jtd-schema.js.map: {}
              runtime:
                equal.d.ts: {}
                equal.js: {}
                equal.js.map: {}
                parseJson.d.ts: {}
                parseJson.js: {}
                parseJson.js.map: {}
                quote.d.ts: {}
                quote.js: {}
                quote.js.map: {}
                re2.d.ts: {}
                re2.js: {}
                re2.js.map: {}
                timestamp.d.ts: {}
                timestamp.js: {}
                timestamp.js.map: {}
                ucs2length.d.ts: {}
                ucs2length.js: {}
                ucs2length.js.map: {}
                uri.d.ts: {}
                uri.js: {}
                uri.js.map: {}
                validation_error.d.ts: {}
                validation_error.js: {}
                validation_error.js.map: {}
              standalone:
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                instance.d.ts: {}
                instance.js: {}
                instance.js.map: {}
              types:
                index.d.ts: {}
                index.js: {}
                index.js.map: {}
                json-schema.d.ts: {}
                json-schema.js: {}
                json-schema.js.map: {}
                jtd-schema.d.ts: {}
                jtd-schema.js: {}
                jtd-schema.js.map: {}
              vocabularies:
                applicator:
                  additionalItems.d.ts: {}
                  additionalItems.js: {}
                  additionalItems.js.map: {}
                  additionalProperties.d.ts: {}
                  additionalProperties.js: {}
                  additionalProperties.js.map: {}
                  allOf.d.ts: {}
                  allOf.js: {}
                  allOf.js.map: {}
                  anyOf.d.ts: {}
                  anyOf.js: {}
                  anyOf.js.map: {}
                  contains.d.ts: {}
                  contains.js: {}
                  contains.js.map: {}
                  dependencies.d.ts: {}
                  dependencies.js: {}
                  dependencies.js.map: {}
                  dependentSchemas.d.ts: {}
                  dependentSchemas.js: {}
                  dependentSchemas.js.map: {}
                  if.d.ts: {}
                  if.js: {}
                  if.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  items.d.ts: {}
                  items.js: {}
                  items.js.map: {}
                  items2020.d.ts: {}
                  items2020.js: {}
                  items2020.js.map: {}
                  not.d.ts: {}
                  not.js: {}
                  not.js.map: {}
                  oneOf.d.ts: {}
                  oneOf.js: {}
                  oneOf.js.map: {}
                  patternProperties.d.ts: {}
                  patternProperties.js: {}
                  patternProperties.js.map: {}
                  prefixItems.d.ts: {}
                  prefixItems.js: {}
                  prefixItems.js.map: {}
                  properties.d.ts: {}
                  properties.js: {}
                  properties.js.map: {}
                  propertyNames.d.ts: {}
                  propertyNames.js: {}
                  propertyNames.js.map: {}
                  thenElse.d.ts: {}
                  thenElse.js: {}
                  thenElse.js.map: {}
                code.d.ts: {}
                code.js: {}
                code.js.map: {}
                core:
                  id.d.ts: {}
                  id.js: {}
                  id.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  ref.d.ts: {}
                  ref.js: {}
                  ref.js.map: {}
                discriminator:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  types.d.ts: {}
                  types.js: {}
                  types.js.map: {}
                draft2020.d.ts: {}
                draft2020.js: {}
                draft2020.js.map: {}
                draft7.d.ts: {}
                draft7.js: {}
                draft7.js.map: {}
                dynamic:
                  dynamicAnchor.d.ts: {}
                  dynamicAnchor.js: {}
                  dynamicAnchor.js.map: {}
                  dynamicRef.d.ts: {}
                  dynamicRef.js: {}
                  dynamicRef.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  recursiveAnchor.d.ts: {}
                  recursiveAnchor.js: {}
                  recursiveAnchor.js.map: {}
                  recursiveRef.d.ts: {}
                  recursiveRef.js: {}
                  recursiveRef.js.map: {}
                errors.d.ts: {}
                errors.js: {}
                errors.js.map: {}
                format:
                  format.d.ts: {}
                  format.js: {}
                  format.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                jtd:
                  discriminator.d.ts: {}
                  discriminator.js: {}
                  discriminator.js.map: {}
                  elements.d.ts: {}
                  elements.js: {}
                  elements.js.map: {}
                  enum.d.ts: {}
                  enum.js: {}
                  enum.js.map: {}
                  error.d.ts: {}
                  error.js: {}
                  error.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  metadata.d.ts: {}
                  metadata.js: {}
                  metadata.js.map: {}
                  nullable.d.ts: {}
                  nullable.js: {}
                  nullable.js.map: {}
                  optionalProperties.d.ts: {}
                  optionalProperties.js: {}
                  optionalProperties.js.map: {}
                  properties.d.ts: {}
                  properties.js: {}
                  properties.js.map: {}
                  ref.d.ts: {}
                  ref.js: {}
                  ref.js.map: {}
                  type.d.ts: {}
                  type.js: {}
                  type.js.map: {}
                  union.d.ts: {}
                  union.js: {}
                  union.js.map: {}
                  values.d.ts: {}
                  values.js: {}
                  values.js.map: {}
                metadata.d.ts: {}
                metadata.js: {}
                metadata.js.map: {}
                next.d.ts: {}
                next.js: {}
                next.js.map: {}
                unevaluated:
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  unevaluatedItems.d.ts: {}
                  unevaluatedItems.js: {}
                  unevaluatedItems.js.map: {}
                  unevaluatedProperties.d.ts: {}
                  unevaluatedProperties.js: {}
                  unevaluatedProperties.js.map: {}
                validation:
                  const.d.ts: {}
                  const.js: {}
                  const.js.map: {}
                  dependentRequired.d.ts: {}
                  dependentRequired.js: {}
                  dependentRequired.js.map: {}
                  enum.d.ts: {}
                  enum.js: {}
                  enum.js.map: {}
                  index.d.ts: {}
                  index.js: {}
                  index.js.map: {}
                  limitContains.d.ts: {}
                  limitContains.js: {}
                  limitContains.js.map: {}
                  limitItems.d.ts: {}
                  limitItems.js: {}
                  limitItems.js.map: {}
                  limitLength.d.ts: {}
                  limitLength.js: {}
                  limitLength.js.map: {}
                  limitNumber.d.ts: {}
                  limitNumber.js: {}
                  limitNumber.js.map: {}
                  limitProperties.d.ts: {}
                  limitProperties.js: {}
                  limitProperties.js.map: {}
                  multipleOf.d.ts: {}
                  multipleOf.js: {}
                  multipleOf.js.map: {}
                  pattern.d.ts: {}
                  pattern.js: {}
                  pattern.js.map: {}
                  required.d.ts: {}
                  required.js: {}
                  required.js.map: {}
                  uniqueItems.d.ts: {}
                  uniqueItems.js: {}
                  uniqueItems.js.map: {}
            lib:
              2019.ts: {}
              2020.ts: {}
              ajv.ts: {}
              compile:
                codegen:
                  code.ts: {}
                  index.ts: {}
                  scope.ts: {}
                errors.ts: {}
                index.ts: {}
                jtd:
                  parse.ts: {}
                  serialize.ts: {}
                  types.ts: {}
                names.ts: {}
                ref_error.ts: {}
                resolve.ts: {}
                rules.ts: {}
                util.ts: {}
                validate:
                  applicability.ts: {}
                  boolSchema.ts: {}
                  dataType.ts: {}
                  defaults.ts: {}
                  index.ts: {}
                  keyword.ts: {}
                  subschema.ts: {}
              core.ts: {}
              jtd.ts: {}
              refs:
                data.json: {}
                json-schema-2019-09:
                  index.ts: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format.json: {}
                    meta-data.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-2020-12:
                  index.ts: {}
                  meta:
                    applicator.json: {}
                    content.json: {}
                    core.json: {}
                    format-annotation.json: {}
                    meta-data.json: {}
                    unevaluated.json: {}
                    validation.json: {}
                  schema.json: {}
                json-schema-draft-06.json: {}
                json-schema-draft-07.json: {}
                json-schema-secure.json: {}
                jtd-schema.ts: {}
              runtime:
                equal.ts: {}
                parseJson.ts: {}
                quote.ts: {}
                re2.ts: {}
                timestamp.ts: {}
                ucs2length.ts: {}
                uri.ts: {}
                validation_error.ts: {}
              standalone:
                index.ts: {}
                instance.ts: {}
              types:
                index.ts: {}
                json-schema.ts: {}
                jtd-schema.ts: {}
              vocabularies:
                applicator:
                  additionalItems.ts: {}
                  additionalProperties.ts: {}
                  allOf.ts: {}
                  anyOf.ts: {}
                  contains.ts: {}
                  dependencies.ts: {}
                  dependentSchemas.ts: {}
                  if.ts: {}
                  index.ts: {}
                  items.ts: {}
                  items2020.ts: {}
                  not.ts: {}
                  oneOf.ts: {}
                  patternProperties.ts: {}
                  prefixItems.ts: {}
                  properties.ts: {}
                  propertyNames.ts: {}
                  thenElse.ts: {}
                code.ts: {}
                core:
                  id.ts: {}
                  index.ts: {}
                  ref.ts: {}
                discriminator:
                  index.ts: {}
                  types.ts: {}
                draft2020.ts: {}
                draft7.ts: {}
                dynamic:
                  dynamicAnchor.ts: {}
                  dynamicRef.ts: {}
                  index.ts: {}
                  recursiveAnchor.ts: {}
                  recursiveRef.ts: {}
                errors.ts: {}
                format:
                  format.ts: {}
                  index.ts: {}
                jtd:
                  discriminator.ts: {}
                  elements.ts: {}
                  enum.ts: {}
                  error.ts: {}
                  index.ts: {}
                  metadata.ts: {}
                  nullable.ts: {}
                  optionalProperties.ts: {}
                  properties.ts: {}
                  ref.ts: {}
                  type.ts: {}
                  union.ts: {}
                  values.ts: {}
                metadata.ts: {}
                next.ts: {}
                unevaluated:
                  index.ts: {}
                  unevaluatedItems.ts: {}
                  unevaluatedProperties.ts: {}
                validation:
                  const.ts: {}
                  dependentRequired.ts: {}
                  enum.ts: {}
                  index.ts: {}
                  limitContains.ts: {}
                  limitItems.ts: {}
                  limitLength.ts: {}
                  limitNumber.ts: {}
                  limitProperties.ts: {}
                  multipleOf.ts: {}
                  pattern.ts: {}
                  required.ts: {}
                  uniqueItems.ts: {}
            package.json: {}
          fs-extra:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            lib:
              copy:
                copy.js: {}
                index.js: {}
              copy-sync:
                copy-sync.js: {}
                index.js: {}
              empty:
                index.js: {}
              ensure:
                file.js: {}
                index.js: {}
                link.js: {}
                symlink-paths.js: {}
                symlink-type.js: {}
                symlink.js: {}
              fs:
                index.js: {}
              index.js: {}
              json:
                index.js: {}
                jsonfile.js: {}
                output-json-sync.js: {}
                output-json.js: {}
              mkdirs:
                index.js: {}
                make-dir.js: {}
              move:
                index.js: {}
                move.js: {}
              move-sync:
                index.js: {}
                move-sync.js: {}
              output:
                index.js: {}
              path-exists:
                index.js: {}
              remove:
                index.js: {}
                rimraf.js: {}
              util:
                stat.js: {}
                utimes.js: {}
            package.json: {}
          json-schema-traverse:
            .eslintrc.yml: {}
            .github:
              FUNDING.yml: {}
              workflows:
                build.yml: {}
                publish.yml: {}
            LICENSE: {}
            README.md: {}
            index.d.ts: {}
            index.js: {}
            package.json: {}
            spec:
              .eslintrc.yml: {}
              fixtures:
                schema.js: {}
              index.spec.js: {}
          source-map:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            lib:
              array-set.js: {}
              base64-vlq.js: {}
              base64.js: {}
              binary-search.js: {}
              mapping-list.js: {}
              mappings.wasm: {}
              read-wasm-browser.js: {}
              read-wasm.js: {}
              source-map-consumer.js: {}
              source-map-generator.js: {}
              source-node.js: {}
              url-browser.js: {}
              url.js: {}
              util.js: {}
              wasm.js: {}
            package.json: {}
            source-map.d.ts: {}
            source-map.js: {}
          tr46:
            LICENSE.md: {}
            README.md: {}
            index.js: {}
            lib:
              mappingTable.json: {}
              regexes.js: {}
            package.json: {}
          webidl-conversions:
            LICENSE.md: {}
            README.md: {}
            lib:
              index.js: {}
            package.json: {}
          whatwg-url:
            LICENSE.txt: {}
            README.md: {}
            lib:
              URL-impl.js: {}
              URL.js: {}
              URLSearchParams-impl.js: {}
              URLSearchParams.js: {}
              infra.js: {}
              public-api.js: {}
              url-state-machine.js: {}
              urlencoded.js: {}
              utils.js: {}
            package.json: {}
        package.json: {}
        src:
          _types.js: {}
          cdn-details.json: {}
          generate-sw.ts: {}
          get-manifest.ts: {}
          index.ts: {}
          inject-manifest.ts: {}
          lib:
            additional-manifest-entries-transform.ts: {}
            bundle.ts: {}
            cdn-utils.ts: {}
            copy-workbox-libraries.ts: {}
            errors.ts: {}
            escape-regexp.ts: {}
            get-composite-details.ts: {}
            get-file-details.ts: {}
            get-file-hash.ts: {}
            get-file-manifest-entries.ts: {}
            get-file-size.ts: {}
            get-source-map-url.ts: {}
            get-string-details.ts: {}
            get-string-hash.ts: {}
            maximum-size-transform.ts: {}
            modify-url-prefix-transform.ts: {}
            module-registry.ts: {}
            no-revision-for-urls-matching-transform.ts: {}
            populate-sw-template.ts: {}
            rebase-path.ts: {}
            replace-and-update-source-map.ts: {}
            runtime-caching-converter.ts: {}
            stringify-without-comments.ts: {}
            transform-manifest.ts: {}
            translate-url-to-sourcemap-paths.ts: {}
            validate-options.ts: {}
            write-sw-using-default-template.ts: {}
          rollup-plugin-off-main-thread.d.ts: {}
          schema:
            GenerateSWOptions.json: {}
            GetManifestOptions.json: {}
            InjectManifestOptions.json: {}
            WebpackGenerateSWOptions.json: {}
            WebpackInjectManifestOptions.json: {}
          strip-comments.d.ts: {}
          templates:
            sw-template.ts: {}
          types.ts: {}
        tsconfig.json: {}
        tsconfig.tsbuildinfo: {}
      workbox-cacheable-response:
        CacheableResponse.d.ts: {}
        CacheableResponse.js: {}
        CacheableResponse.mjs: {}
        CacheableResponsePlugin.d.ts: {}
        CacheableResponsePlugin.js: {}
        CacheableResponsePlugin.mjs: {}
        LICENSE: {}
        README.md: {}
        _version.d.ts: {}
        _version.js: {}
        _version.mjs: {}
        build:
          workbox-cacheable-response.dev.js: {}
          workbox-cacheable-response.dev.js.map: {}
          workbox-cacheable-response.prod.js: {}
          workbox-cacheable-response.prod.js.map: {}
        index.d.ts: {}
        index.js: {}
        index.mjs: {}
        package.json: {}
        src:
          CacheableResponse.ts: {}
          CacheableResponsePlugin.ts: {}
          _version.ts: {}
          index.ts: {}
        tsconfig.json: {}
        tsconfig.tsbuildinfo: {}
      workbox-core:
        LICENSE: {}
        README.md: {}
        _private:
          Deferred.d.ts: {}
          Deferred.js: {}
          Deferred.mjs: {}
          WorkboxError.d.ts: {}
          WorkboxError.js: {}
          WorkboxError.mjs: {}
          assert.d.ts: {}
          assert.js: {}
          assert.mjs: {}
          cacheMatchIgnoreParams.d.ts: {}
          cacheMatchIgnoreParams.js: {}
          cacheMatchIgnoreParams.mjs: {}
          cacheNames.d.ts: {}
          cacheNames.js: {}
          cacheNames.mjs: {}
          canConstructReadableStream.d.ts: {}
          canConstructReadableStream.js: {}
          canConstructReadableStream.mjs: {}
          canConstructResponseFromBodyStream.d.ts: {}
          canConstructResponseFromBodyStream.js: {}
          canConstructResponseFromBodyStream.mjs: {}
          dontWaitFor.d.ts: {}
          dontWaitFor.js: {}
          dontWaitFor.mjs: {}
          executeQuotaErrorCallbacks.d.ts: {}
          executeQuotaErrorCallbacks.js: {}
          executeQuotaErrorCallbacks.mjs: {}
          getFriendlyURL.d.ts: {}
          getFriendlyURL.js: {}
          getFriendlyURL.mjs: {}
          logger.d.ts: {}
          logger.js: {}
          logger.mjs: {}
          resultingClientExists.d.ts: {}
          resultingClientExists.js: {}
          resultingClientExists.mjs: {}
          timeout.d.ts: {}
          timeout.js: {}
          timeout.mjs: {}
          waitUntil.d.ts: {}
          waitUntil.js: {}
          waitUntil.mjs: {}
        _private.d.ts: {}
        _private.js: {}
        _private.mjs: {}
        _version.d.ts: {}
        _version.js: {}
        _version.mjs: {}
        build:
          workbox-core.dev.js: {}
          workbox-core.dev.js.map: {}
          workbox-core.prod.js: {}
          workbox-core.prod.js.map: {}
        cacheNames.d.ts: {}
        cacheNames.js: {}
        cacheNames.mjs: {}
        clientsClaim.d.ts: {}
        clientsClaim.js: {}
        clientsClaim.mjs: {}
        copyResponse.d.ts: {}
        copyResponse.js: {}
        copyResponse.mjs: {}
        index.d.ts: {}
        index.js: {}
        index.mjs: {}
        models:
          messages:
            messageGenerator.d.ts: {}
            messageGenerator.js: {}
            messageGenerator.mjs: {}
            messages.d.ts: {}
            messages.js: {}
            messages.mjs: {}
          pluginEvents.d.ts: {}
          pluginEvents.js: {}
          pluginEvents.mjs: {}
          quotaErrorCallbacks.d.ts: {}
          quotaErrorCallbacks.js: {}
          quotaErrorCallbacks.mjs: {}
        package.json: {}
        registerQuotaErrorCallback.d.ts: {}
        registerQuotaErrorCallback.js: {}
        registerQuotaErrorCallback.mjs: {}
        setCacheNameDetails.d.ts: {}
        setCacheNameDetails.js: {}
        setCacheNameDetails.mjs: {}
        skipWaiting.d.ts: {}
        skipWaiting.js: {}
        skipWaiting.mjs: {}
        src:
          _private:
            Deferred.ts: {}
            WorkboxError.ts: {}
            assert.ts: {}
            cacheMatchIgnoreParams.ts: {}
            cacheNames.ts: {}
            canConstructReadableStream.ts: {}
            canConstructResponseFromBodyStream.ts: {}
            dontWaitFor.ts: {}
            executeQuotaErrorCallbacks.ts: {}
            getFriendlyURL.ts: {}
            logger.ts: {}
            resultingClientExists.ts: {}
            timeout.ts: {}
            waitUntil.ts: {}
          _private.ts: {}
          _version.ts: {}
          cacheNames.ts: {}
          clientsClaim.ts: {}
          copyResponse.ts: {}
          index.ts: {}
          models:
            messages:
              messageGenerator.ts: {}
              messages.ts: {}
            pluginEvents.ts: {}
            quotaErrorCallbacks.ts: {}
          registerQuotaErrorCallback.ts: {}
          setCacheNameDetails.ts: {}
          skipWaiting.ts: {}
          types.ts: {}
          utils:
            pluginUtils.ts: {}
            welcome.ts: {}
        tsconfig.json: {}
        tsconfig.tsbuildinfo: {}
        types.d.ts: {}
        types.js: {}
        types.mjs: {}
        utils:
          pluginUtils.d.ts: {}
          pluginUtils.js: {}
          pluginUtils.mjs: {}
          welcome.d.ts: {}
          welcome.js: {}
          welcome.mjs: {}
      workbox-expiration:
        CacheExpiration.d.ts: {}
        CacheExpiration.js: {}
        CacheExpiration.mjs: {}
        ExpirationPlugin.d.ts: {}
        ExpirationPlugin.js: {}
        ExpirationPlugin.mjs: {}
        LICENSE: {}
        README.md: {}
        _version.d.ts: {}
        _version.js: {}
        _version.mjs: {}
        build:
          workbox-expiration.dev.js: {}
          workbox-expiration.dev.js.map: {}
          workbox-expiration.prod.js: {}
          workbox-expiration.prod.js.map: {}
        index.d.ts: {}
        index.js: {}
        index.mjs: {}
        models:
          CacheTimestampsModel.d.ts: {}
          CacheTimestampsModel.js: {}
          CacheTimestampsModel.mjs: {}
        package.json: {}
        src:
          CacheExpiration.ts: {}
          ExpirationPlugin.ts: {}
          _version.ts: {}
          index.ts: {}
          models:
            CacheTimestampsModel.ts: {}
        tsconfig.json: {}
        tsconfig.tsbuildinfo: {}
      workbox-google-analytics:
        LICENSE: {}
        README.md: {}
        _version.d.ts: {}
        _version.js: {}
        _version.mjs: {}
        build:
          workbox-offline-ga.dev.js: {}
          workbox-offline-ga.dev.js.map: {}
          workbox-offline-ga.prod.js: {}
          workbox-offline-ga.prod.js.map: {}
        index.d.ts: {}
        index.js: {}
        index.mjs: {}
        initialize.d.ts: {}
        initialize.js: {}
        initialize.mjs: {}
        package.json: {}
        src:
          _version.ts: {}
          index.ts: {}
          initialize.ts: {}
          utils:
            constants.ts: {}
        tsconfig.json: {}
        tsconfig.tsbuildinfo: {}
        utils:
          constants.d.ts: {}
          constants.js: {}
          constants.mjs: {}
      workbox-navigation-preload:
        LICENSE: {}
        README.md: {}
        _version.d.ts: {}
        _version.js: {}
        _version.mjs: {}
        build:
          workbox-navigation-preload.dev.js: {}
          workbox-navigation-preload.dev.js.map: {}
          workbox-navigation-preload.prod.js: {}
          workbox-navigation-preload.prod.js.map: {}
        disable.d.ts: {}
        disable.js: {}
        disable.mjs: {}
        enable.d.ts: {}
        enable.js: {}
        enable.mjs: {}
        index.d.ts: {}
        index.js: {}
        index.mjs: {}
        isSupported.d.ts: {}
        isSupported.js: {}
        isSupported.mjs: {}
        package.json: {}
        src:
          _version.ts: {}
          disable.ts: {}
          enable.ts: {}
          index.ts: {}
          isSupported.ts: {}
        tsconfig.json: {}
        tsconfig.tsbuildinfo: {}
      workbox-precaching:
        LICENSE: {}
        PrecacheController.d.ts: {}
        PrecacheController.js: {}
        PrecacheController.mjs: {}
        PrecacheFallbackPlugin.d.ts: {}
        PrecacheFallbackPlugin.js: {}
        PrecacheFallbackPlugin.mjs: {}
        PrecacheRoute.d.ts: {}
        PrecacheRoute.js: {}
        PrecacheRoute.mjs: {}
        PrecacheStrategy.d.ts: {}
        PrecacheStrategy.js: {}
        PrecacheStrategy.mjs: {}
        README.md: {}
        _types.d.ts: {}
        _types.js: {}
        _types.mjs: {}
        _version.d.ts: {}
        _version.js: {}
        _version.mjs: {}
        addPlugins.d.ts: {}
        addPlugins.js: {}
        addPlugins.mjs: {}
        addRoute.d.ts: {}
        addRoute.js: {}
        addRoute.mjs: {}
        build:
          workbox-precaching.dev.js: {}
          workbox-precaching.dev.js.map: {}
          workbox-precaching.prod.js: {}
          workbox-precaching.prod.js.map: {}
        cleanupOutdatedCaches.d.ts: {}
        cleanupOutdatedCaches.js: {}
        cleanupOutdatedCaches.mjs: {}
        createHandlerBoundToURL.d.ts: {}
        createHandlerBoundToURL.js: {}
        createHandlerBoundToURL.mjs: {}
        getCacheKeyForURL.d.ts: {}
        getCacheKeyForURL.js: {}
        getCacheKeyForURL.mjs: {}
        index.d.ts: {}
        index.js: {}
        index.mjs: {}
        matchPrecache.d.ts: {}
        matchPrecache.js: {}
        matchPrecache.mjs: {}
        package.json: {}
        precache.d.ts: {}
        precache.js: {}
        precache.mjs: {}
        precacheAndRoute.d.ts: {}
        precacheAndRoute.js: {}
        precacheAndRoute.mjs: {}
        src:
          PrecacheController.ts: {}
          PrecacheFallbackPlugin.ts: {}
          PrecacheRoute.ts: {}
          PrecacheStrategy.ts: {}
          _types.ts: {}
          _version.ts: {}
          addPlugins.ts: {}
          addRoute.ts: {}
          cleanupOutdatedCaches.ts: {}
          createHandlerBoundToURL.ts: {}
          getCacheKeyForURL.ts: {}
          index.ts: {}
          matchPrecache.ts: {}
          precache.ts: {}
          precacheAndRoute.ts: {}
          utils:
            PrecacheCacheKeyPlugin.ts: {}
            PrecacheInstallReportPlugin.ts: {}
            createCacheKey.ts: {}
            deleteOutdatedCaches.ts: {}
            generateURLVariations.ts: {}
            getCacheKeyForURL.ts: {}
            getOrCreatePrecacheController.ts: {}
            printCleanupDetails.ts: {}
            printInstallDetails.ts: {}
            removeIgnoredSearchParams.ts: {}
        tsconfig.json: {}
        tsconfig.tsbuildinfo: {}
        utils:
          PrecacheCacheKeyPlugin.d.ts: {}
          PrecacheCacheKeyPlugin.js: {}
          PrecacheCacheKeyPlugin.mjs: {}
          PrecacheInstallReportPlugin.d.ts: {}
          PrecacheInstallReportPlugin.js: {}
          PrecacheInstallReportPlugin.mjs: {}
          createCacheKey.d.ts: {}
          createCacheKey.js: {}
          createCacheKey.mjs: {}
          deleteOutdatedCaches.d.ts: {}
          deleteOutdatedCaches.js: {}
          deleteOutdatedCaches.mjs: {}
          generateURLVariations.d.ts: {}
          generateURLVariations.js: {}
          generateURLVariations.mjs: {}
          getCacheKeyForURL.d.ts: {}
          getCacheKeyForURL.js: {}
          getCacheKeyForURL.mjs: {}
          getOrCreatePrecacheController.d.ts: {}
          getOrCreatePrecacheController.js: {}
          getOrCreatePrecacheController.mjs: {}
          printCleanupDetails.d.ts: {}
          printCleanupDetails.js: {}
          printCleanupDetails.mjs: {}
          printInstallDetails.d.ts: {}
          printInstallDetails.js: {}
          printInstallDetails.mjs: {}
          removeIgnoredSearchParams.d.ts: {}
          removeIgnoredSearchParams.js: {}
          removeIgnoredSearchParams.mjs: {}
      workbox-range-requests:
        LICENSE: {}
        README.md: {}
        RangeRequestsPlugin.d.ts: {}
        RangeRequestsPlugin.js: {}
        RangeRequestsPlugin.mjs: {}
        _version.d.ts: {}
        _version.js: {}
        _version.mjs: {}
        build:
          workbox-range-requests.dev.js: {}
          workbox-range-requests.dev.js.map: {}
          workbox-range-requests.prod.js: {}
          workbox-range-requests.prod.js.map: {}
        createPartialResponse.d.ts: {}
        createPartialResponse.js: {}
        createPartialResponse.mjs: {}
        index.d.ts: {}
        index.js: {}
        index.mjs: {}
        package.json: {}
        src:
          RangeRequestsPlugin.ts: {}
          _version.ts: {}
          createPartialResponse.ts: {}
          index.ts: {}
          utils:
            calculateEffectiveBoundaries.ts: {}
            parseRangeHeader.ts: {}
        tsconfig.json: {}
        tsconfig.tsbuildinfo: {}
        utils:
          calculateEffectiveBoundaries.d.ts: {}
          calculateEffectiveBoundaries.js: {}
          calculateEffectiveBoundaries.mjs: {}
          parseRangeHeader.d.ts: {}
          parseRangeHeader.js: {}
          parseRangeHeader.mjs: {}
      workbox-recipes:
        LICENSE: {}
        README.md: {}
        _version.d.ts: {}
        _version.js: {}
        _version.mjs: {}
        build:
          workbox-recipes.dev.js: {}
          workbox-recipes.dev.js.map: {}
          workbox-recipes.prod.js: {}
          workbox-recipes.prod.js.map: {}
        googleFontsCache.d.ts: {}
        googleFontsCache.js: {}
        googleFontsCache.mjs: {}
        imageCache.d.ts: {}
        imageCache.js: {}
        imageCache.mjs: {}
        index.d.ts: {}
        index.js: {}
        index.mjs: {}
        offlineFallback.d.ts: {}
        offlineFallback.js: {}
        offlineFallback.mjs: {}
        package.json: {}
        pageCache.d.ts: {}
        pageCache.js: {}
        pageCache.mjs: {}
        src:
          _version.ts: {}
          googleFontsCache.ts: {}
          imageCache.ts: {}
          index.ts: {}
          offlineFallback.ts: {}
          pageCache.ts: {}
          staticResourceCache.ts: {}
          warmStrategyCache.ts: {}
        staticResourceCache.d.ts: {}
        staticResourceCache.js: {}
        staticResourceCache.mjs: {}
        tsconfig.json: {}
        tsconfig.tsbuildinfo: {}
        warmStrategyCache.d.ts: {}
        warmStrategyCache.js: {}
        warmStrategyCache.mjs: {}
      workbox-routing:
        LICENSE: {}
        NavigationRoute.d.ts: {}
        NavigationRoute.js: {}
        NavigationRoute.mjs: {}
        README.md: {}
        RegExpRoute.d.ts: {}
        RegExpRoute.js: {}
        RegExpRoute.mjs: {}
        Route.d.ts: {}
        Route.js: {}
        Route.mjs: {}
        Router.d.ts: {}
        Router.js: {}
        Router.mjs: {}
        _types.d.ts: {}
        _types.js: {}
        _types.mjs: {}
        _version.d.ts: {}
        _version.js: {}
        _version.mjs: {}
        build:
          workbox-routing.dev.js: {}
          workbox-routing.dev.js.map: {}
          workbox-routing.prod.js: {}
          workbox-routing.prod.js.map: {}
        index.d.ts: {}
        index.js: {}
        index.mjs: {}
        package.json: {}
        registerRoute.d.ts: {}
        registerRoute.js: {}
        registerRoute.mjs: {}
        setCatchHandler.d.ts: {}
        setCatchHandler.js: {}
        setCatchHandler.mjs: {}
        setDefaultHandler.d.ts: {}
        setDefaultHandler.js: {}
        setDefaultHandler.mjs: {}
        src:
          NavigationRoute.ts: {}
          RegExpRoute.ts: {}
          Route.ts: {}
          Router.ts: {}
          _types.ts: {}
          _version.ts: {}
          index.ts: {}
          registerRoute.ts: {}
          setCatchHandler.ts: {}
          setDefaultHandler.ts: {}
          utils:
            constants.ts: {}
            getOrCreateDefaultRouter.ts: {}
            normalizeHandler.ts: {}
        tsconfig.json: {}
        tsconfig.tsbuildinfo: {}
        utils:
          constants.d.ts: {}
          constants.js: {}
          constants.mjs: {}
          getOrCreateDefaultRouter.d.ts: {}
          getOrCreateDefaultRouter.js: {}
          getOrCreateDefaultRouter.mjs: {}
          normalizeHandler.d.ts: {}
          normalizeHandler.js: {}
          normalizeHandler.mjs: {}
      workbox-strategies:
        CacheFirst.d.ts: {}
        CacheFirst.js: {}
        CacheFirst.mjs: {}
        CacheOnly.d.ts: {}
        CacheOnly.js: {}
        CacheOnly.mjs: {}
        LICENSE: {}
        NetworkFirst.d.ts: {}
        NetworkFirst.js: {}
        NetworkFirst.mjs: {}
        NetworkOnly.d.ts: {}
        NetworkOnly.js: {}
        NetworkOnly.mjs: {}
        README.md: {}
        StaleWhileRevalidate.d.ts: {}
        StaleWhileRevalidate.js: {}
        StaleWhileRevalidate.mjs: {}
        Strategy.d.ts: {}
        Strategy.js: {}
        Strategy.mjs: {}
        StrategyHandler.d.ts: {}
        StrategyHandler.js: {}
        StrategyHandler.mjs: {}
        _version.d.ts: {}
        _version.js: {}
        _version.mjs: {}
        build:
          workbox-strategies.dev.js: {}
          workbox-strategies.dev.js.map: {}
          workbox-strategies.prod.js: {}
          workbox-strategies.prod.js.map: {}
        index.d.ts: {}
        index.js: {}
        index.mjs: {}
        package.json: {}
        plugins:
          cacheOkAndOpaquePlugin.d.ts: {}
          cacheOkAndOpaquePlugin.js: {}
          cacheOkAndOpaquePlugin.mjs: {}
        src:
          CacheFirst.ts: {}
          CacheOnly.ts: {}
          NetworkFirst.ts: {}
          NetworkOnly.ts: {}
          StaleWhileRevalidate.ts: {}
          Strategy.ts: {}
          StrategyHandler.ts: {}
          _version.ts: {}
          index.ts: {}
          plugins:
            cacheOkAndOpaquePlugin.ts: {}
          utils:
            messages.ts: {}
        tsconfig.json: {}
        tsconfig.tsbuildinfo: {}
        utils:
          messages.d.ts: {}
          messages.js: {}
          messages.mjs: {}
      workbox-streams:
        LICENSE: {}
        README.md: {}
        _types.d.ts: {}
        _types.js: {}
        _types.mjs: {}
        _version.d.ts: {}
        _version.js: {}
        _version.mjs: {}
        build:
          workbox-streams.dev.js: {}
          workbox-streams.dev.js.map: {}
          workbox-streams.prod.js: {}
          workbox-streams.prod.js.map: {}
        concatenate.d.ts: {}
        concatenate.js: {}
        concatenate.mjs: {}
        concatenateToResponse.d.ts: {}
        concatenateToResponse.js: {}
        concatenateToResponse.mjs: {}
        index.d.ts: {}
        index.js: {}
        index.mjs: {}
        isSupported.d.ts: {}
        isSupported.js: {}
        isSupported.mjs: {}
        package.json: {}
        src:
          _types.ts: {}
          _version.ts: {}
          concatenate.ts: {}
          concatenateToResponse.ts: {}
          index.ts: {}
          isSupported.ts: {}
          strategy.ts: {}
          utils:
            createHeaders.ts: {}
        strategy.d.ts: {}
        strategy.js: {}
        strategy.mjs: {}
        tsconfig.json: {}
        tsconfig.tsbuildinfo: {}
        utils:
          createHeaders.d.ts: {}
          createHeaders.js: {}
          createHeaders.mjs: {}
      workbox-sw:
        LICENSE: {}
        README.md: {}
        _types.mjs: {}
        _version.mjs: {}
        build:
          workbox-sw.js: {}
          workbox-sw.js.map: {}
        controllers:
          WorkboxSW.mjs: {}
        index.mjs: {}
        package.json: {}
      workbox-webpack-plugin:
        LICENSE: {}
        README.md: {}
        build:
          generate-sw.d.ts: {}
          generate-sw.js: {}
          index.d.ts: {}
          index.js: {}
          inject-manifest.d.ts: {}
          inject-manifest.js: {}
          lib:
            get-asset-hash.d.ts: {}
            get-asset-hash.js: {}
            get-manifest-entries-from-compilation.d.ts: {}
            get-manifest-entries-from-compilation.js: {}
            get-script-files-for-chunks.d.ts: {}
            get-script-files-for-chunks.js: {}
            get-sourcemap-asset-name.d.ts: {}
            get-sourcemap-asset-name.js: {}
            relative-to-output-path.d.ts: {}
            relative-to-output-path.js: {}
            resolve-webpack-url.d.ts: {}
            resolve-webpack-url.js: {}
        node_modules:
          source-map:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            dist:
              source-map.debug.js: {}
              source-map.js: {}
              source-map.min.js: {}
              source-map.min.js.map: {}
            lib:
              array-set.js: {}
              base64-vlq.js: {}
              base64.js: {}
              binary-search.js: {}
              mapping-list.js: {}
              quick-sort.js: {}
              source-map-consumer.js: {}
              source-map-generator.js: {}
              source-node.js: {}
              util.js: {}
            package.json: {}
            source-map.d.ts: {}
            source-map.js: {}
          webpack-sources:
            LICENSE: {}
            README.md: {}
            lib:
              CachedSource.js: {}
              ConcatSource.js: {}
              LineToLineMappedSource.js: {}
              OriginalSource.js: {}
              PrefixSource.js: {}
              RawSource.js: {}
              ReplaceSource.js: {}
              Source.js: {}
              SourceAndMapMixin.js: {}
              SourceMapSource.js: {}
              applySourceMap.js: {}
              index.js: {}
            package.json: {}
        package.json: {}
        src:
          generate-sw.ts: {}
          index.ts: {}
          inject-manifest.ts: {}
          lib:
            get-asset-hash.ts: {}
            get-manifest-entries-from-compilation.ts: {}
            get-script-files-for-chunks.ts: {}
            get-sourcemap-asset-name.ts: {}
            relative-to-output-path.ts: {}
            resolve-webpack-url.ts: {}
        tsconfig.json: {}
        tsconfig.tsbuildinfo: {}
      workbox-window:
        LICENSE: {}
        README.md: {}
        Workbox.d.ts: {}
        Workbox.js: {}
        Workbox.mjs: {}
        _version.d.ts: {}
        _version.js: {}
        _version.mjs: {}
        build:
          workbox-window.dev.es5.mjs: {}
          workbox-window.dev.es5.mjs.map: {}
          workbox-window.dev.mjs: {}
          workbox-window.dev.mjs.map: {}
          workbox-window.dev.umd.js: {}
          workbox-window.dev.umd.js.map: {}
          workbox-window.prod.es5.mjs: {}
          workbox-window.prod.es5.mjs.map: {}
          workbox-window.prod.mjs: {}
          workbox-window.prod.mjs.map: {}
          workbox-window.prod.umd.js: {}
          workbox-window.prod.umd.js.map: {}
        index.d.ts: {}
        index.js: {}
        index.mjs: {}
        messageSW.d.ts: {}
        messageSW.js: {}
        messageSW.mjs: {}
        package.json: {}
        src:
          Workbox.ts: {}
          _version.ts: {}
          index.ts: {}
          messageSW.ts: {}
          utils:
            WorkboxEvent.ts: {}
            WorkboxEventTarget.ts: {}
            urlsMatch.ts: {}
        tsconfig.json: {}
        tsconfig.tsbuildinfo: {}
        utils:
          WorkboxEvent.d.ts: {}
          WorkboxEvent.js: {}
          WorkboxEvent.mjs: {}
          WorkboxEventTarget.d.ts: {}
          WorkboxEventTarget.js: {}
          WorkboxEventTarget.mjs: {}
          urlsMatch.d.ts: {}
          urlsMatch.js: {}
          urlsMatch.mjs: {}
      wrap-ansi:
        index.js: {}
        license: {}
        node_modules:
          ansi-styles:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          color-convert:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            conversions.js: {}
            index.js: {}
            package.json: {}
            route.js: {}
          color-name:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
        package.json: {}
        readme.md: {}
      wrap-ansi-cjs:
        index.js: {}
        license: {}
        node_modules:
          ansi-styles:
            index.d.ts: {}
            index.js: {}
            license: {}
            package.json: {}
            readme.md: {}
          color-convert:
            CHANGELOG.md: {}
            LICENSE: {}
            README.md: {}
            conversions.js: {}
            index.js: {}
            package.json: {}
            route.js: {}
          color-name:
            LICENSE: {}
            README.md: {}
            index.js: {}
            package.json: {}
        package.json: {}
        readme.md: {}
      wrappy:
        LICENSE: {}
        README.md: {}
        package.json: {}
        wrappy.js: {}
      write-file-atomic:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        index.js: {}
        package.json: {}
      ws:
        LICENSE: {}
        README.md: {}
        browser.js: {}
        index.js: {}
        lib:
          buffer-util.js: {}
          constants.js: {}
          event-target.js: {}
          extension.js: {}
          limiter.js: {}
          permessage-deflate.js: {}
          receiver.js: {}
          sender.js: {}
          stream.js: {}
          validation.js: {}
          websocket-server.js: {}
          websocket.js: {}
        package.json: {}
      xml-name-validator:
        LICENSE.txt: {}
        README.md: {}
        lib:
          generated-parser.js: {}
          grammar.pegjs: {}
          xml-name-validator.js: {}
        package.json: {}
      xmlchars:
        LICENSE: {}
        README.md: {}
        package.json: {}
        xml:
          '1.0':
            ed4.d.ts: {}
            ed4.js: {}
            ed4.js.map: {}
            ed5.d.ts: {}
            ed5.js: {}
            ed5.js.map: {}
          '1.1':
            ed2.d.ts: {}
            ed2.js: {}
            ed2.js.map: {}
        xmlchars.d.ts: {}
        xmlchars.js: {}
        xmlchars.js.map: {}
        xmlns:
          '1.0':
            ed3.d.ts: {}
            ed3.js: {}
            ed3.js.map: {}
      xmlhttprequest-ssl:
        LICENSE: {}
        README.md: {}
        autotest.watchr: {}
        example:
          demo.js: {}
        lib:
          XMLHttpRequest.js: {}
        package.json: {}
        tests:
          test-constants.js: {}
          test-events.js: {}
          test-exceptions.js: {}
          test-headers.js: {}
          test-redirect-302.js: {}
          test-redirect-303.js: {}
          test-redirect-307.js: {}
          test-request-methods.js: {}
          test-request-protocols.js: {}
          testdata.txt: {}
      xtend:
        .jshintrc: {}
        LICENSE: {}
        README.md: {}
        immutable.js: {}
        mutable.js: {}
        package.json: {}
        test.js: {}
      y18n:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        build:
          index.cjs: {}
          lib:
            cjs.js: {}
            index.js: {}
            platform-shims:
              node.js: {}
        index.mjs: {}
        package.json: {}
      yallist:
        LICENSE: {}
        README.md: {}
        iterator.js: {}
        package.json: {}
        yallist.js: {}
      yaml:
        LICENSE: {}
        README.md: {}
        browser:
          dist:
            PlainValue-b8036b75.js: {}
            Schema-e94716c8.js: {}
            index.js: {}
            legacy-exports.js: {}
            package.json: {}
            parse-cst.js: {}
            resolveSeq-492ab440.js: {}
            types.js: {}
            util.js: {}
            warnings-df54cb69.js: {}
          index.js: {}
          map.js: {}
          pair.js: {}
          parse-cst.js: {}
          scalar.js: {}
          schema.js: {}
          seq.js: {}
          types:
            binary.js: {}
            omap.js: {}
            pairs.js: {}
            set.js: {}
            timestamp.js: {}
          types.js: {}
          util.js: {}
        dist:
          Document-9b4560a1.js: {}
          PlainValue-ec8e588e.js: {}
          Schema-88e323a7.js: {}
          index.js: {}
          legacy-exports.js: {}
          parse-cst.js: {}
          resolveSeq-d03cb037.js: {}
          test-events.js: {}
          types.js: {}
          util.js: {}
          warnings-1000a372.js: {}
        index.d.ts: {}
        index.js: {}
        map.js: {}
        package.json: {}
        pair.js: {}
        parse-cst.d.ts: {}
        parse-cst.js: {}
        scalar.js: {}
        schema.js: {}
        seq.js: {}
        types:
          binary.js: {}
          omap.js: {}
          pairs.js: {}
          set.js: {}
          timestamp.js: {}
        types.d.ts: {}
        types.js: {}
        types.mjs: {}
        util.d.ts: {}
        util.js: {}
        util.mjs: {}
      yamljs:
        .npmignore: {}
        .travis.yml: {}
        Cakefile: {}
        LICENSE: {}
        README.md: {}
        bin:
          json2yaml: {}
          yaml2json: {}
        bower.json: {}
        cli:
          json2yaml.js: {}
          yaml2json.js: {}
        demo:
          demo.html: {}
        dist:
          yaml.debug.js: {}
          yaml.js: {}
          yaml.legacy.js: {}
          yaml.min.js: {}
        index.js: {}
        lib:
          Dumper.js: {}
          Escaper.js: {}
          Exception:
            DumpException.js: {}
            ParseException.js: {}
            ParseMore.js: {}
          Inline.js: {}
          Parser.js: {}
          Pattern.js: {}
          Unescaper.js: {}
          Utils.js: {}
          Yaml.js: {}
        package.json: {}
        src:
          Dumper.coffee: {}
          Escaper.coffee: {}
          Exception:
            DumpException.coffee: {}
            ParseException.coffee: {}
            ParseMore.coffee: {}
          Inline.coffee: {}
          Parser.coffee: {}
          Pattern.coffee: {}
          Unescaper.coffee: {}
          Utils.coffee: {}
          Yaml.coffee: {}
        test:
          SpecRunner.html: {}
          lib:
            jasmine-2.0.0:
              MIT.LICENSE: {}
              boot.js: {}
              console.js: {}
              jasmine-html.js: {}
              jasmine.css: {}
              jasmine.js: {}
              jasmine_favicon.png: {}
          spec:
            YamlSpec.coffee: {}
            YamlSpec.js: {}
            example.yml: {}
      yargs:
        CHANGELOG.md: {}
        LICENSE: {}
        README.md: {}
        browser.mjs: {}
        build:
          index.cjs: {}
          lib:
            argsert.js: {}
            command.js: {}
            completion-templates.js: {}
            completion.js: {}
            middleware.js: {}
            parse-command.js: {}
            typings:
              common-types.js: {}
              yargs-parser-types.js: {}
            usage.js: {}
            utils:
              apply-extends.js: {}
              is-promise.js: {}
              levenshtein.js: {}
              obj-filter.js: {}
              process-argv.js: {}
              set-blocking.js: {}
              which-module.js: {}
            validation.js: {}
            yargs-factory.js: {}
            yerror.js: {}
        helpers:
          helpers.mjs: {}
          index.js: {}
          package.json: {}
        index.cjs: {}
        index.mjs: {}
        lib:
          platform-shims:
            browser.mjs: {}
            esm.mjs: {}
        locales:
          be.json: {}
          de.json: {}
          en.json: {}
          es.json: {}
          fi.json: {}
          fr.json: {}
          hi.json: {}
          hu.json: {}
          id.json: {}
          it.json: {}
          ja.json: {}
          ko.json: {}
          nb.json: {}
          nl.json: {}
          nn.json: {}
          pirate.json: {}
          pl.json: {}
          pt.json: {}
          pt_BR.json: {}
          ru.json: {}
          th.json: {}
          tr.json: {}
          zh_CN.json: {}
          zh_TW.json: {}
        package.json: {}
        yargs: {}
      yargs-parser:
        CHANGELOG.md: {}
        LICENSE.txt: {}
        README.md: {}
        browser.js: {}
        build:
          index.cjs: {}
          lib:
            index.js: {}
            string-utils.js: {}
            tokenize-arg-string.js: {}
            yargs-parser-types.js: {}
            yargs-parser.js: {}
        package.json: {}
      yocto-queue:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
      zwitch:
        index.d.ts: {}
        index.js: {}
        license: {}
        package.json: {}
        readme.md: {}
    package-lock.json: {}
    package.json: {}
    public:
      favicon.ico: {}
      index.html: {}
      logo192.png: {}
      logo512.png: {}
      manifest.json: {}
      robots.txt: {}
    src:
      App.js: {}
      App.test.js: {}
      Run.js: {}
      assets:
        copy.png: {}
        link_icons:
          code.png: {}
          data.png: {}
          paper.png: {}
        logo.png: {}
        panel_icons:
          editor.png: {}
          issue.png: {}
          terminal.png: {}
          workspace.png: {}
        pli.png: {}
        princeton_seal.svg: {}
        repo_icons:
          marshmallow-code.png: {}
          pvlib.png: {}
          pydicom.png: {}
          pyvista.png: {}
          sympy.png: {}
        web_trajs.json: {}
      components:
        AgentMessage.js: {}
        EnvMessage.js: {}
        Footer.js: {}
        Header.js: {}
        MacBar.js: {}
        controls:
          LRunControl.js: {}
        panels:
          AgentFeed.js: {}
          EnvFeed.js: {}
          LogPanel.js: {}
        utils:
          icons:
            ExpandIcon.js: {}
      index.css: {}
      index.js: {}
      logo.svg: {}
      reportWebVitals.js: {}
      setupTests.js: {}
      static:
        agentFeed.css: {}
        agentMessage.css: {}
        envFeed.css: {}
        envMessage.css: {}
        font.css: {}
        footer.css: {}
        header.css: {}
        index.css: {}
        logPanel.css: {}
        macbar.css: {}
        message.css: {}
        run.css: {}
        runControl.css: {}
  utils:
    __pycache__:
      config.cpython-39.pyc: {}
      log.cpython-38.pyc: {}
      log.cpython-39.pyc: {}
    config.py:
      classes:
      - end_line: 82
        methods:
        - end_line: 50
          name: __init__
          start_line: 33
          text:
          - '    def __init__(self, *, keys_cfg_path: Path | None = None):'
          - '        """This wrapper class is used to load keys from environment variables
            or keys.cfg file.'
          - '        Whenever both are presents, the environment variable is used.'
          - '        """'
          - '        if keys_cfg_path is None:'
          - '            # Defer import to avoid circular import'
          - '            from sweagent import PACKAGE_DIR'
          - ''
          - '            keys_cfg_path = PACKAGE_DIR.parent / "keys.cfg"'
          - '        self._keys_cfg = None'
          - '        if keys_cfg_path.exists():'
          - '            try:'
          - '                self._keys_cfg = config_file.Config(str(keys_cfg_path))'
          - '            except Exception as e:'
          - '                msg = f"Error loading keys.cfg from {keys_cfg_path}.
            Please check the file."'
          - '                raise RuntimeError(msg) from e'
          - '        else:'
          - '            logger.error(f"keys.cfg not found in {PACKAGE_DIR}")'
        - end_line: 71
          name: get
          start_line: 52
          text:
          - '    def get(self, key: str, default=None, choices: list[Any] | None =
            None) -> Any:'
          - '        """Get a key from environment variables or keys.cfg.'
          - ''
          - '        Args:'
          - '            key: The key to retrieve.'
          - '            default: The default value to return if the key is not found.'
          - '            choices: If provided, the value must be one of the choices.'
          - '        """'
          - ''
          - '        def check_choices(value):'
          - '            if choices is not None and value not in choices:'
          - '                msg = f"Value {value} for key {key} not in {choices}"'
          - '                raise ValueError(msg)'
          - '            return value'
          - ''
          - '        if key in os.environ:'
          - '            return check_choices(os.environ[key])'
          - '        if self._keys_cfg is not None and key in self._keys_cfg:'
          - '            return check_choices(self._keys_cfg[key])'
          - '        return check_choices(default)'
        - end_line: 79
          name: __getitem__
          start_line: 73
          text:
          - '    def __getitem__(self, key: str) -> Any:'
          - '        if key in os.environ:'
          - '            return os.environ[key]'
          - '        if self._keys_cfg is not None and key in self._keys_cfg:'
          - '            return self._keys_cfg[key]'
          - '        msg = f"Key {key} not found in environment variables or keys.cfg
            (if existing)"'
          - '        raise KeyError(msg)'
        - end_line: 82
          name: __contains__
          start_line: 81
          text:
          - '    def __contains__(self, key: str) -> bool:'
          - '        return key in os.environ or (self._keys_cfg is not None and key
            in self._keys_cfg)'
        name: Config
        start_line: 32
        text:
        - 'class Config:'
        - '    def __init__(self, *, keys_cfg_path: Path | None = None):'
        - '        """This wrapper class is used to load keys from environment variables
          or keys.cfg file.'
        - '        Whenever both are presents, the environment variable is used.'
        - '        """'
        - '        if keys_cfg_path is None:'
        - '            # Defer import to avoid circular import'
        - '            from sweagent import PACKAGE_DIR'
        - ''
        - '            keys_cfg_path = PACKAGE_DIR.parent / "keys.cfg"'
        - '        self._keys_cfg = None'
        - '        if keys_cfg_path.exists():'
        - '            try:'
        - '                self._keys_cfg = config_file.Config(str(keys_cfg_path))'
        - '            except Exception as e:'
        - '                msg = f"Error loading keys.cfg from {keys_cfg_path}. Please
          check the file."'
        - '                raise RuntimeError(msg) from e'
        - '        else:'
        - '            logger.error(f"keys.cfg not found in {PACKAGE_DIR}")'
        - ''
        - '    def get(self, key: str, default=None, choices: list[Any] | None = None)
          -> Any:'
        - '        """Get a key from environment variables or keys.cfg.'
        - ''
        - '        Args:'
        - '            key: The key to retrieve.'
        - '            default: The default value to return if the key is not found.'
        - '            choices: If provided, the value must be one of the choices.'
        - '        """'
        - ''
        - '        def check_choices(value):'
        - '            if choices is not None and value not in choices:'
        - '                msg = f"Value {value} for key {key} not in {choices}"'
        - '                raise ValueError(msg)'
        - '            return value'
        - ''
        - '        if key in os.environ:'
        - '            return check_choices(os.environ[key])'
        - '        if self._keys_cfg is not None and key in self._keys_cfg:'
        - '            return check_choices(self._keys_cfg[key])'
        - '        return check_choices(default)'
        - ''
        - '    def __getitem__(self, key: str) -> Any:'
        - '        if key in os.environ:'
        - '            return os.environ[key]'
        - '        if self._keys_cfg is not None and key in self._keys_cfg:'
        - '            return self._keys_cfg[key]'
        - '        msg = f"Key {key} not found in environment variables or keys.cfg
          (if existing)"'
        - '        raise KeyError(msg)'
        - ''
        - '    def __contains__(self, key: str) -> bool:'
        - '        return key in os.environ or (self._keys_cfg is not None and key
          in self._keys_cfg)'
      functions:
      - end_line: 25
        name: convert_path_to_abspath
        start_line: 14
        text:
        - 'def convert_path_to_abspath(path: Path | str) -> Path:'
        - '    """If path is not absolute, convert it to an absolute path'
        - '    using the SWE_AGENT_CONFIG_ROOT environment variable (if set) or'
        - '    REPO_ROOT as base.'
        - '    """'
        - '    path = Path(path)'
        - '    root = Path(keys_config.get("SWE_AGENT_CONFIG_ROOT", REPO_ROOT))'
        - '    assert root.is_dir()'
        - '    if not path.is_absolute():'
        - '        path = root / path'
        - '    assert path.is_absolute()'
        - '    return path.resolve()'
      - end_line: 29
        name: convert_paths_to_abspath
        start_line: 28
        text:
        - 'def convert_paths_to_abspath(paths: list[Path | str]) -> list[Path]:'
        - '    return [convert_path_to_abspath(p) for p in paths]'
      - end_line: 65
        name: check_choices
        start_line: 61
        text:
        - '        def check_choices(value):'
        - '            if choices is not None and value not in choices:'
        - '                msg = f"Value {value} for key {key} not in {choices}"'
        - '                raise ValueError(msg)'
        - '            return value'
      text:
      - from __future__ import annotations
      - ''
      - import os
      - from pathlib import Path
      - from typing import Any
      - ''
      - import config as config_file
      - from sweagent import REPO_ROOT
      - from sweagent.utils.log import get_logger
      - ''
      - logger = get_logger("config")
      - ''
      - ''
      - 'def convert_path_to_abspath(path: Path | str) -> Path:'
      - '    """If path is not absolute, convert it to an absolute path'
      - '    using the SWE_AGENT_CONFIG_ROOT environment variable (if set) or'
      - '    REPO_ROOT as base.'
      - '    """'
      - '    path = Path(path)'
      - '    root = Path(keys_config.get("SWE_AGENT_CONFIG_ROOT", REPO_ROOT))'
      - '    assert root.is_dir()'
      - '    if not path.is_absolute():'
      - '        path = root / path'
      - '    assert path.is_absolute()'
      - '    return path.resolve()'
      - ''
      - ''
      - 'def convert_paths_to_abspath(paths: list[Path | str]) -> list[Path]:'
      - '    return [convert_path_to_abspath(p) for p in paths]'
      - ''
      - ''
      - 'class Config:'
      - '    def __init__(self, *, keys_cfg_path: Path | None = None):'
      - '        """This wrapper class is used to load keys from environment variables
        or keys.cfg file.'
      - '        Whenever both are presents, the environment variable is used.'
      - '        """'
      - '        if keys_cfg_path is None:'
      - '            # Defer import to avoid circular import'
      - '            from sweagent import PACKAGE_DIR'
      - ''
      - '            keys_cfg_path = PACKAGE_DIR.parent / "keys.cfg"'
      - '        self._keys_cfg = None'
      - '        if keys_cfg_path.exists():'
      - '            try:'
      - '                self._keys_cfg = config_file.Config(str(keys_cfg_path))'
      - '            except Exception as e:'
      - '                msg = f"Error loading keys.cfg from {keys_cfg_path}. Please
        check the file."'
      - '                raise RuntimeError(msg) from e'
      - '        else:'
      - '            logger.error(f"keys.cfg not found in {PACKAGE_DIR}")'
      - ''
      - '    def get(self, key: str, default=None, choices: list[Any] | None = None)
        -> Any:'
      - '        """Get a key from environment variables or keys.cfg.'
      - ''
      - '        Args:'
      - '            key: The key to retrieve.'
      - '            default: The default value to return if the key is not found.'
      - '            choices: If provided, the value must be one of the choices.'
      - '        """'
      - ''
      - '        def check_choices(value):'
      - '            if choices is not None and value not in choices:'
      - '                msg = f"Value {value} for key {key} not in {choices}"'
      - '                raise ValueError(msg)'
      - '            return value'
      - ''
      - '        if key in os.environ:'
      - '            return check_choices(os.environ[key])'
      - '        if self._keys_cfg is not None and key in self._keys_cfg:'
      - '            return check_choices(self._keys_cfg[key])'
      - '        return check_choices(default)'
      - ''
      - '    def __getitem__(self, key: str) -> Any:'
      - '        if key in os.environ:'
      - '            return os.environ[key]'
      - '        if self._keys_cfg is not None and key in self._keys_cfg:'
      - '            return self._keys_cfg[key]'
      - '        msg = f"Key {key} not found in environment variables or keys.cfg
        (if existing)"'
      - '        raise KeyError(msg)'
      - ''
      - '    def __contains__(self, key: str) -> bool:'
      - '        return key in os.environ or (self._keys_cfg is not None and key in
        self._keys_cfg)'
      - ''
      - ''
      - keys_config = Config()
    log.py:
      classes: []
      functions:
      - end_line: 21
        name: _interpret_level_from_env
        start_line: 16
        text:
        - 'def _interpret_level_from_env(level: str | None, *, default=logging.DEBUG)
          -> int:'
        - '    if not level:'
        - '        return default'
        - '    if level.isnumeric():'
        - '        return int(level)'
        - '    return getattr(logging, level.upper())'
      - end_line: 47
        name: get_logger
        start_line: 28
        text:
        - 'def get_logger(name: str) -> logging.Logger:'
        - '    """Get logger. Use this instead of `logging.getLogger` to ensure'
        - '    that the logger is set up with the correct handlers.'
        - '    """'
        - '    logger = logging.getLogger(name)'
        - '    if name in _SET_UP_LOGGERS:'
        - '        # Already set up'
        - '        return logger'
        - '    handler = RichHandler('
        - '        show_time=bool(os.environ.get("SWE_AGENT_LOG_TIME", False)),'
        - '        show_path=False,'
        - '    )'
        - '    handler.setLevel(_STREAM_LEVEL)'
        - '    logger.setLevel(min(_STREAM_LEVEL, _FILE_LEVEL))'
        - '    logger.addHandler(handler)'
        - '    logger.propagate = False'
        - '    _SET_UP_LOGGERS.add(name)'
        - '    for handler in _ADDITIONAL_HANDLERS:'
        - '        logger.addHandler(handler)'
        - '    return logger'
      - end_line: 61
        name: add_file_handler
        start_line: 50
        text:
        - 'def add_file_handler(path: PurePath | str) -> None:'
        - '    """Adds a file handler to all loggers that we have set up'
        - '    and all future loggers that will be set up with `get_logger`.'
        - '    """'
        - '    handler = logging.FileHandler(path)'
        - '    formatter = logging.Formatter("%(asctime)s %(levelname)s %(message)s")'
        - '    handler.setFormatter(formatter)'
        - '    handler.setLevel(_FILE_LEVEL)'
        - '    for name in _SET_UP_LOGGERS:'
        - '        logger = logging.getLogger(name)'
        - '        logger.addHandler(handler)'
        - '    _ADDITIONAL_HANDLERS.append(handler)'
      text:
      - from __future__ import annotations
      - ''
      - import logging
      - import os
      - from pathlib import PurePath
      - ''
      - from rich.logging import RichHandler
      - ''
      - _SET_UP_LOGGERS = set()
      - _ADDITIONAL_HANDLERS = []
      - ''
      - 'logging.TRACE = 5  # type: ignore'
      - 'logging.addLevelName(logging.TRACE, "TRACE")  # type: ignore'
      - ''
      - ''
      - 'def _interpret_level_from_env(level: str | None, *, default=logging.DEBUG)
        -> int:'
      - '    if not level:'
      - '        return default'
      - '    if level.isnumeric():'
      - '        return int(level)'
      - '    return getattr(logging, level.upper())'
      - ''
      - ''
      - _STREAM_LEVEL = _interpret_level_from_env(os.environ.get("SWE_AGENT_LOG_STREAM_LEVEL"))
      - _FILE_LEVEL = _interpret_level_from_env(os.environ.get("SWE_AGENT_LOG_FILE_LEVEL"),
        default=logging.TRACE)
      - ''
      - ''
      - 'def get_logger(name: str) -> logging.Logger:'
      - '    """Get logger. Use this instead of `logging.getLogger` to ensure'
      - '    that the logger is set up with the correct handlers.'
      - '    """'
      - '    logger = logging.getLogger(name)'
      - '    if name in _SET_UP_LOGGERS:'
      - '        # Already set up'
      - '        return logger'
      - '    handler = RichHandler('
      - '        show_time=bool(os.environ.get("SWE_AGENT_LOG_TIME", False)),'
      - '        show_path=False,'
      - '    )'
      - '    handler.setLevel(_STREAM_LEVEL)'
      - '    logger.setLevel(min(_STREAM_LEVEL, _FILE_LEVEL))'
      - '    logger.addHandler(handler)'
      - '    logger.propagate = False'
      - '    _SET_UP_LOGGERS.add(name)'
      - '    for handler in _ADDITIONAL_HANDLERS:'
      - '        logger.addHandler(handler)'
      - '    return logger'
      - ''
      - ''
      - 'def add_file_handler(path: PurePath | str) -> None:'
      - '    """Adds a file handler to all loggers that we have set up'
      - '    and all future loggers that will be set up with `get_logger`.'
      - '    """'
      - '    handler = logging.FileHandler(path)'
      - '    formatter = logging.Formatter("%(asctime)s %(levelname)s %(message)s")'
      - '    handler.setFormatter(formatter)'
      - '    handler.setLevel(_FILE_LEVEL)'
      - '    for name in _SET_UP_LOGGERS:'
      - '        logger = logging.getLogger(name)'
      - '        logger.addHandler(handler)'
      - '    _ADDITIONAL_HANDLERS.append(handler)'
      - ''
      - ''
      - default_logger = get_logger("swe-agent")
tests:
  __init__.py:
    classes: []
    functions: []
    text: []
  conftest.py:
    classes: []
    functions:
    - end_line: 21
      name: test_data_path
      start_line: 18
      text:
      - 'def test_data_path() -> Path:'
      - '    p = _this_dir / "test_data"'
      - '    assert p.is_dir()'
      - '    return p'
    - end_line: 28
      name: test_trajectories_path
      start_line: 25
      text:
      - 'def test_trajectories_path(test_data_path) -> Path:'
      - '    p = test_data_path / "trajectories"'
      - '    assert p.is_dir()'
      - '    return p'
    - end_line: 35
      name: test_data_sources_path
      start_line: 32
      text:
      - 'def test_data_sources_path(test_data_path) -> Path:'
      - '    p = test_data_path / "data_sources"'
      - '    assert p.is_dir()'
      - '    return p'
    - end_line: 46
      name: test_trajectory_path
      start_line: 39
      text:
      - 'def test_trajectory_path(test_trajectories_path) -> Path:'
      - '    traj = ('
      - '        test_trajectories_path'
      - '        / "gpt4__swe-agent__test-repo__default_from_url__t-0.00__p-0.95__c-3.00__install-1"'
      - '        / "swe-agent__test-repo-i1.traj"'
      - '    )'
      - '    assert traj.exists()'
      - '    return traj'
    - end_line: 51
      name: test_trajectory
      start_line: 50
      text:
      - 'def test_trajectory(test_trajectory_path):'
      - '    return json.loads(test_trajectory_path.read_text())'
    text:
    - from __future__ import annotations
    - ''
    - import json
    - import sys
    - from pathlib import Path
    - ''
    - import pytest
    - ''
    - '# this is a hack and should be removed when we have a better solution'
    - _this_dir = Path(__file__).resolve().parent
    - root_dir = _this_dir.parent
    - package_dir = root_dir / "sweagent"
    - sys.path.insert(0, str(root_dir))
    - sys.path.insert(1, str(package_dir))
    - ''
    - ''
    - '@pytest.fixture()'
    - 'def test_data_path() -> Path:'
    - '    p = _this_dir / "test_data"'
    - '    assert p.is_dir()'
    - '    return p'
    - ''
    - ''
    - '@pytest.fixture()'
    - 'def test_trajectories_path(test_data_path) -> Path:'
    - '    p = test_data_path / "trajectories"'
    - '    assert p.is_dir()'
    - '    return p'
    - ''
    - ''
    - '@pytest.fixture()'
    - 'def test_data_sources_path(test_data_path) -> Path:'
    - '    p = test_data_path / "data_sources"'
    - '    assert p.is_dir()'
    - '    return p'
    - ''
    - ''
    - '@pytest.fixture()'
    - 'def test_trajectory_path(test_trajectories_path) -> Path:'
    - '    traj = ('
    - '        test_trajectories_path'
    - '        / "gpt4__swe-agent__test-repo__default_from_url__t-0.00__p-0.95__c-3.00__install-1"'
    - '        / "swe-agent__test-repo-i1.traj"'
    - '    )'
    - '    assert traj.exists()'
    - '    return traj'
    - ''
    - ''
    - '@pytest.fixture()'
    - 'def test_trajectory(test_trajectory_path):'
    - '    return json.loads(test_trajectory_path.read_text())'
  test_commands.py:
    classes: []
    functions:
    - end_line: 14
      name: test_partition_flake8_line
      start_line: 11
      text:
      - 'def test_partition_flake8_line():'
      - '    assert Flake8Error.from_line("existing_lint error.py:12:41: E999 SyntaxError:
        invalid syntax") == Flake8Error('
      - '        "existing_lint error.py", 12, 41, "E999 SyntaxError: invalid syntax"'
      - '    )'
    - end_line: 27
      name: test_update_previous_errors
      start_line: 17
      text:
      - 'def test_update_previous_errors():'
      - '    previous_errors = ['
      - '        Flake8Error("existing_lint_error.py", 12, 41, "E999 SyntaxError:
        invalid syntax"),'
      - '        Flake8Error("existing_lint_error.py", 15, 41, "E999 SyntaxError:
        invalid syntax"),'
      - '        Flake8Error("existing_lint_error.py", 20, 41, "E999 SyntaxError:
        invalid syntax"),'
      - '    ]'
      - '    assert _update_previous_errors(previous_errors, (15, 18), 3) == ['
      - '        Flake8Error("existing_lint_error.py", 12, 41, "E999 SyntaxError:
        invalid syntax"),'
      - '        Flake8Error("existing_lint_error.py", 19, 41, "E999 SyntaxError:
        invalid syntax"),'
      - '    ]'
      - '    assert _update_previous_errors([], (15, 18), 3) == []'
    - end_line: 36
      name: test_flake8_format_no_error_1
      start_line: 30
      text:
      - 'def test_flake8_format_no_error_1():'
      - '    assert ('
      - '        format_flake8_output('
      - '            "a:12:41: e", previous_errors_string="a:12:41: e", replacement_window=(50,
        51), replacement_n_lines=10'
      - '        )'
      - '        == ""'
      - '    )'
    - end_line: 45
      name: test_flake8_format_no_error_2
      start_line: 39
      text:
      - 'def test_flake8_format_no_error_2():'
      - '    assert ('
      - '        format_flake8_output('
      - '            "a:12:41: e", previous_errors_string="a:13:41: e", replacement_window=(1,
        2), replacement_n_lines=1'
      - '        )'
      - '        == ""'
      - '    )'
    - end_line: 54
      name: test_flake8_format_no_error_3
      start_line: 48
      text:
      - 'def test_flake8_format_no_error_3():'
      - '    assert ('
      - '        format_flake8_output('
      - '            "a:12:41: e", previous_errors_string="a:13:41: e", replacement_window=(1,
        2), replacement_n_lines=1'
      - '        )'
      - '        == ""'
      - '    )'
    - end_line: 63
      name: test_flake8_format_error_1
      start_line: 57
      text:
      - 'def test_flake8_format_error_1():'
      - '    assert ('
      - '        format_flake8_output('
      - '            "a:12:41: e", previous_errors_string="a:13:41: e", replacement_window=(12,
        13), replacement_n_lines=10'
      - '        )'
      - '        == "- e"'
      - '    )'
    - end_line: 76
      name: test_flake8_format_error_1_linenumbers
      start_line: 66
      text:
      - 'def test_flake8_format_error_1_linenumbers():'
      - '    assert ('
      - '        format_flake8_output('
      - '            "a:12:41: e",'
      - '            previous_errors_string="a:13:41: e",'
      - '            replacement_window=(12, 13),'
      - '            replacement_n_lines=10,'
      - '            show_line_numbers=True,'
      - '        )'
      - '        == "- 12:41 e"'
      - '    )'
    text:
    - from __future__ import annotations
    - ''
    - import sys
    - ''
    - sys.path.append("config/commands")
    - ''
    - ''
    - from _split_string import Flake8Error, _update_previous_errors, format_flake8_output
    - ''
    - ''
    - 'def test_partition_flake8_line():'
    - '    assert Flake8Error.from_line("existing_lint error.py:12:41: E999 SyntaxError:
      invalid syntax") == Flake8Error('
    - '        "existing_lint error.py", 12, 41, "E999 SyntaxError: invalid syntax"'
    - '    )'
    - ''
    - ''
    - 'def test_update_previous_errors():'
    - '    previous_errors = ['
    - '        Flake8Error("existing_lint_error.py", 12, 41, "E999 SyntaxError: invalid
      syntax"),'
    - '        Flake8Error("existing_lint_error.py", 15, 41, "E999 SyntaxError: invalid
      syntax"),'
    - '        Flake8Error("existing_lint_error.py", 20, 41, "E999 SyntaxError: invalid
      syntax"),'
    - '    ]'
    - '    assert _update_previous_errors(previous_errors, (15, 18), 3) == ['
    - '        Flake8Error("existing_lint_error.py", 12, 41, "E999 SyntaxError: invalid
      syntax"),'
    - '        Flake8Error("existing_lint_error.py", 19, 41, "E999 SyntaxError: invalid
      syntax"),'
    - '    ]'
    - '    assert _update_previous_errors([], (15, 18), 3) == []'
    - ''
    - ''
    - 'def test_flake8_format_no_error_1():'
    - '    assert ('
    - '        format_flake8_output('
    - '            "a:12:41: e", previous_errors_string="a:12:41: e", replacement_window=(50,
      51), replacement_n_lines=10'
    - '        )'
    - '        == ""'
    - '    )'
    - ''
    - ''
    - 'def test_flake8_format_no_error_2():'
    - '    assert ('
    - '        format_flake8_output('
    - '            "a:12:41: e", previous_errors_string="a:13:41: e", replacement_window=(1,
      2), replacement_n_lines=1'
    - '        )'
    - '        == ""'
    - '    )'
    - ''
    - ''
    - 'def test_flake8_format_no_error_3():'
    - '    assert ('
    - '        format_flake8_output('
    - '            "a:12:41: e", previous_errors_string="a:13:41: e", replacement_window=(1,
      2), replacement_n_lines=1'
    - '        )'
    - '        == ""'
    - '    )'
    - ''
    - ''
    - 'def test_flake8_format_error_1():'
    - '    assert ('
    - '        format_flake8_output('
    - '            "a:12:41: e", previous_errors_string="a:13:41: e", replacement_window=(12,
      13), replacement_n_lines=10'
    - '        )'
    - '        == "- e"'
    - '    )'
    - ''
    - ''
    - 'def test_flake8_format_error_1_linenumbers():'
    - '    assert ('
    - '        format_flake8_output('
    - '            "a:12:41: e",'
    - '            previous_errors_string="a:13:41: e",'
    - '            replacement_window=(12, 13),'
    - '            replacement_n_lines=10,'
    - '            show_line_numbers=True,'
    - '        )'
    - '        == "- 12:41 e"'
    - '    )'
  test_data:
    data_sources:
      debug_20240322.json: {}
      human_eval.json: {}
      swe-bench-dev-easy.json: {}
      swe-bench-dev-easy_first_only.json: {}
      swe-bench-lite-test.json: {}
    trajectories:
      gpt4__swe-agent-test-repo__default_from_url__t-0.00__p-0.95__c-3.00__install-1:
        6e44b9__sweagenttestrepo-1c2844.traj: {}
        args.yaml: {}
        solution_missing_colon.py:
          classes: []
          functions:
          - end_line: 7
            name: division
            start_line: 4
            text:
            - 'def division(a: float, b: float) -> float:'
            - '    if b == 0:'
            - '        raise ValueError("Cannot divide by zero")'
            - '    return a / b'
          text:
          - '#!/usr/bin/env python3'
          - ''
          - ''
          - 'def division(a: float, b: float) -> float:'
          - '    if b == 0:'
          - '        raise ValueError("Cannot divide by zero")'
          - '    return a / b'
          - ''
          - ''
          - 'if __name__ == "__main__":'
          - '    try:'
          - '        print(division(23, 0))'
          - '    except ValueError as e:'
          - '        print(e)'
          - ''
      gpt4__swe-agent__test-repo__default_from_url__t-0.00__p-0.95__c-3.00__install-1:
        args.yaml: {}
        swe-agent__test-repo-i1.traj: {}
      gpt4__swe-bench-dev-easy_first_only__default__t-0.00__p-0.95__c-3.00__install-1:
        all_preds.jsonl: {}
        args.yaml: {}
        patches:
          pydicom__pydicom-1458.patch: {}
        pydicom__pydicom-1458.traj: {}
  test_env.py:
    classes: []
    functions:
    - end_line: 45
      name: test_env_args
      start_line: 20
      text:
      - def test_env_args(
      - '    tmpdir_factory,'
      - '):'
      - '    """This will use a persistent container"""'
      - '    local_repo_path = tmpdir_factory.getbasetemp() / "test-repo"'
      - '    clone_cmd = ["git", "clone", "https://github.com/swe-agent/test-repo",
        local_repo_path]'
      - '    subprocess.run(clone_cmd, check=True)'
      - '    data_path = local_repo_path / "problem_statements" / "1.md"'
      - '    test_env_args = EnvironmentArguments('
      - '        data_path=str(data_path),'
      - '        repo_path=str(local_repo_path),'
      - '        image_name="sweagent/swe-agent:latest",'
      - '        container_name="test-container-this-is-a-random-string",'
      - '        verbose=True,'
      - '    )'
      - '    yield test_env_args'
      - '    # Cleanup (after session ends)'
      - '    client = docker.from_env()'
      - '    # fixme (?): What happens if user changed container_name?'
      - '    try:'
      - '        container = client.containers.get(test_env_args.container_name)'
      - '        container.remove(force=True)'
      - '    except docker.errors.NotFound:'
      - '        # Can happen if this fixture never runs because we only do a partial'
      - '        # test run'
      - '        pass'
    - end_line: 58
      name: swe_env_context
      start_line: 49
      text:
      - 'def swe_env_context(env_args):'
      - '    """Context manager to make sure we close the shell on the container'
      - '    so that we can reuse it.'
      - '    """'
      - ''
      - '    env = SWEEnv(env_args)'
      - '    try:'
      - '        yield env'
      - '    finally:'
      - '        env.close()'
    - end_line: 64
      name: test_init_swe_env
      start_line: 62
      text:
      - 'def test_init_swe_env(test_env_args):'
      - '    with swe_env_context(test_env_args) as env:'
      - '        env.reset()'
    - end_line: 71
      name: test_init_swe_env_conservative_clone
      start_line: 68
      text:
      - 'def test_init_swe_env_conservative_clone(test_env_args):'
      - '    with mock.patch.dict("os.environ", {"SWE_AGENT_CLONE_METHOD": "full"}):'
      - '        with swe_env_context(test_env_args) as env:'
      - '            env.reset()'
    - end_line: 78
      name: test_init_swe_env_non_persistent
      start_line: 75
      text:
      - 'def test_init_swe_env_non_persistent(test_env_args):'
      - '    test_env_args = dataclasses.replace(test_env_args, container_name=None)'
      - '    with swe_env_context(test_env_args) as env:'
      - '        env.reset()'
    - end_line: 105
      name: test_init_swe_env_cached_task_image
      start_line: 82
      text:
      - 'def test_init_swe_env_cached_task_image(test_env_args):'
      - '    test_env_args = dataclasses.replace(test_env_args, cache_task_images=True,
        container_name=None)'
      - '    start = time.perf_counter()'
      - '    with swe_env_context(test_env_args) as env:'
      - '        env.reset()'
      - '    duration_no_cache = time.perf_counter() - start'
      - '    start = time.perf_counter()'
      - '    # now it should be cached, so let''s run again'
      - '    image_prefix = None'
      - '    with swe_env_context(test_env_args) as env:'
      - '        env.reset()'
      - '        image_prefix = env.cached_image_prefix'
      - '    assert image_prefix'
      - '    duration_cache = time.perf_counter() - start'
      - '    assert duration_cache < duration_no_cache'
      - '    # Retrieve all images with a prefix "prefix"'
      - '    client = docker.from_env()'
      - '    # Remove the images'
      - '    for image in client.images.list():'
      - '        if not image.tags:'
      - '            continue'
      - '        if not image.tags[0].startswith(image_prefix):'
      - '            continue'
      - '        client.images.remove(image.id)'
    - end_line: 115
      name: test_execute_setup_script
      start_line: 109
      text:
      - 'def test_execute_setup_script(tmp_path, test_env_args):'
      - '    test_script = "echo ''hello world''"'
      - '    script_path = Path(tmp_path / "test_script.sh")'
      - '    script_path.write_text(test_script)'
      - '    test_env_args = dataclasses.replace(test_env_args, environment_setup=script_path)'
      - '    with swe_env_context(test_env_args) as env:'
      - '        env.reset()'
    - end_line: 134
      name: test_execute_environment
      start_line: 119
      text:
      - 'def test_execute_environment(tmp_path, test_env_args, capsys):'
      - '    test_env = {'
      - '        "python": "3.6",'
      - '        "packages": "pytest",'
      - '        "pip_packages": ["tox"],'
      - '        "install": "python -m pip install --upgrade pip && python -m pip
        install -e .",'
      - '    }'
      - '    env_config_path = Path(tmp_path / "env_config.yml")'
      - '    env_config_path.write_text(yaml.dump(test_env))'
      - '    # Make sure we don''t use persistent container, else we might have already
        installed the conda environment'
      - '    test_env_args = dataclasses.replace(test_env_args, environment_setup=env_config_path,
        container_name=None)'
      - '    with swe_env_context(test_env_args) as env:'
      - '        env.reset()'
      - '    out = capsys.readouterr().out'
      - '    print(out)'
      - '    assert "Cloned python conda environment" not in out'
    - end_line: 151
      name: test_execute_environment_default
      start_line: 138
      text:
      - 'def test_execute_environment_default(test_env_args):'
      - '    env_config_paths = (CONFIG_DIR / "environment_setup").iterdir()'
      - '    assert env_config_paths'
      - '    # Make sure we don''t use persistent container, else we might have already
        installed the conda environment'
      - '    test_env_args = dataclasses.replace(test_env_args, container_name=None)'
      - '    for env_config_path in env_config_paths:'
      - '        if env_config_path.name == "django.yaml":'
      - '            continue'
      - '        if env_config_path.suffix not in [".yaml", ".yml", ".sh"]:'
      - '            continue'
      - '        print(env_config_path)'
      - '        test_env_args = dataclasses.replace(test_env_args, environment_setup=env_config_path)'
      - '        with swe_env_context(test_env_args) as env:'
      - '            env.reset()'
    - end_line: 171
      name: test_execute_environment_clone_python
      start_line: 155
      text:
      - 'def test_execute_environment_clone_python(tmp_path, test_env_args, capsys):'
      - '    """This should clone the existing python 3.10 conda environment for speedup"""'
      - '    test_env = {'
      - '        "python": "3.10",'
      - '        "packages": "pytest",'
      - '        "pip_packages": ["tox"],'
      - '        "install": "python -m pip install --upgrade pip && python -m pip
        install -e .",'
      - '    }'
      - '    env_config_path = Path(tmp_path / "env_config.yml")'
      - '    env_config_path.write_text(yaml.dump(test_env))'
      - '    # Make sure we don''t use persistent container, else we might have already
        installed the conda environment'
      - '    test_env_args = dataclasses.replace(test_env_args, environment_setup=env_config_path,
        container_name=None)'
      - '    with swe_env_context(test_env_args) as env:'
      - '        env.reset()'
      - '    out = capsys.readouterr().out'
      - '    print(out)'
      - '    assert "Cloned python conda environment" in out'
    - end_line: 183
      name: test_open_pr
      start_line: 175
      text:
      - 'def test_open_pr(test_env_args):'
      - '    test_env_args = dataclasses.replace('
      - '        test_env_args,'
      - '        data_path="https://github.com/swe-agent/test-repo/issues/1",'
      - '        repo_path="",'
      - '    )'
      - '    with swe_env_context(test_env_args) as env:'
      - '        env.reset()'
      - '        env.open_pr(_dry_run=True, trajectory=[])'
    - end_line: 190
      name: test_interrupt_close
      start_line: 187
      text:
      - 'def test_interrupt_close(test_env_args):'
      - '    with swe_env_context(test_env_args) as env:'
      - '        env.reset()'
      - '        env.interrupt()'
    - end_line: 197
      name: test_communicate_old
      start_line: 194
      text:
      - 'def test_communicate_old(test_env_args):'
      - '    with mock.patch.dict("os.environ", {"SWE_AGENT_COMMUNICATE_METHOD": "processes"}):'
      - '        with swe_env_context(test_env_args) as env:'
      - '            env.reset()'
    - end_line: 204
      name: test_env_with_hook
      start_line: 201
      text:
      - 'def test_env_with_hook(test_env_args):'
      - '    with swe_env_context(test_env_args) as env:'
      - '        env.add_hook(EnvHook())'
      - '        env.reset()'
    - end_line: 213
      name: test_invalid_config
      start_line: 207
      text:
      - 'def test_invalid_config():'
      - '    with pytest.raises(ValueError, match=".*Not allowed.*"):'
      - '        EnvironmentArguments('
      - '            data_path=".",'
      - '            container_name="test",'
      - '            cache_task_images=True,'
      - '        )'
    text:
    - from __future__ import annotations
    - ''
    - import dataclasses
    - import subprocess
    - import time
    - from contextlib import contextmanager
    - from pathlib import Path
    - from unittest import mock
    - ''
    - import pytest
    - import yaml
    - ''
    - import docker
    - import docker.errors
    - from sweagent import CONFIG_DIR
    - from sweagent.environment.swe_env import EnvHook, EnvironmentArguments, SWEEnv
    - ''
    - ''
    - '@pytest.fixture(scope="module")'
    - def test_env_args(
    - '    tmpdir_factory,'
    - '):'
    - '    """This will use a persistent container"""'
    - '    local_repo_path = tmpdir_factory.getbasetemp() / "test-repo"'
    - '    clone_cmd = ["git", "clone", "https://github.com/swe-agent/test-repo",
      local_repo_path]'
    - '    subprocess.run(clone_cmd, check=True)'
    - '    data_path = local_repo_path / "problem_statements" / "1.md"'
    - '    test_env_args = EnvironmentArguments('
    - '        data_path=str(data_path),'
    - '        repo_path=str(local_repo_path),'
    - '        image_name="sweagent/swe-agent:latest",'
    - '        container_name="test-container-this-is-a-random-string",'
    - '        verbose=True,'
    - '    )'
    - '    yield test_env_args'
    - '    # Cleanup (after session ends)'
    - '    client = docker.from_env()'
    - '    # fixme (?): What happens if user changed container_name?'
    - '    try:'
    - '        container = client.containers.get(test_env_args.container_name)'
    - '        container.remove(force=True)'
    - '    except docker.errors.NotFound:'
    - '        # Can happen if this fixture never runs because we only do a partial'
    - '        # test run'
    - '        pass'
    - ''
    - ''
    - '@contextmanager'
    - 'def swe_env_context(env_args):'
    - '    """Context manager to make sure we close the shell on the container'
    - '    so that we can reuse it.'
    - '    """'
    - ''
    - '    env = SWEEnv(env_args)'
    - '    try:'
    - '        yield env'
    - '    finally:'
    - '        env.close()'
    - ''
    - ''
    - '@pytest.mark.slow()'
    - 'def test_init_swe_env(test_env_args):'
    - '    with swe_env_context(test_env_args) as env:'
    - '        env.reset()'
    - ''
    - ''
    - '@pytest.mark.slow()'
    - 'def test_init_swe_env_conservative_clone(test_env_args):'
    - '    with mock.patch.dict("os.environ", {"SWE_AGENT_CLONE_METHOD": "full"}):'
    - '        with swe_env_context(test_env_args) as env:'
    - '            env.reset()'
    - ''
    - ''
    - '@pytest.mark.slow()'
    - 'def test_init_swe_env_non_persistent(test_env_args):'
    - '    test_env_args = dataclasses.replace(test_env_args, container_name=None)'
    - '    with swe_env_context(test_env_args) as env:'
    - '        env.reset()'
    - ''
    - ''
    - '@pytest.mark.slow()'
    - 'def test_init_swe_env_cached_task_image(test_env_args):'
    - '    test_env_args = dataclasses.replace(test_env_args, cache_task_images=True,
      container_name=None)'
    - '    start = time.perf_counter()'
    - '    with swe_env_context(test_env_args) as env:'
    - '        env.reset()'
    - '    duration_no_cache = time.perf_counter() - start'
    - '    start = time.perf_counter()'
    - '    # now it should be cached, so let''s run again'
    - '    image_prefix = None'
    - '    with swe_env_context(test_env_args) as env:'
    - '        env.reset()'
    - '        image_prefix = env.cached_image_prefix'
    - '    assert image_prefix'
    - '    duration_cache = time.perf_counter() - start'
    - '    assert duration_cache < duration_no_cache'
    - '    # Retrieve all images with a prefix "prefix"'
    - '    client = docker.from_env()'
    - '    # Remove the images'
    - '    for image in client.images.list():'
    - '        if not image.tags:'
    - '            continue'
    - '        if not image.tags[0].startswith(image_prefix):'
    - '            continue'
    - '        client.images.remove(image.id)'
    - ''
    - ''
    - '@pytest.mark.slow()'
    - 'def test_execute_setup_script(tmp_path, test_env_args):'
    - '    test_script = "echo ''hello world''"'
    - '    script_path = Path(tmp_path / "test_script.sh")'
    - '    script_path.write_text(test_script)'
    - '    test_env_args = dataclasses.replace(test_env_args, environment_setup=script_path)'
    - '    with swe_env_context(test_env_args) as env:'
    - '        env.reset()'
    - ''
    - ''
    - '@pytest.mark.slow()'
    - 'def test_execute_environment(tmp_path, test_env_args, capsys):'
    - '    test_env = {'
    - '        "python": "3.6",'
    - '        "packages": "pytest",'
    - '        "pip_packages": ["tox"],'
    - '        "install": "python -m pip install --upgrade pip && python -m pip install
      -e .",'
    - '    }'
    - '    env_config_path = Path(tmp_path / "env_config.yml")'
    - '    env_config_path.write_text(yaml.dump(test_env))'
    - '    # Make sure we don''t use persistent container, else we might have already
      installed the conda environment'
    - '    test_env_args = dataclasses.replace(test_env_args, environment_setup=env_config_path,
      container_name=None)'
    - '    with swe_env_context(test_env_args) as env:'
    - '        env.reset()'
    - '    out = capsys.readouterr().out'
    - '    print(out)'
    - '    assert "Cloned python conda environment" not in out'
    - ''
    - ''
    - '@pytest.mark.slow()'
    - 'def test_execute_environment_default(test_env_args):'
    - '    env_config_paths = (CONFIG_DIR / "environment_setup").iterdir()'
    - '    assert env_config_paths'
    - '    # Make sure we don''t use persistent container, else we might have already
      installed the conda environment'
    - '    test_env_args = dataclasses.replace(test_env_args, container_name=None)'
    - '    for env_config_path in env_config_paths:'
    - '        if env_config_path.name == "django.yaml":'
    - '            continue'
    - '        if env_config_path.suffix not in [".yaml", ".yml", ".sh"]:'
    - '            continue'
    - '        print(env_config_path)'
    - '        test_env_args = dataclasses.replace(test_env_args, environment_setup=env_config_path)'
    - '        with swe_env_context(test_env_args) as env:'
    - '            env.reset()'
    - ''
    - ''
    - '@pytest.mark.slow()'
    - 'def test_execute_environment_clone_python(tmp_path, test_env_args, capsys):'
    - '    """This should clone the existing python 3.10 conda environment for speedup"""'
    - '    test_env = {'
    - '        "python": "3.10",'
    - '        "packages": "pytest",'
    - '        "pip_packages": ["tox"],'
    - '        "install": "python -m pip install --upgrade pip && python -m pip install
      -e .",'
    - '    }'
    - '    env_config_path = Path(tmp_path / "env_config.yml")'
    - '    env_config_path.write_text(yaml.dump(test_env))'
    - '    # Make sure we don''t use persistent container, else we might have already
      installed the conda environment'
    - '    test_env_args = dataclasses.replace(test_env_args, environment_setup=env_config_path,
      container_name=None)'
    - '    with swe_env_context(test_env_args) as env:'
    - '        env.reset()'
    - '    out = capsys.readouterr().out'
    - '    print(out)'
    - '    assert "Cloned python conda environment" in out'
    - ''
    - ''
    - '@pytest.mark.slow()'
    - 'def test_open_pr(test_env_args):'
    - '    test_env_args = dataclasses.replace('
    - '        test_env_args,'
    - '        data_path="https://github.com/swe-agent/test-repo/issues/1",'
    - '        repo_path="",'
    - '    )'
    - '    with swe_env_context(test_env_args) as env:'
    - '        env.reset()'
    - '        env.open_pr(_dry_run=True, trajectory=[])'
    - ''
    - ''
    - '@pytest.mark.slow()'
    - 'def test_interrupt_close(test_env_args):'
    - '    with swe_env_context(test_env_args) as env:'
    - '        env.reset()'
    - '        env.interrupt()'
    - ''
    - ''
    - '@pytest.mark.slow()'
    - 'def test_communicate_old(test_env_args):'
    - '    with mock.patch.dict("os.environ", {"SWE_AGENT_COMMUNICATE_METHOD": "processes"}):'
    - '        with swe_env_context(test_env_args) as env:'
    - '            env.reset()'
    - ''
    - ''
    - '@pytest.mark.slow()'
    - 'def test_env_with_hook(test_env_args):'
    - '    with swe_env_context(test_env_args) as env:'
    - '        env.add_hook(EnvHook())'
    - '        env.reset()'
    - ''
    - ''
    - 'def test_invalid_config():'
    - '    with pytest.raises(ValueError, match=".*Not allowed.*"):'
    - '        EnvironmentArguments('
    - '            data_path=".",'
    - '            container_name="test",'
    - '            cache_task_images=True,'
    - '        )'
  test_env_utils.py:
    classes: []
    functions:
    - end_line: 27
      name: test_format_trajectory_markdown
      start_line: 24
      text:
      - 'def test_format_trajectory_markdown(test_trajectory):'
      - '    formatted = format_trajectory_markdown(test_trajectory["trajectory"])'
      - '    assert formatted.startswith("<details>")'
      - '    assert formatted.endswith("</details>")'
    - end_line: 31
      name: test_remove_triple_backticks
      start_line: 30
      text:
      - 'def test_remove_triple_backticks():'
      - '    assert remove_triple_backticks("```") == ""'
    - end_line: 39
      name: test_is_github_repo_url
      start_line: 34
      text:
      - 'def test_is_github_repo_url():'
      - '    assert is_github_repo_url("https://github.com/princeton-nlp/SWE-agent")'
      - '    assert is_github_repo_url("https://github.com/princeton-nlp/SWE-agent/anything")'
      - '    assert is_github_repo_url("github.com/princeton-nlp/SWE-agent/anything")'
      - '    assert not is_github_repo_url("")'
      - '    assert not is_github_repo_url("/path/to/file")'
    - end_line: 46
      name: test_parse_gh_repo_url
      start_line: 42
      text:
      - 'def test_parse_gh_repo_url():'
      - '    assert parse_gh_repo_url("https://github.com/princeton-nlp/SWE-agent")
        == ("princeton-nlp", "SWE-agent")'
      - '    assert parse_gh_repo_url("github.com/princeton-nlp/SWE-agent") == ("princeton-nlp",
        "SWE-agent")'
      - '    assert parse_gh_repo_url("github.com/princeton-nlp/SWE-agent/asdfjsdfg")
        == ("princeton-nlp", "SWE-agent")'
      - '    assert parse_gh_repo_url("git@github.com/princeton-nlp/SWE-agent/asdfjsdfg")
        == ("princeton-nlp", "SWE-agent")'
    - end_line: 55
      name: test_parse_gh_repo_url_fails
      start_line: 49
      text:
      - 'def test_parse_gh_repo_url_fails():'
      - '    with pytest.raises(InvalidGithubURL):'
      - '        parse_gh_repo_url("adfkj;lasdfl;kj")'
      - '    with pytest.raises(InvalidGithubURL):'
      - '        parse_gh_repo_url("github.com/")'
      - '    with pytest.raises(InvalidGithubURL):'
      - '        parse_gh_repo_url("github.com//a/")'
    - end_line: 63
      name: test_parse_gh_issue_url
      start_line: 58
      text:
      - 'def test_parse_gh_issue_url():'
      - '    url = "https://github.com/princeton-nlp/SWE-agent/issues/43"'
      - '    owner, repo, no = parse_gh_issue_url(url)'
      - '    assert owner == "princeton-nlp"'
      - '    assert repo == "SWE-agent"'
      - '    assert no == "43"'
    - end_line: 70
      name: test_parse_gh_issue_url_fails
      start_line: 66
      text:
      - 'def test_parse_gh_issue_url_fails():'
      - '    with pytest.raises(InvalidGithubURL):'
      - '        parse_gh_issue_url("https://github.com/a/b")'
      - '    with pytest.raises(InvalidGithubURL):'
      - '        parse_gh_issue_url("https://github.com/a/b////")'
    - end_line: 75
      name: test_is_from_github_url
      start_line: 73
      text:
      - 'def test_is_from_github_url():'
      - '    assert not is_github_issue_url("")'
      - '    assert is_github_issue_url("https://github.com/princeton-nlp/SWE-agent/issues/43")'
    - end_line: 85
      name: test_get_associated_commit_urls
      start_line: 78
      text:
      - 'def test_get_associated_commit_urls():'
      - '    assoc = get_associated_commit_urls('
      - '        org="princeton-nlp",'
      - '        repo="SWE-agent",'
      - '        issue_number="41",'
      - '        token=os.environ.get("GITHUB_TOKEN", ""),'
      - '    )'
      - '    assert len(assoc) > 0'
    - end_line: 99
      name: test_get_instance_gh_issue
      start_line: 88
      text:
      - 'def test_get_instance_gh_issue():'
      - '    instance = get_instances("https://github.com/swe-agent/test-repo/issues/1",
        **_TOKEN)[0]'
      - '    compare_with = {'
      - '        "repo": "swe-agent/test-repo",'
      - '        "instance_id": "swe-agent__test-repo-i1",'
      - '        "repo_type": "github",'
      - '    }'
      - '    for key in compare_with:'
      - '        assert instance[key] == compare_with[key]'
      - '    assert "SyntaxError" in instance["problem_statement"]'
      - '    assert len(instance["base_commit"]) > 10'
      - '    assert instance["version"]'
    - end_line: 108
      name: clone_repo
      start_line: 102
      text:
      - 'def clone_repo(tmp_path, repo_url):'
      - '    cmd = ['
      - '        "git",'
      - '        "clone",'
      - '        repo_url,'
      - '    ]'
      - '    subprocess.run(cmd, check=True, cwd=tmp_path)'
    - end_line: 127
      name: test_get_instance_gh_issue_local_repo
      start_line: 111
      text:
      - 'def test_get_instance_gh_issue_local_repo(tmp_path):'
      - '    clone_repo(tmp_path, "https://github.com/swe-agent/test-repo/")'
      - '    instance = get_instances('
      - '        file_path="https://github.com/swe-agent/test-repo/issues/1",'
      - '        repo_path=str(tmp_path / "test-repo"),'
      - '        **_TOKEN,'
      - '    )[0]'
      - '    compare_with = {'
      - '        "repo": str(tmp_path.resolve() / "test-repo"),'
      - '        "repo_type": "local",'
      - '        "instance_id": "swe-agent__test-repo-i1",'
      - '    }'
      - '    for key in compare_with:'
      - '        assert instance[key] == compare_with[key]'
      - '    assert "SyntaxError" in instance["problem_statement"]'
      - '    assert len(instance["base_commit"]) > 10'
      - '    assert instance["version"]'
    - end_line: 147
      name: test_get_instance_local_issue_local_repo
      start_line: 130
      text:
      - 'def test_get_instance_local_issue_local_repo(tmp_path):'
      - '    clone_repo(tmp_path, "https://github.com/swe-agent/test-repo/")'
      - '    issue_path = tmp_path / "issue.txt"'
      - '    issue_path.write_text("asdf")'
      - '    instance = get_instances('
      - '        file_path=str(issue_path),'
      - '        repo_path=str(tmp_path / "test-repo"),'
      - '    )[0]'
      - '    compare_with = {'
      - '        "repo": str(tmp_path.resolve() / "test-repo"),'
      - '        "repo_type": "local",'
      - '        "instance_id": hashlib.sha256(b"asdf").hexdigest()[:6],'
      - '        "problem_statement": "asdf",'
      - '    }'
      - '    for key in compare_with:'
      - '        assert instance[key] == compare_with[key]'
      - '    assert len(instance["base_commit"]) > 10'
      - '    assert instance["version"]'
    - end_line: 165
      name: test_get_instance_gh_issue_gh_repo
      start_line: 150
      text:
      - 'def test_get_instance_gh_issue_gh_repo(tmp_path):'
      - '    instance = get_instances('
      - '        file_path="https://github.com/swe-agent/test-repo/issues/1",'
      - '        repo_path="https://github.com/princeton-nlp/SWE-agent",'
      - '        **_TOKEN,'
      - '    )[0]'
      - '    compare_with = {'
      - '        "repo": "princeton-nlp/SWE-agent",'
      - '        "repo_type": "github",'
      - '        "instance_id": "swe-agent__test-repo-i1",'
      - '    }'
      - '    for key in compare_with:'
      - '        assert instance[key] == compare_with[key]'
      - '    assert "SyntaxError" in instance["problem_statement"]'
      - '    assert len(instance["base_commit"]) > 10'
      - '    assert instance["version"]'
    - end_line: 182
      name: test_get_instance_text_issue_gh_repo
      start_line: 168
      text:
      - 'def test_get_instance_text_issue_gh_repo(tmp_path):'
      - '    instance = get_instances('
      - '        file_path="text://this is a test",'
      - '        repo_path="https://github.com/princeton-nlp/SWE-agent",'
      - '        **_TOKEN,'
      - '    )[0]'
      - '    compare_with = {'
      - '        "repo": "princeton-nlp/SWE-agent",'
      - '        "repo_type": "github",'
      - '        "problem_statement": "this is a test",'
      - '    }'
      - '    for key in compare_with:'
      - '        assert instance[key] == compare_with[key]'
      - '    assert len(instance["base_commit"]) > 10'
      - '    assert instance["version"]'
    - end_line: 189
      name: test_load_instances
      start_line: 185
      text:
      - 'def test_load_instances(test_data_path, caplog):'
      - '    test_data_sources = test_data_path / "data_sources"'
      - '    examples = list(test_data_sources.iterdir())'
      - '    for example in examples:'
      - '        get_instances(file_path=str(example), **_TOKEN)'
    text:
    - from __future__ import annotations
    - ''
    - import hashlib
    - import os
    - import subprocess
    - ''
    - import pytest
    - ''
    - from sweagent.environment.utils import (
    - '    InvalidGithubURL,'
    - '    format_trajectory_markdown,'
    - '    get_associated_commit_urls,'
    - '    get_instances,'
    - '    is_github_issue_url,'
    - '    is_github_repo_url,'
    - '    parse_gh_issue_url,'
    - '    parse_gh_repo_url,'
    - '    remove_triple_backticks,'
    - )
    - ''
    - '_TOKEN = {"token": os.environ.get("GITHUB_TOKEN", "")}'
    - ''
    - ''
    - 'def test_format_trajectory_markdown(test_trajectory):'
    - '    formatted = format_trajectory_markdown(test_trajectory["trajectory"])'
    - '    assert formatted.startswith("<details>")'
    - '    assert formatted.endswith("</details>")'
    - ''
    - ''
    - 'def test_remove_triple_backticks():'
    - '    assert remove_triple_backticks("```") == ""'
    - ''
    - ''
    - 'def test_is_github_repo_url():'
    - '    assert is_github_repo_url("https://github.com/princeton-nlp/SWE-agent")'
    - '    assert is_github_repo_url("https://github.com/princeton-nlp/SWE-agent/anything")'
    - '    assert is_github_repo_url("github.com/princeton-nlp/SWE-agent/anything")'
    - '    assert not is_github_repo_url("")'
    - '    assert not is_github_repo_url("/path/to/file")'
    - ''
    - ''
    - 'def test_parse_gh_repo_url():'
    - '    assert parse_gh_repo_url("https://github.com/princeton-nlp/SWE-agent")
      == ("princeton-nlp", "SWE-agent")'
    - '    assert parse_gh_repo_url("github.com/princeton-nlp/SWE-agent") == ("princeton-nlp",
      "SWE-agent")'
    - '    assert parse_gh_repo_url("github.com/princeton-nlp/SWE-agent/asdfjsdfg")
      == ("princeton-nlp", "SWE-agent")'
    - '    assert parse_gh_repo_url("git@github.com/princeton-nlp/SWE-agent/asdfjsdfg")
      == ("princeton-nlp", "SWE-agent")'
    - ''
    - ''
    - 'def test_parse_gh_repo_url_fails():'
    - '    with pytest.raises(InvalidGithubURL):'
    - '        parse_gh_repo_url("adfkj;lasdfl;kj")'
    - '    with pytest.raises(InvalidGithubURL):'
    - '        parse_gh_repo_url("github.com/")'
    - '    with pytest.raises(InvalidGithubURL):'
    - '        parse_gh_repo_url("github.com//a/")'
    - ''
    - ''
    - 'def test_parse_gh_issue_url():'
    - '    url = "https://github.com/princeton-nlp/SWE-agent/issues/43"'
    - '    owner, repo, no = parse_gh_issue_url(url)'
    - '    assert owner == "princeton-nlp"'
    - '    assert repo == "SWE-agent"'
    - '    assert no == "43"'
    - ''
    - ''
    - 'def test_parse_gh_issue_url_fails():'
    - '    with pytest.raises(InvalidGithubURL):'
    - '        parse_gh_issue_url("https://github.com/a/b")'
    - '    with pytest.raises(InvalidGithubURL):'
    - '        parse_gh_issue_url("https://github.com/a/b////")'
    - ''
    - ''
    - 'def test_is_from_github_url():'
    - '    assert not is_github_issue_url("")'
    - '    assert is_github_issue_url("https://github.com/princeton-nlp/SWE-agent/issues/43")'
    - ''
    - ''
    - 'def test_get_associated_commit_urls():'
    - '    assoc = get_associated_commit_urls('
    - '        org="princeton-nlp",'
    - '        repo="SWE-agent",'
    - '        issue_number="41",'
    - '        token=os.environ.get("GITHUB_TOKEN", ""),'
    - '    )'
    - '    assert len(assoc) > 0'
    - ''
    - ''
    - 'def test_get_instance_gh_issue():'
    - '    instance = get_instances("https://github.com/swe-agent/test-repo/issues/1",
      **_TOKEN)[0]'
    - '    compare_with = {'
    - '        "repo": "swe-agent/test-repo",'
    - '        "instance_id": "swe-agent__test-repo-i1",'
    - '        "repo_type": "github",'
    - '    }'
    - '    for key in compare_with:'
    - '        assert instance[key] == compare_with[key]'
    - '    assert "SyntaxError" in instance["problem_statement"]'
    - '    assert len(instance["base_commit"]) > 10'
    - '    assert instance["version"]'
    - ''
    - ''
    - 'def clone_repo(tmp_path, repo_url):'
    - '    cmd = ['
    - '        "git",'
    - '        "clone",'
    - '        repo_url,'
    - '    ]'
    - '    subprocess.run(cmd, check=True, cwd=tmp_path)'
    - ''
    - ''
    - 'def test_get_instance_gh_issue_local_repo(tmp_path):'
    - '    clone_repo(tmp_path, "https://github.com/swe-agent/test-repo/")'
    - '    instance = get_instances('
    - '        file_path="https://github.com/swe-agent/test-repo/issues/1",'
    - '        repo_path=str(tmp_path / "test-repo"),'
    - '        **_TOKEN,'
    - '    )[0]'
    - '    compare_with = {'
    - '        "repo": str(tmp_path.resolve() / "test-repo"),'
    - '        "repo_type": "local",'
    - '        "instance_id": "swe-agent__test-repo-i1",'
    - '    }'
    - '    for key in compare_with:'
    - '        assert instance[key] == compare_with[key]'
    - '    assert "SyntaxError" in instance["problem_statement"]'
    - '    assert len(instance["base_commit"]) > 10'
    - '    assert instance["version"]'
    - ''
    - ''
    - 'def test_get_instance_local_issue_local_repo(tmp_path):'
    - '    clone_repo(tmp_path, "https://github.com/swe-agent/test-repo/")'
    - '    issue_path = tmp_path / "issue.txt"'
    - '    issue_path.write_text("asdf")'
    - '    instance = get_instances('
    - '        file_path=str(issue_path),'
    - '        repo_path=str(tmp_path / "test-repo"),'
    - '    )[0]'
    - '    compare_with = {'
    - '        "repo": str(tmp_path.resolve() / "test-repo"),'
    - '        "repo_type": "local",'
    - '        "instance_id": hashlib.sha256(b"asdf").hexdigest()[:6],'
    - '        "problem_statement": "asdf",'
    - '    }'
    - '    for key in compare_with:'
    - '        assert instance[key] == compare_with[key]'
    - '    assert len(instance["base_commit"]) > 10'
    - '    assert instance["version"]'
    - ''
    - ''
    - 'def test_get_instance_gh_issue_gh_repo(tmp_path):'
    - '    instance = get_instances('
    - '        file_path="https://github.com/swe-agent/test-repo/issues/1",'
    - '        repo_path="https://github.com/princeton-nlp/SWE-agent",'
    - '        **_TOKEN,'
    - '    )[0]'
    - '    compare_with = {'
    - '        "repo": "princeton-nlp/SWE-agent",'
    - '        "repo_type": "github",'
    - '        "instance_id": "swe-agent__test-repo-i1",'
    - '    }'
    - '    for key in compare_with:'
    - '        assert instance[key] == compare_with[key]'
    - '    assert "SyntaxError" in instance["problem_statement"]'
    - '    assert len(instance["base_commit"]) > 10'
    - '    assert instance["version"]'
    - ''
    - ''
    - 'def test_get_instance_text_issue_gh_repo(tmp_path):'
    - '    instance = get_instances('
    - '        file_path="text://this is a test",'
    - '        repo_path="https://github.com/princeton-nlp/SWE-agent",'
    - '        **_TOKEN,'
    - '    )[0]'
    - '    compare_with = {'
    - '        "repo": "princeton-nlp/SWE-agent",'
    - '        "repo_type": "github",'
    - '        "problem_statement": "this is a test",'
    - '    }'
    - '    for key in compare_with:'
    - '        assert instance[key] == compare_with[key]'
    - '    assert len(instance["base_commit"]) > 10'
    - '    assert instance["version"]'
    - ''
    - ''
    - 'def test_load_instances(test_data_path, caplog):'
    - '    test_data_sources = test_data_path / "data_sources"'
    - '    examples = list(test_data_sources.iterdir())'
    - '    for example in examples:'
    - '        get_instances(file_path=str(example), **_TOKEN)'
  test_models.py:
    classes: []
    functions:
    - end_line: 21
      name: openai_mock_client
      start_line: 11
      text:
      - 'def openai_mock_client():'
      - '    model = Mock()'
      - '    response = Mock()'
      - '    choice = Mock()'
      - '    choice.message.content = "test"'
      - '    response.choices = [choice]'
      - '    response.usage.prompt_tokens = 10'
      - '    response.usage.completion_tokens = 10'
      - '    model.chat.completions.create = MagicMock(return_value=response)'
      - ''
      - '    return model'
    - end_line: 29
      name: mock_together_response
      start_line: 25
      text:
      - 'def mock_together_response():'
      - '    return {'
      - '        "choices": [{"text": "<human>Hello</human>"}],'
      - '        "usage": {"prompt_tokens": 10, "completion_tokens": 10},'
      - '    }'
    - end_line: 41
      name: test_openai_model
      start_line: 35
      text:
      - 'def test_openai_model(openai_mock_client):'
      - '    for model_name in list(OpenAIModel.MODELS) + list(OpenAIModel.SHORTCUTS):'
      - '        TEST_MODEL_ARGUMENTS = ModelArguments(model_name)'
      - '        with patch("sweagent.agent.models.keys_config"), patch("sweagent.agent.models.OpenAI"):'
      - '            model = OpenAIModel(TEST_MODEL_ARGUMENTS, [])'
      - '        model.client = openai_mock_client'
      - '        model.query(TEST_HISTORY)'
    - end_line: 52
      name: test_together_model
      start_line: 45
      text:
      - 'def test_together_model(mock_together_response, model_name):'
      - '    with patch("sweagent.agent.models.keys_config"), patch("sweagent.agent.models.together")
        as mock_together:'
      - '        mock_together.version = "1.1.0"'
      - '        mock_together.Complete.create.return_value = mock_together_response'
      - ''
      - '        model_args = ModelArguments(model_name)'
      - '        model = TogetherModel(model_args, [])'
      - '        model.query(TEST_HISTORY)'
    text:
    - from __future__ import annotations
    - ''
    - from unittest.mock import MagicMock, Mock, patch
    - ''
    - import pytest
    - ''
    - from sweagent.agent.models import ModelArguments, OpenAIModel, TogetherModel
    - ''
    - ''
    - '@pytest.fixture()'
    - 'def openai_mock_client():'
    - '    model = Mock()'
    - '    response = Mock()'
    - '    choice = Mock()'
    - '    choice.message.content = "test"'
    - '    response.choices = [choice]'
    - '    response.usage.prompt_tokens = 10'
    - '    response.usage.completion_tokens = 10'
    - '    model.chat.completions.create = MagicMock(return_value=response)'
    - ''
    - '    return model'
    - ''
    - ''
    - '@pytest.fixture()'
    - 'def mock_together_response():'
    - '    return {'
    - '        "choices": [{"text": "<human>Hello</human>"}],'
    - '        "usage": {"prompt_tokens": 10, "completion_tokens": 10},'
    - '    }'
    - ''
    - ''
    - 'TEST_HISTORY = [{"role": "system", "content": "Hello, how are you?"}]'
    - ''
    - ''
    - 'def test_openai_model(openai_mock_client):'
    - '    for model_name in list(OpenAIModel.MODELS) + list(OpenAIModel.SHORTCUTS):'
    - '        TEST_MODEL_ARGUMENTS = ModelArguments(model_name)'
    - '        with patch("sweagent.agent.models.keys_config"), patch("sweagent.agent.models.OpenAI"):'
    - '            model = OpenAIModel(TEST_MODEL_ARGUMENTS, [])'
    - '        model.client = openai_mock_client'
    - '        model.query(TEST_HISTORY)'
    - ''
    - ''
    - '@pytest.mark.parametrize("model_name", list(TogetherModel.MODELS) + list(TogetherModel.SHORTCUTS))'
    - 'def test_together_model(mock_together_response, model_name):'
    - '    with patch("sweagent.agent.models.keys_config"), patch("sweagent.agent.models.together")
      as mock_together:'
    - '        mock_together.version = "1.1.0"'
    - '        mock_together.Complete.create.return_value = mock_together_response'
    - ''
    - '        model_args = ModelArguments(model_name)'
    - '        model = TogetherModel(model_args, [])'
    - '        model.query(TEST_HISTORY)'
  test_packaging.py:
    classes: []
    functions:
    - end_line: 7
      name: test_version
      start_line: 6
      text:
      - 'def test_version():'
      - '    assert __version__.count(".") == 2'
    text:
    - from __future__ import annotations
    - ''
    - from sweagent import __version__
    - ''
    - ''
    - 'def test_version():'
    - '    assert __version__.count(".") == 2'
  test_parsing.py:
    classes: []
    functions:
    - end_line: 26
      name: test_parse_function_registry
      start_line: 18
      text:
      - 'def test_parse_function_registry():'
      - '    assert isinstance(ParseFunction.get("ActionParser"), ActionParser)'
      - '    assert isinstance(ParseFunction.get("ThoughtActionParser"), ThoughtActionParser)'
      - '    assert isinstance(ParseFunction.get("XMLThoughtActionParser"), XMLThoughtActionParser)'
      - '    assert isinstance(ParseFunction.get("EditFormat"), EditFormat)'
      - '    assert isinstance(ParseFunction.get("Identity"), Identity)'
      - '    assert isinstance(ParseFunction.get("JsonParser"), JsonParser)'
      - '    with pytest.raises(ValueError):'
      - '        ParseFunction.get("InvalidParser")'
    - end_line: 36
      name: test_action_parser
      start_line: 29
      text:
      - 'def test_action_parser():'
      - '    parser = ActionParser()'
      - '    command = Command(code="ls", name="ls")'
      - '    thought, action = parser("ls -l", [command])'
      - '    assert thought == "ls -l"'
      - '    assert action == "ls -l"'
      - '    with pytest.raises(FormatError):'
      - '        parser("invalid command", [command])'
    - end_line: 46
      name: test_thought_action_parser
      start_line: 39
      text:
      - 'def test_thought_action_parser():'
      - '    parser = ThoughtActionParser()'
      - '    model_response = "Let''s look at the files in the current directory.\n```\nls
        -l\n```"'
      - '    thought, action = parser(model_response, [])'
      - '    assert thought == "Let''s look at the files in the current directory.\n"'
      - '    assert action == "ls -l\n"'
      - '    with pytest.raises(FormatError):'
      - '        parser("No code block", [])'
    - end_line: 56
      name: test_xml_thought_action_parser
      start_line: 49
      text:
      - 'def test_xml_thought_action_parser():'
      - '    parser = XMLThoughtActionParser()'
      - '    model_response = "Let''s look at the files in the current directory.\n<command>\nls
        -l\n</command>"'
      - '    thought, action = parser(model_response, [])'
      - '    assert thought == "Let''s look at the files in the current directory."'
      - '    assert action == "ls -l"'
      - '    with pytest.raises(FormatError):'
      - '        parser("No command tags", [])'
    - end_line: 66
      name: test_edit_format_parser
      start_line: 59
      text:
      - 'def test_edit_format_parser():'
      - '    parser = EditFormat()'
      - '    model_response = "Let''s replace the contents.\n```\nimport os\nos.listdir()\n```"'
      - '    thought, action = parser(model_response, [])'
      - '    assert thought == "Let''s replace the contents.\n"'
      - '    assert action == "import os\nos.listdir()\n"'
      - '    with pytest.raises(FormatError):'
      - '        parser("No code block", [])'
    - end_line: 74
      name: test_identity_parser
      start_line: 69
      text:
      - 'def test_identity_parser():'
      - '    parser = Identity()'
      - '    model_response = "Return as is"'
      - '    thought, action = parser(model_response, [])'
      - '    assert thought == model_response'
      - '    assert action == model_response'
    - end_line: 90
      name: test_json_parser
      start_line: 77
      text:
      - 'def test_json_parser():'
      - '    parser = JsonParser()'
      - '    model_response = ''{"thought": "List files", "command": {"name": "ls",
        "arguments": {"path": "."}}}'''
      - '    thought, action = parser(model_response, [])'
      - '    assert thought == "List files"'
      - '    assert action == "ls ."'
      - ''
      - '    invalid_json = "Not a JSON"'
      - '    with pytest.raises(FormatError):'
      - '        parser(invalid_json, [])'
      - ''
      - '    missing_keys = ''{"thought": "Missing command key"}'''
      - '    with pytest.raises(FormatError):'
      - '        parser(missing_keys, [])'
    text:
    - from __future__ import annotations
    - ''
    - import pytest
    - ''
    - from sweagent.agent.commands import Command
    - from sweagent.agent.parsing import (
    - '    ActionParser,'
    - '    EditFormat,'
    - '    FormatError,'
    - '    Identity,'
    - '    JsonParser,'
    - '    ParseFunction,'
    - '    ThoughtActionParser,'
    - '    XMLThoughtActionParser,'
    - )
    - ''
    - ''
    - 'def test_parse_function_registry():'
    - '    assert isinstance(ParseFunction.get("ActionParser"), ActionParser)'
    - '    assert isinstance(ParseFunction.get("ThoughtActionParser"), ThoughtActionParser)'
    - '    assert isinstance(ParseFunction.get("XMLThoughtActionParser"), XMLThoughtActionParser)'
    - '    assert isinstance(ParseFunction.get("EditFormat"), EditFormat)'
    - '    assert isinstance(ParseFunction.get("Identity"), Identity)'
    - '    assert isinstance(ParseFunction.get("JsonParser"), JsonParser)'
    - '    with pytest.raises(ValueError):'
    - '        ParseFunction.get("InvalidParser")'
    - ''
    - ''
    - 'def test_action_parser():'
    - '    parser = ActionParser()'
    - '    command = Command(code="ls", name="ls")'
    - '    thought, action = parser("ls -l", [command])'
    - '    assert thought == "ls -l"'
    - '    assert action == "ls -l"'
    - '    with pytest.raises(FormatError):'
    - '        parser("invalid command", [command])'
    - ''
    - ''
    - 'def test_thought_action_parser():'
    - '    parser = ThoughtActionParser()'
    - '    model_response = "Let''s look at the files in the current directory.\n```\nls
      -l\n```"'
    - '    thought, action = parser(model_response, [])'
    - '    assert thought == "Let''s look at the files in the current directory.\n"'
    - '    assert action == "ls -l\n"'
    - '    with pytest.raises(FormatError):'
    - '        parser("No code block", [])'
    - ''
    - ''
    - 'def test_xml_thought_action_parser():'
    - '    parser = XMLThoughtActionParser()'
    - '    model_response = "Let''s look at the files in the current directory.\n<command>\nls
      -l\n</command>"'
    - '    thought, action = parser(model_response, [])'
    - '    assert thought == "Let''s look at the files in the current directory."'
    - '    assert action == "ls -l"'
    - '    with pytest.raises(FormatError):'
    - '        parser("No command tags", [])'
    - ''
    - ''
    - 'def test_edit_format_parser():'
    - '    parser = EditFormat()'
    - '    model_response = "Let''s replace the contents.\n```\nimport os\nos.listdir()\n```"'
    - '    thought, action = parser(model_response, [])'
    - '    assert thought == "Let''s replace the contents.\n"'
    - '    assert action == "import os\nos.listdir()\n"'
    - '    with pytest.raises(FormatError):'
    - '        parser("No code block", [])'
    - ''
    - ''
    - 'def test_identity_parser():'
    - '    parser = Identity()'
    - '    model_response = "Return as is"'
    - '    thought, action = parser(model_response, [])'
    - '    assert thought == model_response'
    - '    assert action == model_response'
    - ''
    - ''
    - 'def test_json_parser():'
    - '    parser = JsonParser()'
    - '    model_response = ''{"thought": "List files", "command": {"name": "ls",
      "arguments": {"path": "."}}}'''
    - '    thought, action = parser(model_response, [])'
    - '    assert thought == "List files"'
    - '    assert action == "ls ."'
    - ''
    - '    invalid_json = "Not a JSON"'
    - '    with pytest.raises(FormatError):'
    - '        parser(invalid_json, [])'
    - ''
    - '    missing_keys = ''{"thought": "Missing command key"}'''
    - '    with pytest.raises(FormatError):'
    - '        parser(missing_keys, [])'
  test_replay.py:
    classes: []
    functions:
    - end_line: 17
      name: swe_agent_test_repo_clone
      start_line: 13
      text:
      - 'def swe_agent_test_repo_clone(tmp_path):'
      - '    local_repo_path = tmp_path / "test-repo"'
      - '    clone_cmd = ["git", "clone", "https://github.com/swe-agent/test-repo",
        local_repo_path]'
      - '    subprocess.run(clone_cmd, check=True)'
      - '    return local_repo_path'
    - end_line: 28
      name: swe_agent_test_repo_traj
      start_line: 21
      text:
      - 'def swe_agent_test_repo_traj(test_trajectories_path) -> Path:'
      - '    p = ('
      - '        test_trajectories_path'
      - '        / "gpt4__swe-agent-test-repo__default_from_url__t-0.00__p-0.95__c-3.00__install-1"'
      - '        / "6e44b9__sweagenttestrepo-1c2844.traj"'
      - '    )'
      - '    assert p.is_file()'
      - '    return p'
    - end_line: 35
      name: swe_agent_test_repo_local_problem_stmt
      start_line: 32
      text:
      - 'def swe_agent_test_repo_local_problem_stmt(swe_agent_test_repo_clone) ->
        Path:'
      - '    problem_stmt = swe_agent_test_repo_clone / "problem_statements" / "1.md"'
      - '    assert problem_stmt.is_file()'
      - '    return problem_stmt'
    - end_line: 64
      name: test_model_replay_github_repo
      start_line: 40
      text:
      - def test_model_replay_github_repo(
      - '    tmpdir,'
      - '    swe_agent_test_repo_traj,'
      - '    problem_statement_source,'
      - '    swe_agent_test_repo_local_problem_stmt,'
      - '):'
      - '    if problem_statement_source == "github":'
      - '        data_path = "https://github.com/swe-agent/test-repo/issues/1"'
      - '    elif problem_statement_source == "local":'
      - '        data_path = str(swe_agent_test_repo_local_problem_stmt)'
      - '    args = ['
      - '        "--traj_path",'
      - '        str(swe_agent_test_repo_traj.resolve()),'
      - '        "--data_path",'
      - '        data_path,'
      - '        "--config_file",'
      - '        str(CONFIG_DIR / "default_from_url.yaml"),'
      - '        "--raise_exceptions",'
      - '    ]'
      - '    if problem_statement_source == "local":'
      - '        args.extend(["--repo_path", "https://github.com/swe-agent/test-repo/"])'
      - '    args, remaining_args = get_args(args)'
      - '    with tmpdir.as_cwd():'
      - '        # Test that we can run run.py also independently from repo dir'
      - '        main(**vars(args), forward_args=remaining_args)'
    - end_line: 87
      name: test_model_replay_from_json
      start_line: 68
      text:
      - 'def test_model_replay_from_json(test_trajectories_path, test_data_sources_path):'
      - '    traj_path = ('
      - '        test_trajectories_path'
      - '        / "gpt4__swe-bench-dev-easy_first_only__default__t-0.00__p-0.95__c-3.00__install-1"'
      - '        / "pydicom__pydicom-1458.traj"'
      - '    )'
      - '    assert traj_path.is_file()'
      - '    data_path = test_data_sources_path / "swe-bench-dev-easy_first_only.json"'
      - '    assert data_path.is_file()'
      - '    args = ['
      - '        "--traj_path",'
      - '        str(traj_path),'
      - '        "--data_path",'
      - '        str(data_path),'
      - '        "--config_file",'
      - '        "config/default.yaml",'
      - '        "--raise_exceptions",'
      - '    ]'
      - '    args, remaining_args = get_args(args)'
      - '    main(**vars(args), forward_args=remaining_args)'
    - end_line: 96
      name: test_run_cli_help
      start_line: 90
      text:
      - 'def test_run_cli_help():'
      - '    args = ['
      - '        "python",'
      - '        "run_replay.py",'
      - '        "--help",'
      - '    ]'
      - '    subprocess.run(args, check=True)'
    - end_line: 127
      name: test_model_replay_local_repo
      start_line: 101
      text:
      - 'def test_model_replay_local_repo(swe_agent_test_repo_clone, swe_agent_test_repo_traj,
        problem_statement_source):'
      - '    local_repo_path = swe_agent_test_repo_clone'
      - '    if problem_statement_source == "github":'
      - '        problem_statement_path = "https://github.com/swe-agent/test-repo/issues/1"'
      - '    elif problem_statement_source == "local":'
      - '        problem_statement_path = local_repo_path / "problem_statements" /
        "1.md"'
      - '        assert problem_statement_path.is_file()'
      - '    else:'
      - '        raise ValueError(problem_statement_source)'
      - '    run_cmd = ['
      - '        "--traj_path",'
      - '        str(swe_agent_test_repo_traj),'
      - '        "--repo_path",'
      - '        str(local_repo_path),'
      - '        "--config_file",'
      - '        "config/default_from_url.yaml",'
      - '        "--data_path",'
      - '        str(problem_statement_path),'
      - '        "--apply_patch",'
      - '        "--raise_exceptions",'
      - '    ]'
      - '    print(run_cmd)'
      - '    args, remaining_args = get_args(run_cmd)'
      - '    main(**vars(args), forward_args=remaining_args)'
      - '    solution = (swe_agent_test_repo_traj.parent / "solution_missing_colon.py").read_text().strip()'
      - '    solution_retrieved = (local_repo_path / "tests" / "missing_colon.py").read_text().strip()'
      - '    assert solution == solution_retrieved'
    - end_line: 150
      name: test_exception_replay_local_dirty
      start_line: 130
      text:
      - 'def test_exception_replay_local_dirty(swe_agent_test_repo_clone, swe_agent_test_repo_traj):'
      - '    """Test that swe-agent refuses to work if the local repo is dirty"""'
      - '    problem_statement_path = swe_agent_test_repo_clone / "problem_statements"
        / "1.md"'
      - '    test_file = swe_agent_test_repo_clone / "tests" / "missing_colon.py"'
      - '    assert test_file.is_file()'
      - '    test_file.write_text(test_file.read_text().replace("division", "division_function"))'
      - '    run_cmd = ['
      - '        "--traj_path",'
      - '        str(swe_agent_test_repo_traj),'
      - '        "--repo_path",'
      - '        str(swe_agent_test_repo_clone),'
      - '        "--config_file",'
      - '        "config/default_from_url.yaml",'
      - '        "--data_path",'
      - '        str(problem_statement_path),'
      - '        "--apply_patch",'
      - '        "--raise_exceptions",'
      - '    ]'
      - '    args, remaining_args = get_args(run_cmd)'
      - '    with pytest.raises(ValueError, match=".*dirty.*"):'
      - '        main(**vars(args), forward_args=remaining_args)'
    text:
    - from __future__ import annotations
    - ''
    - import subprocess
    - from pathlib import Path
    - ''
    - import pytest
    - ''
    - from run_replay import get_args, main
    - from sweagent import CONFIG_DIR
    - ''
    - ''
    - '@pytest.fixture()'
    - 'def swe_agent_test_repo_clone(tmp_path):'
    - '    local_repo_path = tmp_path / "test-repo"'
    - '    clone_cmd = ["git", "clone", "https://github.com/swe-agent/test-repo",
      local_repo_path]'
    - '    subprocess.run(clone_cmd, check=True)'
    - '    return local_repo_path'
    - ''
    - ''
    - '@pytest.fixture()'
    - 'def swe_agent_test_repo_traj(test_trajectories_path) -> Path:'
    - '    p = ('
    - '        test_trajectories_path'
    - '        / "gpt4__swe-agent-test-repo__default_from_url__t-0.00__p-0.95__c-3.00__install-1"'
    - '        / "6e44b9__sweagenttestrepo-1c2844.traj"'
    - '    )'
    - '    assert p.is_file()'
    - '    return p'
    - ''
    - ''
    - '@pytest.fixture()'
    - 'def swe_agent_test_repo_local_problem_stmt(swe_agent_test_repo_clone) -> Path:'
    - '    problem_stmt = swe_agent_test_repo_clone / "problem_statements" / "1.md"'
    - '    assert problem_stmt.is_file()'
    - '    return problem_stmt'
    - ''
    - ''
    - '@pytest.mark.slow()'
    - '@pytest.mark.parametrize("problem_statement_source", ["github", "local"])'
    - def test_model_replay_github_repo(
    - '    tmpdir,'
    - '    swe_agent_test_repo_traj,'
    - '    problem_statement_source,'
    - '    swe_agent_test_repo_local_problem_stmt,'
    - '):'
    - '    if problem_statement_source == "github":'
    - '        data_path = "https://github.com/swe-agent/test-repo/issues/1"'
    - '    elif problem_statement_source == "local":'
    - '        data_path = str(swe_agent_test_repo_local_problem_stmt)'
    - '    args = ['
    - '        "--traj_path",'
    - '        str(swe_agent_test_repo_traj.resolve()),'
    - '        "--data_path",'
    - '        data_path,'
    - '        "--config_file",'
    - '        str(CONFIG_DIR / "default_from_url.yaml"),'
    - '        "--raise_exceptions",'
    - '    ]'
    - '    if problem_statement_source == "local":'
    - '        args.extend(["--repo_path", "https://github.com/swe-agent/test-repo/"])'
    - '    args, remaining_args = get_args(args)'
    - '    with tmpdir.as_cwd():'
    - '        # Test that we can run run.py also independently from repo dir'
    - '        main(**vars(args), forward_args=remaining_args)'
    - ''
    - ''
    - '@pytest.mark.slow()'
    - 'def test_model_replay_from_json(test_trajectories_path, test_data_sources_path):'
    - '    traj_path = ('
    - '        test_trajectories_path'
    - '        / "gpt4__swe-bench-dev-easy_first_only__default__t-0.00__p-0.95__c-3.00__install-1"'
    - '        / "pydicom__pydicom-1458.traj"'
    - '    )'
    - '    assert traj_path.is_file()'
    - '    data_path = test_data_sources_path / "swe-bench-dev-easy_first_only.json"'
    - '    assert data_path.is_file()'
    - '    args = ['
    - '        "--traj_path",'
    - '        str(traj_path),'
    - '        "--data_path",'
    - '        str(data_path),'
    - '        "--config_file",'
    - '        "config/default.yaml",'
    - '        "--raise_exceptions",'
    - '    ]'
    - '    args, remaining_args = get_args(args)'
    - '    main(**vars(args), forward_args=remaining_args)'
    - ''
    - ''
    - 'def test_run_cli_help():'
    - '    args = ['
    - '        "python",'
    - '        "run_replay.py",'
    - '        "--help",'
    - '    ]'
    - '    subprocess.run(args, check=True)'
    - ''
    - ''
    - '@pytest.mark.slow()'
    - '@pytest.mark.parametrize("problem_statement_source", ["github", "local"])'
    - 'def test_model_replay_local_repo(swe_agent_test_repo_clone, swe_agent_test_repo_traj,
      problem_statement_source):'
    - '    local_repo_path = swe_agent_test_repo_clone'
    - '    if problem_statement_source == "github":'
    - '        problem_statement_path = "https://github.com/swe-agent/test-repo/issues/1"'
    - '    elif problem_statement_source == "local":'
    - '        problem_statement_path = local_repo_path / "problem_statements" / "1.md"'
    - '        assert problem_statement_path.is_file()'
    - '    else:'
    - '        raise ValueError(problem_statement_source)'
    - '    run_cmd = ['
    - '        "--traj_path",'
    - '        str(swe_agent_test_repo_traj),'
    - '        "--repo_path",'
    - '        str(local_repo_path),'
    - '        "--config_file",'
    - '        "config/default_from_url.yaml",'
    - '        "--data_path",'
    - '        str(problem_statement_path),'
    - '        "--apply_patch",'
    - '        "--raise_exceptions",'
    - '    ]'
    - '    print(run_cmd)'
    - '    args, remaining_args = get_args(run_cmd)'
    - '    main(**vars(args), forward_args=remaining_args)'
    - '    solution = (swe_agent_test_repo_traj.parent / "solution_missing_colon.py").read_text().strip()'
    - '    solution_retrieved = (local_repo_path / "tests" / "missing_colon.py").read_text().strip()'
    - '    assert solution == solution_retrieved'
    - ''
    - ''
    - 'def test_exception_replay_local_dirty(swe_agent_test_repo_clone, swe_agent_test_repo_traj):'
    - '    """Test that swe-agent refuses to work if the local repo is dirty"""'
    - '    problem_statement_path = swe_agent_test_repo_clone / "problem_statements"
      / "1.md"'
    - '    test_file = swe_agent_test_repo_clone / "tests" / "missing_colon.py"'
    - '    assert test_file.is_file()'
    - '    test_file.write_text(test_file.read_text().replace("division", "division_function"))'
    - '    run_cmd = ['
    - '        "--traj_path",'
    - '        str(swe_agent_test_repo_traj),'
    - '        "--repo_path",'
    - '        str(swe_agent_test_repo_clone),'
    - '        "--config_file",'
    - '        "config/default_from_url.yaml",'
    - '        "--data_path",'
    - '        str(problem_statement_path),'
    - '        "--apply_patch",'
    - '        "--raise_exceptions",'
    - '    ]'
    - '    args, remaining_args = get_args(run_cmd)'
    - '    with pytest.raises(ValueError, match=".*dirty.*"):'
    - '        main(**vars(args), forward_args=remaining_args)'
  test_run.py:
    classes:
    - end_line: 100
      methods:
      - end_line: 100
        name: on_instance_start
        start_line: 98
        text:
        - '    def on_instance_start(self, *, index: int, instance: dict[str, Any]):'
        - '        msg = "test exception"'
        - '        raise ValueError(msg)'
      name: RaisesExceptionHook
      start_line: 97
      text:
      - 'class RaisesExceptionHook(MainHook):'
      - '    def on_instance_start(self, *, index: int, instance: dict[str, Any]):'
      - '        msg = "test exception"'
      - '        raise ValueError(msg)'
    - end_line: 153
      methods:
      - end_line: 146
        name: on_init
        start_line: 144
        text:
        - '    def on_init(self, *, args: ScriptArguments, agent: Agent, env: SWEEnv,
          traj_dir: Path):'
        - '        self._traj_dir = traj_dir'
        - '        (traj_dir / "args.yaml").write_text("asdf")'
      - end_line: 153
        name: on_instance_start
        start_line: 148
        text:
        - '    def on_instance_start(self, *, index: int, instance: dict[str, Any]):'
        - '        instance_id = instance["instance_id"]'
        - '        dct = {'
        - '            "info": {"exit_status": "submitted"},'
        - '        }'
        - '        (self._traj_dir / f"{instance_id}.traj").write_text(json.dumps(dct))'
      name: CreateFakeLogFile
      start_line: 141
      text:
      - 'class CreateFakeLogFile(MainHook):'
      - '    """Testing the skip functionality"""'
      - ''
      - '    def on_init(self, *, args: ScriptArguments, agent: Agent, env: SWEEnv,
        traj_dir: Path):'
      - '        self._traj_dir = traj_dir'
      - '        (traj_dir / "args.yaml").write_text("asdf")'
      - ''
      - '    def on_instance_start(self, *, index: int, instance: dict[str, Any]):'
      - '        instance_id = instance["instance_id"]'
      - '        dct = {'
      - '            "info": {"exit_status": "submitted"},'
      - '        }'
      - '        (self._traj_dir / f"{instance_id}.traj").write_text(json.dumps(dct))'
    functions:
    - end_line: 27
      name: test_run_cli_help
      start_line: 21
      text:
      - 'def test_run_cli_help():'
      - '    args = ['
      - '        "python",'
      - '        "run.py",'
      - '        "--help",'
      - '    ]'
      - '    subprocess.run(args, check=True)'
    - end_line: 37
      name: open_pr_hook_init_for_sop
      start_line: 31
      text:
      - 'def open_pr_hook_init_for_sop():'
      - '    hook = OpenPRHook()'
      - '    hook._token = os.environ.get("GITHUB_TOKEN", "")'
      - '    hook._data_path = "https://github.com/swe-agent/test-repo/issues/1"'
      - '    hook._open_pr = True'
      - '    hook._skip_if_commits_reference_issue = True'
      - '    return hook'
    - end_line: 45
      name: info_dict
      start_line: 41
      text:
      - 'def info_dict():'
      - '    return {'
      - '        "submission": "asdf",'
      - '        "exit_status": "submitted",'
      - '    }'
    - end_line: 51
      name: test_should_open_pr_fail_submission
      start_line: 48
      text:
      - 'def test_should_open_pr_fail_submission(open_pr_hook_init_for_sop, info_dict):'
      - '    hook = open_pr_hook_init_for_sop'
      - '    info_dict["submission"] = None'
      - '    assert not hook.should_open_pr(info_dict)'
    - end_line: 57
      name: test_should_open_pr_fail_exit
      start_line: 54
      text:
      - 'def test_should_open_pr_fail_exit(open_pr_hook_init_for_sop, info_dict):'
      - '    hook = open_pr_hook_init_for_sop'
      - '    info_dict["exit_status"] = "fail"'
      - '    assert not hook.should_open_pr(info_dict)'
    - end_line: 63
      name: test_should_open_pr_fail_invalid_url
      start_line: 60
      text:
      - 'def test_should_open_pr_fail_invalid_url(open_pr_hook_init_for_sop, info_dict):'
      - '    hook = open_pr_hook_init_for_sop'
      - '    hook._data_path = "asdf"'
      - '    assert not hook.should_open_pr(info_dict)'
    - end_line: 69
      name: test_should_open_pr_fail_closed
      start_line: 66
      text:
      - 'def test_should_open_pr_fail_closed(open_pr_hook_init_for_sop, info_dict):'
      - '    hook = open_pr_hook_init_for_sop'
      - '    hook._data_path = "https://github.com/swe-agent/test-repo/issues/16"'
      - '    assert not hook.should_open_pr(info_dict)'
    - end_line: 75
      name: test_should_open_pr_fail_assigned
      start_line: 72
      text:
      - 'def test_should_open_pr_fail_assigned(open_pr_hook_init_for_sop, info_dict):'
      - '    hook = open_pr_hook_init_for_sop'
      - '    hook._data_path = "https://github.com/swe-agent/test-repo/issues/17"'
      - '    assert not hook.should_open_pr(info_dict)'
    - end_line: 81
      name: test_should_open_pr_fail_locked
      start_line: 78
      text:
      - 'def test_should_open_pr_fail_locked(open_pr_hook_init_for_sop, info_dict):'
      - '    hook = open_pr_hook_init_for_sop'
      - '    hook._data_path = "https://github.com/swe-agent/test-repo/issues/18"'
      - '    assert not hook.should_open_pr(info_dict)'
    - end_line: 87
      name: test_should_open_pr_fail_has_pr
      start_line: 84
      text:
      - 'def test_should_open_pr_fail_has_pr(open_pr_hook_init_for_sop, info_dict):'
      - '    hook = open_pr_hook_init_for_sop'
      - '    hook._data_path = "https://github.com/swe-agent/test-repo/issues/19"'
      - '    assert not hook.should_open_pr(info_dict)'
    - end_line: 94
      name: test_should_open_pr_success_has_pr_override
      start_line: 90
      text:
      - 'def test_should_open_pr_success_has_pr_override(open_pr_hook_init_for_sop,
        info_dict):'
      - '    hook = open_pr_hook_init_for_sop'
      - '    hook._data_path = "https://github.com/swe-agent/test-repo/issues/19"'
      - '    hook._skip_if_commits_reference_issue = False'
      - '    assert hook.should_open_pr(info_dict)'
    - end_line: 128
      name: test_script_args
      start_line: 104
      text:
      - 'def test_script_args():'
      - '    return ScriptArguments('
      - '        suffix="",'
      - '        environment=EnvironmentArguments('
      - '            image_name="sweagent/swe-agent:latest",'
      - '            data_path="https://github.com/swe-agent/test-repo/issues/1",'
      - '            split="dev",'
      - '            verbose=True,'
      - '            install_environment=True,'
      - '        ),'
      - '        skip_existing=False,'
      - '        agent=AgentArguments('
      - '            model=ModelArguments('
      - '                model_name="instant_empty_submit",'
      - '                total_cost_limit=0.0,'
      - '                per_instance_cost_limit=3.0,'
      - '                temperature=0.0,'
      - '                top_p=0.95,'
      - '            ),'
      - '            config_file=Path("config/default.yaml"),'
      - '        ),'
      - '        actions=ActionsArguments(open_pr=False, skip_if_commits_reference_issue=True),'
      - '        raise_exceptions=True,'
      - '        print_config=False,'
      - '    )'
    - end_line: 137
      name: test_exception_raised
      start_line: 132
      text:
      - 'def test_exception_raised(test_script_args: ScriptArguments):'
      - '    assert test_script_args.raise_exceptions'
      - '    main = Main(test_script_args)'
      - '    main.add_hook(RaisesExceptionHook())'
      - '    with pytest.raises(ValueError, match="test exception"):'
      - '        main.main()'
    - end_line: 160
      name: test_existing_corrupted_args
      start_line: 157
      text:
      - 'def test_existing_corrupted_args(test_script_args: ScriptArguments):'
      - '    main = Main(test_script_args)'
      - '    main.add_hook(CreateFakeLogFile())'
      - '    main.main()'
    - end_line: 167
      name: test_main_hook
      start_line: 164
      text:
      - 'def test_main_hook(test_script_args: ScriptArguments):'
      - '    main = Main(test_script_args)'
      - '    main.add_hook(MainHook())'
      - '    main.main()'
    - end_line: 174
      name: test_agent_with_hook
      start_line: 171
      text:
      - 'def test_agent_with_hook(test_script_args: ScriptArguments):'
      - '    main = Main(test_script_args)'
      - '    main.agent.add_hook(AgentHook())'
      - '    main.main()'
    - end_line: 185
      name: _cleanup_persistent_container
      start_line: 181
      text:
      - 'def _cleanup_persistent_container():'
      - '    yield'
      - '    client = docker.from_env()'
      - '    container = client.containers.get(PERSISTENT_CONTAINER_NAME)'
      - '    container.remove(force=True)'
    - end_line: 207
      name: test_agent_persistent_container
      start_line: 190
      text:
      - 'def test_agent_persistent_container(test_script_args: ScriptArguments, capsys):'
      - '    test_script_args = dataclasses.replace('
      - '        test_script_args,'
      - '        environment=dataclasses.replace(test_script_args.environment, container_name=PERSISTENT_CONTAINER_NAME),'
      - '    )'
      - '    assert test_script_args.environment.verbose'
      - '    main = Main(test_script_args)'
      - '    assert main.env.logger.isEnabledFor(logging.DEBUG)'
      - '    main.main()'
      - '    captured = capsys.readouterr()'
      - '    print("---")'
      - '    print(captured.out)'
      - '    print("---")'
      - '    print(captured.err)'
      - '    print("---")'
      - '    text = captured.out + captured.err'
      - '    assert "Trying to clone from non-mirror..." in text'
      - '    assert "Falling back to full cloning method" in text'
    text:
    - from __future__ import annotations
    - ''
    - import dataclasses
    - import json
    - import logging
    - import os
    - import subprocess
    - from pathlib import Path
    - from typing import Any
    - ''
    - import pytest
    - ''
    - import docker
    - from run import ActionsArguments, Main, MainHook, OpenPRHook, ScriptArguments
    - from sweagent.agent.agents import Agent, AgentArguments, AgentHook
    - from sweagent.agent.models import ModelArguments
    - from sweagent.environment.swe_env import EnvironmentArguments, SWEEnv
    - ''
    - ''
    - '@pytest.mark.slow()'
    - 'def test_run_cli_help():'
    - '    args = ['
    - '        "python",'
    - '        "run.py",'
    - '        "--help",'
    - '    ]'
    - '    subprocess.run(args, check=True)'
    - ''
    - ''
    - '@pytest.fixture()'
    - 'def open_pr_hook_init_for_sop():'
    - '    hook = OpenPRHook()'
    - '    hook._token = os.environ.get("GITHUB_TOKEN", "")'
    - '    hook._data_path = "https://github.com/swe-agent/test-repo/issues/1"'
    - '    hook._open_pr = True'
    - '    hook._skip_if_commits_reference_issue = True'
    - '    return hook'
    - ''
    - ''
    - '@pytest.fixture()'
    - 'def info_dict():'
    - '    return {'
    - '        "submission": "asdf",'
    - '        "exit_status": "submitted",'
    - '    }'
    - ''
    - ''
    - 'def test_should_open_pr_fail_submission(open_pr_hook_init_for_sop, info_dict):'
    - '    hook = open_pr_hook_init_for_sop'
    - '    info_dict["submission"] = None'
    - '    assert not hook.should_open_pr(info_dict)'
    - ''
    - ''
    - 'def test_should_open_pr_fail_exit(open_pr_hook_init_for_sop, info_dict):'
    - '    hook = open_pr_hook_init_for_sop'
    - '    info_dict["exit_status"] = "fail"'
    - '    assert not hook.should_open_pr(info_dict)'
    - ''
    - ''
    - 'def test_should_open_pr_fail_invalid_url(open_pr_hook_init_for_sop, info_dict):'
    - '    hook = open_pr_hook_init_for_sop'
    - '    hook._data_path = "asdf"'
    - '    assert not hook.should_open_pr(info_dict)'
    - ''
    - ''
    - 'def test_should_open_pr_fail_closed(open_pr_hook_init_for_sop, info_dict):'
    - '    hook = open_pr_hook_init_for_sop'
    - '    hook._data_path = "https://github.com/swe-agent/test-repo/issues/16"'
    - '    assert not hook.should_open_pr(info_dict)'
    - ''
    - ''
    - 'def test_should_open_pr_fail_assigned(open_pr_hook_init_for_sop, info_dict):'
    - '    hook = open_pr_hook_init_for_sop'
    - '    hook._data_path = "https://github.com/swe-agent/test-repo/issues/17"'
    - '    assert not hook.should_open_pr(info_dict)'
    - ''
    - ''
    - 'def test_should_open_pr_fail_locked(open_pr_hook_init_for_sop, info_dict):'
    - '    hook = open_pr_hook_init_for_sop'
    - '    hook._data_path = "https://github.com/swe-agent/test-repo/issues/18"'
    - '    assert not hook.should_open_pr(info_dict)'
    - ''
    - ''
    - 'def test_should_open_pr_fail_has_pr(open_pr_hook_init_for_sop, info_dict):'
    - '    hook = open_pr_hook_init_for_sop'
    - '    hook._data_path = "https://github.com/swe-agent/test-repo/issues/19"'
    - '    assert not hook.should_open_pr(info_dict)'
    - ''
    - ''
    - 'def test_should_open_pr_success_has_pr_override(open_pr_hook_init_for_sop,
      info_dict):'
    - '    hook = open_pr_hook_init_for_sop'
    - '    hook._data_path = "https://github.com/swe-agent/test-repo/issues/19"'
    - '    hook._skip_if_commits_reference_issue = False'
    - '    assert hook.should_open_pr(info_dict)'
    - ''
    - ''
    - 'class RaisesExceptionHook(MainHook):'
    - '    def on_instance_start(self, *, index: int, instance: dict[str, Any]):'
    - '        msg = "test exception"'
    - '        raise ValueError(msg)'
    - ''
    - ''
    - '@pytest.fixture()'
    - 'def test_script_args():'
    - '    return ScriptArguments('
    - '        suffix="",'
    - '        environment=EnvironmentArguments('
    - '            image_name="sweagent/swe-agent:latest",'
    - '            data_path="https://github.com/swe-agent/test-repo/issues/1",'
    - '            split="dev",'
    - '            verbose=True,'
    - '            install_environment=True,'
    - '        ),'
    - '        skip_existing=False,'
    - '        agent=AgentArguments('
    - '            model=ModelArguments('
    - '                model_name="instant_empty_submit",'
    - '                total_cost_limit=0.0,'
    - '                per_instance_cost_limit=3.0,'
    - '                temperature=0.0,'
    - '                top_p=0.95,'
    - '            ),'
    - '            config_file=Path("config/default.yaml"),'
    - '        ),'
    - '        actions=ActionsArguments(open_pr=False, skip_if_commits_reference_issue=True),'
    - '        raise_exceptions=True,'
    - '        print_config=False,'
    - '    )'
    - ''
    - ''
    - '@pytest.mark.slow()'
    - 'def test_exception_raised(test_script_args: ScriptArguments):'
    - '    assert test_script_args.raise_exceptions'
    - '    main = Main(test_script_args)'
    - '    main.add_hook(RaisesExceptionHook())'
    - '    with pytest.raises(ValueError, match="test exception"):'
    - '        main.main()'
    - ''
    - ''
    - '@pytest.mark.slow()'
    - 'class CreateFakeLogFile(MainHook):'
    - '    """Testing the skip functionality"""'
    - ''
    - '    def on_init(self, *, args: ScriptArguments, agent: Agent, env: SWEEnv,
      traj_dir: Path):'
    - '        self._traj_dir = traj_dir'
    - '        (traj_dir / "args.yaml").write_text("asdf")'
    - ''
    - '    def on_instance_start(self, *, index: int, instance: dict[str, Any]):'
    - '        instance_id = instance["instance_id"]'
    - '        dct = {'
    - '            "info": {"exit_status": "submitted"},'
    - '        }'
    - '        (self._traj_dir / f"{instance_id}.traj").write_text(json.dumps(dct))'
    - ''
    - ''
    - '@pytest.mark.slow()'
    - 'def test_existing_corrupted_args(test_script_args: ScriptArguments):'
    - '    main = Main(test_script_args)'
    - '    main.add_hook(CreateFakeLogFile())'
    - '    main.main()'
    - ''
    - ''
    - '@pytest.mark.slow()'
    - 'def test_main_hook(test_script_args: ScriptArguments):'
    - '    main = Main(test_script_args)'
    - '    main.add_hook(MainHook())'
    - '    main.main()'
    - ''
    - ''
    - '@pytest.mark.slow()'
    - 'def test_agent_with_hook(test_script_args: ScriptArguments):'
    - '    main = Main(test_script_args)'
    - '    main.agent.add_hook(AgentHook())'
    - '    main.main()'
    - ''
    - ''
    - PERSISTENT_CONTAINER_NAME = "sweagent-test-persistent-container"
    - ''
    - ''
    - '@pytest.fixture()'
    - 'def _cleanup_persistent_container():'
    - '    yield'
    - '    client = docker.from_env()'
    - '    container = client.containers.get(PERSISTENT_CONTAINER_NAME)'
    - '    container.remove(force=True)'
    - ''
    - ''
    - '@pytest.mark.slow()'
    - '@pytest.mark.usefixtures("_cleanup_persistent_container")'
    - 'def test_agent_persistent_container(test_script_args: ScriptArguments, capsys):'
    - '    test_script_args = dataclasses.replace('
    - '        test_script_args,'
    - '        environment=dataclasses.replace(test_script_args.environment, container_name=PERSISTENT_CONTAINER_NAME),'
    - '    )'
    - '    assert test_script_args.environment.verbose'
    - '    main = Main(test_script_args)'
    - '    assert main.env.logger.isEnabledFor(logging.DEBUG)'
    - '    main.main()'
    - '    captured = capsys.readouterr()'
    - '    print("---")'
    - '    print(captured.out)'
    - '    print("---")'
    - '    print(captured.err)'
    - '    print("---")'
    - '    text = captured.out + captured.err'
    - '    assert "Trying to clone from non-mirror..." in text'
    - '    assert "Falling back to full cloning method" in text'
  test_server.py:
    classes: []
    functions:
    - end_line: 13
      name: client
      start_line: 10
      text:
      - 'def client():'
      - '    with app.test_client() as client:'
      - '        with app.app_context():'
      - '            yield client'
    - end_line: 20
      name: socket_client
      start_line: 17
      text:
      - 'def socket_client():'
      - '    client = SocketIOTestClient(app, socketio)'
      - '    yield client'
      - '    client.disconnect()'
    - end_line: 26
      name: test_index
      start_line: 23
      text:
      - 'def test_index(client):'
      - '    """Test the index page"""'
      - '    response = client.get("/")'
      - '    assert response.status_code == 200'
    - end_line: 33
      name: test_run_options
      start_line: 29
      text:
      - 'def test_run_options(client):'
      - '    """Test the /run endpoint OPTIONS method for CORS preflight"""'
      - '    response = client.open("/run", method="OPTIONS")'
      - '    assert response.status_code == 200'
      - '    assert response.headers["Access-Control-Allow-Origin"] == "*"'
    - end_line: 39
      name: test_stop
      start_line: 36
      text:
      - 'def test_stop(client):'
      - '    """Test the /stop endpoint"""'
      - '    response = client.get("/stop")'
      - '    assert response.status_code == 202'
    text:
    - from __future__ import annotations
    - ''
    - import pytest
    - from flask_socketio import SocketIOTestClient
    - ''
    - from sweagent.api.server import app, socketio
    - ''
    - ''
    - '@pytest.fixture()'
    - 'def client():'
    - '    with app.test_client() as client:'
    - '        with app.app_context():'
    - '            yield client'
    - ''
    - ''
    - '@pytest.fixture()'
    - 'def socket_client():'
    - '    client = SocketIOTestClient(app, socketio)'
    - '    yield client'
    - '    client.disconnect()'
    - ''
    - ''
    - 'def test_index(client):'
    - '    """Test the index page"""'
    - '    response = client.get("/")'
    - '    assert response.status_code == 200'
    - ''
    - ''
    - 'def test_run_options(client):'
    - '    """Test the /run endpoint OPTIONS method for CORS preflight"""'
    - '    response = client.open("/run", method="OPTIONS")'
    - '    assert response.status_code == 200'
    - '    assert response.headers["Access-Control-Allow-Origin"] == "*"'
    - ''
    - ''
    - 'def test_stop(client):'
    - '    """Test the /stop endpoint"""'
    - '    response = client.get("/stop")'
    - '    assert response.status_code == 202'
  test_utils.py:
    classes: []
    functions:
    - end_line: 15
      name: test_config_retrieval_fails
      start_line: 12
      text:
      - 'def test_config_retrieval_fails():'
      - '    config = Config()'
      - '    with pytest.raises(KeyError):'
      - '        config["DOESNTEXIST"]'
    - end_line: 20
      name: test_config_retrieval_get
      start_line: 18
      text:
      - 'def test_config_retrieval_get():'
      - '    config = Config()'
      - '    assert config.get("asdfasdf", "default") == "default"'
    - end_line: 27
      name: test_retrieve_from_file
      start_line: 23
      text:
      - 'def test_retrieve_from_file(tmp_path):'
      - '    tmp_keys_cfg = tmp_path / "keys.cfg"'
      - '    tmp_keys_cfg.write_text("MY_KEY: ''VALUE''\n")'
      - '    config = Config(keys_cfg_path=tmp_keys_cfg)'
      - '    assert config["MY_KEY"] == "VALUE"'
    - end_line: 35
      name: test_retrieve_from_env
      start_line: 30
      text:
      - 'def test_retrieve_from_env(tmp_path):'
      - '    with mock.patch.dict("os.environ", {"MY_KEY": "VALUE"}):'
      - '        tmp_keys_cfg = tmp_path / "keys.cfg"'
      - '        tmp_keys_cfg.write_text("MY_KEY: ''other VALUE''\n")'
      - '        config = Config(keys_cfg_path=tmp_keys_cfg)'
      - '        assert config["MY_KEY"] == "VALUE"'
    - end_line: 46
      name: test_retrieve_choices
      start_line: 38
      text:
      - 'def test_retrieve_choices():'
      - '    """Check that a valueerror is raised if the value is not in the choices."""'
      - '    match = "Value.*not in.*"'
      - '    config = Config()'
      - '    with pytest.raises(ValueError, match=match):'
      - '        config.get("DOESNTEXIST", default="x", choices=["a", "b", "c"])'
      - '    with pytest.raises(ValueError, match=match):'
      - '        with mock.patch.dict("os.environ", {"MY_KEY": "VALUE"}):'
      - '            config.get("DOESNTEXIST", choices=["a", "b", "c"])'
    - end_line: 55
      name: test_retrieve_choices_config_file
      start_line: 49
      text:
      - 'def test_retrieve_choices_config_file(tmp_path):'
      - '    match = "Value.*not in.*"'
      - '    tmp_keys_cfg = tmp_path / "keys.cfg"'
      - '    tmp_keys_cfg.write_text("MY_KEY: ''VALUE''\n")'
      - '    config = Config(keys_cfg_path=tmp_keys_cfg)'
      - '    with pytest.raises(ValueError, match=match):'
      - '        config.get("MY_KEY", choices=["a", "b", "c"])'
    - end_line: 60
      name: test_convert_path_to_abspath
      start_line: 58
      text:
      - 'def test_convert_path_to_abspath():'
      - '    assert convert_path_to_abspath("sadf") == REPO_ROOT / "sadf"'
      - '    assert convert_path_to_abspath("/sadf") == Path("/sadf")'
    - end_line: 64
      name: test_convert_paths_to_abspath
      start_line: 63
      text:
      - 'def test_convert_paths_to_abspath():'
      - '    assert convert_paths_to_abspath([Path("sadf"), "/sadf"]) == [REPO_ROOT
        / "sadf", Path("/sadf")]'
    text:
    - from __future__ import annotations
    - ''
    - from pathlib import Path
    - from unittest import mock
    - ''
    - import pytest
    - ''
    - from sweagent import REPO_ROOT
    - from sweagent.utils.config import Config, convert_path_to_abspath, convert_paths_to_abspath
    - ''
    - ''
    - 'def test_config_retrieval_fails():'
    - '    config = Config()'
    - '    with pytest.raises(KeyError):'
    - '        config["DOESNTEXIST"]'
    - ''
    - ''
    - 'def test_config_retrieval_get():'
    - '    config = Config()'
    - '    assert config.get("asdfasdf", "default") == "default"'
    - ''
    - ''
    - 'def test_retrieve_from_file(tmp_path):'
    - '    tmp_keys_cfg = tmp_path / "keys.cfg"'
    - '    tmp_keys_cfg.write_text("MY_KEY: ''VALUE''\n")'
    - '    config = Config(keys_cfg_path=tmp_keys_cfg)'
    - '    assert config["MY_KEY"] == "VALUE"'
    - ''
    - ''
    - 'def test_retrieve_from_env(tmp_path):'
    - '    with mock.patch.dict("os.environ", {"MY_KEY": "VALUE"}):'
    - '        tmp_keys_cfg = tmp_path / "keys.cfg"'
    - '        tmp_keys_cfg.write_text("MY_KEY: ''other VALUE''\n")'
    - '        config = Config(keys_cfg_path=tmp_keys_cfg)'
    - '        assert config["MY_KEY"] == "VALUE"'
    - ''
    - ''
    - 'def test_retrieve_choices():'
    - '    """Check that a valueerror is raised if the value is not in the choices."""'
    - '    match = "Value.*not in.*"'
    - '    config = Config()'
    - '    with pytest.raises(ValueError, match=match):'
    - '        config.get("DOESNTEXIST", default="x", choices=["a", "b", "c"])'
    - '    with pytest.raises(ValueError, match=match):'
    - '        with mock.patch.dict("os.environ", {"MY_KEY": "VALUE"}):'
    - '            config.get("DOESNTEXIST", choices=["a", "b", "c"])'
    - ''
    - ''
    - 'def test_retrieve_choices_config_file(tmp_path):'
    - '    match = "Value.*not in.*"'
    - '    tmp_keys_cfg = tmp_path / "keys.cfg"'
    - '    tmp_keys_cfg.write_text("MY_KEY: ''VALUE''\n")'
    - '    config = Config(keys_cfg_path=tmp_keys_cfg)'
    - '    with pytest.raises(ValueError, match=match):'
    - '        config.get("MY_KEY", choices=["a", "b", "c"])'
    - ''
    - ''
    - 'def test_convert_path_to_abspath():'
    - '    assert convert_path_to_abspath("sadf") == REPO_ROOT / "sadf"'
    - '    assert convert_path_to_abspath("/sadf") == Path("/sadf")'
    - ''
    - ''
    - 'def test_convert_paths_to_abspath():'
    - '    assert convert_paths_to_abspath([Path("sadf"), "/sadf"]) == [REPO_ROOT
      / "sadf", Path("/sadf")]'
trajectories:
  README.md: {}
  demonstrations:
    human_thought__swe-bench-HumanEvalFix-python__lcb__t-0.00__p-0.95__c-4.00__install-0:
      humanevalfix-python-0.traj: {}
    replay__marshmallow-code__marshmallow-1867__default__t-0.20__p-0.95__c-2.00__install-1___install_from_source:
      marshmallow-code__marshmallow-1867.traj: {}
    replay__marshmallow-code__marshmallow-1867__default_sys-env_cursors_window100__t-0.20__p-0.95__c-2.00__install-1:
      marshmallow-code__marshmallow-1867.traj: {}
    replay__marshmallow-code__marshmallow-1867__default_sys-env_window100__t-0.20__p-0.95__c-2.00__install-1:
      marshmallow-code__marshmallow-1867.traj: {}
    replay__marshmallow-code__marshmallow-1867__xml_sys-env_cursors_window100__t-0.20__p-0.95__c-2.00__install-1:
      marshmallow-code__marshmallow-1867.traj: {}
    replay__marshmallow-code__marshmallow-1867__xml_sys-env_window100__t-0.20__p-0.95__c-2.00__install-1:
      marshmallow-code__marshmallow-1867.traj: {}
  matthewtaruno:
    gpt4__mtaruno__type-like-you__default_from_url__t-0.00__p-0.95__c-3.00__install-1:
      args.yaml: {}
      run-240802180307.log: {}
      run-240802180326.log: {}
      run-240802180416.log: {}
      run-240802180417.log: {}
      run-240802180602.log: {}
      run-240802180619.log: {}
      run-240802231136.log: {}
      run-240802231149.log: {}
    gpt4__scikit-learn__scikit-learn__default_from_url__t-0.00__p-0.95__c-3.00__install-1:
      args.yaml: {}
      run-240803182250.log: {}
